<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1600" height="1414" onload="init(evt)" viewBox="0 0 1600 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="800" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1490" y="24">Search</text>
<text id="matched" x="1490" y="1397"> </text>
<g id="frames">
<g>
<title>all (3,573 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1580.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>1083021083.invokeStatic (1 samples, 0.03%)</title><rect x="10.0" y="1347.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LIIL.make (1 samples, 0.03%)</title><rect x="10.0" y="1331.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LIIL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.0" y="1315.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.0" y="1299.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.0" y="1283.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="10.0" y="1267.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="10.0" y="1251.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="10.0" y="1235.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="10.0" y="1219.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="10.0" y="1203.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.methodPrologue (1 samples, 0.03%)</title><rect x="10.0" y="1187.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ClassWriter.visitMethod (1 samples, 0.03%)</title><rect x="10.0" y="1171.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>MethodWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.0" y="1155.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>MethodWriter.visitLabel (1 samples, 0.03%)</title><rect x="10.0" y="1139.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>208866101.invokeStatic (1 samples, 0.03%)</title><rect x="10.4" y="1347.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.4" y="1358.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LIILL.make (1 samples, 0.03%)</title><rect x="10.4" y="1331.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LIILL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.4" y="1315.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.4" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.4" y="1299.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.4" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="10.4" y="1283.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.4" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="10.4" y="1267.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.4" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="10.4" y="1251.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="10.4" y="1235.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.4" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="10.4" y="1219.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.4" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="10.4" y="1203.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.4" y="1214.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="10.4" y="1187.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="1198.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="10.4" y="1171.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.4" y="1182.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="10.4" y="1155.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.4" y="1166.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="10.4" y="1139.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.4" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="10.4" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.4" y="1134.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="10.4" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.4" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="10.4" y="1091.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.4" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="10.4" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.4" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="10.4" y="1059.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.4" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="10.9" y="1347.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="1358.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="10.9" y="1331.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.9" y="1342.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="10.9" y="1315.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="1326.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="10.9" y="1299.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="1310.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="10.9" y="1283.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.9" y="1294.0"></text>
</g>
<g>
<title>ClassLoader.checkName (1 samples, 0.03%)</title><rect x="10.9" y="1267.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1278.0"></text>
</g>
<g>
<title>String.indexOf (1 samples, 0.03%)</title><rect x="10.9" y="1251.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.9" y="1262.0"></text>
</g>
<g>
<title>String.indexOf (1 samples, 0.03%)</title><rect x="10.9" y="1235.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.9" y="1246.0"></text>
</g>
<g>
<title>StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="10.9" y="1219.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.9" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="10.9" y="1203.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.9" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="10.9" y="1187.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.9" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.9" y="1155.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.9" y="1166.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="10.9" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::common(bool (SimpleThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.03%)</title><rect x="10.9" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_predicate(int, int, CompLevel, Method*) (1 samples, 0.03%)</title><rect x="10.9" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio(int) (1 samples, 0.03%)</title><rect x="10.9" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (23 samples, 0.64%)</title><rect x="11.3" y="1347.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.3" y="1358.0"></text>
</g>
<g>
<title>899543194.get$Lambda (1 samples, 0.03%)</title><rect x="11.3" y="1331.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="14.3" y="1342.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="11.3" y="1315.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.3" y="1326.0"></text>
</g>
<g>
<title>ConstantPoolCacheEntry::set_direct_call(Bytecodes::Code, methodHandle const&amp;, bool) (1 samples, 0.03%)</title><rect x="11.3" y="1299.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.3" y="1310.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LL.make (1 samples, 0.03%)</title><rect x="11.8" y="1331.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.8" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="11.8" y="1315.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="11.8" y="1299.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.8" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="11.8" y="1283.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.8" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="11.8" y="1267.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.8" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="11.8" y="1251.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.8" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="11.8" y="1235.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.8" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="11.8" y="1219.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.8" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="11.8" y="1203.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.8" y="1214.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.methodPrologue (1 samples, 0.03%)</title><rect x="11.8" y="1187.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.8" y="1198.0"></text>
</g>
<g>
<title>ClassWriter.visitMethod (1 samples, 0.03%)</title><rect x="11.8" y="1171.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="1182.0"></text>
</g>
<g>
<title>MethodWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="11.8" y="1155.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.8" y="1166.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLL.make (1 samples, 0.03%)</title><rect x="12.2" y="1331.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.2" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.2" y="1315.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.2" y="1299.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.2" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.2" y="1283.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="12.2" y="1267.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.2" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="12.2" y="1251.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.2" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="12.2" y="1235.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="12.2" y="1219.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.2" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.resolveInvokerMember (1 samples, 0.03%)</title><rect x="12.2" y="1203.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.2" y="1214.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="12.2" y="1187.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.2" y="1198.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="12.2" y="1171.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.2" y="1182.0"></text>
</g>
<g>
<title>MethodHandleNatives.resolve (1 samples, 0.03%)</title><rect x="12.2" y="1155.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.2" y="1166.0"></text>
</g>
<g>
<title>MHN_resolve_Mem (1 samples, 0.03%)</title><rect x="12.2" y="1139.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="15.2" y="1150.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="12.2" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.2" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="12.2" y="1107.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.2" y="1118.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="12.2" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.2" y="1102.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLL.make (1 samples, 0.03%)</title><rect x="12.7" y="1331.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.7" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.7" y="1315.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.7" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.7" y="1299.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.7" y="1283.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.7" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="12.7" y="1267.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.7" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="12.7" y="1251.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.7" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="12.7" y="1235.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.7" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="12.7" y="1219.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.7" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="12.7" y="1203.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.7" y="1214.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitStaticInvoke (1 samples, 0.03%)</title><rect x="12.7" y="1187.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.7" y="1198.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArguments (1 samples, 0.03%)</title><rect x="12.7" y="1171.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="1182.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArgument (1 samples, 0.03%)</title><rect x="12.7" y="1155.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.7" y="1166.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitImplicitConversion (1 samples, 0.03%)</title><rect x="12.7" y="1139.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.7" y="1150.0"></text>
</g>
<g>
<title>VerifyType.isNullConversion (1 samples, 0.03%)</title><rect x="12.7" y="1123.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.7" y="1134.0"></text>
</g>
<g>
<title>Class.isAssignableFrom (1 samples, 0.03%)</title><rect x="12.7" y="1107.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.7" y="1118.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (1 samples, 0.03%)</title><rect x="12.7" y="1091.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="15.7" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="12.7" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.7" y="1086.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="12.7" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.7" y="1070.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="12.7" y="1043.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.7" y="1054.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="12.7" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.7" y="1038.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="12.7" y="1011.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.7" y="1022.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLL.make (1 samples, 0.03%)</title><rect x="13.1" y="1331.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.1" y="1315.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.1" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.1" y="1299.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.1" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.1" y="1283.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.1" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="13.1" y="1267.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="13.1" y="1251.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="13.1" y="1235.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="13.1" y="1219.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.1" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="13.1" y="1203.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1214.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitStaticInvoke (1 samples, 0.03%)</title><rect x="13.1" y="1187.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.1" y="1198.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArguments (1 samples, 0.03%)</title><rect x="13.1" y="1171.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1182.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArgument (1 samples, 0.03%)</title><rect x="13.1" y="1155.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.1" y="1166.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitImplicitConversion (1 samples, 0.03%)</title><rect x="13.1" y="1139.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="1150.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLL.make (1 samples, 0.03%)</title><rect x="13.5" y="1331.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.5" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.5" y="1315.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.5" y="1299.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.5" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.5" y="1283.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.5" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="13.5" y="1267.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.5" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="13.5" y="1251.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.5" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="13.5" y="1235.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.5" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="13.5" y="1219.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.5" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="13.5" y="1203.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="1214.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="13.5" y="1187.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="1198.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="13.5" y="1171.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.5" y="1182.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="13.5" y="1155.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.5" y="1166.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1139.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="16.5" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1123.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.5" y="1134.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.5" y="1118.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1091.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.5" y="1102.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1075.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.5" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.5" y="1070.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="13.5" y="1043.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.5" y="1054.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="13.5" y="1027.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.5" y="1038.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="13.5" y="1011.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.5" y="1022.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLI.make (1 samples, 0.03%)</title><rect x="14.0" y="1331.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.0" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLI.&lt;init&gt; (1 samples, 0.03%)</title><rect x="14.0" y="1315.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.0" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="14.0" y="1299.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.0" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="14.0" y="1283.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="14.0" y="1267.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="14.0" y="1251.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="14.0" y="1235.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.0" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="14.0" y="1219.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.0" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="14.0" y="1203.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="1214.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="14.0" y="1187.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="1198.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="14.0" y="1171.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.0" y="1182.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="14.0" y="1155.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="17.0" y="1166.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1139.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="17.0" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1123.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.0" y="1134.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1107.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.0" y="1118.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.0" y="1102.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.0" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1059.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.0" y="1070.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.0" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::copy_method_annotations(ConstMethod*, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="14.0" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.0" y="1038.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLIIL.make (1 samples, 0.03%)</title><rect x="14.4" y="1331.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLIIL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="14.4" y="1315.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.4" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLL.make (2 samples, 0.06%)</title><rect x="14.9" y="1331.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.9" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLL.&lt;init&gt; (2 samples, 0.06%)</title><rect x="14.9" y="1315.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.9" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (2 samples, 0.06%)</title><rect x="14.9" y="1299.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.9" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (2 samples, 0.06%)</title><rect x="14.9" y="1283.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.9" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (2 samples, 0.06%)</title><rect x="14.9" y="1267.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.9" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (2 samples, 0.06%)</title><rect x="14.9" y="1251.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (2 samples, 0.06%)</title><rect x="14.9" y="1235.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.9" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="14.9" y="1219.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="14.9" y="1203.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.9" y="1214.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitStaticInvoke (1 samples, 0.03%)</title><rect x="14.9" y="1187.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.9" y="1198.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArguments (1 samples, 0.03%)</title><rect x="14.9" y="1171.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="1182.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArgument (1 samples, 0.03%)</title><rect x="14.9" y="1155.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="17.9" y="1166.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitImplicitConversion (1 samples, 0.03%)</title><rect x="14.9" y="1139.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.9" y="1150.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitReferenceCast (1 samples, 0.03%)</title><rect x="14.9" y="1123.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1134.0"></text>
</g>
<g>
<title>MethodWriter.visitTypeInsn (1 samples, 0.03%)</title><rect x="14.9" y="1107.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.9" y="1118.0"></text>
</g>
<g>
<title>Frame.execute (1 samples, 0.03%)</title><rect x="14.9" y="1091.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.9" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="14.9" y="1075.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.9" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="14.9" y="1059.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.9" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="14.9" y="1043.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.9" y="1054.0"></text>
</g>
<g>
<title>CompiledIC::set_to_monomorphic(CompiledICInfo&amp;) (1 samples, 0.03%)</title><rect x="14.9" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="17.9" y="1038.0"></text>
</g>
<g>
<title>CompiledDirectStaticCall::set_to_interpreted(methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="14.9" y="1011.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.9" y="1022.0"></text>
</g>
<g>
<title>CompiledDirectStaticCall::find_stub_for(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="14.9" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="17.9" y="1006.0"></text>
</g>
<g>
<title>opt_virtual_call_Relocation::static_stub(bool) (1 samples, 0.03%)</title><rect x="14.9" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.9" y="990.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="14.9" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.9" y="974.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="15.3" y="1219.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.3" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="15.3" y="1203.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.3" y="1214.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="15.3" y="1187.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="1198.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="15.3" y="1171.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.3" y="1182.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="15.3" y="1155.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="18.3" y="1166.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1139.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="18.3" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1123.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.3" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.3" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.3" y="1086.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1059.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.3" y="1070.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1043.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.3" y="1054.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="15.3" y="1027.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.3" y="1038.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="15.3" y="1011.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.3" y="1022.0"></text>
</g>
<g>
<title>Rewriter::maybe_rewrite_invokehandle(unsigned char*, int, int, bool) (1 samples, 0.03%)</title><rect x="15.3" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.3" y="1006.0"></text>
</g>
<g>
<title>Rewriter::add_invokedynamic_resolved_references_entries(int, int) (1 samples, 0.03%)</title><rect x="15.3" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.3" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::raw_at_put_grow(int, int const&amp;, int const&amp;) (1 samples, 0.03%)</title><rect x="15.3" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.3" y="974.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLLLL.make (1 samples, 0.03%)</title><rect x="15.7" y="1331.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLLLL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="15.7" y="1315.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.7" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="15.7" y="1299.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="15.7" y="1283.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.7" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="15.7" y="1267.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.7" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="15.7" y="1251.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.7" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="15.7" y="1235.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="15.7" y="1219.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="15.7" y="1203.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.7" y="1214.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitStaticInvoke (1 samples, 0.03%)</title><rect x="15.7" y="1187.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.7" y="1198.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArguments (1 samples, 0.03%)</title><rect x="15.7" y="1171.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.7" y="1182.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArgument (1 samples, 0.03%)</title><rect x="15.7" y="1155.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.7" y="1166.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitImplicitConversion (1 samples, 0.03%)</title><rect x="15.7" y="1139.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="1150.0"></text>
</g>
<g>
<title>VerifyType.isNullConversion (1 samples, 0.03%)</title><rect x="15.7" y="1123.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.7" y="1134.0"></text>
</g>
<g>
<title>Class.isInterface (1 samples, 0.03%)</title><rect x="15.7" y="1107.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="1118.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="15.7" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.7" y="1102.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLLLLLL.make (1 samples, 0.03%)</title><rect x="16.2" y="1331.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.2" y="1342.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_LLLLLLLLLLL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="16.2" y="1315.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.2" y="1326.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="16.2" y="1299.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.2" y="1310.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="16.2" y="1283.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.2" y="1294.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="16.2" y="1267.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.2" y="1278.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="16.2" y="1251.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.2" y="1262.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="16.2" y="1235.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.2" y="1246.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="16.2" y="1219.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.2" y="1230.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="16.2" y="1203.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.2" y="1214.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="16.2" y="1187.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.2" y="1198.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="16.2" y="1171.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.2" y="1182.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="16.2" y="1155.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="19.2" y="1166.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1139.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="19.2" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.2" y="1134.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.2" y="1118.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="19.2" y="1102.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.2" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="1070.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="16.2" y="1043.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.2" y="1054.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="16.2" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.2" y="1038.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="16.2" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="1022.0"></text>
</g>
<g>
<title>StringConcatFactory.makeConcatWithConstants (11 samples, 0.31%)</title><rect x="16.6" y="1331.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.6" y="1342.0"></text>
</g>
<g>
<title>StringConcatFactory.doStringConcat (11 samples, 0.31%)</title><rect x="16.6" y="1315.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="1326.0"></text>
</g>
<g>
<title>StringConcatFactory.generate (11 samples, 0.31%)</title><rect x="16.6" y="1299.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.6" y="1310.0"></text>
</g>
<g>
<title>StringConcatFactory$MethodHandleInlineCopyStrategy.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="16.6" y="1283.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.6" y="1294.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethod (1 samples, 0.03%)</title><rect x="16.6" y="1267.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.6" y="1278.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodImpl (1 samples, 0.03%)</title><rect x="16.6" y="1251.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.6" y="1262.0"></text>
</g>
<g>
<title>Invokers.methodHandleInvokeLinkerMethod (1 samples, 0.03%)</title><rect x="16.6" y="1235.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="1246.0"></text>
</g>
<g>
<title>Invokers.invokeHandleForm (1 samples, 0.03%)</title><rect x="16.6" y="1219.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.6" y="1230.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="16.6" y="1203.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.6" y="1214.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="16.6" y="1187.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1198.0"></text>
</g>
<g>
<title>Invokers.basicInvoker (1 samples, 0.03%)</title><rect x="16.6" y="1171.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1182.0"></text>
</g>
<g>
<title>Invokers.invokeBasicMethod (1 samples, 0.03%)</title><rect x="16.6" y="1155.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1166.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.resolveOrFail (1 samples, 0.03%)</title><rect x="16.6" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.6" y="1150.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="16.6" y="1123.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.6" y="1134.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="16.6" y="1107.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.6" y="1118.0"></text>
</g>
<g>
<title>MethodHandleNatives.resolve (1 samples, 0.03%)</title><rect x="16.6" y="1091.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.6" y="1102.0"></text>
</g>
<g>
<title>MHN_resolve_Mem (1 samples, 0.03%)</title><rect x="16.6" y="1075.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="19.6" y="1086.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="16.6" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.6" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_handle_call(CallInfo&amp;, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="16.6" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.6" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::lookup_polymorphic_method(LinkInfo const&amp;, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="16.6" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.6" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="16.6" y="1011.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.6" y="1022.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="16.6" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.6" y="1006.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.03%)</title><rect x="16.6" y="979.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.6" y="990.0"></text>
</g>
<g>
<title>JvmtiDeferredEventQueue::enqueue(JvmtiDeferredEvent const&amp;) (1 samples, 0.03%)</title><rect x="16.6" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.6" y="974.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="16.6" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.6" y="958.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="16.6" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.6" y="942.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="16.6" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.6" y="926.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="16.6" y="899.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="19.6" y="910.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="16.6" y="883.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.6" y="894.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="16.6" y="867.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.6" y="878.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="16.6" y="851.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="19.6" y="862.0"></text>
</g>
<g>
<title>StringConcatFactory$MethodHandleInlineCopyStrategy.generate (10 samples, 0.28%)</title><rect x="17.1" y="1283.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.1" y="1294.0"></text>
</g>
<g>
<title>MethodHandles.dropArguments (1 samples, 0.03%)</title><rect x="17.1" y="1267.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.1" y="1278.0"></text>
</g>
<g>
<title>MethodHandles.dropArguments0 (1 samples, 0.03%)</title><rect x="17.1" y="1251.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.1" y="1262.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_L.copyWith (1 samples, 0.03%)</title><rect x="17.1" y="1235.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.1" y="1246.0"></text>
</g>
<g>
<title>BoundMethodHandle$Species_L.&lt;init&gt; (1 samples, 0.03%)</title><rect x="17.1" y="1219.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="1230.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="17.1" y="1203.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.1" y="1214.0"></text>
</g>
<g>
<title>MethodHandle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="17.1" y="1187.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="1198.0"></text>
</g>
<g>
<title>LambdaForm.prepare (1 samples, 0.03%)</title><rect x="17.1" y="1171.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.1" y="1182.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="17.1" y="1155.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.1" y="1166.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="17.1" y="1139.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="1150.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="17.1" y="1123.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="1134.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="17.1" y="1107.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.1" y="1118.0"></text>
</g>
<g>
<title>MethodWriter.visitAnnotation (1 samples, 0.03%)</title><rect x="17.1" y="1091.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.1" y="1102.0"></text>
</g>
<g>
<title>AnnotationWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="17.1" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.1" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="17.1" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="17.1" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.1" y="1054.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="17.1" y="1027.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.1" y="1038.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="17.1" y="1011.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.1" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="17.1" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="20.1" y="1006.0"></text>
</g>
<g>
<title>MethodHandles.foldArguments (5 samples, 0.14%)</title><rect x="17.5" y="1267.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.5" y="1278.0"></text>
</g>
<g>
<title>LambdaFormEditor.foldArgumentsForm (5 samples, 0.14%)</title><rect x="17.5" y="1251.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.5" y="1262.0"></text>
</g>
<g>
<title>LambdaFormEditor.makeArgumentCombinationForm (5 samples, 0.14%)</title><rect x="17.5" y="1235.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.5" y="1246.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="17.5" y="1219.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.5" y="1230.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="17.5" y="1203.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.5" y="1214.0"></text>
</g>
<g>
<title>Invokers.basicInvoker (1 samples, 0.03%)</title><rect x="17.5" y="1187.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.5" y="1198.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="17.5" y="1171.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.5" y="1182.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="17.5" y="1155.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="1166.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="17.5" y="1139.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.5" y="1150.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="17.5" y="1123.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="1134.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="17.5" y="1107.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.5" y="1118.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="17.5" y="1091.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.5" y="1102.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="17.5" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.5" y="1086.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="17.5" y="1059.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.5" y="1070.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="17.5" y="1043.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.5" y="1054.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="17.5" y="1027.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="1038.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="17.5" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.5" y="1022.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.methodEpilogue (1 samples, 0.03%)</title><rect x="17.5" y="995.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.5" y="1006.0"></text>
</g>
<g>
<title>MethodWriter.visitMaxs (1 samples, 0.03%)</title><rect x="17.5" y="979.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.5" y="990.0"></text>
</g>
<g>
<title>MethodWriter.visitFrame (1 samples, 0.03%)</title><rect x="17.5" y="963.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.5" y="974.0"></text>
</g>
<g>
<title>MethodWriter.startFrame (1 samples, 0.03%)</title><rect x="17.5" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.5" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="17.5" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.5" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="17.5" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.5" y="926.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="17.5" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.5" y="910.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="17.5" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="20.5" y="894.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="17.5" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.5" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="17.5" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="20.5" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="17.5" y="835.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.5" y="846.0"></text>
</g>
<g>
<title>CompileTask::allocate() (1 samples, 0.03%)</title><rect x="17.5" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.5" y="830.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="17.5" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.5" y="814.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="17.5" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.5" y="798.0"></text>
</g>
<g>
<title>LambdaFormEditor.newSpeciesData (4 samples, 0.11%)</title><rect x="18.0" y="1219.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.0" y="1230.0"></text>
</g>
<g>
<title>BoundMethodHandle$SpeciesData.extendWith (4 samples, 0.11%)</title><rect x="18.0" y="1203.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.0" y="1214.0"></text>
</g>
<g>
<title>ClassSpecializer.findSpecies (4 samples, 0.11%)</title><rect x="18.0" y="1187.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.0" y="1198.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.loadSpecies (4 samples, 0.11%)</title><rect x="18.0" y="1171.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.0" y="1182.0"></text>
</g>
<g>
<title>BootLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="18.0" y="1155.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.0" y="1166.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="18.0" y="1139.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.0" y="1150.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="18.0" y="1123.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="18.0" y="1107.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.0" y="1118.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="18.0" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.0" y="1102.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="18.0" y="1075.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="21.0" y="1086.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="18.0" y="1059.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="21.0" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="18.0" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.0" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="18.0" y="1027.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="21.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="18.0" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="21.0" y="1022.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="18.0" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.0" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="18.0" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.0" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="18.0" y="963.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="21.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="18.0" y="947.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.0" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="18.0" y="931.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.0" y="942.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.linkSpeciesDataToCode (3 samples, 0.08%)</title><rect x="18.4" y="1155.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.4" y="1166.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findFactories (2 samples, 0.06%)</title><rect x="18.4" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.4" y="1150.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findFactory (2 samples, 0.06%)</title><rect x="18.4" y="1123.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.4" y="1134.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findStatic (2 samples, 0.06%)</title><rect x="18.4" y="1107.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.4" y="1118.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethod (2 samples, 0.06%)</title><rect x="18.4" y="1091.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="1102.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (2 samples, 0.06%)</title><rect x="18.4" y="1075.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.4" y="1086.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (2 samples, 0.06%)</title><rect x="18.4" y="1059.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.4" y="1070.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="18.4" y="1043.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.4" y="1054.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="18.4" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.4" y="1038.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="18.4" y="1011.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.4" y="1022.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="18.4" y="995.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.4" y="1006.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="18.4" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.4" y="990.0"></text>
</g>
<g>
<title>DirectMethodHandle.shouldBeInitialized (1 samples, 0.03%)</title><rect x="18.8" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="1022.0"></text>
</g>
<g>
<title>VerifyAccess.isSamePackage (1 samples, 0.03%)</title><rect x="18.8" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.8" y="1006.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="18.8" y="979.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="990.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="18.8" y="963.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.8" y="974.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="18.8" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="958.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="18.8" y="931.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="21.8" y="942.0"></text>
</g>
<g>
<title>java_lang_Class::name(Handle, Thread*) (1 samples, 0.03%)</title><rect x="18.8" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.8" y="926.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (1 samples, 0.03%)</title><rect x="18.8" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.8" y="910.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short*, int, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="18.8" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="21.8" y="894.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::internal_insert&lt;StringTableLookupOop, StringTableCreateEntry, StringTableCreateEntry&gt;(Thread*, StringTableLookupOop&amp;, StringTableCreateEntry&amp;, StringTableCreateEntry&amp;, bool*) (1 samples, 0.03%)</title><rect x="18.8" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.8" y="878.0"></text>
</g>
<g>
<title>StringTableCreateEntry::operator()(bool, WeakHandle&lt;(WeakHandleType)2&gt;*) (1 samples, 0.03%)</title><rect x="18.8" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.8" y="862.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findGetters (1 samples, 0.03%)</title><rect x="19.3" y="1139.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.3" y="1150.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findGetter (1 samples, 0.03%)</title><rect x="19.3" y="1123.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="1134.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findGetter (1 samples, 0.03%)</title><rect x="19.3" y="1107.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="1118.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectField (1 samples, 0.03%)</title><rect x="19.3" y="1091.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.3" y="1102.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectFieldCommon (1 samples, 0.03%)</title><rect x="19.3" y="1075.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="1086.0"></text>
</g>
<g>
<title>MethodHandles.insertArguments (4 samples, 0.11%)</title><rect x="19.7" y="1267.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.7" y="1278.0"></text>
</g>
<g>
<title>BoundMethodHandle.rebind (1 samples, 0.03%)</title><rect x="19.7" y="1251.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="19.7" y="1235.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="22.7" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="19.7" y="1219.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.7" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="19.7" y="1203.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="22.7" y="1214.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="19.7" y="1187.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="22.7" y="1198.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="19.7" y="1171.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="22.7" y="1182.0"></text>
</g>
<g>
<title>MethodHandles.insertArgumentPrimitive (3 samples, 0.08%)</title><rect x="20.2" y="1251.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.2" y="1262.0"></text>
</g>
<g>
<title>BoundMethodHandle.bindArgumentI (1 samples, 0.03%)</title><rect x="20.2" y="1235.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.2" y="1246.0"></text>
</g>
<g>
<title>LambdaFormEditor.bindArgumentI (1 samples, 0.03%)</title><rect x="20.2" y="1219.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.2" y="1230.0"></text>
</g>
<g>
<title>LambdaFormEditor.bindArgumentForm (1 samples, 0.03%)</title><rect x="20.2" y="1203.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.2" y="1214.0"></text>
</g>
<g>
<title>LambdaFormEditor.newSpeciesData (1 samples, 0.03%)</title><rect x="20.2" y="1187.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.2" y="1198.0"></text>
</g>
<g>
<title>BoundMethodHandle$SpeciesData.extendWith (1 samples, 0.03%)</title><rect x="20.2" y="1171.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.2" y="1182.0"></text>
</g>
<g>
<title>ClassSpecializer.findSpecies (1 samples, 0.03%)</title><rect x="20.2" y="1155.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.2" y="1166.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.loadSpecies (1 samples, 0.03%)</title><rect x="20.2" y="1139.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="1150.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.linkSpeciesDataToCode (1 samples, 0.03%)</title><rect x="20.2" y="1123.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.2" y="1134.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findFactories (1 samples, 0.03%)</title><rect x="20.2" y="1107.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.2" y="1118.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findFactory (1 samples, 0.03%)</title><rect x="20.2" y="1091.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.2" y="1102.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findStatic (1 samples, 0.03%)</title><rect x="20.2" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.2" y="1086.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethod (1 samples, 0.03%)</title><rect x="20.2" y="1059.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.2" y="1070.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="20.2" y="1043.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.2" y="1054.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="20.2" y="1027.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.2" y="1038.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="20.2" y="1011.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.2" y="1022.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="20.2" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.2" y="1006.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="20.2" y="979.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.2" y="990.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="20.2" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.2" y="974.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="20.2" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.2" y="958.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="20.2" y="931.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.2" y="942.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="20.2" y="915.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.2" y="926.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.toByteArray (1 samples, 0.03%)</title><rect x="20.2" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.2" y="910.0"></text>
</g>
<g>
<title>ClassWriter.toByteArray (1 samples, 0.03%)</title><rect x="20.2" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.2" y="894.0"></text>
</g>
<g>
<title>MethodWriter.put (1 samples, 0.03%)</title><rect x="20.2" y="867.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.2" y="878.0"></text>
</g>
<g>
<title>AnnotationWriter.put (1 samples, 0.03%)</title><rect x="20.2" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.2" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="20.6" y="1235.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="23.6" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="20.6" y="1219.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.6" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="20.6" y="1203.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="23.6" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="20.6" y="1187.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.6" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="20.6" y="1171.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="23.6" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="20.6" y="1155.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="23.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="20.6" y="1139.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.6" y="1150.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="20.6" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.6" y="1134.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="20.6" y="1107.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.6" y="1118.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="20.6" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.6" y="1102.0"></text>
</g>
<g>
<title>AdapterHandlerTable::lookup(int, BasicType*) (1 samples, 0.03%)</title><rect x="20.6" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="23.6" y="1086.0"></text>
</g>
<g>
<title>Wrapper.convert (1 samples, 0.03%)</title><rect x="21.1" y="1235.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.1" y="1246.0"></text>
</g>
<g>
<title>Wrapper.convert (1 samples, 0.03%)</title><rect x="21.1" y="1219.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.1" y="1230.0"></text>
</g>
<g>
<title>Class.cast (1 samples, 0.03%)</title><rect x="21.1" y="1203.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="1214.0"></text>
</g>
<g>
<title>JBossThread.run (21 samples, 0.59%)</title><rect x="21.5" y="1347.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.5" y="1358.0"></text>
</g>
<g>
<title>Thread.run (21 samples, 0.59%)</title><rect x="21.5" y="1331.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.5" y="1342.0"></text>
</g>
<g>
<title>ThreadLocalResettingRunnable.run (21 samples, 0.59%)</title><rect x="21.5" y="1315.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="1326.0"></text>
</g>
<g>
<title>DelegatingRunnable.run (21 samples, 0.59%)</title><rect x="21.5" y="1299.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.5" y="1310.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor$ThreadBody.run (21 samples, 0.59%)</title><rect x="21.5" y="1283.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.5" y="1294.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor$ThreadBody.doRunTask (21 samples, 0.59%)</title><rect x="21.5" y="1267.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.5" y="1278.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor.safeRun (21 samples, 0.59%)</title><rect x="21.5" y="1251.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.5" y="1262.0"></text>
</g>
<g>
<title>ContextClassLoaderSavingRunnable.run (21 samples, 0.59%)</title><rect x="21.5" y="1235.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="1246.0"></text>
</g>
<g>
<title>VertxRequestHandler$1.run (21 samples, 0.59%)</title><rect x="21.5" y="1219.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.5" y="1230.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="21.5" y="1203.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.5" y="1214.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="21.5" y="1187.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="1198.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="21.5" y="1171.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.5" y="1182.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="21.5" y="1155.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.5" y="1166.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="21.5" y="1139.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="24.5" y="1150.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="21.5" y="1123.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="24.5" y="1134.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1107.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="24.5" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="24.5" y="1102.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="24.5" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="24.5" y="1070.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.5" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="24.5" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.5" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="21.5" y="995.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="24.5" y="1006.0"></text>
</g>
<g>
<title>VertxRequestHandler.access$000 (20 samples, 0.56%)</title><rect x="21.9" y="1203.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.9" y="1214.0"></text>
</g>
<g>
<title>VertxRequestHandler.dispatch (20 samples, 0.56%)</title><rect x="21.9" y="1187.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.9" y="1198.0"></text>
</g>
<g>
<title>RequestDispatcher.service (12 samples, 0.34%)</title><rect x="21.9" y="1171.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.9" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="21.9" y="1155.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.9" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="21.9" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="24.9" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1123.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="24.9" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="24.9" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.9" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1075.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.9" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="24.9" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1043.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="24.9" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="21.9" y="1027.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="24.9" y="1038.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="21.9" y="1011.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.9" y="1022.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="21.9" y="995.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.9" y="1006.0"></text>
</g>
<g>
<title>SynchronousDispatcher.invoke (11 samples, 0.31%)</title><rect x="22.4" y="1155.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.4" y="1166.0"></text>
</g>
<g>
<title>SynchronousDispatcher.preprocess (10 samples, 0.28%)</title><rect x="22.4" y="1139.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.4" y="1150.0"></text>
</g>
<g>
<title>PreMatchContainerRequestContext.filter (10 samples, 0.28%)</title><rect x="22.4" y="1123.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.4" y="1134.0"></text>
</g>
<g>
<title>1532240734.get (10 samples, 0.28%)</title><rect x="22.4" y="1107.0" width="4.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="25.4" y="1118.0"></text>
</g>
<g>
<title>SynchronousDispatcher.lambda$preprocess$0 (10 samples, 0.28%)</title><rect x="22.4" y="1091.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="1102.0"></text>
</g>
<g>
<title>1242310751.run (10 samples, 0.28%)</title><rect x="22.4" y="1075.0" width="4.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="25.4" y="1086.0"></text>
</g>
<g>
<title>SynchronousDispatcher.lambda$invoke$4 (10 samples, 0.28%)</title><rect x="22.4" y="1059.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.4" y="1070.0"></text>
</g>
<g>
<title>SynchronousDispatcher.getInvoker (2 samples, 0.06%)</title><rect x="22.4" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.4" y="1054.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.getResourceInvoker (2 samples, 0.06%)</title><rect x="22.4" y="1027.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.4" y="1038.0"></text>
</g>
<g>
<title>RootClassNode.match (2 samples, 0.06%)</title><rect x="22.4" y="1011.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.4" y="1022.0"></text>
</g>
<g>
<title>RootNode.match (2 samples, 0.06%)</title><rect x="22.4" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.4" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="22.4" y="979.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.4" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="22.4" y="963.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.4" y="974.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="22.4" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.4" y="958.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="22.4" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="25.4" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.ensureOpen (1 samples, 0.03%)</title><rect x="22.4" y="915.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.4" y="926.0"></text>
</g>
<g>
<title>SegmentNode.match (1 samples, 0.03%)</title><rect x="22.8" y="979.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.8" y="990.0"></text>
</g>
<g>
<title>SegmentNode.match (1 samples, 0.03%)</title><rect x="22.8" y="963.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.8" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="22.8" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.8" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="22.8" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.8" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="22.8" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.8" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="22.8" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.8" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="22.8" y="883.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.8" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="22.8" y="867.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="25.8" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="22.8" y="851.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.8" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="22.8" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="25.8" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="22.8" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.8" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="22.8" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="25.8" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="22.8" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.8" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="22.8" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.8" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="22.8" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="25.8" y="766.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="22.8" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.8" y="750.0"></text>
</g>
<g>
<title>SynchronousDispatcher.invoke (8 samples, 0.22%)</title><rect x="23.3" y="1043.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.3" y="1054.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.invoke (3 samples, 0.08%)</title><rect x="23.3" y="1027.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.3" y="1038.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.invoke (3 samples, 0.08%)</title><rect x="23.3" y="1011.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.3" y="1022.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.invoke (3 samples, 0.08%)</title><rect x="23.3" y="995.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="1006.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.invokeOnTarget (3 samples, 0.08%)</title><rect x="23.3" y="979.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="990.0"></text>
</g>
<g>
<title>PreMatchContainerRequestContext.filter (3 samples, 0.08%)</title><rect x="23.3" y="963.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.3" y="974.0"></text>
</g>
<g>
<title>1875931849.get (2 samples, 0.06%)</title><rect x="23.3" y="947.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="26.3" y="958.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.lambda$invokeOnTarget$2 (2 samples, 0.06%)</title><rect x="23.3" y="931.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="942.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.invokeOnTargetAfterFilter (2 samples, 0.06%)</title><rect x="23.3" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.3" y="926.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.afterInvoke (1 samples, 0.03%)</title><rect x="23.3" y="899.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.3" y="910.0"></text>
</g>
<g>
<title>Response.ok (1 samples, 0.03%)</title><rect x="23.3" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.3" y="894.0"></text>
</g>
<g>
<title>Response.ok (1 samples, 0.03%)</title><rect x="23.3" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.3" y="878.0"></text>
</g>
<g>
<title>Response.status (1 samples, 0.03%)</title><rect x="23.3" y="851.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.3" y="862.0"></text>
</g>
<g>
<title>Response.status (1 samples, 0.03%)</title><rect x="23.3" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.3" y="846.0"></text>
</g>
<g>
<title>Response$ResponseBuilder.newInstance (1 samples, 0.03%)</title><rect x="23.3" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.3" y="830.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.createResponseBuilder (1 samples, 0.03%)</title><rect x="23.3" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.3" y="814.0"></text>
</g>
<g>
<title>Utils.createResponseBuilder (1 samples, 0.03%)</title><rect x="23.3" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.3" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="23.3" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="23.3" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="26.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="23.3" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="26.3" y="750.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="23.3" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="26.3" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="23.3" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.3" y="718.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="23.3" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.3" y="702.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="23.3" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.3" y="686.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.internalInvokeOnTarget (1 samples, 0.03%)</title><rect x="23.7" y="899.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.7" y="910.0"></text>
</g>
<g>
<title>MethodInjectorImpl.invoke (1 samples, 0.03%)</title><rect x="23.7" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="894.0"></text>
</g>
<g>
<title>MethodInjectorImpl.invoke (1 samples, 0.03%)</title><rect x="23.7" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.7" y="878.0"></text>
</g>
<g>
<title>Method.invoke (1 samples, 0.03%)</title><rect x="23.7" y="851.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.7" y="862.0"></text>
</g>
<g>
<title>DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="23.7" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.7" y="846.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="23.7" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="830.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke0 (1 samples, 0.03%)</title><rect x="23.7" y="803.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.7" y="814.0"></text>
</g>
<g>
<title>PublisherResource_ClientProxy.ping (1 samples, 0.03%)</title><rect x="23.7" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="798.0"></text>
</g>
<g>
<title>PublisherResource.ping (1 samples, 0.03%)</title><rect x="23.7" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.7" y="782.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="23.7" y="755.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.7" y="766.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="23.7" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.7" y="750.0"></text>
</g>
<g>
<title>Invokers.linkToTargetMethod (1 samples, 0.03%)</title><rect x="23.7" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.7" y="734.0"></text>
</g>
<g>
<title>Invokers.callSiteForm (1 samples, 0.03%)</title><rect x="23.7" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.7" y="718.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="23.7" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.7" y="702.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="23.7" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.7" y="686.0"></text>
</g>
<g>
<title>Invokers.basicInvoker (1 samples, 0.03%)</title><rect x="23.7" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="670.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="23.7" y="643.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.7" y="654.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="23.7" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.7" y="638.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="23.7" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.7" y="622.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="23.7" y="595.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.7" y="606.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="23.7" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.7" y="590.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="23.7" y="563.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.7" y="574.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="23.7" y="547.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.7" y="558.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="23.7" y="531.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.7" y="542.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="23.7" y="515.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.7" y="526.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="23.7" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.7" y="510.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="23.7" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.7" y="494.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.methodEpilogue (1 samples, 0.03%)</title><rect x="23.7" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="478.0"></text>
</g>
<g>
<title>MethodWriter.visitMaxs (1 samples, 0.03%)</title><rect x="23.7" y="451.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="462.0"></text>
</g>
<g>
<title>Type.getArgumentTypes (1 samples, 0.03%)</title><rect x="23.7" y="435.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.7" y="446.0"></text>
</g>
<g>
<title>SseEventSinkInterceptor.filter (1 samples, 0.03%)</title><rect x="24.2" y="947.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.2" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="24.2" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.2" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="24.2" y="915.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="24.2" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.2" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="24.2" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="24.2" y="867.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="27.2" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="24.2" y="851.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="27.2" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="24.2" y="835.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="27.2" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="24.2" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.2" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="24.2" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.2" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="24.2" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="27.2" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="24.2" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="27.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="24.2" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.2" y="766.0"></text>
</g>
<g>
<title>SynchronousDispatcher.writeResponse (5 samples, 0.14%)</title><rect x="24.6" y="1027.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.6" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="24.6" y="1011.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.6" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="24.6" y="995.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="27.6" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="24.6" y="979.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.6" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="24.6" y="963.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.6" y="974.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="24.6" y="947.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="27.6" y="958.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="24.6" y="931.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="27.6" y="942.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="915.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="27.6" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="27.6" y="910.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="883.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.6" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="27.6" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="27.6" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="835.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.6" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="24.6" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.6" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="24.6" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.6" y="814.0"></text>
</g>
<g>
<title>UTF8::is_legal_utf8(unsigned char const*, int, bool) (1 samples, 0.03%)</title><rect x="24.6" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.6" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="25.0" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="28.0" y="814.0"></text>
</g>
<g>
<title>ServerResponseWriter.writeNomapResponse (3 samples, 0.08%)</title><rect x="25.5" y="1011.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.5" y="1022.0"></text>
</g>
<g>
<title>ServerResponseWriter.writeNomapResponse (3 samples, 0.08%)</title><rect x="25.5" y="995.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.5" y="1006.0"></text>
</g>
<g>
<title>ServerResponseWriter.executeFilters (3 samples, 0.08%)</title><rect x="25.5" y="979.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.5" y="990.0"></text>
</g>
<g>
<title>ContainerResponseContextImpl.filter (2 samples, 0.06%)</title><rect x="25.5" y="963.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.5" y="974.0"></text>
</g>
<g>
<title>2107392241.run (2 samples, 0.06%)</title><rect x="25.5" y="947.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="28.5" y="958.0"></text>
</g>
<g>
<title>ServerResponseWriter.lambda$writeNomapResponse$3 (2 samples, 0.06%)</title><rect x="25.5" y="931.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.5" y="942.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.getMessageBodyWriter (1 samples, 0.03%)</title><rect x="25.5" y="915.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.5" y="926.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.resolveMessageBodyWriter (1 samples, 0.03%)</title><rect x="25.5" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.5" y="910.0"></text>
</g>
<g>
<title>StringTextStar.isWriteable (1 samples, 0.03%)</title><rect x="25.5" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.5" y="894.0"></text>
</g>
<g>
<title>ServerWriterInterceptorContext.getStarted (1 samples, 0.03%)</title><rect x="25.9" y="915.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.9" y="926.0"></text>
</g>
<g>
<title>ServerWriterInterceptorContext.aroundWriteTo (1 samples, 0.03%)</title><rect x="25.9" y="899.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.9" y="910.0"></text>
</g>
<g>
<title>1934816940.get (1 samples, 0.03%)</title><rect x="25.9" y="883.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="28.9" y="894.0"></text>
</g>
<g>
<title>ServerWriterInterceptorContext.lambda$getStarted$0 (1 samples, 0.03%)</title><rect x="25.9" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.9" y="878.0"></text>
</g>
<g>
<title>AbstractWriterInterceptorContext.getStarted (1 samples, 0.03%)</title><rect x="25.9" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.9" y="862.0"></text>
</g>
<g>
<title>AbstractWriterInterceptorContext.asyncProceed (1 samples, 0.03%)</title><rect x="25.9" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.9" y="846.0"></text>
</g>
<g>
<title>ServerWriterInterceptorContext.writeTo (1 samples, 0.03%)</title><rect x="25.9" y="819.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.9" y="830.0"></text>
</g>
<g>
<title>StringTextStar.asyncWriteTo (1 samples, 0.03%)</title><rect x="25.9" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.9" y="814.0"></text>
</g>
<g>
<title>StringTextStar.asyncWriteTo (1 samples, 0.03%)</title><rect x="25.9" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.9" y="798.0"></text>
</g>
<g>
<title>AsyncOutputStream.asyncWrite (1 samples, 0.03%)</title><rect x="25.9" y="771.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.9" y="782.0"></text>
</g>
<g>
<title>CommitHeaderAsyncOutputStream.asyncWrite (1 samples, 0.03%)</title><rect x="25.9" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.9" y="766.0"></text>
</g>
<g>
<title>VertxOutputStream.asyncWrite (1 samples, 0.03%)</title><rect x="25.9" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.9" y="750.0"></text>
</g>
<g>
<title>ResteasyStandaloneRecorder$1.allocateBuffer (1 samples, 0.03%)</title><rect x="25.9" y="723.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.9" y="734.0"></text>
</g>
<g>
<title>ResteasyStandaloneRecorder$1.allocateBuffer (1 samples, 0.03%)</title><rect x="25.9" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.9" y="718.0"></text>
</g>
<g>
<title>ResteasyStandaloneRecorder$1.allocateBuffer (1 samples, 0.03%)</title><rect x="25.9" y="691.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.9" y="702.0"></text>
</g>
<g>
<title>AbstractByteBufAllocator.directBuffer (1 samples, 0.03%)</title><rect x="25.9" y="675.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.9" y="686.0"></text>
</g>
<g>
<title>AbstractByteBufAllocator.directBuffer (1 samples, 0.03%)</title><rect x="25.9" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.9" y="670.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.newDirectBuffer (1 samples, 0.03%)</title><rect x="25.9" y="643.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.9" y="654.0"></text>
</g>
<g>
<title>FastThreadLocal.get (1 samples, 0.03%)</title><rect x="25.9" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="638.0"></text>
</g>
<g>
<title>FastThreadLocal.initialize (1 samples, 0.03%)</title><rect x="25.9" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.9" y="622.0"></text>
</g>
<g>
<title>PooledByteBufAllocator$PoolThreadLocalCache.initialValue (1 samples, 0.03%)</title><rect x="25.9" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.9" y="606.0"></text>
</g>
<g>
<title>PooledByteBufAllocator$PoolThreadLocalCache.initialValue (1 samples, 0.03%)</title><rect x="25.9" y="579.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.9" y="590.0"></text>
</g>
<g>
<title>PoolThreadCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="563.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.9" y="574.0"></text>
</g>
<g>
<title>PoolThreadCache.createSubPageCaches (1 samples, 0.03%)</title><rect x="25.9" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.9" y="558.0"></text>
</g>
<g>
<title>PoolThreadCache$SubPageMemoryRegionCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.9" y="542.0"></text>
</g>
<g>
<title>PoolThreadCache$MemoryRegionCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.9" y="526.0"></text>
</g>
<g>
<title>PlatformDependent.newFixedMpscQueue (1 samples, 0.03%)</title><rect x="25.9" y="499.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.9" y="510.0"></text>
</g>
<g>
<title>MpscArrayQueue.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="483.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.9" y="494.0"></text>
</g>
<g>
<title>MpscArrayQueueL3Pad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.9" y="478.0"></text>
</g>
<g>
<title>MpscArrayQueueConsumerIndexField.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.9" y="462.0"></text>
</g>
<g>
<title>MpscArrayQueueL2Pad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="25.9" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="25.9" y="419.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.9" y="430.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="25.9" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="28.9" y="414.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="25.9" y="387.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="28.9" y="398.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="25.9" y="371.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.9" y="382.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="25.9" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="28.9" y="366.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::common(bool (SimpleThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.03%)</title><rect x="25.9" y="339.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="28.9" y="350.0"></text>
</g>
<g>
<title>Method::is_setter() const (1 samples, 0.03%)</title><rect x="25.9" y="323.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="28.9" y="334.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="26.4" y="963.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.4" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="26.4" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.4" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="26.4" y="931.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.4" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="26.4" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.4" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="26.4" y="899.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="29.4" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="26.4" y="883.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="29.4" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="867.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="29.4" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.4" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.4" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="29.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="29.4" y="782.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="26.4" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="29.4" y="766.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="26.4" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="29.4" y="750.0"></text>
</g>
<g>
<title>SynchronousDispatcher.pushContextObjects (1 samples, 0.03%)</title><rect x="26.8" y="1139.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.8" y="1150.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="26.8" y="1123.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.8" y="1134.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="26.8" y="1107.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.8" y="1118.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="26.8" y="1091.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.8" y="1102.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="26.8" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.8" y="1086.0"></text>
</g>
<g>
<title>JVM_FindLoadedClass (1 samples, 0.03%)</title><rect x="26.8" y="1059.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="29.8" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="26.8" y="1043.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.8" y="1054.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::loader_data(oopDesc*) (1 samples, 0.03%)</title><rect x="26.8" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.8" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="27.2" y="1171.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.2" y="1182.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="27.2" y="1155.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.2" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="27.2" y="1139.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.2" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="27.2" y="1123.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.2" y="1134.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="27.2" y="1107.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="30.2" y="1118.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="27.2" y="1091.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="30.2" y="1102.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="1075.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="30.2" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="1059.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.2" y="1070.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.2" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="1027.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.2" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.2" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="995.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="30.2" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="27.2" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="30.2" y="990.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="27.2" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.2" y="974.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="27.2" y="947.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.2" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="27.7" y="1107.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.7" y="1118.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="27.7" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.7" y="1102.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="27.7" y="1075.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.7" y="1086.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="27.7" y="1059.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.7" y="1070.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="27.7" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="1054.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="27.7" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="1038.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="27.7" y="1011.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="30.7" y="1022.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="27.7" y="995.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="30.7" y="1006.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="27.7" y="979.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="30.7" y="990.0"></text>
</g>
<g>
<title>VertxHttpRequest.&lt;init&gt; (1 samples, 0.03%)</title><rect x="28.1" y="1171.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.1" y="1182.0"></text>
</g>
<g>
<title>VertxHttpRequest$VertxExecutionContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="28.1" y="1155.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.1" y="1166.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="28.1" y="1139.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.1" y="1150.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="28.1" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.1" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="28.1" y="1107.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.1" y="1118.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="28.1" y="1091.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.1" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="28.1" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.1" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="28.1" y="1059.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.1" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="28.1" y="1043.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.1" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="28.1" y="1027.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.1" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="28.1" y="1011.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="31.1" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="28.1" y="995.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="31.1" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="979.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="31.1" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="963.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="31.1" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="31.1" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="31.1" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="31.1" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.1" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.1" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="28.1" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="31.1" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="28.1" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="31.1" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="28.1" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.1" y="846.0"></text>
</g>
<g>
<title>VertxHttpResponse.finish (2 samples, 0.06%)</title><rect x="28.6" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.6" y="1182.0"></text>
</g>
<g>
<title>CommitHeaderAsyncOutputStream.close (2 samples, 0.06%)</title><rect x="28.6" y="1155.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.6" y="1166.0"></text>
</g>
<g>
<title>VertxOutputStream.close (2 samples, 0.06%)</title><rect x="28.6" y="1139.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="1150.0"></text>
</g>
<g>
<title>VertxHttpResponse.writeBlocking (2 samples, 0.06%)</title><rect x="28.6" y="1123.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.6" y="1134.0"></text>
</g>
<g>
<title>VertxBlockingOutput.write (2 samples, 0.06%)</title><rect x="28.6" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.6" y="1118.0"></text>
</g>
<g>
<title>HttpServerResponseImpl.end (1 samples, 0.03%)</title><rect x="28.6" y="1091.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.6" y="1102.0"></text>
</g>
<g>
<title>HttpServerResponseImpl.end (1 samples, 0.03%)</title><rect x="28.6" y="1075.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.6" y="1086.0"></text>
</g>
<g>
<title>Http1xServerConnection.writeToChannel (1 samples, 0.03%)</title><rect x="28.6" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionBase.writeToChannel (1 samples, 0.03%)</title><rect x="28.6" y="1043.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionBase.queueForWrite (1 samples, 0.03%)</title><rect x="28.6" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.6" y="1038.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="28.6" y="1011.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.6" y="1022.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="28.6" y="995.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.6" y="1006.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="28.6" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.6" y="990.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="28.6" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="974.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="28.6" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.6" y="958.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="28.6" y="931.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="31.6" y="942.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="28.6" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.6" y="926.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="28.6" y="899.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.6" y="910.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="28.6" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.6" y="894.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="28.6" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.6" y="878.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="28.6" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.6" y="862.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="28.6" y="835.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="31.6" y="846.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="819.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="31.6" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="31.6" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="31.6" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.6" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.6" y="766.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="31.6" y="750.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="31.6" y="734.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="28.6" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.6" y="718.0"></text>
</g>
<g>
<title>ClassLoaderData::metaspace_non_null() (1 samples, 0.03%)</title><rect x="28.6" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="31.6" y="702.0"></text>
</g>
<g>
<title>ClassLoaderMetaspace::initialize(Mutex*, Metaspace::MetaspaceType) (1 samples, 0.03%)</title><rect x="28.6" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="31.6" y="686.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::add_chunk(metaspace::Metachunk*, bool) (1 samples, 0.03%)</title><rect x="28.6" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="31.6" y="670.0"></text>
</g>
<g>
<title>MetaspaceUtils::inc_overhead(Metaspace::MetadataType, unsigned long) (1 samples, 0.03%)</title><rect x="28.6" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.6" y="654.0"></text>
</g>
<g>
<title>VertxBlockingOutput.createBuffer (1 samples, 0.03%)</title><rect x="29.0" y="1091.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.0" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="29.0" y="1075.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.0" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="29.0" y="1059.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.0" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="29.0" y="1043.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.0" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="29.0" y="1027.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.0" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="29.0" y="1011.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="32.0" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="29.0" y="995.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="32.0" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="979.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="32.0" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="32.0" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="32.0" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="32.0" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="32.0" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="32.0" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="29.0" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="32.0" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="29.0" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="32.0" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="29.0" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="32.0" y="862.0"></text>
</g>
<g>
<title>VertxUtil.extractHttpHeaders (1 samples, 0.03%)</title><rect x="29.5" y="1171.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.5" y="1182.0"></text>
</g>
<g>
<title>VertxUtil.extractRequestHeaders (1 samples, 0.03%)</title><rect x="29.5" y="1155.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.5" y="1166.0"></text>
</g>
<g>
<title>VertxHttpHeaders$1.next (1 samples, 0.03%)</title><rect x="29.5" y="1139.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.5" y="1150.0"></text>
</g>
<g>
<title>VertxHttpHeaders$1.next (1 samples, 0.03%)</title><rect x="29.5" y="1123.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.5" y="1134.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="29.5" y="1107.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.5" y="1118.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="29.5" y="1091.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.5" y="1102.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="29.5" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="29.5" y="1059.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.5" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="29.5" y="1043.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="32.5" y="1054.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="29.5" y="1027.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="32.5" y="1038.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="1011.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="32.5" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="995.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="32.5" y="1006.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="32.5" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="963.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="32.5" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="32.5" y="958.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="32.5" y="942.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="29.5" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="32.5" y="926.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="29.5" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="32.5" y="910.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate_work(unsigned long) (1 samples, 0.03%)</title><rect x="29.5" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="32.5" y="894.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::grow_and_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="29.5" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="32.5" y="878.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::add_chunk(metaspace::Metachunk*, bool) (1 samples, 0.03%)</title><rect x="29.5" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="32.5" y="862.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::retire_current_chunk() (1 samples, 0.03%)</title><rect x="29.5" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="32.5" y="846.0"></text>
</g>
<g>
<title>metaspace::Metachunk::free_word_size() const (1 samples, 0.03%)</title><rect x="29.5" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="32.5" y="830.0"></text>
</g>
<g>
<title>VertxUtil.extractUriInfo (2 samples, 0.06%)</title><rect x="29.9" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.9" y="1182.0"></text>
</g>
<g>
<title>HttpServerRequestWrapper.absoluteURI (1 samples, 0.03%)</title><rect x="29.9" y="1155.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.9" y="1166.0"></text>
</g>
<g>
<title>AbstractRequestWrapper.absoluteURI (1 samples, 0.03%)</title><rect x="29.9" y="1139.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.9" y="1150.0"></text>
</g>
<g>
<title>HttpServerRequestImpl.absoluteURI (1 samples, 0.03%)</title><rect x="29.9" y="1123.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.9" y="1134.0"></text>
</g>
<g>
<title>HttpUtils.absoluteURI (1 samples, 0.03%)</title><rect x="29.9" y="1107.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.9" y="1118.0"></text>
</g>
<g>
<title>HttpServerRequestImpl.scheme (1 samples, 0.03%)</title><rect x="29.9" y="1091.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.9" y="1102.0"></text>
</g>
<g>
<title>HttpServerRequestImpl.isSSL (1 samples, 0.03%)</title><rect x="29.9" y="1075.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionBase.isSsl (1 samples, 0.03%)</title><rect x="29.9" y="1059.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.9" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="29.9" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.9" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="29.9" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.9" y="1038.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="29.9" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.9" y="1022.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="29.9" y="995.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.9" y="1006.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="29.9" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.9" y="990.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="29.9" y="963.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.9" y="974.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="29.9" y="947.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="32.9" y="958.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="29.9" y="931.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="32.9" y="942.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="29.9" y="915.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="32.9" y="926.0"></text>
</g>
<g>
<title>ResteasyUriInfo.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.3" y="1155.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.3" y="1166.0"></text>
</g>
<g>
<title>ResteasyUriInfo.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.3" y="1139.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.3" y="1150.0"></text>
</g>
<g>
<title>ResteasyUriInfo.initialize (1 samples, 0.03%)</title><rect x="30.3" y="1123.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.3" y="1134.0"></text>
</g>
<g>
<title>ResteasyUriInfo$InitData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.3" y="1107.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.3" y="1118.0"></text>
</g>
<g>
<title>ResteasyUriInfo.access$100 (1 samples, 0.03%)</title><rect x="30.3" y="1091.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.3" y="1102.0"></text>
</g>
<g>
<title>ResteasyUriInfo.doProcessPath (1 samples, 0.03%)</title><rect x="30.3" y="1075.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.3" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="30.3" y="1059.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.3" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="30.3" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.3" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="30.3" y="1027.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.preDefineClass (1 samples, 0.03%)</title><rect x="30.3" y="1011.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="1022.0"></text>
</g>
<g>
<title>String.startsWith (1 samples, 0.03%)</title><rect x="30.3" y="995.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.3" y="1006.0"></text>
</g>
<g>
<title>LauncherHelper.checkAndLoadMain (22 samples, 0.62%)</title><rect x="30.8" y="1347.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.8" y="1358.0"></text>
</g>
<g>
<title>LauncherHelper.loadMainClass (21 samples, 0.59%)</title><rect x="30.8" y="1331.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.8" y="1342.0"></text>
</g>
<g>
<title>Class.forName (7 samples, 0.20%)</title><rect x="30.8" y="1315.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.8" y="1326.0"></text>
</g>
<g>
<title>Class.forName0 (7 samples, 0.20%)</title><rect x="30.8" y="1299.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.8" y="1310.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (7 samples, 0.20%)</title><rect x="30.8" y="1283.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.8" y="1294.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (7 samples, 0.20%)</title><rect x="30.8" y="1267.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.8" y="1278.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (7 samples, 0.20%)</title><rect x="30.8" y="1251.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.8" y="1262.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (7 samples, 0.20%)</title><rect x="30.8" y="1235.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.8" y="1246.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (7 samples, 0.20%)</title><rect x="30.8" y="1219.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.8" y="1230.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="30.8" y="1203.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.8" y="1214.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.defineOrCheckPackage (1 samples, 0.03%)</title><rect x="30.8" y="1187.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.8" y="1198.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineOrCheckPackage (1 samples, 0.03%)</title><rect x="30.8" y="1171.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.8" y="1182.0"></text>
</g>
<g>
<title>BuiltinClassLoader.definePackage (1 samples, 0.03%)</title><rect x="30.8" y="1155.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.8" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.definePackage (1 samples, 0.03%)</title><rect x="30.8" y="1139.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.8" y="1150.0"></text>
</g>
<g>
<title>Package.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.8" y="1123.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.8" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="30.8" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="33.8" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="30.8" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="33.8" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="30.8" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="33.8" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="30.8" y="1059.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="33.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="30.8" y="1043.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="33.8" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="30.8" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="33.8" y="1038.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="30.8" y="1011.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="33.8" y="1022.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="30.8" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="33.8" y="1006.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="30.8" y="979.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="33.8" y="990.0"></text>
</g>
<g>
<title>URLClassPath.getResource (6 samples, 0.17%)</title><rect x="31.2" y="1203.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.2" y="1214.0"></text>
</g>
<g>
<title>URLClassPath.getLoader (6 samples, 0.17%)</title><rect x="31.2" y="1187.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.2" y="1198.0"></text>
</g>
<g>
<title>URLClassPath.getLoader (6 samples, 0.17%)</title><rect x="31.2" y="1171.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.2" y="1182.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (6 samples, 0.17%)</title><rect x="31.2" y="1155.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.2" y="1166.0"></text>
</g>
<g>
<title>URLClassPath$3.run (6 samples, 0.17%)</title><rect x="31.2" y="1139.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.2" y="1150.0"></text>
</g>
<g>
<title>URLClassPath$3.run (6 samples, 0.17%)</title><rect x="31.2" y="1123.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.2" y="1134.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (6 samples, 0.17%)</title><rect x="31.2" y="1107.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.2" y="1118.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="31.2" y="1091.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.2" y="1102.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="31.2" y="1075.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.2" y="1086.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="31.2" y="1059.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.2" y="1070.0"></text>
</g>
<g>
<title>String.length (1 samples, 0.03%)</title><rect x="31.2" y="1043.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.2" y="1054.0"></text>
</g>
<g>
<title>String.coder (1 samples, 0.03%)</title><rect x="31.2" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.2" y="1038.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (2 samples, 0.06%)</title><rect x="31.7" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.7" y="1102.0"></text>
</g>
<g>
<title>Handler.checkNestedProtocol (1 samples, 0.03%)</title><rect x="31.7" y="1075.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.7" y="1086.0"></text>
</g>
<g>
<title>URL.getURLStreamHandler (1 samples, 0.03%)</title><rect x="32.1" y="1075.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.1" y="1086.0"></text>
</g>
<g>
<title>Hashtable.get (1 samples, 0.03%)</title><rect x="32.1" y="1059.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.1" y="1070.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.ensureOpen (3 samples, 0.08%)</title><rect x="32.6" y="1091.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.6" y="1102.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (3 samples, 0.08%)</title><rect x="32.6" y="1075.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.6" y="1086.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (3 samples, 0.08%)</title><rect x="32.6" y="1059.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.6" y="1070.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (3 samples, 0.08%)</title><rect x="32.6" y="1043.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.6" y="1054.0"></text>
</g>
<g>
<title>JarIndex.getJarIndex (3 samples, 0.08%)</title><rect x="32.6" y="1027.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.6" y="1038.0"></text>
</g>
<g>
<title>JarIndex.&lt;init&gt; (3 samples, 0.08%)</title><rect x="32.6" y="1011.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="35.6" y="1022.0"></text>
</g>
<g>
<title>JarIndex.read (3 samples, 0.08%)</title><rect x="32.6" y="995.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.6" y="1006.0"></text>
</g>
<g>
<title>BufferedReader.readLine (2 samples, 0.06%)</title><rect x="32.6" y="979.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.6" y="990.0"></text>
</g>
<g>
<title>BufferedReader.readLine (2 samples, 0.06%)</title><rect x="32.6" y="963.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.6" y="974.0"></text>
</g>
<g>
<title>BufferedReader.fill (1 samples, 0.03%)</title><rect x="32.6" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.6" y="958.0"></text>
</g>
<g>
<title>InputStreamReader.read (1 samples, 0.03%)</title><rect x="32.6" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.6" y="942.0"></text>
</g>
<g>
<title>StreamDecoder.read (1 samples, 0.03%)</title><rect x="32.6" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.6" y="926.0"></text>
</g>
<g>
<title>StreamDecoder.implRead (1 samples, 0.03%)</title><rect x="32.6" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.6" y="910.0"></text>
</g>
<g>
<title>StreamDecoder.readBytes (1 samples, 0.03%)</title><rect x="32.6" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.6" y="894.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="32.6" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.6" y="878.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="32.6" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.6" y="862.0"></text>
</g>
<g>
<title>ZipUtils.getBufferOffset (1 samples, 0.03%)</title><rect x="32.6" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.6" y="846.0"></text>
</g>
<g>
<title>Unsafe.getInt (1 samples, 0.03%)</title><rect x="32.6" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.6" y="830.0"></text>
</g>
<g>
<title>Unsafe_GetInt(JNIEnv_*, _jobject*, _jobject*, long) (1 samples, 0.03%)</title><rect x="32.6" y="803.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="35.6" y="814.0"></text>
</g>
<g>
<title>MemoryAccess&lt;int&gt;::get() (1 samples, 0.03%)</title><rect x="32.6" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="35.6" y="798.0"></text>
</g>
<g>
<title>void Access&lt;524288ull&gt;::verify_primitive_decorators&lt;3008ull&gt;() (1 samples, 0.03%)</title><rect x="32.6" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="35.6" y="782.0"></text>
</g>
<g>
<title>String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="33.0" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="36.0" y="958.0"></text>
</g>
<g>
<title>String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="33.0" y="931.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.0" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="33.0" y="915.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="36.0" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="33.0" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="36.0" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="36.0" y="894.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="867.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.0" y="878.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="851.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="36.0" y="862.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="36.0" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="819.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="36.0" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="36.0" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="36.0" y="798.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="36.0" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="36.0" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="36.0" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="36.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="36.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="36.0" y="702.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="36.0" y="686.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="36.0" y="670.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="33.0" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="36.0" y="654.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="33.0" y="627.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="36.0" y="638.0"></text>
</g>
<g>
<title>JarIndex.addMapping (1 samples, 0.03%)</title><rect x="33.4" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.4" y="990.0"></text>
</g>
<g>
<title>JarIndex.addToList (1 samples, 0.03%)</title><rect x="33.4" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.4" y="974.0"></text>
</g>
<g>
<title>HashMap.put (1 samples, 0.03%)</title><rect x="33.4" y="947.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.4" y="958.0"></text>
</g>
<g>
<title>HashMap.putVal (1 samples, 0.03%)</title><rect x="33.4" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.4" y="942.0"></text>
</g>
<g>
<title>HashMap.resize (1 samples, 0.03%)</title><rect x="33.4" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.4" y="926.0"></text>
</g>
<g>
<title>LauncherHelper.getMainClassFromJar (14 samples, 0.39%)</title><rect x="33.9" y="1315.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.9" y="1326.0"></text>
</g>
<g>
<title>JarFile.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="33.9" y="1299.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.9" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="33.9" y="1283.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="36.9" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="33.9" y="1267.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="36.9" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1251.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="36.9" y="1262.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1235.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="36.9" y="1246.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1219.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="36.9" y="1230.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1203.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="36.9" y="1214.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1187.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="36.9" y="1198.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="36.9" y="1182.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1155.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="36.9" y="1166.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1139.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="36.9" y="1150.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1123.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="36.9" y="1134.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="36.9" y="1118.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.9" y="1102.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1075.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="36.9" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="33.9" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.9" y="1070.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="33.9" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="36.9" y="1054.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="33.9" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="36.9" y="1038.0"></text>
</g>
<g>
<title>JarFile.&lt;init&gt; (10 samples, 0.28%)</title><rect x="34.3" y="1299.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.3" y="1310.0"></text>
</g>
<g>
<title>JarFile.&lt;init&gt; (10 samples, 0.28%)</title><rect x="34.3" y="1283.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.3" y="1294.0"></text>
</g>
<g>
<title>JarFile.&lt;init&gt; (10 samples, 0.28%)</title><rect x="34.3" y="1267.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.3" y="1278.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (10 samples, 0.28%)</title><rect x="34.3" y="1251.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.3" y="1262.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (10 samples, 0.28%)</title><rect x="34.3" y="1235.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.3" y="1246.0"></text>
</g>
<g>
<title>PerfCounter.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="34.3" y="1219.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.3" y="1230.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="34.3" y="1203.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.3" y="1214.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.get (9 samples, 0.25%)</title><rect x="34.8" y="1219.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.8" y="1230.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.&lt;init&gt; (9 samples, 0.25%)</title><rect x="34.8" y="1203.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.8" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="34.8" y="1187.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="37.8" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="34.8" y="1171.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="37.8" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1155.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="37.8" y="1166.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="37.8" y="1150.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="37.8" y="1134.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="37.8" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.8" y="1102.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="37.8" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1059.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="37.8" y="1070.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1043.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="37.8" y="1054.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="37.8" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="1011.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="37.8" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="995.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="37.8" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="979.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="37.8" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="963.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="37.8" y="974.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="37.8" y="958.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="34.8" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="37.8" y="942.0"></text>
</g>
<g>
<title>ConstMethod::size(int, InlineTableSizes*) (1 samples, 0.03%)</title><rect x="34.8" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="37.8" y="926.0"></text>
</g>
<g>
<title>ZipFile$Source.get (8 samples, 0.22%)</title><rect x="35.2" y="1187.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.2" y="1198.0"></text>
</g>
<g>
<title>File.toPath (3 samples, 0.08%)</title><rect x="35.2" y="1171.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.2" y="1182.0"></text>
</g>
<g>
<title>FileSystems.getDefault (3 samples, 0.08%)</title><rect x="35.2" y="1155.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.2" y="1166.0"></text>
</g>
<g>
<title>FileSystems$DefaultFileSystemHolder.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="35.2" y="1139.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.2" y="1150.0"></text>
</g>
<g>
<title>FileSystems$DefaultFileSystemHolder.defaultFileSystem (3 samples, 0.08%)</title><rect x="35.2" y="1123.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.2" y="1134.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (3 samples, 0.08%)</title><rect x="35.2" y="1107.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.2" y="1118.0"></text>
</g>
<g>
<title>FileSystems$DefaultFileSystemHolder$1.run (3 samples, 0.08%)</title><rect x="35.2" y="1091.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="38.2" y="1102.0"></text>
</g>
<g>
<title>FileSystems$DefaultFileSystemHolder$1.run (3 samples, 0.08%)</title><rect x="35.2" y="1075.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.2" y="1086.0"></text>
</g>
<g>
<title>FileSystems$DefaultFileSystemHolder.getDefaultProvider (3 samples, 0.08%)</title><rect x="35.2" y="1059.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.2" y="1070.0"></text>
</g>
<g>
<title>DefaultFileSystemProvider.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="35.2" y="1043.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.2" y="1054.0"></text>
</g>
<g>
<title>MacOSXFileSystemProvider.&lt;init&gt; (3 samples, 0.08%)</title><rect x="35.2" y="1027.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.2" y="1038.0"></text>
</g>
<g>
<title>BsdFileSystemProvider.&lt;init&gt; (3 samples, 0.08%)</title><rect x="35.2" y="1011.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.2" y="1022.0"></text>
</g>
<g>
<title>UnixFileSystemProvider.&lt;init&gt; (3 samples, 0.08%)</title><rect x="35.2" y="995.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.2" y="1006.0"></text>
</g>
<g>
<title>MacOSXFileSystemProvider.newFileSystem (3 samples, 0.08%)</title><rect x="35.2" y="979.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.2" y="990.0"></text>
</g>
<g>
<title>MacOSXFileSystemProvider.newFileSystem (3 samples, 0.08%)</title><rect x="35.2" y="963.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.2" y="974.0"></text>
</g>
<g>
<title>MacOSXFileSystem.&lt;init&gt; (3 samples, 0.08%)</title><rect x="35.2" y="947.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.2" y="958.0"></text>
</g>
<g>
<title>BsdFileSystem.&lt;init&gt; (3 samples, 0.08%)</title><rect x="35.2" y="931.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.2" y="942.0"></text>
</g>
<g>
<title>UnixFileSystem.&lt;init&gt; (3 samples, 0.08%)</title><rect x="35.2" y="915.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="38.2" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="35.2" y="899.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="38.2" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="35.2" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="38.2" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="38.2" y="878.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.2" y="862.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="835.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="38.2" y="846.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="38.2" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="38.2" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="38.2" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="38.2" y="782.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="755.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="38.2" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="38.2" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="38.2" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="38.2" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="38.2" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="38.2" y="686.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="38.2" y="670.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="35.2" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.2" y="654.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="35.2" y="627.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="38.2" y="638.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="35.6" y="899.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.6" y="910.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="35.6" y="883.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="38.6" y="894.0"></text>
</g>
<g>
<title>UnixNativeDispatcher$1.run (1 samples, 0.03%)</title><rect x="35.6" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.6" y="878.0"></text>
</g>
<g>
<title>UnixNativeDispatcher$1.run (1 samples, 0.03%)</title><rect x="35.6" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.6" y="862.0"></text>
</g>
<g>
<title>System.loadLibrary (1 samples, 0.03%)</title><rect x="35.6" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="38.6" y="846.0"></text>
</g>
<g>
<title>Runtime.loadLibrary0 (1 samples, 0.03%)</title><rect x="35.6" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="38.6" y="830.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary (1 samples, 0.03%)</title><rect x="35.6" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.6" y="814.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary0 (1 samples, 0.03%)</title><rect x="35.6" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.6" y="798.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.loadLibrary (1 samples, 0.03%)</title><rect x="35.6" y="771.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.6" y="782.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load (1 samples, 0.03%)</title><rect x="35.6" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.6" y="766.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load0 (1 samples, 0.03%)</title><rect x="35.6" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.6" y="750.0"></text>
</g>
<g>
<title>Profiler::NativeLibraryLoadTrap(JNIEnv_*, _jobject*, _jstring*, unsigned char) (1 samples, 0.03%)</title><rect x="35.6" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="38.6" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_load0 (1 samples, 0.03%)</title><rect x="35.6" y="707.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="38.6" y="718.0"></text>
</g>
<g>
<title>JVM_LoadLibrary (1 samples, 0.03%)</title><rect x="35.6" y="691.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="38.6" y="702.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.03%)</title><rect x="35.6" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="38.6" y="686.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="35.6" y="659.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="38.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="643.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="38.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="627.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="38.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="611.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="38.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="595.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="38.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="579.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="38.6" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="563.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="38.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="547.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="38.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="531.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="38.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="515.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="38.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="499.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="38.6" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="483.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="38.6" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="467.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="38.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="451.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="38.6" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="435.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="38.6" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="35.6" y="419.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="38.6" y="430.0"></text>
</g>
<g>
<title>auth_errlist (1 samples, 0.03%)</title><rect x="35.6" y="403.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="38.6" y="414.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.init (1 samples, 0.03%)</title><rect x="36.1" y="883.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.1" y="894.0"></text>
</g>
<g>
<title>Java_sun_nio_fs_UnixNativeDispatcher_init (1 samples, 0.03%)</title><rect x="36.1" y="867.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="39.1" y="878.0"></text>
</g>
<g>
<title>jni_FindClass (1 samples, 0.03%)</title><rect x="36.1" y="851.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="39.1" y="862.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="835.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="39.1" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="819.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="39.1" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="39.1" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="39.1" y="798.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="39.1" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="39.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="39.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="39.1" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="39.1" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="36.1" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="39.1" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="36.1" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.1" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="36.1" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="39.1" y="670.0"></text>
</g>
<g>
<title>HashMap.get (1 samples, 0.03%)</title><rect x="36.5" y="1171.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.5" y="1182.0"></text>
</g>
<g>
<title>HashMap.hash (1 samples, 0.03%)</title><rect x="36.5" y="1155.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.5" y="1166.0"></text>
</g>
<g>
<title>ZipFile$Source$Key.hashCode (1 samples, 0.03%)</title><rect x="36.5" y="1139.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.5" y="1150.0"></text>
</g>
<g>
<title>UnixFileAttributes$UnixAsBasicFileAttributes.lastModifiedTime (1 samples, 0.03%)</title><rect x="36.5" y="1123.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.5" y="1134.0"></text>
</g>
<g>
<title>UnixFileAttributes.lastModifiedTime (1 samples, 0.03%)</title><rect x="36.5" y="1107.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.5" y="1118.0"></text>
</g>
<g>
<title>UnixFileAttributes.toFileTime (1 samples, 0.03%)</title><rect x="36.5" y="1091.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.5" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="36.5" y="1075.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="39.5" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="36.5" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="39.5" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="36.5" y="1043.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="39.5" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="36.5" y="1027.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="39.5" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="36.5" y="1011.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="39.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="36.5" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="39.5" y="1006.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="36.5" y="979.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="39.5" y="990.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="36.5" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="39.5" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="37.0" y="1171.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="40.0" y="1182.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="1155.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="40.0" y="1166.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="40.0" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="40.0" y="1134.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="1107.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="40.0" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.0" y="1102.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="40.0" y="1086.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.03%)</title><rect x="37.0" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="40.0" y="1070.0"></text>
</g>
<g>
<title>ZipFile$Source.&lt;init&gt; (3 samples, 0.08%)</title><rect x="37.4" y="1171.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.4" y="1182.0"></text>
</g>
<g>
<title>RandomAccessFile.&lt;init&gt; (3 samples, 0.08%)</title><rect x="37.4" y="1155.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.4" y="1166.0"></text>
</g>
<g>
<title>RandomAccessFile.&lt;init&gt; (3 samples, 0.08%)</title><rect x="37.4" y="1139.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.4" y="1150.0"></text>
</g>
<g>
<title>AtomicBoolean.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="37.4" y="1123.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.4" y="1134.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findVarHandle (2 samples, 0.06%)</title><rect x="37.4" y="1107.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.4" y="1118.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getFieldVarHandle (2 samples, 0.06%)</title><rect x="37.4" y="1091.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.4" y="1102.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getFieldVarHandleCommon (2 samples, 0.06%)</title><rect x="37.4" y="1075.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.4" y="1086.0"></text>
</g>
<g>
<title>VarHandles.makeFieldHandle (2 samples, 0.06%)</title><rect x="37.4" y="1059.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.4" y="1070.0"></text>
</g>
<g>
<title>VarHandle.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="37.4" y="1043.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.4" y="1054.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized (1 samples, 0.03%)</title><rect x="37.4" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.4" y="1038.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized0 (1 samples, 0.03%)</title><rect x="37.4" y="1011.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.4" y="1022.0"></text>
</g>
<g>
<title>Unsafe_EnsureClassInitialized0(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="37.4" y="995.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="40.4" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="37.4" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="40.4" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="37.4" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="40.4" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="37.4" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="40.4" y="958.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="37.4" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="40.4" y="942.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="37.4" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="40.4" y="926.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="37.4" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="40.4" y="910.0"></text>
</g>
<g>
<title>AdapterBlob::create(CodeBuffer*) (1 samples, 0.03%)</title><rect x="37.4" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="40.4" y="894.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="37.4" y="867.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="40.4" y="878.0"></text>
</g>
<g>
<title>VarHandleInts$FieldInstanceReadOnly.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="37.9" y="1043.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.9" y="1054.0"></text>
</g>
<g>
<title>VarForm.&lt;init&gt; (1 samples, 0.03%)</title><rect x="37.9" y="1027.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.9" y="1038.0"></text>
</g>
<g>
<title>MethodType.methodType (1 samples, 0.03%)</title><rect x="37.9" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.9" y="1022.0"></text>
</g>
<g>
<title>MethodType.makeImpl (1 samples, 0.03%)</title><rect x="37.9" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.9" y="1006.0"></text>
</g>
<g>
<title>MethodTypeForm.findForm (1 samples, 0.03%)</title><rect x="37.9" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.9" y="990.0"></text>
</g>
<g>
<title>MethodTypeForm.&lt;init&gt; (1 samples, 0.03%)</title><rect x="37.9" y="963.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.9" y="974.0"></text>
</g>
<g>
<title>Wrapper.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="37.9" y="947.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.9" y="958.0"></text>
</g>
<g>
<title>Wrapper.&lt;init&gt; (1 samples, 0.03%)</title><rect x="37.9" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.9" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="37.9" y="915.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="40.9" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="37.9" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="40.9" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="37.9" y="883.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="40.9" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="37.9" y="867.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="40.9" y="878.0"></text>
</g>
<g>
<title>stringStream::stringStream(unsigned long) (1 samples, 0.03%)</title><rect x="37.9" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="40.9" y="862.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="37.9" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="40.9" y="846.0"></text>
</g>
<g>
<title>MethodHandles.lookup (1 samples, 0.03%)</title><rect x="38.3" y="1107.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.3" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="38.3" y="1091.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="41.3" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="38.3" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="41.3" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="38.3" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.3" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="38.3" y="1043.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="41.3" y="1054.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="38.3" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="41.3" y="1038.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="38.3" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.3" y="1022.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="38.3" y="995.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="41.3" y="1006.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="38.3" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.3" y="990.0"></text>
</g>
<g>
<title>Rewriter::maybe_rewrite_invokehandle(unsigned char*, int, int, bool) (1 samples, 0.03%)</title><rect x="38.3" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.3" y="974.0"></text>
</g>
<g>
<title>JarFile.getManifest (3 samples, 0.08%)</title><rect x="38.7" y="1299.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.7" y="1310.0"></text>
</g>
<g>
<title>JarFile.getManifestFromReference (3 samples, 0.08%)</title><rect x="38.7" y="1283.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.7" y="1294.0"></text>
</g>
<g>
<title>JarFile.getBytes (2 samples, 0.06%)</title><rect x="38.7" y="1267.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.7" y="1278.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.close (1 samples, 0.03%)</title><rect x="38.7" y="1251.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.7" y="1262.0"></text>
</g>
<g>
<title>PhantomCleanable.clean (1 samples, 0.03%)</title><rect x="38.7" y="1235.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.7" y="1246.0"></text>
</g>
<g>
<title>CleanerImpl$PhantomCleanableRef.performCleanup (1 samples, 0.03%)</title><rect x="38.7" y="1219.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.7" y="1230.0"></text>
</g>
<g>
<title>ZipFile$InflaterCleanupAction.run (1 samples, 0.03%)</title><rect x="38.7" y="1203.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.7" y="1214.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.releaseInflater (1 samples, 0.03%)</title><rect x="38.7" y="1187.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.7" y="1198.0"></text>
</g>
<g>
<title>Inflater.reset (1 samples, 0.03%)</title><rect x="38.7" y="1171.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.7" y="1182.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="39.2" y="1251.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.2" y="1262.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="39.2" y="1235.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.2" y="1246.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.getInflater (1 samples, 0.03%)</title><rect x="39.2" y="1219.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.2" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="39.2" y="1203.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="42.2" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="39.2" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="42.2" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="39.2" y="1171.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="42.2" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="39.2" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="42.2" y="1166.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="39.2" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="42.2" y="1150.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="39.2" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="42.2" y="1134.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="39.2" y="1107.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="42.2" y="1118.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="39.2" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="42.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="39.2" y="1075.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="42.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="39.2" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="42.2" y="1070.0"></text>
</g>
<g>
<title>Manifest.&lt;init&gt; (1 samples, 0.03%)</title><rect x="39.6" y="1267.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.6" y="1278.0"></text>
</g>
<g>
<title>Manifest.read (1 samples, 0.03%)</title><rect x="39.6" y="1251.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.6" y="1262.0"></text>
</g>
<g>
<title>Attributes.read (1 samples, 0.03%)</title><rect x="39.6" y="1235.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.6" y="1246.0"></text>
</g>
<g>
<title>Attributes.putValue (1 samples, 0.03%)</title><rect x="39.6" y="1219.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.6" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="39.6" y="1203.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="42.6" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="39.6" y="1187.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="42.6" y="1198.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="39.6" y="1171.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="42.6" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="39.6" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="42.6" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="39.6" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="42.6" y="1150.0"></text>
</g>
<g>
<title>LauncherHelper.validateMainClass (1 samples, 0.03%)</title><rect x="40.1" y="1331.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.1" y="1342.0"></text>
</g>
<g>
<title>Class.getMethod (1 samples, 0.03%)</title><rect x="40.1" y="1315.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.1" y="1326.0"></text>
</g>
<g>
<title>Class.getMethod0 (1 samples, 0.03%)</title><rect x="40.1" y="1299.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.1" y="1310.0"></text>
</g>
<g>
<title>Class.getMethodsRecursive (1 samples, 0.03%)</title><rect x="40.1" y="1283.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.1" y="1294.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="40.1" y="1267.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.1" y="1278.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="40.1" y="1251.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.1" y="1262.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="40.1" y="1235.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.1" y="1246.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="40.1" y="1219.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.1" y="1230.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="40.1" y="1203.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.1" y="1214.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="40.1" y="1187.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.1" y="1198.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="40.1" y="1171.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.1" y="1182.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="40.1" y="1155.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.1" y="1166.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="40.1" y="1139.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.1" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="40.1" y="1123.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.1" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="40.1" y="1107.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.1" y="1118.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="40.1" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.1" y="1102.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="40.1" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.1" y="1086.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="40.1" y="1059.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.1" y="1070.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="40.1" y="1043.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="43.1" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="40.1" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="43.1" y="1038.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="40.1" y="1011.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="43.1" y="1022.0"></text>
</g>
<g>
<title>PostVMInitHook.run (1 samples, 0.03%)</title><rect x="40.5" y="1347.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.5" y="1358.0"></text>
</g>
<g>
<title>PostVMInitHook.trackJavaUsage (1 samples, 0.03%)</title><rect x="40.5" y="1331.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.5" y="1342.0"></text>
</g>
<g>
<title>PostVMInitHook.getConfigFilePrivileged (1 samples, 0.03%)</title><rect x="40.5" y="1315.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.5" y="1326.0"></text>
</g>
<g>
<title>PostVMInitHook.getOSSpecificConfigFilePath (1 samples, 0.03%)</title><rect x="40.5" y="1299.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.5" y="1310.0"></text>
</g>
<g>
<title>String.toLowerCase (1 samples, 0.03%)</title><rect x="40.5" y="1283.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.5" y="1294.0"></text>
</g>
<g>
<title>Locale.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="40.5" y="1267.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.5" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="40.5" y="1251.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="43.5" y="1262.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1235.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="43.5" y="1246.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1219.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="43.5" y="1230.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1203.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="43.5" y="1214.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1187.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="43.5" y="1198.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1171.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="43.5" y="1182.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1155.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="43.5" y="1166.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="43.5" y="1150.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="43.5" y="1134.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="43.5" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="43.5" y="1102.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="43.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="43.5" y="1070.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="43.5" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="43.5" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="43.5" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="43.5" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="43.5" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::copy_localvariable_table(ConstMethod const*, int, unsigned short*, void const**, int, unsigned short*, void const**, Thread*) (1 samples, 0.03%)</title><rect x="40.5" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="43.5" y="974.0"></text>
</g>
<g>
<title>QuarkusEntryPoint.main (885 samples, 24.77%)</title><rect x="41.0" y="1347.0" width="391.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.0" y="1358.0">QuarkusEntryPoint.main</text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="41.0" y="1331.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.0" y="1342.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="41.0" y="1315.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.0" y="1326.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="41.0" y="1299.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.0" y="1310.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="41.0" y="1283.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.0" y="1294.0"></text>
</g>
<g>
<title>ClassLoader.getClassLoadingLock (1 samples, 0.03%)</title><rect x="41.0" y="1267.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.0" y="1278.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="41.0" y="1251.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.0" y="1262.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putVal (1 samples, 0.03%)</title><rect x="41.0" y="1235.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.0" y="1246.0"></text>
</g>
<g>
<title>ConcurrentHashMap.addCount (1 samples, 0.03%)</title><rect x="41.0" y="1219.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="44.0" y="1230.0"></text>
</g>
<g>
<title>ConcurrentHashMap.transfer (1 samples, 0.03%)</title><rect x="41.0" y="1203.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.0" y="1214.0"></text>
</g>
<g>
<title>ConcurrentHashMap$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="41.0" y="1187.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.0" y="1198.0"></text>
</g>
<g>
<title>ConcurrentHashMap$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="41.0" y="1171.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.0" y="1182.0"></text>
</g>
<g>
<title>QuarkusEntryPoint.doRun (884 samples, 24.74%)</title><rect x="41.4" y="1331.0" width="390.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.4" y="1342.0">QuarkusEntryPoint.doRun</text>
</g>
<g>
<title>Files.newInputStream (2 samples, 0.06%)</title><rect x="41.4" y="1315.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.4" y="1326.0"></text>
</g>
<g>
<title>FileSystemProvider.newInputStream (2 samples, 0.06%)</title><rect x="41.4" y="1299.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.4" y="1310.0"></text>
</g>
<g>
<title>Files.newByteChannel (2 samples, 0.06%)</title><rect x="41.4" y="1283.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.4" y="1294.0"></text>
</g>
<g>
<title>Files.newByteChannel (2 samples, 0.06%)</title><rect x="41.4" y="1267.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.4" y="1278.0"></text>
</g>
<g>
<title>UnixFileSystemProvider.newByteChannel (2 samples, 0.06%)</title><rect x="41.4" y="1251.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="44.4" y="1262.0"></text>
</g>
<g>
<title>UnixChannelFactory.newFileChannel (2 samples, 0.06%)</title><rect x="41.4" y="1235.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.4" y="1246.0"></text>
</g>
<g>
<title>UnixChannelFactory.newFileChannel (2 samples, 0.06%)</title><rect x="41.4" y="1219.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.4" y="1230.0"></text>
</g>
<g>
<title>FileChannelImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="41.4" y="1203.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.4" y="1214.0"></text>
</g>
<g>
<title>IOUtil.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="41.4" y="1187.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.4" y="1198.0"></text>
</g>
<g>
<title>IOUtil.initIDs (1 samples, 0.03%)</title><rect x="41.4" y="1171.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.4" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="41.4" y="1155.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="44.4" y="1166.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.4" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.4" y="1150.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.4" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.4" y="1134.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.4" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="44.4" y="1118.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.4" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="44.4" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="41.4" y="1075.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="44.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="1059.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="44.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="1043.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="44.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="1027.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="44.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="1011.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="44.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="995.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="44.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="979.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="44.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="963.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="44.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="947.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="44.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="931.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="44.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="915.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="44.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="899.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="44.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="883.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="44.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="867.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="44.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="851.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="44.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="835.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="44.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="819.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="44.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="803.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="44.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.4" y="787.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="44.4" y="798.0"></text>
</g>
<g>
<title>UnixChannelFactory.open (1 samples, 0.03%)</title><rect x="41.8" y="1203.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.8" y="1214.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.open (1 samples, 0.03%)</title><rect x="41.8" y="1187.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.8" y="1198.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.open0 (1 samples, 0.03%)</title><rect x="41.8" y="1171.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="44.8" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="41.8" y="1155.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="44.8" y="1166.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.8" y="1139.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="44.8" y="1150.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.8" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="44.8" y="1134.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.8" y="1107.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="44.8" y="1118.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="41.8" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="44.8" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="41.8" y="1075.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="44.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.8" y="1059.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="44.8" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.8" y="1043.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="44.8" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.8" y="1027.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="44.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.8" y="1011.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="44.8" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.8" y="995.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="44.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="41.8" y="979.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="44.8" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="42.3" y="1315.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="45.3" y="1326.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="42.3" y="1299.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="45.3" y="1310.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1283.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="45.3" y="1294.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1267.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="45.3" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1251.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="45.3" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1235.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="45.3" y="1246.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1219.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="45.3" y="1230.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1203.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="45.3" y="1214.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1187.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="45.3" y="1198.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="42.3" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="45.3" y="1182.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="42.3" y="1155.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="45.3" y="1166.0"></text>
</g>
<g>
<title>Method.invoke (854 samples, 23.90%)</title><rect x="42.7" y="1315.0" width="377.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.7" y="1326.0">Method.invoke</text>
</g>
<g>
<title>DelegatingMethodAccessorImpl.invoke (854 samples, 23.90%)</title><rect x="42.7" y="1299.0" width="377.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.7" y="1310.0">DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke (854 samples, 23.90%)</title><rect x="42.7" y="1283.0" width="377.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.7" y="1294.0">NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke0 (854 samples, 23.90%)</title><rect x="42.7" y="1267.0" width="377.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="45.7" y="1278.0">NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>GeneratedMain.main (854 samples, 23.90%)</title><rect x="42.7" y="1251.0" width="377.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.7" y="1262.0">GeneratedMain.main</text>
</g>
<g>
<title>Quarkus.run (853 samples, 23.87%)</title><rect x="42.7" y="1235.0" width="377.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.7" y="1246.0">Quarkus.run</text>
</g>
<g>
<title>Quarkus.run (853 samples, 23.87%)</title><rect x="42.7" y="1219.0" width="377.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.7" y="1230.0">Quarkus.run</text>
</g>
<g>
<title>Quarkus.run (853 samples, 23.87%)</title><rect x="42.7" y="1203.0" width="377.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.7" y="1214.0">Quarkus.run</text>
</g>
<g>
<title>ApplicationLifecycleManager.run (275 samples, 7.70%)</title><rect x="42.7" y="1187.0" width="121.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.7" y="1198.0">ApplicationLife..</text>
</g>
<g>
<title>Application.start (269 samples, 7.53%)</title><rect x="42.7" y="1171.0" width="119.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.7" y="1182.0">Application.st..</text>
</g>
<g>
<title>ApplicationImpl.doStart (268 samples, 7.50%)</title><rect x="42.7" y="1155.0" width="118.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.7" y="1166.0">ApplicationImp..</text>
</g>
<g>
<title>AgroalProcessor$generateDataSourceBeans-109901991.deploy (10 samples, 0.28%)</title><rect x="42.7" y="1139.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.7" y="1150.0"></text>
</g>
<g>
<title>AgroalProcessor$generateDataSourceBeans-109901991.deploy_0 (10 samples, 0.28%)</title><rect x="42.7" y="1123.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.7" y="1134.0"></text>
</g>
<g>
<title>AgroalRecorder.agroalDataSourceSupplier (10 samples, 0.28%)</title><rect x="42.7" y="1107.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.7" y="1118.0"></text>
</g>
<g>
<title>DataSources.fromName (10 samples, 0.28%)</title><rect x="42.7" y="1091.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.7" y="1102.0"></text>
</g>
<g>
<title>DataSources.getDataSource (10 samples, 0.28%)</title><rect x="42.7" y="1075.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.7" y="1086.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (10 samples, 0.28%)</title><rect x="42.7" y="1059.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.7" y="1070.0"></text>
</g>
<g>
<title>DataSources$1.apply (10 samples, 0.28%)</title><rect x="42.7" y="1043.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="45.7" y="1054.0"></text>
</g>
<g>
<title>DataSources$1.apply (10 samples, 0.28%)</title><rect x="42.7" y="1027.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.7" y="1038.0"></text>
</g>
<g>
<title>DataSources.doCreateDataSource (10 samples, 0.28%)</title><rect x="42.7" y="1011.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.7" y="1022.0"></text>
</g>
<g>
<title>AgroalDataSourceConfigurationSupplier.&lt;init&gt; (1 samples, 0.03%)</title><rect x="42.7" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.7" y="1006.0"></text>
</g>
<g>
<title>AgroalConnectionPoolConfigurationSupplier.&lt;init&gt; (1 samples, 0.03%)</title><rect x="42.7" y="979.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.7" y="990.0"></text>
</g>
<g>
<title>TransactionIntegration.none (1 samples, 0.03%)</title><rect x="42.7" y="963.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.7" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="42.7" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.7" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="42.7" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.7" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="42.7" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.7" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="42.7" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="45.7" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="42.7" y="883.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="45.7" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="42.7" y="867.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="45.7" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="851.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="45.7" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="45.7" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="45.7" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="45.7" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="45.7" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="42.7" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="45.7" y="782.0"></text>
</g>
<g>
<title>put_after_lookup(Symbol const*, Symbol const*, NameSigHash**) (1 samples, 0.03%)</title><rect x="42.7" y="755.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="45.7" y="766.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="42.7" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="45.7" y="750.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="42.7" y="723.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="45.7" y="734.0"></text>
</g>
<g>
<title>AgroalDataSourceConfigurationSupplier.get (1 samples, 0.03%)</title><rect x="43.2" y="995.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.2" y="1006.0"></text>
</g>
<g>
<title>AgroalDataSourceConfigurationSupplier.validate (1 samples, 0.03%)</title><rect x="43.2" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.2" y="990.0"></text>
</g>
<g>
<title>AgroalConnectionPoolConfigurationSupplier.get (1 samples, 0.03%)</title><rect x="43.2" y="963.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.2" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="43.2" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.2" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="43.2" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.2" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="43.2" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.2" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="43.2" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.2" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="43.2" y="883.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="46.2" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="43.2" y="867.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="46.2" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="43.2" y="851.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="46.2" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="43.2" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="46.2" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="43.2" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="46.2" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="43.2" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="46.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance_klass(ClassFileParser const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="43.2" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="46.2" y="798.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="43.2" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="46.2" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="43.2" y="755.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="46.2" y="766.0"></text>
</g>
<g>
<title>DataSource.&lt;init&gt; (6 samples, 0.17%)</title><rect x="43.6" y="995.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionPool.&lt;init&gt; (4 samples, 0.11%)</title><rect x="43.6" y="979.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.6" y="990.0"></text>
</g>
<g>
<title>ConnectionFactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="43.6" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.6" y="974.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="43.6" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.6" y="958.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="43.6" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.6" y="942.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.resolveOrFail (1 samples, 0.03%)</title><rect x="43.6" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.6" y="926.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="44.0" y="963.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.0" y="974.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="44.0" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.0" y="958.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="44.0" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.0" y="942.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="44.0" y="915.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.0" y="926.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="44.0" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.0" y="910.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="44.0" y="883.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="47.0" y="894.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="44.0" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.0" y="878.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="44.0" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.0" y="862.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="44.0" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.0" y="846.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="44.0" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.0" y="830.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="44.0" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.0" y="814.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="44.0" y="787.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="47.0" y="798.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="44.0" y="771.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="47.0" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="44.0" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="47.0" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="44.0" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="47.0" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="44.0" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="47.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="44.0" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="47.0" y="718.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="44.0" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="47.0" y="702.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="44.0" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="47.0" y="686.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="44.0" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="47.0" y="670.0"></text>
</g>
<g>
<title>AdapterHandlerTable::lookup(int, BasicType*) (1 samples, 0.03%)</title><rect x="44.0" y="643.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="47.0" y="654.0"></text>
</g>
<g>
<title>PriorityScheduledExecutor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="44.5" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.5" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="44.5" y="947.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.5" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="44.5" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="942.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="44.5" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.5" y="926.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="44.5" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.5" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="44.5" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.5" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="44.5" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.5" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="44.5" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.5" y="862.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="44.5" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.5" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="44.5" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.5" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="44.5" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.5" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="44.5" y="787.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.5" y="798.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="44.5" y="771.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="47.5" y="782.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="44.5" y="755.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="47.5" y="766.0"></text>
</g>
<g>
<title>StampedCopyOnWriteArrayList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="44.9" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.9" y="974.0"></text>
</g>
<g>
<title>StampedLock.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="44.9" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.9" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="44.9" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="47.9" y="942.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="47.9" y="926.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="47.9" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="883.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="47.9" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="47.9" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="47.9" y="862.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="47.9" y="846.0"></text>
</g>
<g>
<title>ClassPathImageEntry::open_stream(char const*, Thread*) (1 samples, 0.03%)</title><rect x="44.9" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="47.9" y="830.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.03%)</title><rect x="44.9" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="47.9" y="814.0"></text>
</g>
<g>
<title>ConnectionPool.init (1 samples, 0.03%)</title><rect x="45.4" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.4" y="990.0"></text>
</g>
<g>
<title>ScheduledThreadPoolExecutor.schedule (1 samples, 0.03%)</title><rect x="45.4" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.4" y="974.0"></text>
</g>
<g>
<title>ScheduledThreadPoolExecutor.triggerTime (1 samples, 0.03%)</title><rect x="45.4" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.4" y="958.0"></text>
</g>
<g>
<title>ScheduledThreadPoolExecutor.triggerTime (1 samples, 0.03%)</title><rect x="45.4" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.4" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="45.4" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="48.4" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="45.4" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="48.4" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="45.4" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="48.4" y="894.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="45.4" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="48.4" y="878.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="45.4" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="48.4" y="862.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="45.4" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="48.4" y="846.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="45.4" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="48.4" y="830.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="45.4" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="48.4" y="814.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="45.4" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="48.4" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="45.8" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.8" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="45.8" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.8" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="45.8" y="947.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.8" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="45.8" y="931.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.8" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="45.8" y="915.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="48.8" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="45.8" y="899.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="48.8" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="883.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="48.8" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="48.8" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="48.8" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="48.8" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="48.8" y="830.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="48.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Class::initialize_mirror_fields(Klass*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="45.8" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="48.8" y="798.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.03%)</title><rect x="45.8" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="48.8" y="782.0"></text>
</g>
<g>
<title>DataSources.loadDriversInTCCL (1 samples, 0.03%)</title><rect x="46.3" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.3" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="46.3" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.3" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="46.3" y="963.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.3" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="46.3" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.3" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="46.3" y="931.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.3" y="942.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="46.3" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.3" y="926.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="46.3" y="899.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.3" y="910.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="46.3" y="883.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="46.3" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="49.3" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="46.3" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.3" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="46.3" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.3" y="846.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="46.3" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.3" y="830.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="46.3" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.3" y="814.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="46.3" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.3" y="798.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="46.3" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="49.3" y="782.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="46.3" y="755.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="49.3" y="766.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="46.3" y="739.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="49.3" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="46.7" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="49.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="979.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="49.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="49.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="947.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="49.7" y="958.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="49.7" y="942.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="915.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="49.7" y="926.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="49.7" y="910.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="46.7" y="883.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="49.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="46.7" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="49.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="46.7" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="49.7" y="862.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="46.7" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="49.7" y="846.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="46.7" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="49.7" y="830.0"></text>
</g>
<g>
<title>ConfigGenerationBuildStep$checkForBuildTimeConfigChange-1100481704.deploy (2 samples, 0.06%)</title><rect x="47.1" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.1" y="1150.0"></text>
</g>
<g>
<title>ConfigGenerationBuildStep$checkForBuildTimeConfigChange-1100481704.deploy_0 (2 samples, 0.06%)</title><rect x="47.1" y="1123.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.1" y="1134.0"></text>
</g>
<g>
<title>ConfigChangeRecorder.handleConfigChange (2 samples, 0.06%)</title><rect x="47.1" y="1107.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.1" y="1118.0"></text>
</g>
<g>
<title>SmallRyeConfig.getOptionalValue (2 samples, 0.06%)</title><rect x="47.1" y="1091.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.1" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (2 samples, 0.06%)</title><rect x="47.1" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.1" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (2 samples, 0.06%)</title><rect x="47.1" y="1059.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.1" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (2 samples, 0.06%)</title><rect x="47.1" y="1043.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.1" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="47.1" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.1" y="1038.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="47.1" y="1011.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.1" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="47.1" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.1" y="1006.0"></text>
</g>
<g>
<title>Expression.compile (1 samples, 0.03%)</title><rect x="47.1" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.1" y="990.0"></text>
</g>
<g>
<title>Expression.compile (1 samples, 0.03%)</title><rect x="47.1" y="963.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.1" y="974.0"></text>
</g>
<g>
<title>Expression.parseString (1 samples, 0.03%)</title><rect x="47.1" y="947.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.1" y="958.0"></text>
</g>
<g>
<title>Expression$Itr.next (1 samples, 0.03%)</title><rect x="47.1" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.1" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.03%)</title><rect x="47.1" y="915.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="50.1" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="47.1" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="50.1" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="47.1" y="883.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="50.1" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="47.1" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="50.1" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="47.1" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="50.1" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="47.1" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="50.1" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="47.1" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="50.1" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.6" y="990.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.6" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.6" y="958.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.6" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.6" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.6" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.6" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.6" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.6" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="819.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.6" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.6" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.6" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.6" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="723.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.6" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.6" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="659.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.6" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="643.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.6" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="627.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.6" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="574.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.6" y="558.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="47.6" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.6" y="542.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="47.6" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.6" y="526.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="47.6" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.6" y="510.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="47.6" y="483.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.6" y="494.0"></text>
</g>
<g>
<title>BuildTimeRunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="47.6" y="467.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.6" y="478.0"></text>
</g>
<g>
<title>NameIterator.previousSegmentEquals (1 samples, 0.03%)</title><rect x="47.6" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.6" y="462.0"></text>
</g>
<g>
<title>NameIterator.previousSegmentEquals (1 samples, 0.03%)</title><rect x="47.6" y="435.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.6" y="446.0"></text>
</g>
<g>
<title>NameIterator.prevPos (1 samples, 0.03%)</title><rect x="47.6" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.6" y="430.0"></text>
</g>
<g>
<title>HibernateOrmProcessor$startPersistenceUnits-1681903524.deploy (135 samples, 3.78%)</title><rect x="48.0" y="1139.0" width="59.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.0" y="1150.0">Hibern..</text>
</g>
<g>
<title>HibernateOrmProcessor$startPersistenceUnits-1681903524.deploy_0 (135 samples, 3.78%)</title><rect x="48.0" y="1123.0" width="59.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.0" y="1134.0">Hibern..</text>
</g>
<g>
<title>HibernateOrmRecorder.startAllPersistenceUnits (135 samples, 3.78%)</title><rect x="48.0" y="1107.0" width="59.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.0" y="1118.0">Hibern..</text>
</g>
<g>
<title>JPAConfig.startAll (135 samples, 3.78%)</title><rect x="48.0" y="1091.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.0" y="1102.0">JPACon..</text>
</g>
<g>
<title>JPAConfig$LazyPersistenceUnit.get (135 samples, 3.78%)</title><rect x="48.0" y="1075.0" width="59.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.0" y="1086.0">JPACon..</text>
</g>
<g>
<title>Persistence.createEntityManagerFactory (135 samples, 3.78%)</title><rect x="48.0" y="1059.0" width="59.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.0" y="1070.0">Persis..</text>
</g>
<g>
<title>Persistence.createEntityManagerFactory (135 samples, 3.78%)</title><rect x="48.0" y="1043.0" width="59.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.0" y="1054.0">Persis..</text>
</g>
<g>
<title>FastBootHibernatePersistenceProvider.createEntityManagerFactory (135 samples, 3.78%)</title><rect x="48.0" y="1027.0" width="59.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.0" y="1038.0">FastBo..</text>
</g>
<g>
<title>FastBootEntityManagerFactoryBuilder.build (133 samples, 3.72%)</title><rect x="48.0" y="1011.0" width="58.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.0" y="1022.0">FastBo..</text>
</g>
<g>
<title>PrevalidatedQuarkusMetadata.buildSessionFactoryOptionsBuilder (6 samples, 0.17%)</title><rect x="48.0" y="995.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.0" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="48.0" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.0" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="48.0" y="963.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.0" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="48.0" y="947.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.0" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="48.0" y="931.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.0" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="48.0" y="915.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="51.0" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="48.0" y="899.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="51.0" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="48.0" y="883.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="51.0" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="48.0" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="51.0" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="48.0" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.0" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="48.0" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="51.0" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_load(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="48.0" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="51.0" y="830.0"></text>
</g>
<g>
<title>JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="48.0" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="51.0" y="814.0"></text>
</g>
<g>
<title>ThreadToNativeFromVM::ThreadToNativeFromVM(JavaThread*) (1 samples, 0.03%)</title><rect x="48.0" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="51.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::is_external_suspend() const (1 samples, 0.03%)</title><rect x="48.0" y="771.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="51.0" y="782.0"></text>
</g>
<g>
<title>SessionFactoryOptionsBuilder.&lt;init&gt; (5 samples, 0.14%)</title><rect x="48.5" y="979.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.5" y="990.0"></text>
</g>
<g>
<title>EntityMode.parse (1 samples, 0.03%)</title><rect x="48.5" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.5" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="48.5" y="947.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="51.5" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="48.5" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.5" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="48.5" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.5" y="926.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="48.5" y="899.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="51.5" y="910.0"></text>
</g>
<g>
<title>EntityTuplizerFactory.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="48.9" y="963.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.9" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="48.9" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.9" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="48.9" y="931.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.9" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="48.9" y="915.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.9" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="48.9" y="899.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.9" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="48.9" y="883.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="51.9" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="48.9" y="867.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="51.9" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="851.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="51.9" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="51.9" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="51.9" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="51.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="51.9" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="51.9" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="48.9" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.9" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="48.9" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.9" y="750.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="48.9" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="51.9" y="734.0"></text>
</g>
<g>
<title>EntityTuplizerFactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="49.4" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.4" y="974.0"></text>
</g>
<g>
<title>EntityTuplizerFactory.buildBaseMapping (1 samples, 0.03%)</title><rect x="49.4" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.4" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="49.4" y="931.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.4" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="49.4" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.4" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="49.4" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="49.4" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.4" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="49.4" y="867.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="52.4" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="49.4" y="851.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="52.4" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="835.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="52.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="52.4" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="52.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="52.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="52.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="52.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="52.4" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="49.4" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="52.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="49.4" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="52.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="49.4" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="52.4" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="49.4" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="52.4" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="49.8" y="963.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="52.8" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="49.8" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="52.8" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="52.8" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="52.8" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="899.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="52.8" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="52.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="52.8" y="878.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="52.8" y="862.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="52.8" y="846.0"></text>
</g>
<g>
<title>Rewriter::make_constant_pool_cache(Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="52.8" y="830.0"></text>
</g>
<g>
<title>ConstantPoolCache::allocate(ClassLoaderData*, GrowableArray&lt;int&gt; const&amp;, GrowableArray&lt;int&gt; const&amp;, GrowableArray&lt;int&gt; const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="52.8" y="814.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="49.8" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="52.8" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="49.8" y="771.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="52.8" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="50.2" y="963.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.2" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="50.2" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.2" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="50.2" y="931.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.2" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="50.2" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.2" y="926.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="50.2" y="899.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.2" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="50.2" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.2" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="50.2" y="867.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.2" y="878.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="50.2" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.2" y="862.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="50.2" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.2" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="50.2" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.2" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="50.2" y="803.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.2" y="814.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="50.2" y="787.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="53.2" y="798.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="50.2" y="771.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="53.2" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="50.7" y="995.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.7" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="50.7" y="979.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.7" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (3 samples, 0.08%)</title><rect x="50.7" y="963.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.7" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (3 samples, 0.08%)</title><rect x="50.7" y="947.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.7" y="958.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="50.7" y="931.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="53.7" y="942.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="50.7" y="915.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="53.7" y="926.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="50.7" y="899.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="53.7" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="50.7" y="883.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="53.7" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="50.7" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="53.7" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="50.7" y="851.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="53.7" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="50.7" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="53.7" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="50.7" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.7" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="50.7" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="53.7" y="814.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="50.7" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="53.7" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="50.7" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="53.7" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="51.1" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="54.1" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="51.1" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="54.1" y="814.0"></text>
</g>
<g>
<title>ConstMethod::copy_stackmap_data(ClassLoaderData*, unsigned char*, int, Thread*) (1 samples, 0.03%)</title><rect x="51.1" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="54.1" y="798.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="51.1" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="54.1" y="782.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="51.1" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.1" y="766.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="51.1" y="739.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="54.1" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="51.6" y="931.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="51.6" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.6" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="51.6" y="899.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.6" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="51.6" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.6" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="51.6" y="867.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.6" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="51.6" y="851.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.6" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="51.6" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.6" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="51.6" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.6" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="51.6" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.6" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="51.6" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.6" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="51.6" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.6" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="51.6" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.6" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="51.6" y="739.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="54.6" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="51.6" y="723.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="54.6" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="51.6" y="707.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="54.6" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="51.6" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="54.6" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="51.6" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.6" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="51.6" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="54.6" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="51.6" y="643.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="54.6" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::set_precomputed_flags(InstanceKlass*) (1 samples, 0.03%)</title><rect x="51.6" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="54.6" y="638.0"></text>
</g>
<g>
<title>SessionFactoryImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="52.0" y="995.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.0" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="52.0" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="55.0" y="990.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="52.0" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="55.0" y="974.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="52.0" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="55.0" y="958.0"></text>
</g>
<g>
<title>SessionFactoryImpl.&lt;init&gt; (123 samples, 3.44%)</title><rect x="52.5" y="995.0" width="54.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.5" y="1006.0">Sessi..</text>
</g>
<g>
<title>BeanValidationIntegrator.integrate (3 samples, 0.08%)</title><rect x="52.5" y="979.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.5" y="990.0"></text>
</g>
<g>
<title>BeanValidationIntegrator.loadTypeSafeActivatorClass (1 samples, 0.03%)</title><rect x="52.5" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.5" y="974.0"></text>
</g>
<g>
<title>FlatClassLoaderService.classForName (1 samples, 0.03%)</title><rect x="52.5" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.5" y="958.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="52.5" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.5" y="942.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="52.5" y="915.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.5" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="52.5" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="52.5" y="883.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.5" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="52.5" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.5" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="52.5" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.5" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="52.5" y="835.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="55.5" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="52.5" y="819.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="55.5" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="803.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="55.5" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="55.5" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="55.5" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="55.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="55.5" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="55.5" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="52.5" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="55.5" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="52.5" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="55.5" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="52.5" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="55.5" y="686.0"></text>
</g>
<g>
<title>Method.invoke (2 samples, 0.06%)</title><rect x="52.9" y="963.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.9" y="974.0"></text>
</g>
<g>
<title>DelegatingMethodAccessorImpl.invoke (2 samples, 0.06%)</title><rect x="52.9" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.9" y="958.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke (2 samples, 0.06%)</title><rect x="52.9" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.9" y="942.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke0 (2 samples, 0.06%)</title><rect x="52.9" y="915.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.9" y="926.0"></text>
</g>
<g>
<title>TypeSafeActivator.activate (2 samples, 0.06%)</title><rect x="52.9" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.9" y="910.0"></text>
</g>
<g>
<title>TypeSafeActivator.applyRelationalConstraints (2 samples, 0.06%)</title><rect x="52.9" y="883.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.9" y="894.0"></text>
</g>
<g>
<title>TypeSafeActivator.applyRelationalConstraints (2 samples, 0.06%)</title><rect x="52.9" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.9" y="878.0"></text>
</g>
<g>
<title>TypeSafeActivator.applyDDL (2 samples, 0.06%)</title><rect x="52.9" y="851.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.9" y="862.0"></text>
</g>
<g>
<title>ElementDescriptorImpl.getConstraintDescriptors (1 samples, 0.03%)</title><rect x="52.9" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.9" y="846.0"></text>
</g>
<g>
<title>ElementDescriptorImpl.findConstraints (1 samples, 0.03%)</title><rect x="52.9" y="819.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.9" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="52.9" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.9" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="52.9" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.9" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="52.9" y="771.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.9" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="52.9" y="755.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.9" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="52.9" y="739.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="55.9" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="52.9" y="723.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="55.9" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="707.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="55.9" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="55.9" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="55.9" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="55.9" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="55.9" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="55.9" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="52.9" y="611.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="55.9" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="52.9" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="55.9" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="52.9" y="579.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="55.9" y="590.0"></text>
</g>
<g>
<title>ValidatorImpl.getConstraintsForClass (1 samples, 0.03%)</title><rect x="53.3" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.3" y="846.0"></text>
</g>
<g>
<title>BeanMetaDataImpl.getBeanDescriptor (1 samples, 0.03%)</title><rect x="53.3" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.3" y="830.0"></text>
</g>
<g>
<title>BeanMetaDataImpl.createBeanDescriptor (1 samples, 0.03%)</title><rect x="53.3" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.3" y="814.0"></text>
</g>
<g>
<title>BeanMetaDataImpl.getConstrainedPropertiesAsDescriptors (1 samples, 0.03%)</title><rect x="53.3" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.3" y="798.0"></text>
</g>
<g>
<title>PropertyMetaData.asDescriptor (1 samples, 0.03%)</title><rect x="53.3" y="771.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.3" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="53.3" y="755.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.3" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="53.3" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.3" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="53.3" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.3" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="53.3" y="707.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.3" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="53.3" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.3" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="53.3" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.3" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="53.3" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.3" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="53.3" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.3" y="654.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="53.3" y="627.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="56.3" y="638.0"></text>
</g>
<g>
<title>getUTF (1 samples, 0.03%)</title><rect x="53.3" y="611.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="56.3" y="622.0"></text>
</g>
<g>
<title>jni_GetStringUTFLength (1 samples, 0.03%)</title><rect x="53.3" y="595.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="56.3" y="606.0"></text>
</g>
<g>
<title>int UNICODE::utf8_length&lt;signed char&gt;(signed char*, int) (1 samples, 0.03%)</title><rect x="53.3" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="56.3" y="590.0"></text>
</g>
<g>
<title>FastSessionServices.&lt;init&gt; (2 samples, 0.06%)</title><rect x="53.8" y="979.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.8" y="990.0"></text>
</g>
<g>
<title>FastSessionServices.initializeDefaultLockOptions (1 samples, 0.03%)</title><rect x="53.8" y="963.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.8" y="974.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="53.8" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.8" y="958.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="53.8" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.8" y="942.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="53.8" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.8" y="926.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="53.8" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.8" y="910.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="53.8" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.8" y="894.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="53.8" y="867.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="56.8" y="878.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="53.8" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.8" y="862.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="53.8" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.8" y="846.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="53.8" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.8" y="830.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.generateConstructor (1 samples, 0.03%)</title><rect x="53.8" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.8" y="814.0"></text>
</g>
<g>
<title>MethodType.toMethodDescriptorString (1 samples, 0.03%)</title><rect x="53.8" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.8" y="798.0"></text>
</g>
<g>
<title>BytecodeDescriptor.unparseMethod (1 samples, 0.03%)</title><rect x="53.8" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.8" y="782.0"></text>
</g>
<g>
<title>BytecodeDescriptor.unparseSig (1 samples, 0.03%)</title><rect x="53.8" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.8" y="766.0"></text>
</g>
<g>
<title>Wrapper.forBasicType (1 samples, 0.03%)</title><rect x="53.8" y="739.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.8" y="750.0"></text>
</g>
<g>
<title>Wrapper.forPrimitiveType (1 samples, 0.03%)</title><rect x="53.8" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.8" y="734.0"></text>
</g>
<g>
<title>Wrapper.findPrimitiveType (1 samples, 0.03%)</title><rect x="53.8" y="707.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.8" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="54.2" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="57.2" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="54.2" y="947.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="57.2" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="54.2" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="57.2" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="54.2" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="57.2" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="54.2" y="899.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="57.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="54.2" y="883.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="57.2" y="894.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="54.2" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="57.2" y="878.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="54.2" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="57.2" y="862.0"></text>
</g>
<g>
<title>FieldInfo::from_field_array(Array&lt;unsigned short&gt;*, int) (1 samples, 0.03%)</title><rect x="54.2" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="57.2" y="846.0"></text>
</g>
<g>
<title>MetadataImpl.initSessionFactory (18 samples, 0.50%)</title><rect x="54.7" y="979.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.7" y="990.0"></text>
</g>
<g>
<title>EventListenerRegistryImpl.prepare (5 samples, 0.14%)</title><rect x="54.7" y="963.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.7" y="974.0"></text>
</g>
<g>
<title>CallbackBuilderLegacyImpl.buildCallbacksForEntity (3 samples, 0.08%)</title><rect x="54.7" y="947.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.7" y="958.0"></text>
</g>
<g>
<title>CallbackBuilderLegacyImpl.resolveEntityCallbacks (3 samples, 0.08%)</title><rect x="54.7" y="931.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.7" y="942.0"></text>
</g>
<g>
<title>JavaXClass.getDeclaredMethods (3 samples, 0.08%)</title><rect x="54.7" y="915.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.7" y="926.0"></text>
</g>
<g>
<title>JavaReflectionManager.getXMethod (2 samples, 0.06%)</title><rect x="55.1" y="899.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.1" y="910.0"></text>
</g>
<g>
<title>JavaXMethod.create (2 samples, 0.06%)</title><rect x="55.1" y="883.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.1" y="894.0"></text>
</g>
<g>
<title>JavaReflectionManager.toXType (1 samples, 0.03%)</title><rect x="55.1" y="867.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.1" y="878.0"></text>
</g>
<g>
<title>ApproximatingTypeEnvironment.bind (1 samples, 0.03%)</title><rect x="55.1" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.1" y="862.0"></text>
</g>
<g>
<title>ApproximatingTypeEnvironment.fineApproximation (1 samples, 0.03%)</title><rect x="55.1" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.1" y="846.0"></text>
</g>
<g>
<title>TypeSwitch.doSwitch (1 samples, 0.03%)</title><rect x="55.1" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.1" y="830.0"></text>
</g>
<g>
<title>TypeSwitch.caseTypeVariable (1 samples, 0.03%)</title><rect x="55.1" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.1" y="814.0"></text>
</g>
<g>
<title>ApproximatingTypeEnvironment$1.defaultCase (1 samples, 0.03%)</title><rect x="55.1" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.1" y="798.0"></text>
</g>
<g>
<title>ApproximatingTypeEnvironment$1.defaultCase (1 samples, 0.03%)</title><rect x="55.1" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.1" y="782.0"></text>
</g>
<g>
<title>ApproximatingTypeEnvironment.access$000 (1 samples, 0.03%)</title><rect x="55.1" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.1" y="766.0"></text>
</g>
<g>
<title>ApproximatingTypeEnvironment.coarseApproximation (1 samples, 0.03%)</title><rect x="55.1" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.1" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="55.1" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="58.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="55.1" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="58.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="55.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="58.1" y="702.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="55.1" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="58.1" y="686.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="55.1" y="659.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="58.1" y="670.0"></text>
</g>
<g>
<title>JavaXMember.typeOf (1 samples, 0.03%)</title><rect x="55.5" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.5" y="878.0"></text>
</g>
<g>
<title>Method.getGenericReturnType (1 samples, 0.03%)</title><rect x="55.5" y="851.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.5" y="862.0"></text>
</g>
<g>
<title>Method.getGenericInfo (1 samples, 0.03%)</title><rect x="55.5" y="835.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.5" y="846.0"></text>
</g>
<g>
<title>MethodRepository.make (1 samples, 0.03%)</title><rect x="55.5" y="819.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.5" y="830.0"></text>
</g>
<g>
<title>MethodRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="55.5" y="803.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.5" y="814.0"></text>
</g>
<g>
<title>ConstructorRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="55.5" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.5" y="798.0"></text>
</g>
<g>
<title>GenericDeclRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="55.5" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.5" y="782.0"></text>
</g>
<g>
<title>AbstractRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="55.5" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.5" y="766.0"></text>
</g>
<g>
<title>ConstructorRepository.parse (1 samples, 0.03%)</title><rect x="55.5" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.5" y="750.0"></text>
</g>
<g>
<title>ConstructorRepository.parse (1 samples, 0.03%)</title><rect x="55.5" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.5" y="734.0"></text>
</g>
<g>
<title>SignatureParser.parseMethodSig (1 samples, 0.03%)</title><rect x="55.5" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.5" y="718.0"></text>
</g>
<g>
<title>SignatureParser.parseMethodTypeSignature (1 samples, 0.03%)</title><rect x="55.5" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.5" y="702.0"></text>
</g>
<g>
<title>SignatureParser.parseFormalParameters (1 samples, 0.03%)</title><rect x="55.5" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.5" y="686.0"></text>
</g>
<g>
<title>CallbacksFactory.buildCallbackBuilder (2 samples, 0.06%)</title><rect x="56.0" y="947.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.0" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="56.4" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="59.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="56.4" y="915.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="56.4" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="59.4" y="910.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="56.4" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="59.4" y="894.0"></text>
</g>
<g>
<title>klassVtable::initialize_from_super(Klass*) (1 samples, 0.03%)</title><rect x="56.4" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="59.4" y="878.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="56.4" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="59.4" y="862.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.getService (13 samples, 0.36%)</title><rect x="56.9" y="963.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.9" y="974.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (13 samples, 0.36%)</title><rect x="56.9" y="947.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.9" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (13 samples, 0.36%)</title><rect x="56.9" y="931.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.9" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.createService (13 samples, 0.36%)</title><rect x="56.9" y="915.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.9" y="926.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.initiateService (13 samples, 0.36%)</title><rect x="56.9" y="899.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.9" y="910.0"></text>
</g>
<g>
<title>EventListenerServiceInitiator.initiateService (13 samples, 0.36%)</title><rect x="56.9" y="883.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.9" y="894.0"></text>
</g>
<g>
<title>EventListenerServiceInitiator.initiateService (13 samples, 0.36%)</title><rect x="56.9" y="867.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.9" y="878.0"></text>
</g>
<g>
<title>EventListenerRegistryImpl.&lt;init&gt; (12 samples, 0.34%)</title><rect x="56.9" y="851.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.9" y="862.0"></text>
</g>
<g>
<title>EventListenerRegistryImpl.buildListenerGroups (12 samples, 0.34%)</title><rect x="56.9" y="835.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.9" y="846.0"></text>
</g>
<g>
<title>DefaultDeleteEventListener.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="56.9" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.9" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="56.9" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="59.9" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="56.9" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="59.9" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="56.9" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="59.9" y="782.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="56.9" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="59.9" y="766.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.03%)</title><rect x="56.9" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.9" y="750.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="56.9" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="59.9" y="734.0"></text>
</g>
<g>
<title>DefaultLoadEventListener.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="57.3" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.3" y="830.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="57.3" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.3" y="814.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="57.3" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.3" y="798.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="57.3" y="771.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.3" y="782.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="57.3" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.3" y="766.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="57.3" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.3" y="750.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="57.3" y="723.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.3" y="734.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="57.3" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.3" y="718.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="57.3" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.3" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="57.3" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.3" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="57.3" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.3" y="670.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="57.3" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.3" y="654.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="57.3" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.3" y="638.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="57.3" y="611.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.3" y="622.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="57.3" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="60.3" y="606.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="57.3" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.3" y="590.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="57.3" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.3" y="574.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="57.3" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.3" y="558.0"></text>
</g>
<g>
<title>JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="57.3" y="531.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.3" y="542.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="57.3" y="515.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.3" y="526.0"></text>
</g>
<g>
<title>JarFile.getVersionedEntry (1 samples, 0.03%)</title><rect x="57.3" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.3" y="510.0"></text>
</g>
<g>
<title>JarFile.getEntry0 (1 samples, 0.03%)</title><rect x="57.3" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.3" y="494.0"></text>
</g>
<g>
<title>ZipFile$1.getEntry (1 samples, 0.03%)</title><rect x="57.3" y="467.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="60.3" y="478.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="57.3" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.3" y="462.0"></text>
</g>
<g>
<title>ZipFile$Source.getEntryPos (1 samples, 0.03%)</title><rect x="57.3" y="435.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.3" y="446.0"></text>
</g>
<g>
<title>EventListenerRegistryImpl.prepareListeners (2 samples, 0.06%)</title><rect x="57.8" y="819.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.8" y="830.0"></text>
</g>
<g>
<title>EventListenerGroupImpl.appendListener (1 samples, 0.03%)</title><rect x="57.8" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="60.8" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="57.8" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.8" y="798.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="57.8" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.8" y="782.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="57.8" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.8" y="766.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="57.8" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.8" y="750.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="57.8" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.8" y="734.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="57.8" y="707.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="60.8" y="718.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="57.8" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.8" y="702.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="57.8" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.8" y="686.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="57.8" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.8" y="670.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="57.8" y="643.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.8" y="654.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="57.8" y="627.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.8" y="638.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="57.8" y="611.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="60.8" y="622.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="595.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="60.8" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="60.8" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="60.8" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="60.8" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="60.8" y="542.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="60.8" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::do_local_static_fields(void (*)(fieldDescriptor*, Handle, Thread*), Handle, Thread*) (1 samples, 0.03%)</title><rect x="57.8" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="60.8" y="510.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="57.8" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="60.8" y="494.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="57.8" y="467.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="60.8" y="478.0"></text>
</g>
<g>
<title>fieldDescriptor::fieldDescriptor() (1 samples, 0.03%)</title><rect x="57.8" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="60.8" y="462.0"></text>
</g>
<g>
<title>EventListenerRegistryImpl.prepareListeners (1 samples, 0.03%)</title><rect x="58.2" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.2" y="814.0"></text>
</g>
<g>
<title>PostCommitEventListenerGroupImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="58.2" y="787.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.2" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="58.2" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.2" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="58.2" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.2" y="766.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="58.2" y="739.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.2" y="750.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="58.2" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.2" y="734.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="58.2" y="707.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.2" y="718.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="58.2" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.2" y="702.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="58.2" y="675.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.2" y="686.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="58.2" y="659.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.2" y="670.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="58.2" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.2" y="654.0"></text>
</g>
<g>
<title>Java_java_io_RandomAccessFile_seek0 (1 samples, 0.03%)</title><rect x="58.2" y="627.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="61.2" y="638.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="58.2" y="611.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="61.2" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="58.2" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="61.2" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="58.2" y="579.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="61.2" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="58.2" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="61.2" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="58.2" y="547.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="61.2" y="558.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="58.2" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="61.2" y="542.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="58.2" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="61.2" y="526.0"></text>
</g>
<g>
<title>EventType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="58.6" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.6" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="58.6" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.6" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="58.6" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.6" y="798.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="58.6" y="771.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.6" y="782.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="58.6" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.6" y="766.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="58.6" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.6" y="750.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="58.6" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.6" y="734.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="58.6" y="707.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="61.6" y="718.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="58.6" y="691.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="61.6" y="702.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="58.6" y="675.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="61.6" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (7 samples, 0.20%)</title><rect x="59.1" y="819.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.1" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (7 samples, 0.20%)</title><rect x="59.1" y="803.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.1" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (7 samples, 0.20%)</title><rect x="59.1" y="787.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.1" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (7 samples, 0.20%)</title><rect x="59.1" y="771.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.1" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (5 samples, 0.14%)</title><rect x="59.1" y="755.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="62.1" y="766.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (5 samples, 0.14%)</title><rect x="59.1" y="739.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="62.1" y="750.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (5 samples, 0.14%)</title><rect x="59.1" y="723.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="62.1" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (5 samples, 0.14%)</title><rect x="59.1" y="707.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="62.1" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (5 samples, 0.14%)</title><rect x="59.1" y="691.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="62.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (4 samples, 0.11%)</title><rect x="59.1" y="675.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="62.1" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (4 samples, 0.11%)</title><rect x="59.1" y="659.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="62.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (4 samples, 0.11%)</title><rect x="59.1" y="643.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="62.1" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="59.1" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="62.1" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (2 samples, 0.06%)</title><rect x="59.1" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="62.1" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="59.5" y="595.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="62.5" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (2 samples, 0.06%)</title><rect x="60.0" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="63.0" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (2 samples, 0.06%)</title><rect x="60.0" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="63.0" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="60.4" y="595.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="63.4" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="63.9" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="63.9" y="670.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="63.9" y="654.0"></text>
</g>
<g>
<title>MethodFamily::determine_target(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="627.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="63.9" y="638.0"></text>
</g>
<g>
<title>MethodFamily::generate_method_message(Symbol*, Method*, Thread*) const (1 samples, 0.03%)</title><rect x="60.9" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="63.9" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="63.9" y="606.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(int, unsigned char*, int, unsigned int, bool, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="63.9" y="590.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="60.9" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="63.9" y="574.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="60.9" y="547.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="63.9" y="558.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="60.9" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="63.9" y="542.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="60.9" y="515.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="63.9" y="526.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="60.9" y="499.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="63.9" y="510.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="60.9" y="483.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="63.9" y="494.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="60.9" y="467.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="63.9" y="478.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="60.9" y="451.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="63.9" y="462.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="60.9" y="435.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="63.9" y="446.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="61.3" y="755.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.3" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="61.3" y="739.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.3" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="61.3" y="723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.3" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="61.3" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.3" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="61.3" y="691.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="64.3" y="702.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="61.3" y="675.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="64.3" y="686.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="659.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="64.3" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="64.3" y="654.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="627.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="64.3" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="64.3" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="595.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="64.3" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="64.3" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="61.3" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="64.3" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="61.3" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="64.3" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="61.3" y="531.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="64.3" y="542.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="61.7" y="691.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="61.7" y="675.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.7" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="61.7" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.7" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="61.7" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="654.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="61.7" y="627.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="64.7" y="638.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="61.7" y="611.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="64.7" y="622.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="595.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="64.7" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="64.7" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="563.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="64.7" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="64.7" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="531.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="64.7" y="542.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="515.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="64.7" y="526.0"></text>
</g>
<g>
<title>MethodFamily::determine_target(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="64.7" y="510.0"></text>
</g>
<g>
<title>MethodFamily::generate_method_message(Symbol*, Method*, Thread*) const (1 samples, 0.03%)</title><rect x="61.7" y="483.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="64.7" y="494.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="467.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="64.7" y="478.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="61.7" y="451.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="64.7" y="462.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="61.7" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="64.7" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="62.2" y="851.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.2" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="62.2" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="65.2" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="62.2" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="65.2" y="830.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="62.2" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="65.2" y="814.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="62.2" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="65.2" y="798.0"></text>
</g>
<g>
<title>MetamodelImpl.initialize (46 samples, 1.29%)</title><rect x="62.6" y="979.0" width="20.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.6" y="990.0"></text>
</g>
<g>
<title>AbstractEntityPersister.postInstantiate (18 samples, 0.50%)</title><rect x="62.6" y="963.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.6" y="974.0"></text>
</g>
<g>
<title>AbstractEntityPersister.createLoaders (17 samples, 0.48%)</title><rect x="62.6" y="947.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.6" y="958.0"></text>
</g>
<g>
<title>AbstractEntityPersister.createEntityLoader (12 samples, 0.34%)</title><rect x="62.6" y="931.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.6" y="942.0"></text>
</g>
<g>
<title>AbstractEntityPersister.createEntityLoader (11 samples, 0.31%)</title><rect x="62.6" y="915.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.6" y="926.0"></text>
</g>
<g>
<title>BatchingEntityLoaderBuilder.buildLoader (10 samples, 0.28%)</title><rect x="62.6" y="899.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.6" y="910.0"></text>
</g>
<g>
<title>AbstractBatchingEntityLoaderBuilder.buildNonBatchingLoader (10 samples, 0.28%)</title><rect x="62.6" y="883.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.6" y="894.0"></text>
</g>
<g>
<title>EntityLoader$Builder.byPrimaryKey (9 samples, 0.25%)</title><rect x="62.6" y="867.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.6" y="878.0"></text>
</g>
<g>
<title>EntityLoader$Builder.byUniqueKey (9 samples, 0.25%)</title><rect x="62.6" y="851.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.6" y="862.0"></text>
</g>
<g>
<title>EntityLoader.&lt;init&gt; (9 samples, 0.25%)</title><rect x="62.6" y="835.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.6" y="846.0"></text>
</g>
<g>
<title>EntityLoader.&lt;init&gt; (9 samples, 0.25%)</title><rect x="62.6" y="819.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.6" y="830.0"></text>
</g>
<g>
<title>AbstractLoadPlanBasedEntityLoader.&lt;init&gt; (9 samples, 0.25%)</title><rect x="62.6" y="803.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.6" y="814.0"></text>
</g>
<g>
<title>AbstractLoadPlanBasedEntityLoader.&lt;init&gt; (8 samples, 0.22%)</title><rect x="62.6" y="787.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.6" y="798.0"></text>
</g>
<g>
<title>BatchingLoadQueryDetailsFactory.makeEntityLoadQueryDetails (4 samples, 0.11%)</title><rect x="62.6" y="771.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.6" y="782.0"></text>
</g>
<g>
<title>EntityLoadQueryDetails.&lt;init&gt; (3 samples, 0.08%)</title><rect x="62.6" y="755.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.6" y="766.0"></text>
</g>
<g>
<title>AbstractLoadQueryDetails.generate (2 samples, 0.06%)</title><rect x="62.6" y="739.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.6" y="750.0"></text>
</g>
<g>
<title>1760378672.resolveResultSetProcessor (1 samples, 0.03%)</title><rect x="62.6" y="723.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="65.6" y="734.0"></text>
</g>
<g>
<title>ResultSetProcessorResolver.lambda$static$0 (1 samples, 0.03%)</title><rect x="62.6" y="707.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.6" y="718.0"></text>
</g>
<g>
<title>EntityLoadQueryDetails$EntityLoaderReaderCollectorImpl.buildRowReader (1 samples, 0.03%)</title><rect x="62.6" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.6" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="62.6" y="675.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.6" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="62.6" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="62.6" y="643.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.6" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="62.6" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.6" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="62.6" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.6" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="62.6" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.6" y="606.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="62.6" y="579.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.6" y="590.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="62.6" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.6" y="574.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="62.6" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="558.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="62.6" y="531.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.6" y="542.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="62.6" y="515.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="65.6" y="526.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="62.6" y="499.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="65.6" y="510.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="62.6" y="483.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="65.6" y="494.0"></text>
</g>
<g>
<title>AbstractLoadQueryDetails.applyKeyRestriction (1 samples, 0.03%)</title><rect x="63.1" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.1" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="63.1" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.1" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="63.1" y="691.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.1" y="702.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="63.1" y="675.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="66.1" y="686.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="63.1" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.1" y="670.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="63.1" y="643.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.1" y="654.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="63.1" y="627.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.1" y="638.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="63.1" y="611.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="66.1" y="622.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="63.1" y="595.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="66.1" y="606.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="63.1" y="579.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="66.1" y="590.0"></text>
</g>
<g>
<title>AliasResolutionContextImpl.generateEntityReferenceAliases (1 samples, 0.03%)</title><rect x="63.5" y="739.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="66.5" y="750.0"></text>
</g>
<g>
<title>AliasResolutionContextImpl.generateEntityReferenceAliases (1 samples, 0.03%)</title><rect x="63.5" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.5" y="734.0"></text>
</g>
<g>
<title>AliasResolutionContextImpl.createEntityAliases (1 samples, 0.03%)</title><rect x="63.5" y="707.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.5" y="718.0"></text>
</g>
<g>
<title>DefaultEntityAliases.&lt;init&gt; (1 samples, 0.03%)</title><rect x="63.5" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.5" y="702.0"></text>
</g>
<g>
<title>DefaultEntityAliases.&lt;init&gt; (1 samples, 0.03%)</title><rect x="63.5" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.5" y="686.0"></text>
</g>
<g>
<title>DefaultEntityAliases.determineKeyAlias (1 samples, 0.03%)</title><rect x="63.5" y="659.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.5" y="670.0"></text>
</g>
<g>
<title>DefaultEntityAliases.getUserProvidedAliases (1 samples, 0.03%)</title><rect x="63.5" y="643.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.5" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="63.5" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="66.5" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="63.5" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.5" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="63.5" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="66.5" y="606.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="63.5" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="66.5" y="590.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="63.5" y="563.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="66.5" y="574.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="63.5" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="66.5" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="63.5" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="66.5" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="63.5" y="515.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="66.5" y="526.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="63.5" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="66.5" y="510.0"></text>
</g>
<g>
<title>DictionaryEntry::contains_protection_domain(oopDesc*) const (1 samples, 0.03%)</title><rect x="63.5" y="483.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="66.5" y="494.0"></text>
</g>
<g>
<title>ProtectionDomainEntry::object_no_keepalive() (1 samples, 0.03%)</title><rect x="63.5" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="66.5" y="478.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="63.9" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.9" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="63.9" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.9" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="63.9" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.9" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="63.9" y="707.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.9" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="63.9" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.9" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="63.9" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.9" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="63.9" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.9" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="63.9" y="643.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.9" y="654.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="63.9" y="627.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="66.9" y="638.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="63.9" y="611.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="66.9" y="622.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="63.9" y="595.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="66.9" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="63.9" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="66.9" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="63.9" y="563.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="66.9" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="63.9" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="66.9" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="63.9" y="531.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="66.9" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="63.9" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="66.9" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="63.9" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.9" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="63.9" y="483.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="66.9" y="494.0"></text>
</g>
<g>
<title>MetamodelDrivenLoadPlanBuilder.buildRootEntityLoadPlan (3 samples, 0.08%)</title><rect x="64.4" y="771.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.4" y="782.0"></text>
</g>
<g>
<title>FetchStyleLoadPlanBuildingAssociationVisitationStrategy.buildLoadPlan (1 samples, 0.03%)</title><rect x="64.4" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.4" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="64.4" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="67.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="64.4" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="67.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="64.4" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="67.4" y="718.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="64.4" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="67.4" y="702.0"></text>
</g>
<g>
<title>klassVtable::fill_in_mirandas(int) (1 samples, 0.03%)</title><rect x="64.4" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="67.4" y="686.0"></text>
</g>
<g>
<title>klassVtable::get_mirandas(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Klass*&gt;*, bool) (1 samples, 0.03%)</title><rect x="64.4" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="67.4" y="670.0"></text>
</g>
<g>
<title>klassVtable::add_new_mirandas_to_lists(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="64.4" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.4" y="654.0"></text>
</g>
<g>
<title>klassVtable::is_miranda(Method*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="64.4" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="67.4" y="638.0"></text>
</g>
<g>
<title>MetamodelGraphWalker.visitEntity (1 samples, 0.03%)</title><rect x="64.8" y="755.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.8" y="766.0"></text>
</g>
<g>
<title>MetamodelGraphWalker.visitEntityDefinition (1 samples, 0.03%)</title><rect x="64.8" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.8" y="750.0"></text>
</g>
<g>
<title>AbstractLoadPlanBuildingAssociationVisitationStrategy.startingEntity (1 samples, 0.03%)</title><rect x="64.8" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.8" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="64.8" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.8" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="64.8" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.8" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="64.8" y="675.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.8" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="64.8" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.8" y="670.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="64.8" y="643.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="67.8" y="654.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="64.8" y="627.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="67.8" y="638.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="611.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="67.8" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="67.8" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="579.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.8" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="563.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.8" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.8" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="531.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="67.8" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="64.8" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="67.8" y="526.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="64.8" y="499.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="67.8" y="510.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="64.8" y="483.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="67.8" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="65.3" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.3" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="65.3" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.3" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="65.7" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.7" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="65.7" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.7" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="65.7" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.7" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="65.7" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.7" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="65.7" y="707.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="68.7" y="718.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="65.7" y="691.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="68.7" y="702.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="65.7" y="675.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="68.7" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="65.7" y="659.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="68.7" y="670.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="65.7" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="68.7" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="65.7" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="68.7" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="65.7" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="68.7" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="65.7" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="68.7" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="65.7" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="68.7" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="65.7" y="563.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="68.7" y="574.0"></text>
</g>
<g>
<title>ResultSetProcessorResolver.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="66.2" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.2" y="798.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="66.2" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.2" y="782.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="66.2" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.2" y="766.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="66.2" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.2" y="750.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="66.2" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.2" y="734.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="66.2" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.2" y="718.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="66.2" y="691.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="69.2" y="702.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="66.2" y="675.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.2" y="686.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="66.2" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.2" y="670.0"></text>
</g>
<g>
<title>MethodHandles.constant (1 samples, 0.03%)</title><rect x="66.2" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.2" y="654.0"></text>
</g>
<g>
<title>MethodHandle.bindTo (1 samples, 0.03%)</title><rect x="66.2" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.2" y="638.0"></text>
</g>
<g>
<title>MethodHandle.bindArgumentL (1 samples, 0.03%)</title><rect x="66.2" y="611.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.2" y="622.0"></text>
</g>
<g>
<title>BoundMethodHandle.bindArgumentL (1 samples, 0.03%)</title><rect x="66.2" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.2" y="606.0"></text>
</g>
<g>
<title>BoundMethodHandle.editor (1 samples, 0.03%)</title><rect x="66.2" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.2" y="590.0"></text>
</g>
<g>
<title>LambdaForm.editor (1 samples, 0.03%)</title><rect x="66.2" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.2" y="574.0"></text>
</g>
<g>
<title>LambdaFormEditor.lambdaFormEditor (1 samples, 0.03%)</title><rect x="66.2" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.2" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="66.6" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="69.6" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="66.6" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="69.6" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="69.6" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="69.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="69.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="69.6" y="798.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="69.6" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="69.6" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.6" y="750.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="69.6" y="734.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="69.6" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="66.6" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="69.6" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="66.6" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="69.6" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="66.6" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="69.6" y="670.0"></text>
</g>
<g>
<title>BatchingEntityLoaderBuilder.getBuilder (1 samples, 0.03%)</title><rect x="67.0" y="899.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.0" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="67.0" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.0" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="67.0" y="867.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.0" y="878.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="67.0" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.0" y="862.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="67.0" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.0" y="846.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="67.0" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.0" y="830.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="67.0" y="803.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.0" y="814.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="67.0" y="787.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="70.0" y="798.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="67.0" y="771.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="70.0" y="782.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="67.0" y="755.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="70.0" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="67.5" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.5" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="67.5" y="899.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.5" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="67.5" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.5" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="67.5" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.5" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="67.5" y="851.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="70.5" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="67.5" y="835.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="70.5" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="67.5" y="819.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="70.5" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="67.5" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="70.5" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="67.5" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="70.5" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="67.5" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="70.5" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="67.5" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="70.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="67.5" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="70.5" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="67.5" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="70.5" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="67.5" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="70.5" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="67.5" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="70.5" y="702.0"></text>
</g>
<g>
<title>CascadeEntityLoader.&lt;init&gt; (2 samples, 0.06%)</title><rect x="67.9" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.9" y="942.0"></text>
</g>
<g>
<title>CascadeEntityJoinWalker.&lt;init&gt; (1 samples, 0.03%)</title><rect x="67.9" y="915.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.9" y="926.0"></text>
</g>
<g>
<title>AbstractEntityJoinWalker.initAll (1 samples, 0.03%)</title><rect x="67.9" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.9" y="910.0"></text>
</g>
<g>
<title>AbstractEntityJoinWalker.initAll (1 samples, 0.03%)</title><rect x="67.9" y="883.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.9" y="894.0"></text>
</g>
<g>
<title>AbstractEntityJoinWalker.initStatementString (1 samples, 0.03%)</title><rect x="67.9" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.9" y="878.0"></text>
</g>
<g>
<title>AbstractEntityJoinWalker.initStatementString (1 samples, 0.03%)</title><rect x="67.9" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.9" y="862.0"></text>
</g>
<g>
<title>Select.toStatementString (1 samples, 0.03%)</title><rect x="67.9" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.9" y="846.0"></text>
</g>
<g>
<title>Dialect.transformSelectString (1 samples, 0.03%)</title><rect x="67.9" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.9" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="68.4" y="915.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="71.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="71.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="883.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="71.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="867.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="71.4" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="71.4" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="71.4" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="71.4" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="68.4" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="71.4" y="814.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="68.4" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="71.4" y="798.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="68.4" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="71.4" y="782.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="68.4" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="71.4" y="766.0"></text>
</g>
<g>
<title>CascadingActions.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="68.8" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.8" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="68.8" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.8" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="68.8" y="899.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.8" y="910.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="68.8" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.8" y="894.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="68.8" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.8" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="68.8" y="851.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.8" y="862.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="68.8" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.8" y="846.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="68.8" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.8" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="68.8" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.8" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="68.8" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.8" y="798.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="68.8" y="771.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="71.8" y="782.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="68.8" y="755.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="71.8" y="766.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (1 samples, 0.03%)</title><rect x="68.8" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="71.8" y="750.0"></text>
</g>
<g>
<title>AccessInternal::field_addr(oopDesc*, long) (1 samples, 0.03%)</title><rect x="68.8" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="71.8" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="69.3" y="931.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="72.3" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="915.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="72.3" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="72.3" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="72.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="72.3" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="72.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="72.3" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="72.3" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="72.3" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="72.3" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="72.3" y="782.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="69.3" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="72.3" y="766.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="69.3" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="72.3" y="750.0"></text>
</g>
<g>
<title>StackMapFrame::is_assignable_to(StackMapFrame const*, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="69.3" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="72.3" y="734.0"></text>
</g>
<g>
<title>VerificationType::is_reference_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="69.3" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="72.3" y="718.0"></text>
</g>
<g>
<title>VerificationType::resolve_and_check_assignability(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="72.3" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="72.3" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="69.3" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="72.3" y="670.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="69.3" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="72.3" y="654.0"></text>
</g>
<g>
<title>DictionaryEntry::contains_protection_domain(oopDesc*) const (1 samples, 0.03%)</title><rect x="69.3" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="72.3" y="638.0"></text>
</g>
<g>
<title>ProtectionDomainEntry::object_no_keepalive() (1 samples, 0.03%)</title><rect x="69.3" y="611.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="72.3" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="69.7" y="931.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.7" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="69.7" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.7" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="69.7" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.7" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="69.7" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.7" y="894.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="69.7" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.7" y="878.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="69.7" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="72.7" y="862.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="69.7" y="835.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="72.7" y="846.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="69.7" y="819.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="72.7" y="830.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="69.7" y="803.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="72.7" y="814.0"></text>
</g>
<g>
<title>AbstractEntityPersister.doLateInit (1 samples, 0.03%)</title><rect x="70.1" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.1" y="958.0"></text>
</g>
<g>
<title>AbstractEntityPersister.generateUpdateString (1 samples, 0.03%)</title><rect x="70.1" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.1" y="942.0"></text>
</g>
<g>
<title>AbstractEntityPersister.generateUpdateString (1 samples, 0.03%)</title><rect x="70.1" y="915.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.1" y="926.0"></text>
</g>
<g>
<title>AbstractEntityPersister.createUpdate (1 samples, 0.03%)</title><rect x="70.1" y="899.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.1" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="70.1" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.1" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="70.1" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.1" y="878.0"></text>
</g>
<g>
<title>HashSet.contains (1 samples, 0.03%)</title><rect x="70.1" y="851.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.1" y="862.0"></text>
</g>
<g>
<title>HashMap.containsKey (1 samples, 0.03%)</title><rect x="70.1" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.1" y="846.0"></text>
</g>
<g>
<title>HashMap.getNode (1 samples, 0.03%)</title><rect x="70.1" y="819.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.1" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="70.6" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="73.6" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="70.6" y="947.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="73.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="70.6" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="73.6" y="942.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="70.6" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="73.6" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="70.6" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="73.6" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="70.6" y="883.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="73.6" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="70.6" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="73.6" y="878.0"></text>
</g>
<g>
<title>VerificationType::is_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="70.6" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="73.6" y="862.0"></text>
</g>
<g>
<title>MetadataContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="71.0" y="963.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.0" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="71.0" y="947.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.0" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="71.0" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.0" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="71.0" y="915.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.0" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="71.0" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.0" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="71.0" y="883.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="74.0" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="71.0" y="867.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="74.0" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="71.0" y="851.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="74.0" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="71.0" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="74.0" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="71.0" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="74.0" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="71.0" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="74.0" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="71.0" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="74.0" y="798.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="71.0" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="74.0" y="782.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="71.0" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="74.0" y="766.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::push(InstanceKlass*, void*) (1 samples, 0.03%)</title><rect x="71.0" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="74.0" y="750.0"></text>
</g>
<g>
<title>MetadataContext.wrapUp (2 samples, 0.06%)</title><rect x="71.5" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.5" y="974.0"></text>
</g>
<g>
<title>MetadataContext.applyIdMetadata (2 samples, 0.06%)</title><rect x="71.5" y="947.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.5" y="958.0"></text>
</g>
<g>
<title>AbstractIdentifiableType$InFlightAccessImpl.applyIdAttribute (1 samples, 0.03%)</title><rect x="71.5" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.5" y="942.0"></text>
</g>
<g>
<title>AbstractManagedType$InFlightAccessImpl.addAttribute (1 samples, 0.03%)</title><rect x="71.5" y="915.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.5" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="71.5" y="899.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="71.5" y="883.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.5" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="71.5" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.5" y="878.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="71.5" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.5" y="862.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="71.5" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.5" y="846.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="71.5" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.5" y="830.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="71.5" y="803.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="74.5" y="814.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="71.5" y="787.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="74.5" y="798.0"></text>
</g>
<g>
<title>AttributeFactory.buildIdAttribute (1 samples, 0.03%)</title><rect x="71.9" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.9" y="942.0"></text>
</g>
<g>
<title>AttributeFactory.determineAttributeMetadata (1 samples, 0.03%)</title><rect x="71.9" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.9" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="71.9" y="899.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="71.9" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="74.9" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="71.9" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="74.9" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="71.9" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="74.9" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="71.9" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="74.9" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="71.9" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="74.9" y="830.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="71.9" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="74.9" y="814.0"></text>
</g>
<g>
<title>MetamodelImpl.locateOrBuildEntityType (3 samples, 0.08%)</title><rect x="72.4" y="963.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.4" y="974.0"></text>
</g>
<g>
<title>MetamodelImpl.buildEntityType (3 samples, 0.08%)</title><rect x="72.4" y="947.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.4" y="958.0"></text>
</g>
<g>
<title>MetamodelImpl.locateOrBuildMappedSuperclassType (3 samples, 0.08%)</title><rect x="72.4" y="931.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.4" y="942.0"></text>
</g>
<g>
<title>MetamodelImpl.buildMappedSuperclassType (3 samples, 0.08%)</title><rect x="72.4" y="915.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.4" y="926.0"></text>
</g>
<g>
<title>MappedSuperclassTypeImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="72.4" y="899.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.4" y="910.0"></text>
</g>
<g>
<title>AbstractIdentifiableType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="72.4" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.4" y="894.0"></text>
</g>
<g>
<title>AbstractManagedType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="72.4" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.4" y="878.0"></text>
</g>
<g>
<title>AbstractIdentifiableType.createInFlightAccess (1 samples, 0.03%)</title><rect x="72.4" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.4" y="862.0"></text>
</g>
<g>
<title>AbstractIdentifiableType.createInFlightAccess (1 samples, 0.03%)</title><rect x="72.4" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.4" y="846.0"></text>
</g>
<g>
<title>AbstractManagedType.createInFlightAccess (1 samples, 0.03%)</title><rect x="72.4" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.4" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="72.4" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.4" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="72.4" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.4" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="72.4" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="75.4" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="72.4" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.4" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="72.4" y="739.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="75.4" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="72.4" y="723.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="75.4" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="72.4" y="707.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="75.4" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="72.4" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="75.4" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="72.4" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.4" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="72.4" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="75.4" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="72.4" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="75.4" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="72.4" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="75.4" y="638.0"></text>
</g>
<g>
<title>JavaClasses::get_injected(Symbol*, int*) (1 samples, 0.03%)</title><rect x="72.4" y="611.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="75.4" y="622.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="72.4" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="75.4" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="72.8" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.8" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="72.8" y="883.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.8" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="72.8" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.8" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="72.8" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.8" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="72.8" y="835.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="75.8" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="72.8" y="819.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="75.8" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="803.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="75.8" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="75.8" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="75.8" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="75.8" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.8" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="75.8" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="72.8" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="75.8" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="72.8" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="75.8" y="702.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.03%)</title><rect x="72.8" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="75.8" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="73.2" y="835.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.2" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="73.2" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.2" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="73.2" y="803.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.2" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="73.2" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.2" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="73.2" y="771.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="76.2" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="73.2" y="755.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="76.2" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="739.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="76.2" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="76.2" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="76.2" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="76.2" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="675.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="76.2" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="76.2" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="73.2" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="76.2" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="73.2" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="76.2" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="73.2" y="611.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="76.2" y="622.0"></text>
</g>
<g>
<title>PersisterFactoryImpl.createEntityPersister (20 samples, 0.56%)</title><rect x="73.7" y="963.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.7" y="974.0"></text>
</g>
<g>
<title>PersisterFactoryImpl.createEntityPersister (15 samples, 0.42%)</title><rect x="73.7" y="947.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="76.7" y="958.0"></text>
</g>
<g>
<title>Class.getConstructor (3 samples, 0.08%)</title><rect x="73.7" y="931.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="76.7" y="942.0"></text>
</g>
<g>
<title>Class.getConstructor0 (3 samples, 0.08%)</title><rect x="73.7" y="915.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.7" y="926.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (3 samples, 0.08%)</title><rect x="73.7" y="899.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.7" y="910.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (3 samples, 0.08%)</title><rect x="73.7" y="883.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.7" y="894.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (2 samples, 0.06%)</title><rect x="73.7" y="867.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="76.7" y="878.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (2 samples, 0.06%)</title><rect x="73.7" y="851.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="76.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (2 samples, 0.06%)</title><rect x="73.7" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="76.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="73.7" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="76.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="73.7" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="76.7" y="814.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="73.7" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="76.7" y="798.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="73.7" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="76.7" y="782.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="73.7" y="755.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="76.7" y="766.0"></text>
</g>
<g>
<title>JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="73.7" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="76.7" y="750.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.03%)</title><rect x="73.7" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="76.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="73.7" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="76.7" y="718.0"></text>
</g>
<g>
<title>Method::make_jmethod_id(ClassLoaderData*, Method*) (1 samples, 0.03%)</title><rect x="73.7" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="76.7" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="73.7" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="76.7" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="73.7" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="76.7" y="670.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="74.1" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="77.1" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="74.1" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="77.1" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="74.1" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="77.1" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="74.1" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="77.1" y="750.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="74.1" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="77.1" y="734.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.03%)</title><rect x="74.1" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="77.1" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="74.6" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.6" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="74.6" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.6" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="74.6" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.6" y="846.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="74.6" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.6" y="830.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="74.6" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.6" y="814.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="74.6" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.6" y="798.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="74.6" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.6" y="782.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="74.6" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.6" y="766.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="74.6" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.6" y="750.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="74.6" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.6" y="734.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="74.6" y="707.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="77.6" y="718.0"></text>
</g>
<g>
<title>Constructor.newInstance (12 samples, 0.34%)</title><rect x="75.0" y="931.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.0" y="942.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (12 samples, 0.34%)</title><rect x="75.0" y="915.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.0" y="926.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (12 samples, 0.34%)</title><rect x="75.0" y="899.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.0" y="910.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (12 samples, 0.34%)</title><rect x="75.0" y="883.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.0" y="894.0"></text>
</g>
<g>
<title>SingleTableEntityPersister.&lt;init&gt; (12 samples, 0.34%)</title><rect x="75.0" y="867.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.0" y="878.0"></text>
</g>
<g>
<title>AbstractEntityPersister.&lt;init&gt; (10 samples, 0.28%)</title><rect x="75.0" y="851.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.0" y="862.0"></text>
</g>
<g>
<title>AbstractEntityPersister.isInstrumented (1 samples, 0.03%)</title><rect x="75.0" y="835.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.0" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="75.0" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="78.0" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="75.0" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="78.0" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="75.0" y="787.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="78.0" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="75.0" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="78.0" y="782.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="75.0" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="78.0" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="75.0" y="739.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="78.0" y="750.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="75.0" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="78.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="75.0" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="78.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="75.0" y="691.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="78.0" y="702.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="75.0" y="675.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="78.0" y="686.0"></text>
</g>
<g>
<title>EntityMetamodel.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="75.4" y="835.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.4" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="75.4" y="819.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.4" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="75.4" y="803.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.4" y="814.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="75.4" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.4" y="798.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="75.4" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.4" y="782.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="75.4" y="755.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.4" y="766.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="75.4" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.4" y="750.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="75.4" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.4" y="734.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="75.4" y="707.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.4" y="718.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="75.4" y="691.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.4" y="702.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="75.4" y="675.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="78.4" y="686.0"></text>
</g>
<g>
<title>EntityMetamodel.&lt;init&gt; (8 samples, 0.22%)</title><rect x="75.9" y="835.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.9" y="846.0"></text>
</g>
<g>
<title>EntityTuplizerFactory.constructDefaultTuplizer (3 samples, 0.08%)</title><rect x="75.9" y="819.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.9" y="830.0"></text>
</g>
<g>
<title>EntityTuplizerFactory.constructTuplizer (3 samples, 0.08%)</title><rect x="75.9" y="803.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.9" y="814.0"></text>
</g>
<g>
<title>Constructor.newInstance (3 samples, 0.08%)</title><rect x="75.9" y="787.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.9" y="798.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.08%)</title><rect x="75.9" y="771.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.9" y="782.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (3 samples, 0.08%)</title><rect x="75.9" y="755.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.9" y="766.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (3 samples, 0.08%)</title><rect x="75.9" y="739.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.9" y="750.0"></text>
</g>
<g>
<title>PojoEntityTuplizer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="75.9" y="723.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.9" y="734.0"></text>
</g>
<g>
<title>AbstractEntityTuplizer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="75.9" y="707.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.9" y="718.0"></text>
</g>
<g>
<title>PojoEntityTuplizer.buildPropertyGetter (1 samples, 0.03%)</title><rect x="75.9" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.9" y="702.0"></text>
</g>
<g>
<title>Property.getGetter (1 samples, 0.03%)</title><rect x="75.9" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.9" y="686.0"></text>
</g>
<g>
<title>PropertyAccessStrategyEnhancedImpl.buildPropertyAccess (1 samples, 0.03%)</title><rect x="75.9" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.9" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="75.9" y="643.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.9" y="654.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="75.9" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.9" y="638.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="75.9" y="611.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.9" y="622.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="75.9" y="595.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.9" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="75.9" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.9" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="75.9" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.9" y="574.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="75.9" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.9" y="558.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="75.9" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.9" y="542.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="75.9" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.9" y="526.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="75.9" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.9" y="510.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="75.9" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.9" y="494.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="75.9" y="467.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="78.9" y="478.0"></text>
</g>
<g>
<title>java_lang_Class::name(Handle, Thread*) (1 samples, 0.03%)</title><rect x="75.9" y="451.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="78.9" y="462.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (1 samples, 0.03%)</title><rect x="75.9" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="78.9" y="446.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="75.9" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="78.9" y="430.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.03%)</title><rect x="75.9" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="78.9" y="414.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupJchar, StringTableGet&gt;(Thread*, StringTableLookupJchar&amp;, StringTableGet&amp;, bool*) (1 samples, 0.03%)</title><rect x="75.9" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.9" y="398.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)2&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupJchar&gt;(Thread*, StringTableLookupJchar&amp;, bool*) (1 samples, 0.03%)</title><rect x="75.9" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="78.9" y="382.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupJchar&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupJchar&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="75.9" y="355.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="78.9" y="366.0"></text>
</g>
<g>
<title>StringTableLookupJchar::equals(WeakHandle&lt;(WeakHandleType)2&gt;*, bool*) (1 samples, 0.03%)</title><rect x="75.9" y="339.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="78.9" y="350.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, unsigned short*, int) (1 samples, 0.03%)</title><rect x="75.9" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="78.9" y="334.0"></text>
</g>
<g>
<title>PojoEntityTuplizer.buildPropertySetter (1 samples, 0.03%)</title><rect x="76.3" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.3" y="702.0"></text>
</g>
<g>
<title>Property.getSetter (1 samples, 0.03%)</title><rect x="76.3" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.3" y="686.0"></text>
</g>
<g>
<title>PropertyAccessStrategyEnhancedImpl.buildPropertyAccess (1 samples, 0.03%)</title><rect x="76.3" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.3" y="670.0"></text>
</g>
<g>
<title>PropertyAccessEnhancedImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="76.3" y="643.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.3" y="654.0"></text>
</g>
<g>
<title>PropertyAccessMixedImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="76.3" y="627.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.3" y="638.0"></text>
</g>
<g>
<title>PropertyAccessMixedImpl.getAccessType (1 samples, 0.03%)</title><rect x="76.3" y="611.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.3" y="622.0"></text>
</g>
<g>
<title>PropertyAccessMixedImpl.fieldOrNull (1 samples, 0.03%)</title><rect x="76.3" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.3" y="606.0"></text>
</g>
<g>
<title>ReflectHelper.findField (1 samples, 0.03%)</title><rect x="76.3" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.3" y="590.0"></text>
</g>
<g>
<title>ReflectHelper.locateField (1 samples, 0.03%)</title><rect x="76.3" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.3" y="574.0"></text>
</g>
<g>
<title>Class.getDeclaredField (1 samples, 0.03%)</title><rect x="76.3" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.3" y="558.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredFields (1 samples, 0.03%)</title><rect x="76.3" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.3" y="542.0"></text>
</g>
<g>
<title>PojoEntityTuplizer.buildProxyFactory (1 samples, 0.03%)</title><rect x="76.8" y="691.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.8" y="702.0"></text>
</g>
<g>
<title>PojoEntityTuplizer.buildProxyFactoryInternal (1 samples, 0.03%)</title><rect x="76.8" y="675.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="686.0"></text>
</g>
<g>
<title>QuarkusRuntimeProxyFactoryFactory.buildProxyFactory (1 samples, 0.03%)</title><rect x="76.8" y="659.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.8" y="670.0"></text>
</g>
<g>
<title>QuarkusProxyFactory.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="76.8" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="654.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="76.8" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="638.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="76.8" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.8" y="622.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="76.8" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="606.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="76.8" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.8" y="590.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="76.8" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.8" y="574.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="76.8" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.8" y="558.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="76.8" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.8" y="542.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="76.8" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.8" y="526.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="76.8" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.8" y="510.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="76.8" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.8" y="494.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="76.8" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.8" y="478.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="76.8" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.8" y="462.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="76.8" y="435.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.8" y="446.0"></text>
</g>
<g>
<title>DefaultLoggerFinder.isSystem (1 samples, 0.03%)</title><rect x="76.8" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.8" y="430.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="76.8" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.8" y="414.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.03%)</title><rect x="76.8" y="387.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="79.8" y="398.0"></text>
</g>
<g>
<title>PropertyFactory.buildEntityBasedAttribute (2 samples, 0.06%)</title><rect x="77.2" y="819.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.2" y="830.0"></text>
</g>
<g>
<title>BaselineAttributeInformation$Builder.createInformation (1 samples, 0.03%)</title><rect x="77.2" y="803.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.2" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="77.2" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="80.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="77.2" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="80.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="77.2" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.2" y="766.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="77.2" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="80.2" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="77.2" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="80.2" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="77.2" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="80.2" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="77.7" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="80.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="77.7" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.7" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="77.7" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="80.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="77.7" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="80.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="77.7" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="80.7" y="750.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="77.7" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="80.7" y="734.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="77.7" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="80.7" y="718.0"></text>
</g>
<g>
<title>jvmti_Deallocate(_jvmtiEnv*, unsigned char*) (1 samples, 0.03%)</title><rect x="77.7" y="691.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="80.7" y="702.0"></text>
</g>
<g>
<title>JvmtiEnv::Deallocate(unsigned char*) (1 samples, 0.03%)</title><rect x="77.7" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="80.7" y="686.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="77.7" y="659.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="80.7" y="670.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="77.7" y="643.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="80.7" y="654.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="77.7" y="627.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="80.7" y="638.0"></text>
</g>
<g>
<title>PropertyFactory.buildIdentifierAttribute (3 samples, 0.08%)</title><rect x="78.1" y="819.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.1" y="830.0"></text>
</g>
<g>
<title>PropertyFactory.getGetter (2 samples, 0.06%)</title><rect x="78.1" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.1" y="814.0"></text>
</g>
<g>
<title>PropertyAccessStrategyFieldImpl.buildPropertyAccess (1 samples, 0.03%)</title><rect x="78.1" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.1" y="798.0"></text>
</g>
<g>
<title>PropertyAccessFieldImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="78.1" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.1" y="782.0"></text>
</g>
<g>
<title>SetterFieldImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="78.1" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.1" y="766.0"></text>
</g>
<g>
<title>ReflectHelper.setterMethodOrNull (1 samples, 0.03%)</title><rect x="78.1" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.1" y="750.0"></text>
</g>
<g>
<title>ReflectHelper.setterOrNull (1 samples, 0.03%)</title><rect x="78.1" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.1" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.1" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.1" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.1" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.1" y="702.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.1" y="675.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.1" y="686.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.1" y="659.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.1" y="670.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.1" y="643.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.1" y="654.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="78.1" y="627.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.1" y="638.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="78.1" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.1" y="622.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="78.1" y="595.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.1" y="606.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="78.1" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.1" y="590.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="78.1" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.1" y="574.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="78.1" y="547.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="81.1" y="558.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="78.1" y="531.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="81.1" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="515.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.1" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="81.1" y="510.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="483.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="81.1" y="494.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="467.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="81.1" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.1" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="81.1" y="446.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="81.1" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="78.1" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.1" y="414.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="78.1" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="81.1" y="398.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="78.1" y="371.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="81.1" y="382.0"></text>
</g>
<g>
<title>PropertyAccessStrategyResolverStandardImpl.resolvePropertyAccessStrategy (1 samples, 0.03%)</title><rect x="78.5" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.5" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.5" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.5" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="78.5" y="755.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="78.5" y="739.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.5" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="78.5" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.5" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="78.5" y="707.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="81.5" y="718.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="78.5" y="691.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="81.5" y="702.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="78.5" y="675.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="81.5" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="78.5" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="81.5" y="670.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="78.5" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="81.5" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="78.5" y="627.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="81.5" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="78.5" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="81.5" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="78.5" y="595.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="81.5" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="78.5" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="81.5" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="78.5" y="563.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="81.5" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="78.5" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="81.5" y="558.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="79.0" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.0" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="79.0" y="787.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.0" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="79.0" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.0" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="79.0" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.0" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="79.0" y="739.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="82.0" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="79.0" y="723.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="82.0" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="79.0" y="707.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="82.0" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="79.0" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.0" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="79.0" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.0" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="79.0" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.0" y="670.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="79.0" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="82.0" y="654.0"></text>
</g>
<g>
<title>klassVtable::needs_new_vtable_entry(methodHandle const&amp;, Klass const*, Handle, Symbol*, AccessFlags, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="79.0" y="627.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="82.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="79.0" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="82.0" y="622.0"></text>
</g>
<g>
<title>AbstractEntityPersister.initLockers (2 samples, 0.06%)</title><rect x="79.4" y="851.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.4" y="862.0"></text>
</g>
<g>
<title>AbstractEntityPersister.generateLocker (2 samples, 0.06%)</title><rect x="79.4" y="835.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.4" y="846.0"></text>
</g>
<g>
<title>Dialect.getLockingStrategy (2 samples, 0.06%)</title><rect x="79.4" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="79.4" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="82.4" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="79.4" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="82.4" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="79.4" y="771.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="82.4" y="782.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="79.4" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.4" y="766.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="79.4" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="82.4" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="79.9" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.9" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="79.9" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.9" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="79.9" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.9" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="79.9" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.9" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="79.9" y="739.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="82.9" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="79.9" y="723.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="82.9" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="79.9" y="707.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="82.9" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="79.9" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.9" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="79.9" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="82.9" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="79.9" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="82.9" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="79.9" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.9" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="79.9" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="82.9" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="79.9" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="82.9" y="622.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.03%)</title><rect x="79.9" y="595.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="82.9" y="606.0"></text>
</g>
<g>
<title>StandardPersisterClassResolver.getEntityPersisterClass (5 samples, 0.14%)</title><rect x="80.3" y="947.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.3" y="958.0"></text>
</g>
<g>
<title>StandardPersisterClassResolver.singleTableEntityPersister (5 samples, 0.14%)</title><rect x="80.3" y="931.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.3" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="80.3" y="915.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.3" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="80.3" y="899.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.3" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (5 samples, 0.14%)</title><rect x="80.3" y="883.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.3" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (5 samples, 0.14%)</title><rect x="80.3" y="867.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.3" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="80.3" y="851.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="80.3" y="835.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.3" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (4 samples, 0.11%)</title><rect x="80.3" y="819.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.3" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (4 samples, 0.11%)</title><rect x="80.3" y="803.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.3" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="80.3" y="787.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="83.3" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="80.3" y="771.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="83.3" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="80.3" y="755.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="83.3" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="80.3" y="739.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="83.3" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="80.3" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="83.3" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="80.3" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="83.3" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="80.3" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="83.3" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="80.3" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="83.3" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="80.3" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="83.3" y="670.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="80.3" y="643.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="83.3" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="80.8" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="83.8" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="80.8" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="83.8" y="702.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="80.8" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="83.8" y="686.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="80.8" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="83.8" y="670.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="80.8" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="83.8" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::find_method(Symbol const*, Symbol const*) const (1 samples, 0.03%)</title><rect x="80.8" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="83.8" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="80.8" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="83.8" y="622.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="80.8" y="595.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="83.8" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="81.2" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.2" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="81.2" y="771.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.2" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="81.2" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.2" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="81.2" y="739.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.2" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="81.2" y="723.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="84.2" y="734.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="81.2" y="707.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="84.2" y="718.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="81.2" y="691.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="84.2" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="81.2" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="84.2" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="81.2" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.2" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (2 samples, 0.06%)</title><rect x="81.2" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="84.2" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (2 samples, 0.06%)</title><rect x="81.2" y="627.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="84.2" y="638.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (2 samples, 0.06%)</title><rect x="81.2" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="84.2" y="622.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="81.2" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="84.2" y="606.0"></text>
</g>
<g>
<title>MethodFamily::determine_target(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="81.6" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="84.6" y="606.0"></text>
</g>
<g>
<title>MethodFamily::generate_method_message(Symbol*, Method*, Thread*) const (1 samples, 0.03%)</title><rect x="81.6" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="84.6" y="590.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="81.6" y="563.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="84.6" y="574.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(int, unsigned char*, int, unsigned int, bool, Thread*) (1 samples, 0.03%)</title><rect x="81.6" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="84.6" y="558.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="81.6" y="531.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="84.6" y="542.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="82.1" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.1" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="82.1" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.1" y="814.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="82.1" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.1" y="798.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="82.1" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.1" y="782.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="82.1" y="755.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="85.1" y="766.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="82.1" y="739.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="85.1" y="750.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="82.1" y="723.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="85.1" y="734.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.getService (1 samples, 0.03%)</title><rect x="82.5" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.5" y="974.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (1 samples, 0.03%)</title><rect x="82.5" y="947.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.5" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (1 samples, 0.03%)</title><rect x="82.5" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.5" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (1 samples, 0.03%)</title><rect x="82.5" y="915.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.5" y="926.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.applyInjections (1 samples, 0.03%)</title><rect x="82.5" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.5" y="910.0"></text>
</g>
<g>
<title>Class.getMethods (1 samples, 0.03%)</title><rect x="82.5" y="883.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.5" y="894.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (1 samples, 0.03%)</title><rect x="82.5" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.5" y="878.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="82.5" y="851.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.5" y="862.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="82.5" y="835.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="82.5" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.5" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="82.5" y="803.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.5" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="82.5" y="787.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.5" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="82.5" y="771.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.5" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="82.5" y="755.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="85.5" y="766.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="82.5" y="739.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="85.5" y="750.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="723.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="85.5" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="85.5" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="85.5" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="85.5" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="85.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="85.5" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="85.5" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="611.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="85.5" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="595.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="85.5" y="606.0"></text>
</g>
<g>
<title>java_lang_String::create_from_symbol(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="85.5" y="590.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="563.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="85.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="82.5" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="85.5" y="558.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="83.0" y="979.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.0" y="990.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="83.0" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.0" y="974.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="83.0" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.0" y="958.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="83.0" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.0" y="942.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="83.0" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.0" y="926.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="83.0" y="899.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="86.0" y="910.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="83.0" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.0" y="894.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="83.0" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.0" y="878.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="83.0" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.0" y="862.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="83.0" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.0" y="846.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="83.0" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.0" y="830.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="83.0" y="803.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="86.0" y="814.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="83.0" y="787.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="86.0" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="83.0" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="86.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="83.0" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="86.0" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="83.0" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="86.0" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="83.0" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.0" y="734.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="83.0" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="86.0" y="718.0"></text>
</g>
<g>
<title>Rewriter::~Rewriter() (1 samples, 0.03%)</title><rect x="83.0" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="86.0" y="702.0"></text>
</g>
<g>
<title>QueryPlanCache.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="83.4" y="979.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="990.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="83.4" y="963.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.4" y="974.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="83.4" y="947.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.4" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="83.4" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.4" y="942.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="83.4" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.4" y="926.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="83.4" y="899.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.4" y="910.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="83.4" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.4" y="894.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="83.4" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.4" y="878.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="83.4" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.4" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="83.4" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="83.4" y="819.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.4" y="830.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="83.4" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.4" y="814.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="83.4" y="787.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.4" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="83.4" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.4" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="83.4" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="83.4" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.4" y="750.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="83.4" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.4" y="734.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="83.4" y="707.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.4" y="718.0"></text>
</g>
<g>
<title>JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="83.4" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="702.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="83.4" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.4" y="686.0"></text>
</g>
<g>
<title>JarFile.getVersionedEntry (1 samples, 0.03%)</title><rect x="83.4" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.4" y="670.0"></text>
</g>
<g>
<title>JarFile.getEntry0 (1 samples, 0.03%)</title><rect x="83.4" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.4" y="654.0"></text>
</g>
<g>
<title>ZipFile$1.getEntry (1 samples, 0.03%)</title><rect x="83.4" y="627.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.4" y="638.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="83.4" y="611.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.4" y="622.0"></text>
</g>
<g>
<title>ZipFile$Source.getEntryPos (1 samples, 0.03%)</title><rect x="83.4" y="595.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.4" y="606.0"></text>
</g>
<g>
<title>QueryPlanCache.&lt;init&gt; (3 samples, 0.08%)</title><rect x="83.8" y="979.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.8" y="990.0"></text>
</g>
<g>
<title>BoundedConcurrentHashMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="83.8" y="963.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.8" y="974.0"></text>
</g>
<g>
<title>BoundedConcurrentHashMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="83.8" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.8" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="83.8" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="86.8" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="83.8" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.8" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="86.8" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="86.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="86.8" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="86.8" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="86.8" y="846.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.8" y="830.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="86.8" y="814.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="83.8" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="86.8" y="798.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="83.8" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.8" y="782.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.getService (2 samples, 0.06%)</title><rect x="84.3" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.3" y="974.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (2 samples, 0.06%)</title><rect x="84.3" y="947.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.3" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (2 samples, 0.06%)</title><rect x="84.3" y="931.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.3" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (2 samples, 0.06%)</title><rect x="84.3" y="915.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.3" y="926.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.applyInjections (2 samples, 0.06%)</title><rect x="84.3" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.3" y="910.0"></text>
</g>
<g>
<title>Class.getMethods (2 samples, 0.06%)</title><rect x="84.3" y="883.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.3" y="894.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (2 samples, 0.06%)</title><rect x="84.3" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.3" y="878.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="84.3" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.3" y="862.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="84.3" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.3" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.3" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.3" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.3" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.3" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="84.3" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.3" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="84.3" y="771.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.3" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.3" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.3" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.3" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.3" y="750.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="84.3" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.3" y="734.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="84.3" y="707.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.3" y="718.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="84.3" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.3" y="702.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="84.3" y="675.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.3" y="686.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="84.3" y="659.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="670.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="84.3" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.3" y="654.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="84.3" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.3" y="638.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="84.3" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.3" y="622.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="84.3" y="595.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="87.3" y="606.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="84.3" y="579.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="87.3" y="590.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="84.3" y="563.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="87.3" y="574.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (1 samples, 0.03%)</title><rect x="84.7" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.7" y="862.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="84.7" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.7" y="846.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="84.7" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.7" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.7" y="803.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.7" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.7" y="787.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.7" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="84.7" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.7" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="84.7" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.7" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.7" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.7" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="84.7" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.7" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="84.7" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.7" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="84.7" y="691.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.7" y="702.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="84.7" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="87.7" y="686.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="84.7" y="659.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="87.7" y="670.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="643.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="87.7" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="627.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="87.7" y="638.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="611.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="87.7" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="595.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="87.7" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="87.7" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="87.7" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="84.7" y="547.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="87.7" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="84.7" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.7" y="542.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="84.7" y="515.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="87.7" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="85.2" y="979.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.2" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="85.2" y="963.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.2" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="85.2" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.2" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="85.2" y="931.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.2" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="85.2" y="915.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="88.2" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="85.2" y="899.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="88.2" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="883.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="88.2" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="88.2" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="88.2" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="88.2" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="88.2" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="88.2" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="88.2" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="85.2" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="88.2" y="782.0"></text>
</g>
<g>
<title>JarResource.getResourceData (3 samples, 0.08%)</title><rect x="85.6" y="947.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.6" y="958.0"></text>
</g>
<g>
<title>InflaterInputStream.read (3 samples, 0.08%)</title><rect x="85.6" y="931.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.6" y="942.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="85.6" y="915.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.6" y="926.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="85.6" y="899.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.6" y="910.0"></text>
</g>
<g>
<title>checkInflateStatus (1 samples, 0.03%)</title><rect x="85.6" y="883.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="88.6" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (2 samples, 0.06%)</title><rect x="86.1" y="915.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.1" y="926.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (2 samples, 0.06%)</title><rect x="86.1" y="899.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.1" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (2 samples, 0.06%)</title><rect x="86.1" y="883.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="894.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (2 samples, 0.06%)</title><rect x="86.1" y="867.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.1" y="878.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (2 samples, 0.06%)</title><rect x="86.1" y="851.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.1" y="862.0"></text>
</g>
<g>
<title>RandomAccessFile.read (2 samples, 0.06%)</title><rect x="86.1" y="835.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.1" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (2 samples, 0.06%)</title><rect x="86.1" y="819.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="830.0"></text>
</g>
<g>
<title>readBytes (2 samples, 0.06%)</title><rect x="86.1" y="803.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="89.1" y="814.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="86.1" y="787.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="89.1" y="798.0"></text>
</g>
<g>
<title>SchemaManagementToolCoordinator.process (23 samples, 0.64%)</title><rect x="86.9" y="979.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.9" y="990.0"></text>
</g>
<g>
<title>SchemaManagementToolCoordinator.performDatabaseAction (22 samples, 0.62%)</title><rect x="86.9" y="963.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.9" y="974.0"></text>
</g>
<g>
<title>HibernateSchemaManagementTool.getSchemaDropper (1 samples, 0.03%)</title><rect x="86.9" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.9" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="86.9" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.9" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="86.9" y="915.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.9" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="86.9" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.9" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="86.9" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.9" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="86.9" y="867.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="89.9" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="86.9" y="851.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="89.9" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="835.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="89.9" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="89.9" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="89.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.9" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="89.9" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="89.9" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="89.9" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="89.9" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="86.9" y="707.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="89.9" y="718.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="86.9" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="89.9" y="702.0"></text>
</g>
<g>
<title>SchemaCreatorImpl.doCreation (1 samples, 0.03%)</title><rect x="87.4" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.4" y="958.0"></text>
</g>
<g>
<title>HibernateSchemaManagementTool.buildGenerationTargets (1 samples, 0.03%)</title><rect x="87.4" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.4" y="942.0"></text>
</g>
<g>
<title>RegularEnumSet.size (1 samples, 0.03%)</title><rect x="87.4" y="915.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.4" y="926.0"></text>
</g>
<g>
<title>SchemaDropperImpl.doDrop (20 samples, 0.56%)</title><rect x="87.8" y="947.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.8" y="958.0"></text>
</g>
<g>
<title>HibernateSchemaManagementTool.buildGenerationTargets (13 samples, 0.36%)</title><rect x="87.8" y="931.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.8" y="942.0"></text>
</g>
<g>
<title>HibernateSchemaManagementTool.getDdlTransactionIsolator (13 samples, 0.36%)</title><rect x="87.8" y="915.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.8" y="926.0"></text>
</g>
<g>
<title>JtaTransactionCoordinatorBuilderImpl.buildDdlTransactionIsolator (12 samples, 0.34%)</title><rect x="87.8" y="899.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.8" y="910.0"></text>
</g>
<g>
<title>DdlTransactionIsolatorJtaImpl.&lt;init&gt; (12 samples, 0.34%)</title><rect x="87.8" y="883.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.8" y="894.0"></text>
</g>
<g>
<title>JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection (6 samples, 0.17%)</title><rect x="87.8" y="867.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.8" y="878.0"></text>
</g>
<g>
<title>QuarkusConnectionProvider.getConnection (6 samples, 0.17%)</title><rect x="87.8" y="851.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.8" y="862.0"></text>
</g>
<g>
<title>DataSource.getConnection (6 samples, 0.17%)</title><rect x="87.8" y="835.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.8" y="846.0"></text>
</g>
<g>
<title>ConnectionPool.getConnection (6 samples, 0.17%)</title><rect x="87.8" y="819.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.8" y="830.0"></text>
</g>
<g>
<title>ConnectionHandler.newConnectionWrapper (5 samples, 0.14%)</title><rect x="87.8" y="803.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.8" y="814.0"></text>
</g>
<g>
<title>ConnectionWrapper.&lt;clinit&gt; (4 samples, 0.11%)</title><rect x="87.8" y="787.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.8" y="798.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (4 samples, 0.11%)</title><rect x="87.8" y="771.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.8" y="782.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (4 samples, 0.11%)</title><rect x="87.8" y="755.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.8" y="766.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (4 samples, 0.11%)</title><rect x="87.8" y="739.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.8" y="750.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (4 samples, 0.11%)</title><rect x="87.8" y="723.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.8" y="734.0"></text>
</g>
<g>
<title>1615056168.apply (4 samples, 0.11%)</title><rect x="87.8" y="707.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="90.8" y="718.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (4 samples, 0.11%)</title><rect x="87.8" y="691.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.8" y="702.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (4 samples, 0.11%)</title><rect x="87.8" y="675.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.8" y="686.0"></text>
</g>
<g>
<title>Class.getConstructor (3 samples, 0.08%)</title><rect x="87.8" y="659.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.8" y="670.0"></text>
</g>
<g>
<title>Class.getConstructor0 (2 samples, 0.06%)</title><rect x="87.8" y="643.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.8" y="654.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (2 samples, 0.06%)</title><rect x="87.8" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.8" y="638.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (2 samples, 0.06%)</title><rect x="87.8" y="611.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.8" y="622.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (2 samples, 0.06%)</title><rect x="87.8" y="595.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="90.8" y="606.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (2 samples, 0.06%)</title><rect x="87.8" y="579.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="90.8" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (2 samples, 0.06%)</title><rect x="87.8" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="90.8" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="87.8" y="547.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="90.8" y="558.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (2 samples, 0.06%)</title><rect x="87.8" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="90.8" y="542.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="87.8" y="515.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.8" y="526.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (2 samples, 0.06%)</title><rect x="87.8" y="499.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="90.8" y="510.0"></text>
</g>
<g>
<title>verify_method (2 samples, 0.06%)</title><rect x="87.8" y="483.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="90.8" y="494.0"></text>
</g>
<g>
<title>merge_fullinfo_types (1 samples, 0.03%)</title><rect x="87.8" y="467.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="90.8" y="478.0"></text>
</g>
<g>
<title>jni_IsSameObject (1 samples, 0.03%)</title><rect x="87.8" y="451.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="90.8" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="87.8" y="435.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="90.8" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="87.8" y="419.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="90.8" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="87.8" y="403.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="90.8" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="87.8" y="387.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.8" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="87.8" y="371.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="90.8" y="382.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="87.8" y="355.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="90.8" y="366.0"></text>
</g>
<g>
<title>merge_into_one_successor (1 samples, 0.03%)</title><rect x="88.3" y="467.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="91.3" y="478.0"></text>
</g>
<g>
<title>merge_stack (1 samples, 0.03%)</title><rect x="88.3" y="451.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="91.3" y="462.0"></text>
</g>
<g>
<title>merge_fullinfo_types (1 samples, 0.03%)</title><rect x="88.3" y="435.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="91.3" y="446.0"></text>
</g>
<g>
<title>jni_GetSuperclass (1 samples, 0.03%)</title><rect x="88.3" y="419.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="91.3" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="88.3" y="403.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="91.3" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="88.3" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="91.3" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="88.3" y="371.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="91.3" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="88.3" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="91.3" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="88.3" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="91.3" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="88.3" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="91.3" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="88.3" y="307.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="91.3" y="318.0"></text>
</g>
<g>
<title>ReflectionFactory.copyConstructor (1 samples, 0.03%)</title><rect x="88.7" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.7" y="654.0"></text>
</g>
<g>
<title>ReflectAccess.copyConstructor (1 samples, 0.03%)</title><rect x="88.7" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.7" y="638.0"></text>
</g>
<g>
<title>Constructor.copy (1 samples, 0.03%)</title><rect x="88.7" y="611.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.7" y="622.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="89.2" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.2" y="670.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="89.2" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.2" y="654.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="89.2" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.2" y="638.0"></text>
</g>
<g>
<title>ProxyGenerator$ProxyMethod.generateMethod (1 samples, 0.03%)</title><rect x="89.2" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="92.2" y="622.0"></text>
</g>
<g>
<title>ProxyGenerator.getMethodDescriptor (1 samples, 0.03%)</title><rect x="89.2" y="595.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.2" y="606.0"></text>
</g>
<g>
<title>StringBuilder.toString (1 samples, 0.03%)</title><rect x="89.2" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.2" y="590.0"></text>
</g>
<g>
<title>StringLatin1.newString (1 samples, 0.03%)</title><rect x="89.2" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.2" y="574.0"></text>
</g>
<g>
<title>String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="89.2" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.2" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="89.2" y="531.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="92.2" y="542.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="89.6" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="92.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="92.6" y="766.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="92.6" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="92.6" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="92.6" y="718.0"></text>
</g>
<g>
<title>VerificationType::is_reference_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="89.6" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="92.6" y="702.0"></text>
</g>
<g>
<title>VerificationType::resolve_and_check_assignability(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="92.6" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="92.6" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="89.6" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="92.6" y="654.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="89.6" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="92.6" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1187956ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1187956ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="89.6" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.6" y="622.0"></text>
</g>
<g>
<title>ConnectionPool.handlerFromSharedCache (1 samples, 0.03%)</title><rect x="90.0" y="803.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.0" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="90.0" y="787.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.0" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="90.0" y="771.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="93.0" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="90.0" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.0" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="90.0" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="93.0" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="90.0" y="723.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="93.0" y="734.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="90.0" y="707.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="93.0" y="718.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="90.0" y="691.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="93.0" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="90.0" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="93.0" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="90.0" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="93.0" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="90.0" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="93.0" y="654.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="90.0" y="627.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="93.0" y="638.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="90.0" y="611.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="93.0" y="622.0"></text>
</g>
<g>
<title>TransactionManagerImple.suspend (6 samples, 0.17%)</title><rect x="90.5" y="867.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.5" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="90.5" y="851.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.5" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="90.5" y="835.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.5" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="90.5" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.5" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="90.5" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="90.5" y="787.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="90.5" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.5" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="90.5" y="755.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="90.5" y="739.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.5" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="90.5" y="723.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="93.5" y="734.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="90.5" y="707.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="93.5" y="718.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="691.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="93.5" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="93.5" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="93.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="93.5" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="93.5" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="93.5" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="90.5" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="93.5" y="606.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="90.5" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="93.5" y="590.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="90.9" y="819.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.9" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="90.9" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.9" y="814.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="90.9" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.9" y="798.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="90.9" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.9" y="782.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="90.9" y="755.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.9" y="766.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="90.9" y="739.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="93.9" y="750.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="90.9" y="723.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="93.9" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="91.4" y="819.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.4" y="830.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="91.4" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.4" y="814.0"></text>
</g>
<g>
<title>ClassLoader.getDefinedPackage (1 samples, 0.03%)</title><rect x="91.4" y="787.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.4" y="798.0"></text>
</g>
<g>
<title>ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="91.4" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.4" y="782.0"></text>
</g>
<g>
<title>String.equals (1 samples, 0.03%)</title><rect x="91.4" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.4" y="766.0"></text>
</g>
<g>
<title>TransactionImple.getTransaction (3 samples, 0.08%)</title><rect x="91.8" y="851.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.8" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (2 samples, 0.06%)</title><rect x="91.8" y="835.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="94.8" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (2 samples, 0.06%)</title><rect x="91.8" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="94.8" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (2 samples, 0.06%)</title><rect x="91.8" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="94.8" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (2 samples, 0.06%)</title><rect x="91.8" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="94.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="91.8" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="94.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="91.8" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="94.8" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="91.8" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="94.8" y="750.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="91.8" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="94.8" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="91.8" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="94.8" y="718.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="91.8" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="94.8" y="702.0"></text>
</g>
<g>
<title>ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*) (1 samples, 0.03%)</title><rect x="91.8" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="94.8" y="686.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="91.8" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="94.8" y="670.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="92.3" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="95.3" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::~ClassVerifier() (1 samples, 0.03%)</title><rect x="92.3" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="95.3" y="734.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="92.3" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="95.3" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="92.7" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.7" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="92.7" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.7" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="92.7" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.7" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="92.7" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.7" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="92.7" y="771.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="95.7" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="92.7" y="755.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="95.7" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="739.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="95.7" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="95.7" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="95.7" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="95.7" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="95.7" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="95.7" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="95.7" y="654.0"></text>
</g>
<g>
<title>ConstMethod::copy_stackmap_data(ClassLoaderData*, unsigned char*, int, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="95.7" y="638.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="95.7" y="622.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="92.7" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="95.7" y="606.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="92.7" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="95.7" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="93.1" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.1" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="93.1" y="883.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.1" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="93.1" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.1" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="93.1" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.1" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="93.1" y="835.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="96.1" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="93.1" y="819.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="96.1" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="93.1" y="803.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="96.1" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="93.1" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="96.1" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="93.1" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="96.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="93.1" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="93.1" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="96.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="93.1" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="96.1" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_class_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="93.1" y="707.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="96.1" y="718.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="93.1" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="96.1" y="702.0"></text>
</g>
<g>
<title>SchemaDropperImpl.doDrop (7 samples, 0.20%)</title><rect x="93.6" y="931.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.6" y="942.0"></text>
</g>
<g>
<title>SchemaDropperImpl.performDrop (7 samples, 0.20%)</title><rect x="93.6" y="915.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.6" y="926.0"></text>
</g>
<g>
<title>Helper.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="93.6" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.6" y="910.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="93.6" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.6" y="894.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="93.6" y="867.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.6" y="878.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="93.6" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.6" y="862.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="93.6" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="93.6" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.6" y="830.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="93.6" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.6" y="814.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.6" y="798.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.6" y="782.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="93.6" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.6" y="766.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="739.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.6" y="750.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="723.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="96.6" y="734.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.6" y="718.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="93.6" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.6" y="702.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="93.6" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.6" y="686.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="93.6" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.6" y="670.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.6" y="654.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="627.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.6" y="638.0"></text>
</g>
<g>
<title>LogContext.getLogger (1 samples, 0.03%)</title><rect x="93.6" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="96.6" y="622.0"></text>
</g>
<g>
<title>LoggerNode.createLogger (1 samples, 0.03%)</title><rect x="93.6" y="595.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.6" y="606.0"></text>
</g>
<g>
<title>Logger.&lt;init&gt; (1 samples, 0.03%)</title><rect x="93.6" y="579.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="590.0"></text>
</g>
<g>
<title>Logger.&lt;init&gt; (1 samples, 0.03%)</title><rect x="93.6" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="574.0"></text>
</g>
<g>
<title>Logger.&lt;init&gt; (1 samples, 0.03%)</title><rect x="93.6" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.6" y="558.0"></text>
</g>
<g>
<title>Logger$ConfigurationData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="93.6" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.6" y="542.0"></text>
</g>
<g>
<title>CopyOnWriteArrayList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="93.6" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="526.0"></text>
</g>
<g>
<title>SchemaDropperImpl.dropFromMetadata (6 samples, 0.17%)</title><rect x="94.0" y="899.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.0" y="910.0"></text>
</g>
<g>
<title>SchemaDropperImpl.applySqlStrings (6 samples, 0.17%)</title><rect x="94.0" y="883.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.0" y="894.0"></text>
</g>
<g>
<title>SchemaDropperImpl.applySqlString (6 samples, 0.17%)</title><rect x="94.0" y="867.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.0" y="878.0"></text>
</g>
<g>
<title>GenerationTargetToDatabase.accept (6 samples, 0.17%)</title><rect x="94.0" y="851.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.0" y="862.0"></text>
</g>
<g>
<title>GenerationTargetToDatabase.jdbcStatement (5 samples, 0.14%)</title><rect x="94.0" y="835.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.0" y="846.0"></text>
</g>
<g>
<title>ConnectionWrapper.createStatement (5 samples, 0.14%)</title><rect x="94.0" y="819.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.0" y="830.0"></text>
</g>
<g>
<title>ConnectionWrapper.trackStatement (4 samples, 0.11%)</title><rect x="94.0" y="803.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.0" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="94.0" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.0" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="94.0" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.0" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="94.0" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="94.0" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="94.0" y="723.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="97.0" y="734.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="94.0" y="707.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="97.0" y="718.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="691.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="97.0" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="97.0" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.0" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="97.0" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="627.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.0" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.0" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="94.0" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.0" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="94.0" y="579.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="97.0" y="590.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="94.0" y="563.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.0" y="574.0"></text>
</g>
<g>
<title>StatementWrapper.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="94.5" y="787.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.5" y="798.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (3 samples, 0.08%)</title><rect x="94.5" y="771.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.5" y="782.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (3 samples, 0.08%)</title><rect x="94.5" y="755.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.5" y="766.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (3 samples, 0.08%)</title><rect x="94.5" y="739.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.5" y="750.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (3 samples, 0.08%)</title><rect x="94.5" y="723.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="97.5" y="734.0"></text>
</g>
<g>
<title>1615056168.apply (3 samples, 0.08%)</title><rect x="94.5" y="707.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="97.5" y="718.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (3 samples, 0.08%)</title><rect x="94.5" y="691.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.5" y="702.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (3 samples, 0.08%)</title><rect x="94.5" y="675.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.5" y="686.0"></text>
</g>
<g>
<title>Class.getConstructor (2 samples, 0.06%)</title><rect x="94.5" y="659.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.5" y="670.0"></text>
</g>
<g>
<title>Class.getConstructor0 (2 samples, 0.06%)</title><rect x="94.5" y="643.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.5" y="654.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (2 samples, 0.06%)</title><rect x="94.5" y="627.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.5" y="638.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (2 samples, 0.06%)</title><rect x="94.5" y="611.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.5" y="622.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (2 samples, 0.06%)</title><rect x="94.5" y="595.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="97.5" y="606.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (2 samples, 0.06%)</title><rect x="94.5" y="579.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="97.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (2 samples, 0.06%)</title><rect x="94.5" y="563.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="97.5" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="94.5" y="547.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="97.5" y="558.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (2 samples, 0.06%)</title><rect x="94.5" y="531.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.5" y="542.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="94.5" y="515.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="97.5" y="526.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (2 samples, 0.06%)</title><rect x="94.5" y="499.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="97.5" y="510.0"></text>
</g>
<g>
<title>verify_method (2 samples, 0.06%)</title><rect x="94.5" y="483.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="97.5" y="494.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="94.5" y="467.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="97.5" y="478.0"></text>
</g>
<g>
<title>merge_into_one_successor (1 samples, 0.03%)</title><rect x="94.9" y="467.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="97.9" y="478.0"></text>
</g>
<g>
<title>merge_stack (1 samples, 0.03%)</title><rect x="94.9" y="451.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="97.9" y="462.0"></text>
</g>
<g>
<title>merge_fullinfo_types (1 samples, 0.03%)</title><rect x="94.9" y="435.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="97.9" y="446.0"></text>
</g>
<g>
<title>jni_IsSameObject (1 samples, 0.03%)</title><rect x="94.9" y="419.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="97.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="94.9" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="97.9" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="94.9" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="97.9" y="398.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="95.3" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.3" y="670.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="95.3" y="643.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.3" y="654.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="95.3" y="627.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.3" y="638.0"></text>
</g>
<g>
<title>ProxyGenerator$ProxyMethod.generateMethod (1 samples, 0.03%)</title><rect x="95.3" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.3" y="622.0"></text>
</g>
<g>
<title>JdbcConnection.createStatement (1 samples, 0.03%)</title><rect x="95.8" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.8" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="95.8" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.8" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="95.8" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.8" y="782.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="95.8" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.8" y="766.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="95.8" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.8" y="750.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="95.8" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.8" y="734.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="95.8" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.8" y="718.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="95.8" y="691.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="98.8" y="702.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="95.8" y="675.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="98.8" y="686.0"></text>
</g>
<g>
<title>StatementWrapper.execute (1 samples, 0.03%)</title><rect x="96.2" y="835.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.2" y="846.0"></text>
</g>
<g>
<title>JdbcStatement.execute (1 samples, 0.03%)</title><rect x="96.2" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.2" y="830.0"></text>
</g>
<g>
<title>JdbcStatement.executeInternal (1 samples, 0.03%)</title><rect x="96.2" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.2" y="814.0"></text>
</g>
<g>
<title>JdbcConnection.prepareCommand (1 samples, 0.03%)</title><rect x="96.2" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.2" y="798.0"></text>
</g>
<g>
<title>SessionRemote.prepareCommand (1 samples, 0.03%)</title><rect x="96.2" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.2" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="96.2" y="755.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="99.2" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="96.2" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="99.2" y="750.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="96.2" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="99.2" y="734.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="96.2" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="99.2" y="718.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.getService (1 samples, 0.03%)</title><rect x="96.7" y="963.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.7" y="974.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (1 samples, 0.03%)</title><rect x="96.7" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.7" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (1 samples, 0.03%)</title><rect x="96.7" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.7" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.createService (1 samples, 0.03%)</title><rect x="96.7" y="915.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.7" y="926.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.initiateService (1 samples, 0.03%)</title><rect x="96.7" y="899.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.7" y="910.0"></text>
</g>
<g>
<title>SchemaManagementToolInitiator.initiateService (1 samples, 0.03%)</title><rect x="96.7" y="883.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.7" y="894.0"></text>
</g>
<g>
<title>SchemaManagementToolInitiator.initiateService (1 samples, 0.03%)</title><rect x="96.7" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.7" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="96.7" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="99.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="96.7" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="99.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="96.7" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="99.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="96.7" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="99.7" y="814.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="96.7" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="99.7" y="798.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="96.7" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="99.7" y="782.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="96.7" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="99.7" y="766.0"></text>
</g>
<g>
<title>Rewriter::compute_index_maps() (1 samples, 0.03%)</title><rect x="96.7" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="99.7" y="750.0"></text>
</g>
<g>
<title>Rewriter::init_maps(int) (1 samples, 0.03%)</title><rect x="96.7" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="99.7" y="734.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.03%)</title><rect x="96.7" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="99.7" y="718.0"></text>
</g>
<g>
<title>SessionFactoryImpl.buildLocalConnectionAccess (1 samples, 0.03%)</title><rect x="97.1" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.1" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="97.1" y="963.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.1" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="97.1" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.1" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="97.1" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.1" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="97.1" y="915.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.1" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="97.1" y="899.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="100.1" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="97.1" y="883.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="100.1" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="867.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="100.1" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.1" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="835.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="100.1" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="100.1" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.1" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="100.1" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_linenumber_table(unsigned int, unsigned int, CompressedLineNumberWriteStream**, Thread*) (1 samples, 0.03%)</title><rect x="97.1" y="755.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="100.1" y="766.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="97.1" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="100.1" y="750.0"></text>
</g>
<g>
<title>SessionFactoryImpl.withOptions (1 samples, 0.03%)</title><rect x="97.6" y="979.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.6" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="97.6" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="100.6" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="97.6" y="947.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.6" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="97.6" y="931.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.6" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="97.6" y="915.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.6" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="97.6" y="899.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="100.6" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="97.6" y="883.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="100.6" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="867.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="100.6" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="851.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.6" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="100.6" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.6" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="100.6" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.6" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="97.6" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="100.6" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="97.6" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="100.6" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="97.6" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="100.6" y="750.0"></text>
</g>
<g>
<title>SessionFactoryRegistry.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="98.0" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.0" y="990.0"></text>
</g>
<g>
<title>SessionFactoryRegistry.&lt;init&gt; (1 samples, 0.03%)</title><rect x="98.0" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.0" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="98.0" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="101.0" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="98.0" y="931.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="101.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="98.0" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="101.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="98.0" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="101.0" y="910.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="98.0" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="101.0" y="894.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="98.0" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="101.0" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="98.0" y="851.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.0" y="862.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryFactoryImpl.buildServiceRegistry (2 samples, 0.06%)</title><rect x="98.4" y="979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.4" y="990.0"></text>
</g>
<g>
<title>FlatClassLoaderService.loadJavaServices (1 samples, 0.03%)</title><rect x="98.4" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.4" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="98.4" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.4" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="98.4" y="931.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.4" y="942.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="98.4" y="915.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.4" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="98.4" y="899.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.4" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="98.4" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.4" y="894.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="98.4" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.4" y="878.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="98.4" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.4" y="862.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="98.4" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.4" y="846.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="98.4" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.4" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasMoreElements (1 samples, 0.03%)</title><rect x="98.4" y="803.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.4" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasNext (1 samples, 0.03%)</title><rect x="98.4" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.4" y="798.0"></text>
</g>
<g>
<title>URLClassPath$1.hasMoreElements (1 samples, 0.03%)</title><rect x="98.4" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.4" y="782.0"></text>
</g>
<g>
<title>URLClassPath$1.next (1 samples, 0.03%)</title><rect x="98.4" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.4" y="766.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="98.4" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.4" y="750.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="98.4" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.4" y="734.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="98.4" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.4" y="718.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="98.4" y="691.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.4" y="702.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="98.4" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.4" y="686.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="98.4" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.4" y="670.0"></text>
</g>
<g>
<title>URLStreamHandler.parseURL (1 samples, 0.03%)</title><rect x="98.4" y="643.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.4" y="654.0"></text>
</g>
<g>
<title>String.endsWith (1 samples, 0.03%)</title><rect x="98.4" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.4" y="638.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryBuilderImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="98.9" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.9" y="974.0"></text>
</g>
<g>
<title>StandardSessionFactoryServiceInitiators.buildStandardServiceInitiatorList (1 samples, 0.03%)</title><rect x="98.9" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.9" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="98.9" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.9" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="98.9" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.9" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="98.9" y="899.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.9" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="98.9" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.9" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="98.9" y="867.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="101.9" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="98.9" y="851.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="101.9" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="835.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="101.9" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="101.9" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="101.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="101.9" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="101.9" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="101.9" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="98.9" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="101.9" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="98.9" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="101.9" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="98.9" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="101.9" y="718.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="98.9" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="101.9" y="702.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.getService (14 samples, 0.39%)</title><rect x="99.3" y="979.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.3" y="990.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (14 samples, 0.39%)</title><rect x="99.3" y="963.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.3" y="974.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (14 samples, 0.39%)</title><rect x="99.3" y="947.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.3" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.createService (13 samples, 0.36%)</title><rect x="99.3" y="931.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.3" y="942.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.initiateService (13 samples, 0.36%)</title><rect x="99.3" y="915.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.3" y="926.0"></text>
</g>
<g>
<title>SessionFactoryServiceInitiator.initiateService (13 samples, 0.36%)</title><rect x="99.3" y="899.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.3" y="910.0"></text>
</g>
<g>
<title>CacheInitiator.initiateService (13 samples, 0.36%)</title><rect x="99.3" y="883.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.3" y="894.0"></text>
</g>
<g>
<title>CacheInitiator.initiateService (13 samples, 0.36%)</title><rect x="99.3" y="867.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.3" y="878.0"></text>
</g>
<g>
<title>EnabledCaching.&lt;init&gt; (12 samples, 0.34%)</title><rect x="99.3" y="851.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.3" y="862.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.buildQueryResultsRegion (7 samples, 0.20%)</title><rect x="99.3" y="835.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.3" y="846.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.getCache (7 samples, 0.20%)</title><rect x="99.3" y="819.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.3" y="830.0"></text>
</g>
<g>
<title>HashMap.compute (7 samples, 0.20%)</title><rect x="99.3" y="803.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.3" y="814.0"></text>
</g>
<g>
<title>728236551.apply (7 samples, 0.20%)</title><rect x="99.3" y="787.0" width="3.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="102.3" y="798.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.lambda$getCache$0 (7 samples, 0.20%)</title><rect x="99.3" y="771.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.3" y="782.0"></text>
</g>
<g>
<title>CaffeineCache.&lt;init&gt; (7 samples, 0.20%)</title><rect x="99.3" y="755.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.3" y="766.0"></text>
</g>
<g>
<title>Caffeine.build (7 samples, 0.20%)</title><rect x="99.3" y="739.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.3" y="750.0"></text>
</g>
<g>
<title>BoundedLocalCache$BoundedLocalManualCache.&lt;init&gt; (7 samples, 0.20%)</title><rect x="99.3" y="723.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.3" y="734.0"></text>
</g>
<g>
<title>BoundedLocalCache$BoundedLocalManualCache.&lt;init&gt; (7 samples, 0.20%)</title><rect x="99.3" y="707.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.3" y="718.0"></text>
</g>
<g>
<title>LocalCacheFactory.newBoundedLocalCache (6 samples, 0.17%)</title><rect x="99.3" y="691.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.3" y="702.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructor (1 samples, 0.03%)</title><rect x="99.3" y="675.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.3" y="686.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="99.3" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.3" y="670.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="99.3" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.3" y="654.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="99.3" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.3" y="638.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="99.3" y="611.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="102.3" y="622.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="595.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="102.3" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="579.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="102.3" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="563.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="102.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="547.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="102.3" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="531.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="102.3" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="515.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="102.3" y="526.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="499.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="102.3" y="510.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="102.3" y="494.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="467.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="102.3" y="478.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="99.3" y="451.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="102.3" y="462.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="99.3" y="435.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="102.3" y="446.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="99.3" y="419.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="102.3" y="430.0"></text>
</g>
<g>
<title>Constructor.newInstance (4 samples, 0.11%)</title><rect x="99.8" y="675.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.8" y="686.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.11%)</title><rect x="99.8" y="659.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.8" y="670.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (4 samples, 0.11%)</title><rect x="99.8" y="643.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.8" y="654.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (4 samples, 0.11%)</title><rect x="99.8" y="627.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.8" y="638.0"></text>
</g>
<g>
<title>SSMSA.&lt;init&gt; (4 samples, 0.11%)</title><rect x="99.8" y="611.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.8" y="622.0"></text>
</g>
<g>
<title>Caffeine.getScheduler (1 samples, 0.03%)</title><rect x="99.8" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.8" y="606.0"></text>
</g>
<g>
<title>Scheduler.disabledScheduler (1 samples, 0.03%)</title><rect x="99.8" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.8" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="99.8" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.8" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="99.8" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.8" y="558.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="99.8" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.8" y="542.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="99.8" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.8" y="526.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="99.8" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.8" y="510.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="99.8" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.8" y="494.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="99.8" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.8" y="478.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="99.8" y="451.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.8" y="462.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="99.8" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.8" y="446.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="99.8" y="419.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.8" y="430.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="99.8" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.8" y="414.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="99.8" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="102.8" y="398.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="99.8" y="371.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="102.8" y="382.0"></text>
</g>
<g>
<title>SSMS.&lt;init&gt; (3 samples, 0.08%)</title><rect x="100.2" y="595.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.2" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.2" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.2" y="574.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="100.2" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.2" y="558.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.2" y="542.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="515.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.2" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="499.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.2" y="510.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="100.2" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.2" y="494.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="467.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.2" y="478.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="451.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.2" y="462.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="435.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.2" y="446.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="100.2" y="419.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.2" y="430.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.2" y="414.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.2" y="398.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.2" y="382.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="100.2" y="355.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.2" y="366.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.2" y="350.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="323.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.2" y="334.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.2" y="318.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="100.2" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.2" y="302.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.2" y="286.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.2" y="270.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="100.2" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.2" y="254.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="100.2" y="227.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.2" y="238.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="211.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.2" y="222.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="100.2" y="195.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="103.2" y="206.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="100.2" y="179.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="103.2" y="190.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="100.2" y="163.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="103.2" y="174.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="100.2" y="147.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.2" y="158.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="100.2" y="131.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="103.2" y="142.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="100.2" y="115.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="103.2" y="126.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="100.2" y="99.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="103.2" y="110.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="100.2" y="83.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="103.2" y="94.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="100.2" y="67.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="103.2" y="78.0"></text>
</g>
<g>
<title>SS.&lt;init&gt; (2 samples, 0.06%)</title><rect x="100.7" y="579.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.7" y="590.0"></text>
</g>
<g>
<title>BoundedLocalCache.&lt;init&gt; (2 samples, 0.06%)</title><rect x="100.7" y="563.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="103.7" y="574.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (2 samples, 0.06%)</title><rect x="100.7" y="547.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="103.7" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="100.7" y="531.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="103.7" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="100.7" y="515.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="103.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="100.7" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="103.7" y="510.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="100.7" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="103.7" y="494.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="100.7" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="103.7" y="478.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="100.7" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.7" y="462.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="100.7" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="103.7" y="446.0"></text>
</g>
<g>
<title>SignatureStream::~SignatureStream() (1 samples, 0.03%)</title><rect x="100.7" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="103.7" y="430.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="100.7" y="403.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="103.7" y="414.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="101.1" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="104.1" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="101.1" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="104.1" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="675.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.5" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="659.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.5" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="101.5" y="643.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.5" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="101.5" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.5" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.5" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="595.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.5" y="606.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="101.5" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="104.5" y="590.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="101.5" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="104.5" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.5" y="558.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="531.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.5" y="542.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="101.5" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.5" y="526.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="101.5" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="104.5" y="510.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.5" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="101.5" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.5" y="478.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="101.5" y="451.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.5" y="462.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="101.5" y="435.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="104.5" y="446.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="101.5" y="419.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="104.5" y="430.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="101.5" y="403.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="104.5" y="414.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="387.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="104.5" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="104.5" y="382.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="104.5" y="366.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="339.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="104.5" y="350.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="323.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="104.5" y="334.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="307.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="104.5" y="318.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="104.5" y="302.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="101.5" y="275.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="104.5" y="286.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="101.5" y="259.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="104.5" y="270.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="102.0" y="691.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.0" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="102.0" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.0" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="102.0" y="659.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.0" y="670.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="102.0" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.0" y="654.0"></text>
</g>
<g>
<title>ClassLoader.getDefinedPackage (1 samples, 0.03%)</title><rect x="102.0" y="627.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.0" y="638.0"></text>
</g>
<g>
<title>ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="102.0" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.0" y="622.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.buildTimestampsRegion (4 samples, 0.11%)</title><rect x="102.4" y="835.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.4" y="846.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.getCache (3 samples, 0.08%)</title><rect x="102.4" y="819.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.4" y="830.0"></text>
</g>
<g>
<title>HashMap.compute (3 samples, 0.08%)</title><rect x="102.4" y="803.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.4" y="814.0"></text>
</g>
<g>
<title>728236551.apply (3 samples, 0.08%)</title><rect x="102.4" y="787.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="105.4" y="798.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.lambda$getCache$0 (3 samples, 0.08%)</title><rect x="102.4" y="771.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.4" y="782.0"></text>
</g>
<g>
<title>CaffeineCache.&lt;init&gt; (3 samples, 0.08%)</title><rect x="102.4" y="755.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.4" y="766.0"></text>
</g>
<g>
<title>Caffeine.build (2 samples, 0.06%)</title><rect x="102.4" y="739.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="105.4" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="102.4" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.4" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="102.4" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.4" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="102.4" y="691.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.4" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="102.4" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.4" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="102.4" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.4" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="102.4" y="643.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.4" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="102.4" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.4" y="638.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="102.4" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.4" y="622.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="102.4" y="595.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="105.4" y="606.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="102.4" y="579.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="105.4" y="590.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="102.4" y="563.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="105.4" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="102.4" y="547.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="105.4" y="558.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="102.4" y="531.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="105.4" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="102.4" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="105.4" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="102.4" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="105.4" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="102.4" y="483.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="105.4" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="102.4" y="467.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="105.4" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="102.4" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="105.4" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="102.4" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="105.4" y="446.0"></text>
</g>
<g>
<title>UnboundedLocalCache$UnboundedLocalManualCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="102.9" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.9" y="734.0"></text>
</g>
<g>
<title>UnboundedLocalCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="102.9" y="707.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.9" y="718.0"></text>
</g>
<g>
<title>1020897892.get (1 samples, 0.03%)</title><rect x="102.9" y="691.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="105.9" y="702.0"></text>
</g>
<g>
<title>StatsCounter.disabledStatsCounter (1 samples, 0.03%)</title><rect x="102.9" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.9" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="102.9" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="105.9" y="670.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="102.9" y="643.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="105.9" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="105.9" y="638.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="105.9" y="622.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="105.9" y="606.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="105.9" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="563.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="105.9" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="105.9" y="558.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="102.9" y="531.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="105.9" y="542.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="102.9" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="105.9" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="103.3" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.3" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="103.3" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.3" y="734.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="103.3" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.3" y="718.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="103.3" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.3" y="702.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="103.3" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.3" y="686.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="103.3" y="659.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.3" y="670.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="103.3" y="643.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="106.3" y="654.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="103.3" y="627.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="106.3" y="638.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.qualify (1 samples, 0.03%)</title><rect x="103.7" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.7" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="103.7" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="106.7" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="103.7" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="106.7" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="103.7" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="106.7" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="103.7" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="106.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="103.7" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="106.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="103.7" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="106.7" y="734.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="103.7" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="106.7" y="718.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="103.7" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="106.7" y="702.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="103.7" y="675.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="106.7" y="686.0"></text>
</g>
<g>
<title>JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="103.7" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="106.7" y="670.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType) (1 samples, 0.03%)</title><rect x="103.7" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="106.7" y="654.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="103.7" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="106.7" y="638.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="103.7" y="611.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="106.7" y="622.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="103.7" y="595.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="106.7" y="606.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="103.7" y="579.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="106.7" y="590.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.start (1 samples, 0.03%)</title><rect x="104.2" y="835.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.2" y="846.0"></text>
</g>
<g>
<title>Time$MillisService.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="104.2" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.2" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="104.2" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.2" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="104.2" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.2" y="798.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="104.2" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.2" y="782.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="104.2" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.2" y="766.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="104.2" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.2" y="750.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="104.2" y="723.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="107.2" y="734.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="104.2" y="707.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.2" y="718.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="104.2" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.2" y="702.0"></text>
</g>
<g>
<title>MethodHandles.constant (1 samples, 0.03%)</title><rect x="104.2" y="675.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.2" y="686.0"></text>
</g>
<g>
<title>MethodHandles.identity (1 samples, 0.03%)</title><rect x="104.2" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.2" y="670.0"></text>
</g>
<g>
<title>Enum.ordinal (1 samples, 0.03%)</title><rect x="104.2" y="643.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="107.2" y="654.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="104.6" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.6" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="104.6" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.6" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="104.6" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.6" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="104.6" y="803.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.6" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="104.6" y="787.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="107.6" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="104.6" y="771.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="107.6" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="104.6" y="755.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="107.6" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="104.6" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="107.6" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="104.6" y="723.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="107.6" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="104.6" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.6" y="718.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="104.6" y="691.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="107.6" y="702.0"></text>
</g>
<g>
<title>klassVtable::get_mirandas(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Klass*&gt;*, bool) (1 samples, 0.03%)</title><rect x="104.6" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="107.6" y="686.0"></text>
</g>
<g>
<title>klassVtable::add_new_mirandas_to_lists(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="104.6" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="107.6" y="670.0"></text>
</g>
<g>
<title>klassVtable::is_miranda(Method*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="104.6" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="107.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_method(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="104.6" y="627.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="107.6" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="104.6" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="107.6" y="622.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="104.6" y="595.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="107.6" y="606.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (1 samples, 0.03%)</title><rect x="105.1" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.1" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.applyInjections (1 samples, 0.03%)</title><rect x="105.1" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.1" y="926.0"></text>
</g>
<g>
<title>Class.getMethods (1 samples, 0.03%)</title><rect x="105.1" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="108.1" y="910.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (1 samples, 0.03%)</title><rect x="105.1" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.1" y="894.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (1 samples, 0.03%)</title><rect x="105.1" y="867.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.1" y="878.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (1 samples, 0.03%)</title><rect x="105.1" y="851.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.1" y="862.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="105.1" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.1" y="846.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="105.1" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="108.1" y="830.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredMethods (1 samples, 0.03%)</title><rect x="105.1" y="803.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="108.1" y="814.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="787.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="108.1" y="798.0"></text>
</g>
<g>
<title>Reflection::new_method(methodHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="108.1" y="782.0"></text>
</g>
<g>
<title>get_parameter_types(methodHandle const&amp;, int, oopDesc**, Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="755.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="108.1" y="766.0"></text>
</g>
<g>
<title>get_mirror_from_signature(methodHandle const&amp;, SignatureStream*, Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="739.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="108.1" y="750.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="108.1" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="108.1" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="105.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="108.1" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="105.1" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="108.1" y="686.0"></text>
</g>
<g>
<title>TypeConfiguration.scope (3 samples, 0.08%)</title><rect x="105.5" y="979.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.5" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="105.5" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="108.5" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="108.5" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="108.5" y="942.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="108.5" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="899.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="108.5" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="108.5" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="108.5" y="878.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="108.5" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="105.5" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="108.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="106.0" y="963.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.0" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="106.0" y="947.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="109.0" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="106.0" y="931.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.0" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="106.0" y="915.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.0" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="106.0" y="899.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.0" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="106.0" y="883.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.0" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="106.0" y="867.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.0" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="106.0" y="851.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.0" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="106.0" y="835.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="109.0" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="106.0" y="819.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="109.0" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="803.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="109.0" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="109.0" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="109.0" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="109.0" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="109.0" y="750.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="109.0" y="734.0"></text>
</g>
<g>
<title>MethodFamily::determine_target(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="106.0" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="109.0" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="106.4" y="835.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.4" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="106.4" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.4" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="106.4" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.4" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="106.4" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.4" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="106.4" y="771.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="109.4" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="106.4" y="755.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="109.4" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="739.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="109.4" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="109.4" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="109.4" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="675.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="109.4" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="109.4" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="106.4" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.4" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="106.4" y="627.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="109.4" y="638.0"></text>
</g>
<g>
<title>FastBootHibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull (2 samples, 0.06%)</title><rect x="106.8" y="1011.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="109.8" y="1022.0"></text>
</g>
<g>
<title>ArcContainerImpl.instance (1 samples, 0.03%)</title><rect x="106.8" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.8" y="1006.0"></text>
</g>
<g>
<title>ComputingCache.getValue (1 samples, 0.03%)</title><rect x="106.8" y="979.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.8" y="990.0"></text>
</g>
<g>
<title>LazyValue.get (1 samples, 0.03%)</title><rect x="106.8" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.8" y="974.0"></text>
</g>
<g>
<title>931480286.get (1 samples, 0.03%)</title><rect x="106.8" y="947.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="109.8" y="958.0"></text>
</g>
<g>
<title>ComputingCache$CacheFunction.lambda$apply$0 (1 samples, 0.03%)</title><rect x="106.8" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.8" y="942.0"></text>
</g>
<g>
<title>475603167.apply (1 samples, 0.03%)</title><rect x="106.8" y="915.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="109.8" y="926.0"></text>
</g>
<g>
<title>MethodHandleNatives.findMethodHandleType (1 samples, 0.03%)</title><rect x="107.3" y="995.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.3" y="1006.0"></text>
</g>
<g>
<title>MethodType.makeImpl (1 samples, 0.03%)</title><rect x="107.3" y="979.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.3" y="990.0"></text>
</g>
<g>
<title>MethodType$ConcurrentWeakInternSet.add (1 samples, 0.03%)</title><rect x="107.3" y="963.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.3" y="974.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="107.3" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.3" y="958.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putVal (1 samples, 0.03%)</title><rect x="107.3" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.3" y="942.0"></text>
</g>
<g>
<title>ConcurrentHashMap.addCount (1 samples, 0.03%)</title><rect x="107.3" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.3" y="926.0"></text>
</g>
<g>
<title>ConcurrentHashMap.transfer (1 samples, 0.03%)</title><rect x="107.3" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.3" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="107.7" y="1139.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="110.7" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="107.7" y="1123.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="110.7" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="107.7" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="110.7" y="1118.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="107.7" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="110.7" y="1102.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="107.7" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="110.7" y="1086.0"></text>
</g>
<g>
<title>JvmtiEnv::Deallocate(unsigned char*) (1 samples, 0.03%)</title><rect x="107.7" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="110.7" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="108.2" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="111.2" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="108.2" y="1123.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="111.2" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="108.2" y="1107.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="111.2" y="1118.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="108.2" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="111.2" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="108.2" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="111.2" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="108.2" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="111.2" y="1070.0"></text>
</g>
<g>
<title>LifecycleEventsBuildStep$startupEvent-858218658.deploy (3 samples, 0.08%)</title><rect x="108.6" y="1139.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="111.6" y="1150.0"></text>
</g>
<g>
<title>LifecycleEventsBuildStep$startupEvent-858218658.deploy_0 (3 samples, 0.08%)</title><rect x="108.6" y="1123.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.6" y="1134.0"></text>
</g>
<g>
<title>ArcRecorder.handleLifecycleEvents (3 samples, 0.08%)</title><rect x="108.6" y="1107.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.6" y="1118.0"></text>
</g>
<g>
<title>BeanContainer.instance (1 samples, 0.03%)</title><rect x="108.6" y="1091.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.6" y="1102.0"></text>
</g>
<g>
<title>ArcRecorder$2$1.create (1 samples, 0.03%)</title><rect x="108.6" y="1075.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.6" y="1086.0"></text>
</g>
<g>
<title>ArcContainerImpl$1.get (1 samples, 0.03%)</title><rect x="108.6" y="1059.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.6" y="1070.0"></text>
</g>
<g>
<title>ArcContainerImpl$1.get (1 samples, 0.03%)</title><rect x="108.6" y="1043.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.6" y="1054.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanInstanceHandle (1 samples, 0.03%)</title><rect x="108.6" y="1027.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.6" y="1038.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanInstanceHandle (1 samples, 0.03%)</title><rect x="108.6" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.6" y="1022.0"></text>
</g>
<g>
<title>LifecycleEventRunner_Bean.get (1 samples, 0.03%)</title><rect x="108.6" y="995.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.6" y="1006.0"></text>
</g>
<g>
<title>LifecycleEventRunner_Bean.get (1 samples, 0.03%)</title><rect x="108.6" y="979.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.6" y="990.0"></text>
</g>
<g>
<title>LifecycleEventRunner_Bean.create (1 samples, 0.03%)</title><rect x="108.6" y="963.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.6" y="974.0"></text>
</g>
<g>
<title>EventProvider.get (1 samples, 0.03%)</title><rect x="108.6" y="947.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.6" y="958.0"></text>
</g>
<g>
<title>EventProvider.get (1 samples, 0.03%)</title><rect x="108.6" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.6" y="942.0"></text>
</g>
<g>
<title>EventImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="108.6" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.6" y="926.0"></text>
</g>
<g>
<title>HierarchyDiscovery.&lt;init&gt; (1 samples, 0.03%)</title><rect x="108.6" y="899.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.6" y="910.0"></text>
</g>
<g>
<title>HierarchyDiscovery.&lt;init&gt; (1 samples, 0.03%)</title><rect x="108.6" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.6" y="894.0"></text>
</g>
<g>
<title>HierarchyDiscovery.discoverTypes (1 samples, 0.03%)</title><rect x="108.6" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.6" y="878.0"></text>
</g>
<g>
<title>HierarchyDiscovery.discoverFromClass (1 samples, 0.03%)</title><rect x="108.6" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.6" y="862.0"></text>
</g>
<g>
<title>Class.getGenericSuperclass (1 samples, 0.03%)</title><rect x="108.6" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.6" y="846.0"></text>
</g>
<g>
<title>LifecycleEventRunner.fireStartupEvent (2 samples, 0.06%)</title><rect x="109.1" y="1091.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.1" y="1102.0"></text>
</g>
<g>
<title>EventImpl.fire (2 samples, 0.06%)</title><rect x="109.1" y="1075.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="112.1" y="1086.0"></text>
</g>
<g>
<title>EventImpl$Notifier.notify (2 samples, 0.06%)</title><rect x="109.1" y="1059.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.1" y="1070.0"></text>
</g>
<g>
<title>EventImpl$Notifier.notifyObservers (1 samples, 0.03%)</title><rect x="109.1" y="1043.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.1" y="1054.0"></text>
</g>
<g>
<title>PublisherResource_Observer_onStart_fd71b5e0b207b7d1ef838b94eaeff75e52b8f463.notify (1 samples, 0.03%)</title><rect x="109.1" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.1" y="1038.0"></text>
</g>
<g>
<title>PublisherResource.onStart (1 samples, 0.03%)</title><rect x="109.1" y="1011.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="112.1" y="1022.0"></text>
</g>
<g>
<title>DateTimeFormatter.format (1 samples, 0.03%)</title><rect x="109.1" y="995.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.1" y="1006.0"></text>
</g>
<g>
<title>DateTimeFormatter.formatTo (1 samples, 0.03%)</title><rect x="109.1" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.1" y="990.0"></text>
</g>
<g>
<title>DateTimeFormatterBuilder$CompositePrinterParser.format (1 samples, 0.03%)</title><rect x="109.1" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="112.1" y="974.0"></text>
</g>
<g>
<title>DateTimeFormatterBuilder$InstantPrinterParser.format (1 samples, 0.03%)</title><rect x="109.1" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.1" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="109.1" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="112.1" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="109.1" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="112.1" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="112.1" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="112.1" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="112.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="112.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="112.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="112.1" y="830.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="112.1" y="814.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="112.1" y="798.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="109.1" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="112.1" y="782.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="109.1" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="112.1" y="766.0"></text>
</g>
<g>
<title>ManagedContext.terminate (1 samples, 0.03%)</title><rect x="109.5" y="1043.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.5" y="1054.0"></text>
</g>
<g>
<title>RequestContext.destroy (1 samples, 0.03%)</title><rect x="109.5" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="112.5" y="1038.0"></text>
</g>
<g>
<title>RequestContext.destroy (1 samples, 0.03%)</title><rect x="109.5" y="1011.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.5" y="1022.0"></text>
</g>
<g>
<title>RequestContext.fireIfNotEmpty (1 samples, 0.03%)</title><rect x="109.5" y="995.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.5" y="1006.0"></text>
</g>
<g>
<title>LazyValue.get (1 samples, 0.03%)</title><rect x="109.5" y="979.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.5" y="990.0"></text>
</g>
<g>
<title>692331943.get (1 samples, 0.03%)</title><rect x="109.5" y="963.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="112.5" y="974.0"></text>
</g>
<g>
<title>RequestContext.createDestroyedNotifier (1 samples, 0.03%)</title><rect x="109.5" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.5" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="109.5" y="931.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="112.5" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="109.5" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="112.5" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="112.5" y="910.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="112.5" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="112.5" y="878.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="112.5" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="112.5" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="112.5" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::validate_protection_domain(InstanceKlass*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="109.5" y="803.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="112.5" y="814.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="109.5" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="112.5" y="798.0"></text>
</g>
<g>
<title>LoggingResourceProcessor$setupLoggingRuntimeInit2028700189.deploy (14 samples, 0.39%)</title><rect x="109.9" y="1139.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.9" y="1150.0"></text>
</g>
<g>
<title>LoggingResourceProcessor$setupLoggingRuntimeInit2028700189.deploy_0 (14 samples, 0.39%)</title><rect x="109.9" y="1123.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.9" y="1134.0"></text>
</g>
<g>
<title>LoggingSetupRecorder.initializeLogging (14 samples, 0.39%)</title><rect x="109.9" y="1107.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.9" y="1118.0"></text>
</g>
<g>
<title>DelayedHandler.setHandlers (1 samples, 0.03%)</title><rect x="109.9" y="1091.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.9" y="1102.0"></text>
</g>
<g>
<title>DelayedHandler.activate (1 samples, 0.03%)</title><rect x="109.9" y="1075.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.9" y="1086.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="109.9" y="1059.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.9" y="1070.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="109.9" y="1043.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.9" y="1054.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="109.9" y="1027.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.9" y="1038.0"></text>
</g>
<g>
<title>DefaultLoggerFinder.isSystem (1 samples, 0.03%)</title><rect x="109.9" y="1011.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.9" y="1022.0"></text>
</g>
<g>
<title>DefaultLoggerFinder$1.&lt;init&gt; (1 samples, 0.03%)</title><rect x="109.9" y="995.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.9" y="1006.0"></text>
</g>
<g>
<title>Logger.setLevel (1 samples, 0.03%)</title><rect x="110.4" y="1091.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.4" y="1102.0"></text>
</g>
<g>
<title>LoggerNode.setLevel (1 samples, 0.03%)</title><rect x="110.4" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="1086.0"></text>
</g>
<g>
<title>Collections$UnmodifiableCollection.iterator (1 samples, 0.03%)</title><rect x="110.4" y="1059.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.4" y="1070.0"></text>
</g>
<g>
<title>Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.03%)</title><rect x="110.4" y="1043.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.4" y="1054.0"></text>
</g>
<g>
<title>FastCopyHashMap$Values.iterator (1 samples, 0.03%)</title><rect x="110.4" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.4" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="110.4" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.4" y="1022.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="110.4" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.4" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="110.4" y="979.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.4" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="110.4" y="963.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.4" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="110.4" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.4" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="110.4" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="113.4" y="942.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="110.4" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.4" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="110.4" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="110.4" y="883.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.4" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="110.4" y="867.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="113.4" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="110.4" y="851.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="113.4" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="110.4" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="113.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="110.4" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="113.4" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="110.4" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="113.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="110.4" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="113.4" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="110.4" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="113.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="110.4" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="113.4" y="766.0"></text>
</g>
<g>
<title>LoggingSetupRecorder.configureConsoleHandler (11 samples, 0.31%)</title><rect x="110.8" y="1091.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.8" y="1102.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="110.8" y="1075.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.8" y="1086.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="110.8" y="1059.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.8" y="1070.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="110.8" y="1043.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.8" y="1054.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="110.8" y="1027.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.8" y="1038.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="110.8" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.8" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="110.8" y="995.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.8" y="1006.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="110.8" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.8" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="110.8" y="963.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.8" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="110.8" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.8" y="958.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="110.8" y="931.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="113.8" y="942.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="110.8" y="915.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="113.8" y="926.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="899.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="113.8" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="113.8" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="113.8" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="113.8" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="113.8" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="113.8" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="110.8" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="113.8" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="110.8" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="113.8" y="798.0"></text>
</g>
<g>
<title>UTF8::is_legal_utf8(unsigned char const*, int, bool) (1 samples, 0.03%)</title><rect x="110.8" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.8" y="782.0"></text>
</g>
<g>
<title>ColorPatternFormatter.&lt;init&gt; (8 samples, 0.22%)</title><rect x="111.3" y="1075.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.3" y="1086.0"></text>
</g>
<g>
<title>ColorPatternFormatter.&lt;init&gt; (2 samples, 0.06%)</title><rect x="111.3" y="1059.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.3" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="111.3" y="1043.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.3" y="1054.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="111.3" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.3" y="1038.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="111.3" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.3" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="111.3" y="995.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.3" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="111.3" y="979.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.3" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="111.3" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.3" y="974.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="111.3" y="947.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.3" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="111.3" y="931.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.3" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="111.3" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.3" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="111.3" y="899.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="114.3" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="111.3" y="883.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="114.3" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="111.3" y="867.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="114.3" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="111.3" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="114.3" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="111.3" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="114.3" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="111.3" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="114.3" y="830.0"></text>
</g>
<g>
<title>CodeCache::flush_dependents_on(InstanceKlass*) (1 samples, 0.03%)</title><rect x="111.3" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="114.3" y="814.0"></text>
</g>
<g>
<title>CodeCache::mark_for_deoptimization(KlassDepChange&amp;) (1 samples, 0.03%)</title><rect x="111.3" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="114.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::mark_dependent_nmethods(KlassDepChange&amp;) (1 samples, 0.03%)</title><rect x="111.3" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.3" y="782.0"></text>
</g>
<g>
<title>DependencyContext::mark_dependent_nmethods(DepChange&amp;) (1 samples, 0.03%)</title><rect x="111.3" y="755.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="114.3" y="766.0"></text>
</g>
<g>
<title>Printf.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="111.7" y="1043.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.7" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="111.7" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="114.7" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="111.7" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="114.7" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="111.7" y="995.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="114.7" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="111.7" y="979.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="114.7" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="111.7" y="963.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.7" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="111.7" y="947.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="114.7" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="111.7" y="931.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="114.7" y="942.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="111.7" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="114.7" y="926.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="111.7" y="899.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="114.7" y="910.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.03%)</title><rect x="111.7" y="883.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="114.7" y="894.0"></text>
</g>
<g>
<title>PatternFormatter.setPattern (6 samples, 0.17%)</title><rect x="112.1" y="1059.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.1" y="1070.0"></text>
</g>
<g>
<title>ColorPatternFormatter.setSteps (1 samples, 0.03%)</title><rect x="112.1" y="1043.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.1" y="1054.0"></text>
</g>
<g>
<title>ColorPatternFormatter.colorize (1 samples, 0.03%)</title><rect x="112.1" y="1027.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="112.1" y="1011.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="115.1" y="1022.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="112.1" y="995.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.1" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="112.1" y="979.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.1" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="112.1" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.1" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="112.1" y="947.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="115.1" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="112.1" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="115.1" y="942.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="112.1" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.1" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="112.1" y="899.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.1" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="112.1" y="883.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.1" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="112.1" y="867.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="115.1" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="112.1" y="851.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="115.1" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="112.1" y="835.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="115.1" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="112.1" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="115.1" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="112.1" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="115.1" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="112.1" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.1" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="112.1" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="115.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="112.1" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="115.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="112.1" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="115.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="112.1" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="115.1" y="734.0"></text>
</g>
<g>
<title>FormatStringParser.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="112.6" y="1043.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.6" y="1054.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="112.6" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.6" y="1038.0"></text>
</g>
<g>
<title>Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="112.6" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.6" y="1022.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="112.6" y="995.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.6" y="1006.0"></text>
</g>
<g>
<title>Pattern$Start.&lt;init&gt; (1 samples, 0.03%)</title><rect x="112.6" y="979.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.6" y="990.0"></text>
</g>
<g>
<title>Pattern$Branch.study (1 samples, 0.03%)</title><rect x="112.6" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="974.0"></text>
</g>
<g>
<title>Pattern$Node.study (1 samples, 0.03%)</title><rect x="112.6" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.6" y="958.0"></text>
</g>
<g>
<title>FormatStringParser.getSteps (4 samples, 0.11%)</title><rect x="113.0" y="1043.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.0" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="113.0" y="1027.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="113.0" y="1011.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.0" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="113.0" y="995.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.0" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="113.0" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.0" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="113.0" y="963.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.0" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="113.0" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.0" y="958.0"></text>
</g>
<g>
<title>Resource.getBytes (1 samples, 0.03%)</title><rect x="113.0" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.0" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="113.0" y="915.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.0" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="113.0" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="116.0" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="113.0" y="883.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.0" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="113.0" y="867.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="116.0" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="113.0" y="851.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="116.0" y="862.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="113.0" y="835.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="116.0" y="846.0"></text>
</g>
<g>
<title>Formatters.levelFormatStep (1 samples, 0.03%)</title><rect x="113.5" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.5" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="113.5" y="1011.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.5" y="1022.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="113.5" y="995.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.5" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="113.5" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.5" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="113.5" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.5" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="113.5" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.5" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="113.5" y="931.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.5" y="942.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="113.5" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.5" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="113.5" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.5" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClassSourceLocation (1 samples, 0.03%)</title><rect x="113.5" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="116.5" y="894.0"></text>
</g>
<g>
<title>URL.toString (1 samples, 0.03%)</title><rect x="113.5" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.5" y="878.0"></text>
</g>
<g>
<title>URL.toExternalForm (1 samples, 0.03%)</title><rect x="113.5" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.5" y="862.0"></text>
</g>
<g>
<title>URLStreamHandler.toExternalForm (1 samples, 0.03%)</title><rect x="113.5" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.5" y="846.0"></text>
</g>
<g>
<title>TimeZone.getDefault (2 samples, 0.06%)</title><rect x="113.9" y="1027.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="116.9" y="1038.0"></text>
</g>
<g>
<title>TimeZone.getDefaultRef (2 samples, 0.06%)</title><rect x="113.9" y="1011.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.9" y="1022.0"></text>
</g>
<g>
<title>TimeZone.setDefaultZone (2 samples, 0.06%)</title><rect x="113.9" y="995.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.9" y="1006.0"></text>
</g>
<g>
<title>TimeZone.getTimeZone (2 samples, 0.06%)</title><rect x="113.9" y="979.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.9" y="990.0"></text>
</g>
<g>
<title>ZoneInfo.getTimeZone (2 samples, 0.06%)</title><rect x="113.9" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.9" y="974.0"></text>
</g>
<g>
<title>ZoneInfoFile.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="113.9" y="947.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.9" y="958.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="113.9" y="931.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.9" y="942.0"></text>
</g>
<g>
<title>ZoneInfoFile$1.run (1 samples, 0.03%)</title><rect x="113.9" y="915.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="116.9" y="926.0"></text>
</g>
<g>
<title>ZoneInfoFile$1.run (1 samples, 0.03%)</title><rect x="113.9" y="899.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.9" y="910.0"></text>
</g>
<g>
<title>ZoneInfoFile.load (1 samples, 0.03%)</title><rect x="113.9" y="883.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.9" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="113.9" y="867.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="116.9" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="113.9" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="116.9" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="113.9" y="835.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="116.9" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="113.9" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="116.9" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="113.9" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="116.9" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="113.9" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="116.9" y="798.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="113.9" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="116.9" y="782.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.03%)</title><rect x="113.9" y="755.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="116.9" y="766.0"></text>
</g>
<g>
<title>ZoneInfoFile.getZoneInfo (1 samples, 0.03%)</title><rect x="114.4" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.4" y="958.0"></text>
</g>
<g>
<title>ZoneInfoFile.getZoneInfo0 (1 samples, 0.03%)</title><rect x="114.4" y="931.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.4" y="942.0"></text>
</g>
<g>
<title>ZoneInfoFile.getZoneInfo (1 samples, 0.03%)</title><rect x="114.4" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.4" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="114.4" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="117.4" y="910.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="117.4" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="117.4" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="851.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="117.4" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="117.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="117.4" y="830.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="117.4" y="814.0"></text>
</g>
<g>
<title>ClassPathImageEntry::open_stream(char const*, Thread*) (1 samples, 0.03%)</title><rect x="114.4" y="787.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="117.4" y="798.0"></text>
</g>
<g>
<title>ClassLoader::package_from_name(char const*, bool*) (1 samples, 0.03%)</title><rect x="114.4" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="117.4" y="782.0"></text>
</g>
<g>
<title>strrchr (1 samples, 0.03%)</title><rect x="114.4" y="755.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="117.4" y="766.0"></text>
</g>
<g>
<title>ConsoleHandler.&lt;init&gt; (1 samples, 0.03%)</title><rect x="114.8" y="1075.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.8" y="1086.0"></text>
</g>
<g>
<title>ConsoleHandler.&lt;init&gt; (1 samples, 0.03%)</title><rect x="114.8" y="1059.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.8" y="1070.0"></text>
</g>
<g>
<title>ConsoleHandler.wrap (1 samples, 0.03%)</title><rect x="114.8" y="1043.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.8" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="114.8" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="117.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="114.8" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="117.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="114.8" y="995.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="117.8" y="1006.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="114.8" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="117.8" y="990.0"></text>
</g>
<g>
<title>klassVtable::fill_in_mirandas(int) (1 samples, 0.03%)</title><rect x="114.8" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="117.8" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;Method*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="114.8" y="947.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="117.8" y="958.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="114.8" y="931.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="117.8" y="942.0"></text>
</g>
<g>
<title>LoggingSetupRecorder.hasColorSupport (1 samples, 0.03%)</title><rect x="115.2" y="1075.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.2" y="1086.0"></text>
</g>
<g>
<title>System.console (1 samples, 0.03%)</title><rect x="115.2" y="1059.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.2" y="1070.0"></text>
</g>
<g>
<title>SharedSecrets.getJavaIOAccess (1 samples, 0.03%)</title><rect x="115.2" y="1043.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.2" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="115.2" y="1027.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="118.2" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="1011.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="118.2" y="1022.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="118.2" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="118.2" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="963.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="118.2" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.2" y="958.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="118.2" y="942.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="118.2" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.2" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="118.2" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="867.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="118.2" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="118.2" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="115.2" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.2" y="846.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="115.2" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="118.2" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="115.7" y="1091.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.7" y="1102.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="115.7" y="1075.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.7" y="1086.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="115.7" y="1059.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.7" y="1070.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="115.7" y="1043.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.7" y="1054.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="115.7" y="1027.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.7" y="1038.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="115.7" y="1011.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="118.7" y="1022.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="115.7" y="995.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.7" y="1006.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="115.7" y="979.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.7" y="990.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="115.7" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.7" y="974.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="115.7" y="947.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.7" y="958.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="115.7" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.7" y="942.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="115.7" y="915.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="118.7" y="926.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="899.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="118.7" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.7" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.7" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.7" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="118.7" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="118.7" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="118.7" y="814.0"></text>
</g>
<g>
<title>PlaceholderTable::find_and_remove(int, unsigned int, Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Thread*) (1 samples, 0.03%)</title><rect x="115.7" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="118.7" y="798.0"></text>
</g>
<g>
<title>PlaceholderEntry::remove_seen_thread(Thread*, PlaceholderTable::classloadAction) (1 samples, 0.03%)</title><rect x="115.7" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="118.7" y="782.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="115.7" y="755.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="118.7" y="766.0"></text>
</g>
<g>
<title>MutinyProcessor$initExecutor906198305.deploy (12 samples, 0.34%)</title><rect x="116.1" y="1139.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.1" y="1150.0"></text>
</g>
<g>
<title>MutinyProcessor$initExecutor906198305.deploy_0 (12 samples, 0.34%)</title><rect x="116.1" y="1123.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.1" y="1134.0"></text>
</g>
<g>
<title>MutinyInfrastructure.configureMutinyInfrastructure (12 samples, 0.34%)</title><rect x="116.1" y="1107.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.1" y="1118.0"></text>
</g>
<g>
<title>Infrastructure.&lt;clinit&gt; (11 samples, 0.31%)</title><rect x="116.1" y="1091.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.1" y="1102.0"></text>
</g>
<g>
<title>Infrastructure.setDefaultExecutor (1 samples, 0.03%)</title><rect x="116.1" y="1075.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="119.1" y="1086.0"></text>
</g>
<g>
<title>ForkJoinPool.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="116.1" y="1059.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="116.1" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="119.1" y="1054.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="1027.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="119.1" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="119.1" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="119.1" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_array_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="119.1" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="119.1" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="119.1" y="958.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="119.1" y="942.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="119.1" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="119.1" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="119.1" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="119.1" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="116.1" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="119.1" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="116.1" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="119.1" y="846.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="116.1" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="119.1" y="830.0"></text>
</g>
<g>
<title>Iterator.forEachRemaining (9 samples, 0.25%)</title><rect x="116.6" y="1075.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.6" y="1086.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (2 samples, 0.06%)</title><rect x="116.6" y="1059.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.6" y="1070.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (2 samples, 0.06%)</title><rect x="116.6" y="1043.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.6" y="1054.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (2 samples, 0.06%)</title><rect x="116.6" y="1027.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.6" y="1038.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (2 samples, 0.06%)</title><rect x="116.6" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.6" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="116.6" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.6" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="116.6" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.6" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.findResources (1 samples, 0.03%)</title><rect x="116.6" y="963.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.6" y="974.0"></text>
</g>
<g>
<title>JarResource.getResourceURL (1 samples, 0.03%)</title><rect x="116.6" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.6" y="958.0"></text>
</g>
<g>
<title>UnixPath.toUri (1 samples, 0.03%)</title><rect x="116.6" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.6" y="942.0"></text>
</g>
<g>
<title>UnixUriUtils.toUri (1 samples, 0.03%)</title><rect x="116.6" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.6" y="926.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.stat (1 samples, 0.03%)</title><rect x="116.6" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.6" y="910.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.stat1 (1 samples, 0.03%)</title><rect x="116.6" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.6" y="894.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="116.6" y="867.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="119.6" y="878.0"></text>
</g>
<g>
<title>ServiceLoader.getConstructor (1 samples, 0.03%)</title><rect x="117.0" y="995.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.0" y="1006.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="117.0" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.0" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (1 samples, 0.03%)</title><rect x="117.0" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.0" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (1 samples, 0.03%)</title><rect x="117.0" y="947.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.0" y="958.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="117.0" y="931.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.0" y="942.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="117.0" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.0" y="926.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="117.0" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.0" y="910.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="117.0" y="883.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.0" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="117.0" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="117.0" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.0" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="117.0" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="117.0" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="120.0" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="117.0" y="803.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="120.0" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="117.0" y="787.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="120.0" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="771.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="120.0" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="755.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="120.0" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="120.0" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="120.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="120.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="691.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="120.0" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="117.0" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="120.0" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="117.0" y="659.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="120.0" y="670.0"></text>
</g>
<g>
<title>ServiceLoader$3.next (7 samples, 0.20%)</title><rect x="117.5" y="1059.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.5" y="1070.0"></text>
</g>
<g>
<title>ServiceLoader$ProviderImpl.get (7 samples, 0.20%)</title><rect x="117.5" y="1043.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.5" y="1054.0"></text>
</g>
<g>
<title>ServiceLoader$ProviderImpl.newInstance (7 samples, 0.20%)</title><rect x="117.5" y="1027.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="120.5" y="1038.0"></text>
</g>
<g>
<title>Constructor.newInstance (7 samples, 0.20%)</title><rect x="117.5" y="1011.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.5" y="1022.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.20%)</title><rect x="117.5" y="995.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.5" y="1006.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (7 samples, 0.20%)</title><rect x="117.5" y="979.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.5" y="990.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (7 samples, 0.20%)</title><rect x="117.5" y="963.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="120.5" y="974.0"></text>
</g>
<g>
<title>ContextPropagationUniInterceptor.&lt;clinit&gt; (7 samples, 0.20%)</title><rect x="117.5" y="947.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.5" y="958.0"></text>
</g>
<g>
<title>SmallRyeContextManagerProvider.getContextManager (7 samples, 0.20%)</title><rect x="117.5" y="931.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.5" y="942.0"></text>
</g>
<g>
<title>SmallRyeContextManagerProvider.getContextManager (7 samples, 0.20%)</title><rect x="117.5" y="915.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.5" y="926.0"></text>
</g>
<g>
<title>SmallRyeContextManager$Builder.build (7 samples, 0.20%)</title><rect x="117.5" y="899.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="120.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="117.5" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.5" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="117.5" y="867.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.5" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="117.5" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.5" y="862.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="117.5" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.5" y="846.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="117.5" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.5" y="830.0"></text>
</g>
<g>
<title>Class.isArray (1 samples, 0.03%)</title><rect x="117.5" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="120.5" y="814.0"></text>
</g>
<g>
<title>SmallRyeContextManager$Builder.discoverThreadContextProviders (2 samples, 0.06%)</title><rect x="117.9" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.9" y="894.0"></text>
</g>
<g>
<title>Iterable.forEach (2 samples, 0.06%)</title><rect x="117.9" y="867.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.9" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (2 samples, 0.06%)</title><rect x="117.9" y="851.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.9" y="862.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (2 samples, 0.06%)</title><rect x="117.9" y="835.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.9" y="846.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (2 samples, 0.06%)</title><rect x="117.9" y="819.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.9" y="830.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (2 samples, 0.06%)</title><rect x="117.9" y="803.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="120.9" y="814.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (2 samples, 0.06%)</title><rect x="117.9" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="120.9" y="798.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="118.3" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.3" y="782.0"></text>
</g>
<g>
<title>BufferedReader.close (1 samples, 0.03%)</title><rect x="118.3" y="755.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.3" y="766.0"></text>
</g>
<g>
<title>InputStreamReader.close (1 samples, 0.03%)</title><rect x="118.3" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.3" y="750.0"></text>
</g>
<g>
<title>StreamDecoder.close (1 samples, 0.03%)</title><rect x="118.3" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.3" y="734.0"></text>
</g>
<g>
<title>StreamDecoder.implClose (1 samples, 0.03%)</title><rect x="118.3" y="707.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="718.0"></text>
</g>
<g>
<title>JarURLConnection$JarURLInputStream.close (1 samples, 0.03%)</title><rect x="118.3" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.3" y="702.0"></text>
</g>
<g>
<title>URLJarFile.close (1 samples, 0.03%)</title><rect x="118.3" y="675.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.3" y="686.0"></text>
</g>
<g>
<title>JarFileFactory.close (1 samples, 0.03%)</title><rect x="118.3" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.3" y="670.0"></text>
</g>
<g>
<title>HashMap.remove (1 samples, 0.03%)</title><rect x="118.3" y="643.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.3" y="654.0"></text>
</g>
<g>
<title>HashMap.hash (1 samples, 0.03%)</title><rect x="118.3" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="121.3" y="638.0"></text>
</g>
<g>
<title>Object.hashCode (1 samples, 0.03%)</title><rect x="118.3" y="611.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.3" y="622.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="118.3" y="595.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="121.3" y="606.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="118.3" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="121.3" y="590.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="118.3" y="563.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="121.3" y="574.0"></text>
</g>
<g>
<title>revoke_bias(oopDesc*, bool, bool, JavaThread*, JavaThread**) (1 samples, 0.03%)</title><rect x="118.3" y="547.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="121.3" y="558.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (1 samples, 0.03%)</title><rect x="118.3" y="531.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="121.3" y="542.0"></text>
</g>
<g>
<title>vframe::java_sender() const (1 samples, 0.03%)</title><rect x="118.3" y="515.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="121.3" y="526.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.03%)</title><rect x="118.3" y="499.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="121.3" y="510.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="118.3" y="483.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="121.3" y="494.0"></text>
</g>
<g>
<title>SmallRyeContextManager.&lt;init&gt; (4 samples, 0.11%)</title><rect x="118.8" y="883.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.8" y="894.0"></text>
</g>
<g>
<title>DefaultValues.&lt;init&gt; (2 samples, 0.06%)</title><rect x="118.8" y="867.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.8" y="878.0"></text>
</g>
<g>
<title>DefaultValues.resolveConfiguration (1 samples, 0.03%)</title><rect x="118.8" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.8" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="118.8" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.8" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConverter (1 samples, 0.03%)</title><rect x="118.8" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.8" y="830.0"></text>
</g>
<g>
<title>Converters.newArrayConverter (1 samples, 0.03%)</title><rect x="118.8" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.8" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="118.8" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="121.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="118.8" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="121.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="118.8" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="121.8" y="766.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="118.8" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="121.8" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="118.8" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="121.8" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="118.8" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="121.8" y="718.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="118.8" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="121.8" y="702.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="118.8" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="121.8" y="686.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="118.8" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="121.8" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfig.getPropertyNames (1 samples, 0.03%)</title><rect x="119.2" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.2" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.2" y="846.0"></text>
</g>
<g>
<title>ConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.2" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.2" y="814.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.2" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.2" y="782.0"></text>
</g>
<g>
<title>ConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.2" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.2" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="119.2" y="723.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.2" y="734.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getPropertyNames (1 samples, 0.03%)</title><rect x="119.2" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.2" y="718.0"></text>
</g>
<g>
<title>ConfigSource.getPropertyNames (1 samples, 0.03%)</title><rect x="119.2" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.2" y="702.0"></text>
</g>
<g>
<title>SysPropConfigSource.getProperties (1 samples, 0.03%)</title><rect x="119.2" y="675.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.2" y="686.0"></text>
</g>
<g>
<title>ConfigSourceUtil.propertiesToMap (1 samples, 0.03%)</title><rect x="119.2" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.2" y="670.0"></text>
</g>
<g>
<title>ReferencePipeline.collect (1 samples, 0.03%)</title><rect x="119.2" y="643.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.2" y="654.0"></text>
</g>
<g>
<title>AbstractPipeline.evaluate (1 samples, 0.03%)</title><rect x="119.2" y="627.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.2" y="638.0"></text>
</g>
<g>
<title>ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.03%)</title><rect x="119.2" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.2" y="622.0"></text>
</g>
<g>
<title>AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="119.2" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.2" y="606.0"></text>
</g>
<g>
<title>AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="119.2" y="579.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.2" y="590.0"></text>
</g>
<g>
<title>Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.03%)</title><rect x="119.2" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="122.2" y="574.0"></text>
</g>
<g>
<title>Iterator.forEachRemaining (1 samples, 0.03%)</title><rect x="119.2" y="547.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.2" y="558.0"></text>
</g>
<g>
<title>ReduceOps$3ReducingSink.accept (1 samples, 0.03%)</title><rect x="119.2" y="531.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.2" y="542.0"></text>
</g>
<g>
<title>889729797.accept (1 samples, 0.03%)</title><rect x="119.2" y="515.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="122.2" y="526.0"></text>
</g>
<g>
<title>Collectors.lambda$uniqKeysMapAccumulator$1 (1 samples, 0.03%)</title><rect x="119.2" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.2" y="510.0"></text>
</g>
<g>
<title>MutinyContextManagerExtension.setup (2 samples, 0.06%)</title><rect x="119.7" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.7" y="878.0"></text>
</g>
<g>
<title>SmallRyeContextManager.newThreadContextBuilder (1 samples, 0.03%)</title><rect x="119.7" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.7" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="119.7" y="835.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.7" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="119.7" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.7" y="830.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="119.7" y="803.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.7" y="814.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="119.7" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.7" y="798.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="119.7" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.7" y="782.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="119.7" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.7" y="766.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="119.7" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.7" y="750.0"></text>
</g>
<g>
<title>SmallRyeThreadContext$Builder.build (1 samples, 0.03%)</title><rect x="120.1" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.1" y="862.0"></text>
</g>
<g>
<title>SmallRyeThreadContext$Builder.build (1 samples, 0.03%)</title><rect x="120.1" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.1" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="120.1" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.1" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="120.1" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.1" y="814.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="120.1" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.1" y="798.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="120.1" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.1" y="782.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="120.1" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.1" y="766.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="120.1" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.1" y="750.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="120.1" y="723.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.1" y="734.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="120.1" y="707.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.1" y="718.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="120.1" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.1" y="702.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="120.1" y="675.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.1" y="686.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="120.1" y="659.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="123.1" y="670.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="120.6" y="1075.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.6" y="1086.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="120.6" y="1059.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.6" y="1070.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="120.6" y="1043.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.6" y="1054.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="120.6" y="1027.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.6" y="1038.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="120.6" y="1011.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.6" y="1022.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="120.6" y="995.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="123.6" y="1006.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="120.6" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.6" y="990.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="120.6" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.6" y="974.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="120.6" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.6" y="958.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="120.6" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.6" y="942.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="120.6" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.6" y="926.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="120.6" y="899.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="123.6" y="910.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="120.6" y="883.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="123.6" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="120.6" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="123.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="120.6" y="851.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="123.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="120.6" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="123.6" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="120.6" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="123.6" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::ClassVerifier(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="120.6" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="123.6" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="121.0" y="1091.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.0" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="121.0" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.0" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="121.0" y="1059.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.0" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="121.0" y="1043.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.0" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="121.0" y="1027.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="124.0" y="1038.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="121.0" y="1011.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="124.0" y="1022.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="995.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="124.0" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="124.0" y="990.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="963.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="124.0" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="947.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="124.0" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="124.0" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="124.0" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="121.0" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="124.0" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="121.0" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="124.0" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="121.0" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="124.0" y="878.0"></text>
</g>
<g>
<title>NarayanaJtaProcessor$build-1459807804.deploy (3 samples, 0.08%)</title><rect x="121.4" y="1139.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.4" y="1150.0"></text>
</g>
<g>
<title>NarayanaJtaProcessor$build-1459807804.deploy_0 (3 samples, 0.08%)</title><rect x="121.4" y="1123.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.4" y="1134.0"></text>
</g>
<g>
<title>NarayanaJtaRecorder.disableTransactionStatusManager (1 samples, 0.03%)</title><rect x="121.4" y="1107.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.4" y="1118.0"></text>
</g>
<g>
<title>arjPropertyManager.getCoordinatorEnvironmentBean (1 samples, 0.03%)</title><rect x="121.4" y="1091.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="124.4" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="121.4" y="1075.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.4" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="121.4" y="1059.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.4" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="121.4" y="1043.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.4" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="121.4" y="1027.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.4" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="121.4" y="1011.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="124.4" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="121.4" y="995.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="124.4" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="121.4" y="979.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="124.4" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="121.4" y="963.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="124.4" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="121.4" y="947.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="124.4" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="121.4" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="124.4" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="121.4" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="124.4" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="121.4" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="124.4" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="121.4" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="124.4" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="121.4" y="867.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.4" y="878.0"></text>
</g>
<g>
<title>NarayanaJtaRecorder.setDefaultTimeout (1 samples, 0.03%)</title><rect x="121.9" y="1107.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="124.9" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="121.9" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="124.9" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="121.9" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="124.9" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="1059.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="124.9" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_dynamic_call(CallInfo&amp;, int, Handle, Symbol*, Symbol*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="124.9" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find_dynamic_call_site_invoker(Klass*, int, Handle, Symbol*, Symbol*, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="124.9" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_type(Symbol*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="1011.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="124.9" y="1022.0"></text>
</g>
<g>
<title>SignatureStream::as_java_mirror(Handle, Handle, SignatureStream::FailureMode, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="995.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.9" y="1006.0"></text>
</g>
<g>
<title>SignatureStream::as_klass(Handle, Handle, SignatureStream::FailureMode, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="124.9" y="990.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="963.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="124.9" y="974.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="121.9" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="124.9" y="958.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="121.9" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="124.9" y="942.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="121.9" y="915.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="124.9" y="926.0"></text>
</g>
<g>
<title>NarayanaJtaRecorder.setNodeName (1 samples, 0.03%)</title><rect x="122.3" y="1107.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="125.3" y="1118.0"></text>
</g>
<g>
<title>arjPropertyManager.getCoreEnvironmentBean (1 samples, 0.03%)</title><rect x="122.3" y="1091.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="125.3" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="122.3" y="1075.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.3" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="122.3" y="1059.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.3" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="122.3" y="1043.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.3" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="122.3" y="1027.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="125.3" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="122.3" y="1011.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="125.3" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="122.3" y="995.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="125.3" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="979.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="125.3" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="125.3" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="125.3" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="125.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="125.3" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="899.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="125.3" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="125.3" y="894.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="125.3" y="878.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="125.3" y="862.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="835.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="125.3" y="846.0"></text>
</g>
<g>
<title>Symbol::operator new(unsigned long, int, Thread*) (1 samples, 0.03%)</title><rect x="122.3" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="125.3" y="830.0"></text>
</g>
<g>
<title>NativeImageRuntimePropertiesRecorder.doRuntime (1 samples, 0.03%)</title><rect x="122.8" y="1139.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="125.8" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="122.8" y="1123.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="125.8" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="122.8" y="1107.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="125.8" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="122.8" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="125.8" y="1102.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="122.8" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="125.8" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="122.8" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="125.8" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="122.8" y="1043.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="125.8" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="122.8" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="125.8" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="122.8" y="1011.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="125.8" y="1022.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="122.8" y="995.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="125.8" y="1006.0"></text>
</g>
<g>
<title>DictionaryEntry::contains_protection_domain(oopDesc*) const (1 samples, 0.03%)</title><rect x="122.8" y="979.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="125.8" y="990.0"></text>
</g>
<g>
<title>ProtectionDomainEntry::object_no_keepalive() (1 samples, 0.03%)</title><rect x="122.8" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="125.8" y="974.0"></text>
</g>
<g>
<title>ResteasyStandaloneBuildStep$boot-614950547.deploy (35 samples, 0.98%)</title><rect x="123.2" y="1139.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.2" y="1150.0"></text>
</g>
<g>
<title>ResteasyStandaloneBuildStep$boot-614950547.deploy_0 (35 samples, 0.98%)</title><rect x="123.2" y="1123.0" width="15.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.2" y="1134.0"></text>
</g>
<g>
<title>ResteasyStandaloneRecorder.vertxRequestHandler (35 samples, 0.98%)</title><rect x="123.2" y="1107.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.2" y="1118.0"></text>
</g>
<g>
<title>VertxCoreRecorder$VertxSupplier.get (34 samples, 0.95%)</title><rect x="123.2" y="1091.0" width="15.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.2" y="1102.0"></text>
</g>
<g>
<title>VertxCoreRecorder$VertxSupplier.get (34 samples, 0.95%)</title><rect x="123.2" y="1075.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.2" y="1086.0"></text>
</g>
<g>
<title>VertxCoreRecorder.initialize (34 samples, 0.95%)</title><rect x="123.2" y="1059.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.2" y="1070.0"></text>
</g>
<g>
<title>Vertx.vertx (30 samples, 0.84%)</title><rect x="123.2" y="1043.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.2" y="1054.0"></text>
</g>
<g>
<title>VertxFactoryImpl.vertx (30 samples, 0.84%)</title><rect x="123.2" y="1027.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.2" y="1038.0"></text>
</g>
<g>
<title>VertxFactoryImpl.vertx (30 samples, 0.84%)</title><rect x="123.2" y="1011.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.2" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="123.2" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="126.2" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="123.2" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="126.2" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="123.2" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="126.2" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="123.2" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="126.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="123.2" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="126.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="123.2" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="126.2" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="123.2" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="126.2" y="910.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="123.2" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="126.2" y="894.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="123.2" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="126.2" y="878.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="123.2" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="126.2" y="862.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.03%)</title><rect x="123.2" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="126.2" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="123.6" y="995.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.6" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="123.6" y="979.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.6" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="123.6" y="963.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="123.6" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.6" y="958.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="123.6" y="931.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="126.6" y="942.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="123.6" y="915.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="126.6" y="926.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="123.6" y="899.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="126.6" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="123.6" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="126.6" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="123.6" y="867.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="126.6" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="123.6" y="851.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="126.6" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="123.6" y="835.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="126.6" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="123.6" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="126.6" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="123.6" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="126.6" y="814.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="123.6" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="126.6" y="798.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="123.6" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="126.6" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="123.6" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="126.6" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="124.1" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="127.1" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="124.1" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="127.1" y="814.0"></text>
</g>
<g>
<title>ConstMethod::copy_stackmap_data(ClassLoaderData*, unsigned char*, int, Thread*) (1 samples, 0.03%)</title><rect x="124.1" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="127.1" y="798.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="124.1" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="127.1" y="782.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="124.1" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="127.1" y="766.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="124.1" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="127.1" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="124.1" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="127.1" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="124.1" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="127.1" y="718.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="124.1" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="127.1" y="702.0"></text>
</g>
<g>
<title>VertxImpl.vertx (27 samples, 0.76%)</title><rect x="124.5" y="995.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.5" y="1006.0"></text>
</g>
<g>
<title>VertxImpl.&lt;init&gt; (26 samples, 0.73%)</title><rect x="124.5" y="979.0" width="11.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="127.5" y="990.0"></text>
</g>
<g>
<title>DeploymentManager.&lt;init&gt; (1 samples, 0.03%)</title><rect x="124.5" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.5" y="974.0"></text>
</g>
<g>
<title>DeploymentManager.loadVerticleFactories (1 samples, 0.03%)</title><rect x="124.5" y="947.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.5" y="958.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactories (1 samples, 0.03%)</title><rect x="124.5" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.5" y="942.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactories (1 samples, 0.03%)</title><rect x="124.5" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="127.5" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="124.5" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.5" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="124.5" y="883.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.5" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="124.5" y="867.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.5" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="124.5" y="851.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.5" y="862.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="124.5" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.5" y="846.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="124.5" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.5" y="830.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="124.5" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.5" y="814.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="124.5" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.5" y="798.0"></text>
</g>
<g>
<title>BootLoader.findResources (1 samples, 0.03%)</title><rect x="124.5" y="771.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="127.5" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResources (1 samples, 0.03%)</title><rect x="124.5" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.5" y="766.0"></text>
</g>
<g>
<title>Resources.toPackageName (1 samples, 0.03%)</title><rect x="124.5" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.5" y="750.0"></text>
</g>
<g>
<title>EventBusImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="125.0" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.0" y="974.0"></text>
</g>
<g>
<title>CodecManager.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="125.0" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.0" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="125.0" y="931.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="128.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="125.0" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="128.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="125.0" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="128.0" y="910.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="125.0" y="883.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="128.0" y="894.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="125.0" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="128.0" y="878.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="125.0" y="851.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="128.0" y="862.0"></text>
</g>
<g>
<title>JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="125.0" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="128.0" y="846.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.03%)</title><rect x="125.0" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="128.0" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="125.0" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="128.0" y="814.0"></text>
</g>
<g>
<title>FileResolver.&lt;init&gt; (1 samples, 0.03%)</title><rect x="125.4" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.4" y="974.0"></text>
</g>
<g>
<title>FileResolver.setupCacheDir (1 samples, 0.03%)</title><rect x="125.4" y="947.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.4" y="958.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="125.4" y="931.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.4" y="942.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="125.4" y="915.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.4" y="926.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="125.4" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.4" y="910.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.03%)</title><rect x="125.4" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.4" y="894.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="125.4" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.4" y="878.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="125.4" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.4" y="862.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="125.4" y="835.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.4" y="846.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="125.4" y="819.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.4" y="830.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="125.4" y="803.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="128.4" y="814.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="125.4" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.4" y="798.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="125.4" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.4" y="782.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="125.4" y="755.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.4" y="766.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="125.4" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.4" y="750.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitStaticInvoke (1 samples, 0.03%)</title><rect x="125.4" y="723.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="128.4" y="734.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArguments (1 samples, 0.03%)</title><rect x="125.4" y="707.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.4" y="718.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitPushArgument (1 samples, 0.03%)</title><rect x="125.4" y="691.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.4" y="702.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitImplicitConversion (1 samples, 0.03%)</title><rect x="125.4" y="675.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.4" y="686.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.emitReferenceCast (1 samples, 0.03%)</title><rect x="125.4" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.4" y="670.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.isStaticallyNameable (1 samples, 0.03%)</title><rect x="125.4" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.4" y="654.0"></text>
</g>
<g>
<title>VerifyAccess.isSamePackage (1 samples, 0.03%)</title><rect x="125.4" y="627.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.4" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="125.9" y="963.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.9" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="125.9" y="947.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.9" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (4 samples, 0.11%)</title><rect x="125.9" y="931.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="128.9" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (4 samples, 0.11%)</title><rect x="125.9" y="915.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.9" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (4 samples, 0.11%)</title><rect x="125.9" y="899.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="128.9" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (4 samples, 0.11%)</title><rect x="125.9" y="883.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="128.9" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (4 samples, 0.11%)</title><rect x="125.9" y="867.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="128.9" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (4 samples, 0.11%)</title><rect x="125.9" y="851.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="128.9" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (4 samples, 0.11%)</title><rect x="125.9" y="835.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="128.9" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (4 samples, 0.11%)</title><rect x="125.9" y="819.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="128.9" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (4 samples, 0.11%)</title><rect x="125.9" y="803.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="128.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="125.9" y="787.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="128.9" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="125.9" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="128.9" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="125.9" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="128.9" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="125.9" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="128.9" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="126.3" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="129.3" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="126.3" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="129.3" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="126.3" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="129.3" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (2 samples, 0.06%)</title><rect x="126.7" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="129.7" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (2 samples, 0.06%)</title><rect x="126.7" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="129.7" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="127.2" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="130.2" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="127.2" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="130.2" y="750.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="127.6" y="931.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.6" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="127.6" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.6" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="127.6" y="899.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.6" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="127.6" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.6" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="127.6" y="867.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="130.6" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="127.6" y="851.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="130.6" y="862.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="127.6" y="835.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="130.6" y="846.0"></text>
</g>
<g>
<title>Transport.eventLoopGroup (14 samples, 0.39%)</title><rect x="128.1" y="963.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.1" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="128.1" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="131.1" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="128.1" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="131.1" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="128.1" y="915.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="131.1" y="926.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="128.1" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="131.1" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="128.1" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="131.1" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="128.1" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="131.1" y="878.0"></text>
</g>
<g>
<title>NioEventLoopGroup.&lt;init&gt; (13 samples, 0.36%)</title><rect x="128.5" y="947.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.5" y="958.0"></text>
</g>
<g>
<title>NioEventLoopGroup.&lt;init&gt; (12 samples, 0.34%)</title><rect x="128.5" y="931.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.5" y="942.0"></text>
</g>
<g>
<title>NioEventLoopGroup.&lt;init&gt; (12 samples, 0.34%)</title><rect x="128.5" y="915.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.5" y="926.0"></text>
</g>
<g>
<title>MultithreadEventLoopGroup.&lt;init&gt; (12 samples, 0.34%)</title><rect x="128.5" y="899.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.5" y="910.0"></text>
</g>
<g>
<title>MultithreadEventExecutorGroup.&lt;init&gt; (12 samples, 0.34%)</title><rect x="128.5" y="883.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.5" y="894.0"></text>
</g>
<g>
<title>MultithreadEventExecutorGroup.&lt;init&gt; (12 samples, 0.34%)</title><rect x="128.5" y="867.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.5" y="878.0"></text>
</g>
<g>
<title>MultithreadEventExecutorGroup.&lt;init&gt; (12 samples, 0.34%)</title><rect x="128.5" y="851.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.5" y="862.0"></text>
</g>
<g>
<title>DefaultEventExecutorChooserFactory.newChooser (1 samples, 0.03%)</title><rect x="128.5" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="128.5" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.5" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="128.5" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.5" y="814.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="128.5" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.5" y="798.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="128.5" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.5" y="782.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="128.5" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.5" y="766.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="128.5" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.5" y="750.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="128.5" y="723.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="131.5" y="734.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="128.5" y="707.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="131.5" y="718.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="128.5" y="691.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="131.5" y="702.0"></text>
</g>
<g>
<title>GlobalEventExecutor.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="129.0" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.0" y="846.0"></text>
</g>
<g>
<title>GlobalEventExecutor.&lt;init&gt; (2 samples, 0.06%)</title><rect x="129.0" y="819.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.0" y="830.0"></text>
</g>
<g>
<title>DefaultThreadFactory.toPoolName (1 samples, 0.03%)</title><rect x="129.0" y="803.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.0" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="129.0" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="132.0" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="129.0" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="132.0" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="129.0" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="132.0" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="129.0" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="132.0" y="750.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="129.0" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="132.0" y="734.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="129.0" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="132.0" y="718.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="129.0" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="132.0" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="129.0" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="132.0" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="129.0" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="132.0" y="670.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="129.0" y="643.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="132.0" y="654.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="129.4" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.4" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="129.4" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.4" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="129.4" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.4" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="129.4" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.4" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="129.4" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.4" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="129.4" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.4" y="734.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="129.4" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="132.4" y="718.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="129.4" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.4" y="702.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="129.4" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.4" y="686.0"></text>
</g>
<g>
<title>NioEventLoopGroup.newChild (7 samples, 0.20%)</title><rect x="129.8" y="835.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="132.8" y="846.0"></text>
</g>
<g>
<title>NioEventLoopGroup.newChild (7 samples, 0.20%)</title><rect x="129.8" y="819.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.8" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="129.8" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="132.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="129.8" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="132.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="129.8" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="132.8" y="782.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="129.8" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="132.8" y="766.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="129.8" y="739.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="132.8" y="750.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*) (1 samples, 0.03%)</title><rect x="129.8" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="132.8" y="734.0"></text>
</g>
<g>
<title>NioEventLoop.&lt;init&gt; (5 samples, 0.14%)</title><rect x="130.3" y="803.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="133.3" y="814.0"></text>
</g>
<g>
<title>NioEventLoop.newTaskQueue (3 samples, 0.08%)</title><rect x="130.3" y="787.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.3" y="798.0"></text>
</g>
<g>
<title>NioEventLoop.newTaskQueue0 (3 samples, 0.08%)</title><rect x="130.3" y="771.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.3" y="782.0"></text>
</g>
<g>
<title>PlatformDependent.newMpscQueue (3 samples, 0.08%)</title><rect x="130.3" y="755.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.3" y="766.0"></text>
</g>
<g>
<title>PlatformDependent$Mpsc.newMpscQueue (1 samples, 0.03%)</title><rect x="130.3" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.3" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="130.3" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="133.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="133.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="133.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="133.3" y="686.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="133.3" y="670.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="133.3" y="654.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="133.3" y="638.0"></text>
</g>
<g>
<title>ClassVerifier::verify_return_value(VerificationType, VerificationType, unsigned short, StackMapFrame*, Thread*) (1 samples, 0.03%)</title><rect x="130.3" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="133.3" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="130.7" y="739.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.7" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="130.7" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.7" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="130.7" y="707.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.7" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="130.7" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.7" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="130.7" y="675.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.7" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="130.7" y="659.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.7" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="130.7" y="643.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.7" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="130.7" y="627.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.7" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="130.7" y="611.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.7" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="130.7" y="595.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="133.7" y="606.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="130.7" y="579.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.7" y="590.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="130.7" y="563.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.7" y="574.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="130.7" y="547.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="133.7" y="558.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="130.7" y="531.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="133.7" y="542.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="515.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="133.7" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="499.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="133.7" y="510.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="133.7" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="133.7" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="133.7" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="133.7" y="446.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="130.7" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="133.7" y="430.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.2" y="558.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.2" y="542.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="131.2" y="515.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.2" y="526.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="131.2" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.2" y="510.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="483.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.2" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.2" y="478.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="131.2" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.2" y="462.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="131.2" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.2" y="446.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="419.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.2" y="430.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="403.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.2" y="414.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="131.2" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.2" y="398.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="131.2" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.2" y="382.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.2" y="366.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.2" y="350.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="131.2" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.2" y="334.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="131.2" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.2" y="318.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.2" y="302.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.2" y="286.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="131.2" y="259.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.2" y="270.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="131.2" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.2" y="254.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="227.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.2" y="238.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="211.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.2" y="222.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="131.2" y="195.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.2" y="206.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="131.2" y="179.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.2" y="190.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="163.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.2" y="174.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="131.2" y="147.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.2" y="158.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="131.2" y="131.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.2" y="142.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="131.2" y="115.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.2" y="126.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="131.2" y="99.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.2" y="110.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="131.2" y="83.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.2" y="94.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="131.2" y="67.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="134.2" y="78.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="131.2" y="51.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="134.2" y="62.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="131.2" y="35.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="134.2" y="46.0"></text>
</g>
<g>
<title>NioEventLoop.openSelector (2 samples, 0.06%)</title><rect x="131.6" y="787.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.6" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="131.6" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="134.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="131.6" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="134.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="131.6" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="134.6" y="750.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="131.6" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="134.6" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="131.6" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="134.6" y="718.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="131.6" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="134.6" y="702.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="131.6" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="134.6" y="686.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="131.6" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="134.6" y="670.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="131.6" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="134.6" y="654.0"></text>
</g>
<g>
<title>KQueueSelectorProvider.openSelector (1 samples, 0.03%)</title><rect x="132.0" y="771.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="135.0" y="782.0"></text>
</g>
<g>
<title>KQueueSelectorImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="132.0" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.0" y="766.0"></text>
</g>
<g>
<title>KQueue.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="132.0" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.0" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="132.0" y="723.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="135.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="132.0" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="135.0" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="132.5" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.5" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="132.5" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.5" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="132.5" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.5" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="132.5" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.5" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="132.5" y="739.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="135.5" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="132.5" y="723.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="135.5" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="132.5" y="707.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="135.5" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="132.5" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="135.5" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="132.5" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="135.5" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="132.5" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="135.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="132.5" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="135.5" y="654.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="132.5" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="135.5" y="638.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="132.5" y="611.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="135.5" y="622.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::new_node_data(InstanceKlass*) (1 samples, 0.03%)</title><rect x="132.5" y="595.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="135.5" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="132.9" y="835.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.9" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="132.9" y="819.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.9" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="132.9" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="135.9" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="132.9" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="135.9" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="132.9" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.9" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="132.9" y="755.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="135.9" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="132.9" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.9" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="132.9" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.9" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="132.9" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.9" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="132.9" y="691.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="135.9" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="132.9" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.9" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="132.9" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="135.9" y="670.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="132.9" y="643.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="135.9" y="654.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="132.9" y="627.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="135.9" y="638.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="132.9" y="611.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="135.9" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="132.9" y="595.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="135.9" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="132.9" y="579.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="135.9" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="132.9" y="563.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="135.9" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="132.9" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="135.9" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="132.9" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="135.9" y="542.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="133.4" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.4" y="814.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="133.4" y="787.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.4" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="133.4" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.4" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="133.4" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.4" y="766.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="133.4" y="739.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.4" y="750.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="133.4" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.4" y="734.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="133.4" y="707.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.4" y="718.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="133.4" y="691.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.4" y="702.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="133.4" y="675.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="136.4" y="686.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="133.4" y="659.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="136.4" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="133.4" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="136.4" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="133.4" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="136.4" y="638.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="133.4" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="136.4" y="622.0"></text>
</g>
<g>
<title>ClassPathImageEntry::open_stream(char const*, Thread*) (1 samples, 0.03%)</title><rect x="133.4" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="136.4" y="606.0"></text>
</g>
<g>
<title>JIMAGE_FindResource (1 samples, 0.03%)</title><rect x="133.4" y="579.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="136.4" y="590.0"></text>
</g>
<g>
<title>NativeEndian::get(unsigned int) (1 samples, 0.03%)</title><rect x="133.4" y="563.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="136.4" y="574.0"></text>
</g>
<g>
<title>SelectorProvider.provider (1 samples, 0.03%)</title><rect x="133.8" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.8" y="942.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="133.8" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.8" y="926.0"></text>
</g>
<g>
<title>SelectorProvider$1.run (1 samples, 0.03%)</title><rect x="133.8" y="899.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.8" y="910.0"></text>
</g>
<g>
<title>SelectorProvider$1.run (1 samples, 0.03%)</title><rect x="133.8" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.8" y="894.0"></text>
</g>
<g>
<title>SelectorProvider.loadProviderAsService (1 samples, 0.03%)</title><rect x="133.8" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.8" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="133.8" y="851.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.8" y="862.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="133.8" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.8" y="846.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="133.8" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.8" y="830.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="133.8" y="803.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.8" y="814.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="133.8" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.8" y="798.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="133.8" y="771.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.8" y="782.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="133.8" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.8" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasMoreElements (1 samples, 0.03%)</title><rect x="133.8" y="739.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.8" y="750.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasNext (1 samples, 0.03%)</title><rect x="133.8" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.8" y="734.0"></text>
</g>
<g>
<title>URLClassPath$1.hasMoreElements (1 samples, 0.03%)</title><rect x="133.8" y="707.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.8" y="718.0"></text>
</g>
<g>
<title>URLClassPath$1.next (1 samples, 0.03%)</title><rect x="133.8" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.8" y="702.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="133.8" y="675.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.8" y="686.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="133.8" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.8" y="670.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="133.8" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.8" y="654.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="133.8" y="627.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.8" y="638.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="133.8" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.8" y="622.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="133.8" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.8" y="606.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="133.8" y="579.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="136.8" y="590.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.ensureOpen (1 samples, 0.03%)</title><rect x="133.8" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.8" y="574.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="133.8" y="547.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.8" y="558.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="133.8" y="531.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.8" y="542.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="133.8" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.8" y="526.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getJarFile (1 samples, 0.03%)</title><rect x="133.8" y="499.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.8" y="510.0"></text>
</g>
<g>
<title>FileURLMapper.exists (1 samples, 0.03%)</title><rect x="133.8" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.8" y="494.0"></text>
</g>
<g>
<title>File.exists (1 samples, 0.03%)</title><rect x="133.8" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.8" y="478.0"></text>
</g>
<g>
<title>UnixFileSystem.getBooleanAttributes (1 samples, 0.03%)</title><rect x="133.8" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.8" y="462.0"></text>
</g>
<g>
<title>UnixFileSystem.getBooleanAttributes0 (1 samples, 0.03%)</title><rect x="133.8" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.8" y="446.0"></text>
</g>
<g>
<title>Java_java_io_UnixFileSystem_getBooleanAttributes0 (1 samples, 0.03%)</title><rect x="133.8" y="419.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="136.8" y="430.0"></text>
</g>
<g>
<title>JNU_GetStringPlatformChars (1 samples, 0.03%)</title><rect x="133.8" y="403.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="136.8" y="414.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="133.8" y="387.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="136.8" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="133.8" y="371.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="136.8" y="382.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="133.8" y="355.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="136.8" y="366.0"></text>
</g>
<g>
<title>Vertx.currentContext (1 samples, 0.03%)</title><rect x="134.3" y="963.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.3" y="974.0"></text>
</g>
<g>
<title>VertxFactoryImpl.context (1 samples, 0.03%)</title><rect x="134.3" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.3" y="958.0"></text>
</g>
<g>
<title>ContextImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="134.3" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.3" y="942.0"></text>
</g>
<g>
<title>LoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="134.3" y="915.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.3" y="926.0"></text>
</g>
<g>
<title>Class.getCanonicalName (1 samples, 0.03%)</title><rect x="134.3" y="899.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.3" y="910.0"></text>
</g>
<g>
<title>Class.reflectionData (1 samples, 0.03%)</title><rect x="134.3" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.3" y="894.0"></text>
</g>
<g>
<title>VertxImpl.getFileSystem (3 samples, 0.08%)</title><rect x="134.7" y="963.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="137.7" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="134.7" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="137.7" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="134.7" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="137.7" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="134.7" y="915.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="137.7" y="926.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="134.7" y="899.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="137.7" y="910.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="134.7" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="137.7" y="894.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="134.7" y="867.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="137.7" y="878.0"></text>
</g>
<g>
<title>JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="134.7" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="137.7" y="862.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.03%)</title><rect x="134.7" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="137.7" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="135.1" y="947.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.1" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="135.1" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.1" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="135.1" y="915.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.1" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="135.1" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.1" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="135.1" y="883.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="138.1" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="135.1" y="867.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="138.1" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="851.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="138.1" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="138.1" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="138.1" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="138.1" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="138.1" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="138.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="135.1" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="138.1" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="135.1" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="138.1" y="750.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.03%)</title><rect x="135.1" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="138.1" y="734.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="135.6" y="915.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.6" y="926.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="135.6" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.6" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="135.6" y="883.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.6" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="135.6" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="138.6" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="135.6" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="138.6" y="862.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="135.6" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.6" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="135.6" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.6" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="135.6" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.6" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="135.6" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.6" y="798.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="135.6" y="771.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="138.6" y="782.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="135.6" y="755.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="138.6" y="766.0"></text>
</g>
<g>
<title>VertxImpl.init (1 samples, 0.03%)</title><rect x="136.0" y="979.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.0" y="990.0"></text>
</g>
<g>
<title>EventBusImpl.start (1 samples, 0.03%)</title><rect x="136.0" y="963.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.0" y="974.0"></text>
</g>
<g>
<title>Future.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="136.0" y="947.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="139.0" y="958.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactory (1 samples, 0.03%)</title><rect x="136.0" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.0" y="942.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactoryOrNull (1 samples, 0.03%)</title><rect x="136.0" y="915.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.0" y="926.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactories (1 samples, 0.03%)</title><rect x="136.0" y="899.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.0" y="910.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactories (1 samples, 0.03%)</title><rect x="136.0" y="883.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.0" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="136.0" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.0" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="136.0" y="851.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="139.0" y="862.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="136.0" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.0" y="846.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="136.0" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.0" y="830.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="136.0" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.0" y="814.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="136.0" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.0" y="798.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="136.0" y="771.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.0" y="782.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="136.0" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.0" y="766.0"></text>
</g>
<g>
<title>BootLoader.findResources (1 samples, 0.03%)</title><rect x="136.0" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.0" y="750.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResources (1 samples, 0.03%)</title><rect x="136.0" y="723.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="139.0" y="734.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findMiscResource (1 samples, 0.03%)</title><rect x="136.0" y="707.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="139.0" y="718.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="136.0" y="691.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.0" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="136.0" y="675.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.0" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="136.0" y="659.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.0" y="670.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.find (1 samples, 0.03%)</title><rect x="136.0" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.0" y="654.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.03%)</title><rect x="136.0" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.0" y="638.0"></text>
</g>
<g>
<title>ImageReader.findLocation (1 samples, 0.03%)</title><rect x="136.0" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.0" y="622.0"></text>
</g>
<g>
<title>BasicImageReader.findLocation (1 samples, 0.03%)</title><rect x="136.0" y="595.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.0" y="606.0"></text>
</g>
<g>
<title>ImageLocation.verify (1 samples, 0.03%)</title><rect x="136.0" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.0" y="590.0"></text>
</g>
<g>
<title>ImageStringsReader.get (1 samples, 0.03%)</title><rect x="136.0" y="563.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.0" y="574.0"></text>
</g>
<g>
<title>BasicImageReader.getString (1 samples, 0.03%)</title><rect x="136.0" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.0" y="558.0"></text>
</g>
<g>
<title>ImageStringsReader.stringFromByteBuffer (1 samples, 0.03%)</title><rect x="136.0" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="139.0" y="542.0"></text>
</g>
<g>
<title>ImageStringsReader.charsFromByteBufferLength (1 samples, 0.03%)</title><rect x="136.0" y="515.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.0" y="526.0"></text>
</g>
<g>
<title>DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="136.0" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="139.0" y="510.0"></text>
</g>
<g>
<title>Buffer.nextGetIndex (1 samples, 0.03%)</title><rect x="136.0" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.0" y="494.0"></text>
</g>
<g>
<title>VertxCoreRecorder.convertToVertxOptions (1 samples, 0.03%)</title><rect x="136.5" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.5" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="136.5" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="139.5" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="136.5" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="139.5" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="136.5" y="995.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="139.5" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="136.5" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="139.5" y="990.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="136.5" y="963.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="139.5" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="136.5" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="139.5" y="958.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="136.5" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="139.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="136.5" y="915.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="139.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="136.5" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="139.5" y="910.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="136.5" y="883.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="139.5" y="894.0"></text>
</g>
<g>
<title>VertxOptions.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="136.9" y="1043.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.9" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="136.9" y="1027.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="139.9" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="136.9" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="139.9" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="139.9" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="139.9" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="139.9" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="947.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="139.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="139.9" y="942.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="139.9" y="926.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="139.9" y="910.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="136.9" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="139.9" y="894.0"></text>
</g>
<g>
<title>Rewriter::compute_index_maps() (1 samples, 0.03%)</title><rect x="136.9" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="139.9" y="878.0"></text>
</g>
<g>
<title>Rewriter::init_maps(int) (1 samples, 0.03%)</title><rect x="136.9" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="139.9" y="862.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned char*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="136.9" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="139.9" y="846.0"></text>
</g>
<g>
<title>VertxOptions.&lt;init&gt; (2 samples, 0.06%)</title><rect x="137.4" y="1043.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.4" y="1054.0"></text>
</g>
<g>
<title>AddressResolverOptions.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="137.4" y="1027.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.4" y="1038.0"></text>
</g>
<g>
<title>AddressResolver.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="137.4" y="1011.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.4" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="137.4" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="140.4" y="1006.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="137.4" y="979.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="140.4" y="990.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="137.4" y="963.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="140.4" y="974.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle const&amp;, int, int, Thread*) (1 samples, 0.03%)</title><rect x="137.4" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="140.4" y="958.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="137.4" y="931.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="140.4" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="137.8" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="140.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="137.8" y="1011.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="140.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="137.8" y="995.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="140.8" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="137.8" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="140.8" y="990.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="137.8" y="963.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="140.8" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="137.8" y="947.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="140.8" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="137.8" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="140.8" y="942.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="137.8" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="140.8" y="926.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="137.8" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="140.8" y="910.0"></text>
</g>
<g>
<title>VertxRequestHandler.&lt;init&gt; (1 samples, 0.03%)</title><rect x="138.2" y="1091.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.2" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="138.2" y="1075.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.2" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="138.2" y="1059.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.2" y="1070.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="138.2" y="1043.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.2" y="1054.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="138.2" y="1027.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.2" y="1038.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="138.2" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.2" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="138.7" y="1139.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.7" y="1150.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="138.7" y="1123.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.7" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="138.7" y="1107.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.7" y="1118.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="138.7" y="1091.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="141.7" y="1102.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="138.7" y="1075.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="141.7" y="1086.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="138.7" y="1059.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="141.7" y="1070.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="138.7" y="1043.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="141.7" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="138.7" y="1027.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="141.7" y="1038.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="138.7" y="1011.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="141.7" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="138.7" y="995.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="141.7" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="138.7" y="979.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="141.7" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_classfile_attributes(ClassFileStream const*, ConstantPool*, ClassFileParser::ClassAnnotationCollector*, Thread*) (1 samples, 0.03%)</title><rect x="138.7" y="963.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="141.7" y="974.0"></text>
</g>
<g>
<title>RuntimeConfigSetup.deploy (15 samples, 0.42%)</title><rect x="139.1" y="1139.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.1" y="1150.0"></text>
</g>
<g>
<title>Config.readConfig (15 samples, 0.42%)</title><rect x="139.1" y="1123.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.1" y="1134.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$agroal$runtime$LegacyDataSourcesJdbcRuntimeConfig (1 samples, 0.03%)</title><rect x="139.1" y="1107.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.1" y="1118.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$agroal$runtime$LegacyDataSourceJdbcRuntimeConfig (1 samples, 0.03%)</title><rect x="139.1" y="1091.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.1" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="139.1" y="1075.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.1" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="139.1" y="1059.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.1" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="139.1" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.1" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.1" y="1027.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.1" y="1038.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="1011.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.1" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="995.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.1" y="1006.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.1" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.1" y="990.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="963.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.1" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.1" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.1" y="958.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="931.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.1" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.1" y="915.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.1" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.1" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.1" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.1" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="867.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.1" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.1" y="851.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.1" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.1" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.1" y="846.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="139.1" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.1" y="830.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="139.1" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.1" y="814.0"></text>
</g>
<g>
<title>Matcher.replaceAll (1 samples, 0.03%)</title><rect x="139.1" y="787.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.1" y="798.0"></text>
</g>
<g>
<title>Matcher.appendTail (1 samples, 0.03%)</title><rect x="139.1" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.1" y="782.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="139.1" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="142.1" y="766.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="139.1" y="739.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.1" y="750.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$runtime$logging$LogConfig (3 samples, 0.08%)</title><rect x="139.6" y="1107.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.6" y="1118.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$runtime$logging$FileConfig (1 samples, 0.03%)</title><rect x="139.6" y="1091.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.6" y="1102.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$runtime$logging$AsyncConfig (1 samples, 0.03%)</title><rect x="139.6" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.6" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="139.6" y="1059.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.6" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="139.6" y="1043.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.6" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="139.6" y="1027.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="142.6" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.6" y="1011.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.6" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.6" y="995.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="142.6" y="1006.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.6" y="979.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.6" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.6" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.6" y="974.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.6" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.6" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.6" y="931.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.6" y="942.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.6" y="915.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="142.6" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.6" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.6" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.6" y="883.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.6" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="139.6" y="867.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.6" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="139.6" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="142.6" y="862.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="139.6" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.6" y="846.0"></text>
</g>
<g>
<title>EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="139.6" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.6" y="830.0"></text>
</g>
<g>
<title>Collections$UnmodifiableMap.get (1 samples, 0.03%)</title><rect x="139.6" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.6" y="814.0"></text>
</g>
<g>
<title>Collections$UnmodifiableMap.get (1 samples, 0.03%)</title><rect x="139.6" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.6" y="798.0"></text>
</g>
<g>
<title>ProcessEnvironment$StringEnvironment.get (1 samples, 0.03%)</title><rect x="139.6" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.6" y="782.0"></text>
</g>
<g>
<title>ProcessEnvironment$StringEnvironment.get (1 samples, 0.03%)</title><rect x="139.6" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="142.6" y="766.0"></text>
</g>
<g>
<title>ProcessEnvironment$Variable.valueOfQueryOnly (1 samples, 0.03%)</title><rect x="139.6" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.6" y="750.0"></text>
</g>
<g>
<title>ProcessEnvironment$Variable.valueOfQueryOnly (1 samples, 0.03%)</title><rect x="139.6" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.6" y="734.0"></text>
</g>
<g>
<title>String.getBytes (1 samples, 0.03%)</title><rect x="139.6" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.6" y="718.0"></text>
</g>
<g>
<title>StringCoding.encode (1 samples, 0.03%)</title><rect x="139.6" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="142.6" y="702.0"></text>
</g>
<g>
<title>StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="139.6" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.6" y="686.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$runtime$logging$SyslogConfig (1 samples, 0.03%)</title><rect x="140.0" y="1091.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.0" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="140.0" y="1075.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.0" y="1086.0"></text>
</g>
<g>
<title>InetSocketAddressConverter.convert (1 samples, 0.03%)</title><rect x="140.0" y="1059.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.0" y="1070.0"></text>
</g>
<g>
<title>InetSocketAddressConverter.convert (1 samples, 0.03%)</title><rect x="140.0" y="1043.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.0" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="140.0" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.0" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="140.0" y="1011.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.0" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="140.0" y="995.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.0" y="1006.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="140.0" y="979.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.0" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="140.0" y="963.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.0" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="140.0" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.0" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="140.0" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.0" y="942.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="140.0" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.0" y="926.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="140.0" y="899.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.0" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="140.0" y="883.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.0" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="140.0" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.0" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="140.0" y="851.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="143.0" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="140.0" y="835.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="143.0" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="819.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="143.0" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="143.0" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="143.0" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="143.0" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="143.0" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="143.0" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="140.0" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="143.0" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="140.5" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.5" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="140.5" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.5" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="140.5" y="1059.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.5" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="1043.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.5" y="1054.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.5" y="1038.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="1011.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.5" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="995.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.5" y="1006.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.5" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.5" y="974.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.5" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="931.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.5" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.5" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.5" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.5" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.5" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="851.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.5" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.5" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.5" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.5" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.5" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.5" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="755.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.5" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.5" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.5" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="707.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.5" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="691.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.5" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="675.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.5" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="659.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.5" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.5" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.5" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="611.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.5" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.5" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.5" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.5" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.5" y="563.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.5" y="574.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="140.5" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="143.5" y="558.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="140.5" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.5" y="542.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="140.5" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="143.5" y="526.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getDefaultFor (1 samples, 0.03%)</title><rect x="140.5" y="499.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.5" y="510.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getDefaultFor:log (1 samples, 0.03%)</title><rect x="140.5" y="483.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.5" y="494.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="140.5" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="143.5" y="478.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="140.5" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="143.5" y="462.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="140.5" y="435.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="143.5" y="446.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle const&amp;, int, int, Thread*) (1 samples, 0.03%)</title><rect x="140.5" y="419.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="143.5" y="430.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="140.5" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="143.5" y="414.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (1 samples, 0.03%)</title><rect x="140.5" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="143.5" y="398.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="140.5" y="371.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="143.5" y="382.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="140.5" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="143.5" y="366.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$core$runtime$config$VertxConfiguration (3 samples, 0.08%)</title><rect x="140.9" y="1107.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.9" y="1118.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$core$runtime$config$EventBusConfiguration (1 samples, 0.03%)</title><rect x="140.9" y="1091.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.9" y="1102.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$core$runtime$config$PfxConfiguration (1 samples, 0.03%)</title><rect x="140.9" y="1075.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.9" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="140.9" y="1059.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.9" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="140.9" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.9" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="140.9" y="1027.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.9" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="1011.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.9" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="995.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.9" y="1006.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.9" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.9" y="974.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.9" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.9" y="942.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="915.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.9" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.9" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.9" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.9" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.9" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="835.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.9" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.9" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.9" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.9" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.9" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.9" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.9" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.9" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.9" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="691.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="143.9" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.9" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="659.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.9" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="643.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.9" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.9" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.9" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.9" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.9" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.9" y="574.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.9" y="558.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.9" y="542.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="140.9" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.9" y="526.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="140.9" y="499.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.9" y="510.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="140.9" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.9" y="494.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="140.9" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.9" y="478.0"></text>
</g>
<g>
<title>NameIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="140.9" y="451.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.9" y="462.0"></text>
</g>
<g>
<title>NameIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="140.9" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.9" y="446.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (2 samples, 0.06%)</title><rect x="141.3" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.3" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (2 samples, 0.06%)</title><rect x="141.3" y="1075.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.3" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (2 samples, 0.06%)</title><rect x="141.3" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="144.3" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="141.3" y="1043.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.3" y="1054.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.3" y="1038.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="1011.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.3" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="141.3" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.3" y="1006.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="979.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.3" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="141.3" y="963.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.3" y="974.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="947.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="144.3" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="141.3" y="931.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.3" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="915.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.3" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="141.3" y="899.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.3" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="883.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.3" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="141.3" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="144.3" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="141.3" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.3" y="862.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="141.3" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.3" y="846.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="141.3" y="819.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.3" y="830.0"></text>
</g>
<g>
<title>Matcher.replaceAll (1 samples, 0.03%)</title><rect x="141.3" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.3" y="814.0"></text>
</g>
<g>
<title>Matcher.find (1 samples, 0.03%)</title><rect x="141.3" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.3" y="798.0"></text>
</g>
<g>
<title>Matcher.search (1 samples, 0.03%)</title><rect x="141.3" y="771.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.3" y="782.0"></text>
</g>
<g>
<title>Pattern$Start.match (1 samples, 0.03%)</title><rect x="141.3" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.3" y="766.0"></text>
</g>
<g>
<title>Pattern$CharProperty.match (1 samples, 0.03%)</title><rect x="141.3" y="739.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.3" y="750.0"></text>
</g>
<g>
<title>961419791.is (1 samples, 0.03%)</title><rect x="141.3" y="723.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="144.3" y="734.0"></text>
</g>
<g>
<title>Pattern$CharPredicate.lambda$negate$3 (1 samples, 0.03%)</title><rect x="141.3" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.3" y="718.0"></text>
</g>
<g>
<title>1511785794.is (1 samples, 0.03%)</title><rect x="141.3" y="691.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="144.3" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="141.3" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="144.3" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="141.3" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="144.3" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="141.3" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="144.3" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.8" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.8" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.8" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.8" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.8" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.8" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.8" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="723.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="144.8" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.8" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.8" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="675.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.8" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="659.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.8" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="643.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.8" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.8" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.8" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.8" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="141.8" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.8" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="141.8" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.8" y="574.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="141.8" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.8" y="558.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="141.8" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.8" y="542.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="141.8" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.8" y="526.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="141.8" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="144.8" y="510.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="141.8" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="144.8" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="141.8" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="144.8" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="141.8" y="451.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="144.8" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="141.8" y="435.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="144.8" y="446.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="141.8" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="144.8" y="430.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$HttpConfiguration (3 samples, 0.08%)</title><rect x="142.2" y="1107.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.2" y="1118.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$BodyConfig (1 samples, 0.03%)</title><rect x="142.2" y="1091.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.2" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="142.2" y="1075.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.2" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="142.2" y="1059.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.2" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="142.2" y="1043.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.2" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="1027.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.2" y="1038.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.2" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="995.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.2" y="1006.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="979.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.2" y="990.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.2" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="947.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.2" y="958.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="931.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.2" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.2" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="899.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.2" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.2" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.2" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.2" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.2" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.2" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.2" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.2" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.2" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="755.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.2" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.2" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.2" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="707.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.2" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.2" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="675.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.2" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="659.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.2" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="643.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.2" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="627.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.2" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.2" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.2" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="579.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.2" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.2" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.2" y="574.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.2" y="547.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.2" y="558.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="142.2" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.2" y="542.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="142.2" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.2" y="526.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="142.2" y="499.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.2" y="510.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getDefaultFor (1 samples, 0.03%)</title><rect x="142.2" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.2" y="494.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getDefaultFor:http (1 samples, 0.03%)</title><rect x="142.2" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.2" y="478.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getDefaultFor:http:body (1 samples, 0.03%)</title><rect x="142.2" y="451.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.2" y="462.0"></text>
</g>
<g>
<title>NameIterator.nextSegmentEquals (1 samples, 0.03%)</title><rect x="142.2" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="145.2" y="446.0"></text>
</g>
<g>
<title>NameIterator.nextSegmentEquals (1 samples, 0.03%)</title><rect x="142.2" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.2" y="430.0"></text>
</g>
<g>
<title>NameIterator.isSegmentDelimiter (1 samples, 0.03%)</title><rect x="142.2" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.2" y="414.0"></text>
</g>
<g>
<title>NameIterator.charAt (1 samples, 0.03%)</title><rect x="142.2" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.2" y="398.0"></text>
</g>
<g>
<title>String.charAt (1 samples, 0.03%)</title><rect x="142.2" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.2" y="382.0"></text>
</g>
<g>
<title>String.isLatin1 (1 samples, 0.03%)</title><rect x="142.2" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.2" y="366.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$ProxyConfig (1 samples, 0.03%)</title><rect x="142.7" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.7" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="142.7" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.7" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="142.7" y="1059.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.7" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="142.7" y="1043.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.7" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="1027.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.7" y="1038.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="1011.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.7" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="995.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.7" y="1006.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="979.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.7" y="990.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.7" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.7" y="958.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.7" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.7" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.7" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.7" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.7" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.7" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.7" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.7" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.7" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.7" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="145.7" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.7" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.7" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="145.7" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.7" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.7" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.7" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.7" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.7" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="145.7" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.7" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.7" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="579.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.7" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="142.7" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.7" y="574.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="142.7" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.7" y="558.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="142.7" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.7" y="542.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="142.7" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.7" y="526.0"></text>
</g>
<g>
<title>RunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="142.7" y="499.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.7" y="510.0"></text>
</g>
<g>
<title>NameIterator.previousSegmentEquals (1 samples, 0.03%)</title><rect x="142.7" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.7" y="494.0"></text>
</g>
<g>
<title>NameIterator.previousSegmentEquals (1 samples, 0.03%)</title><rect x="142.7" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.7" y="478.0"></text>
</g>
<g>
<title>NameIterator.prevPos (1 samples, 0.03%)</title><rect x="142.7" y="451.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.7" y="462.0"></text>
</g>
<g>
<title>NameIterator.isStartOfString (1 samples, 0.03%)</title><rect x="142.7" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.7" y="446.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$ServerSslConfig (1 samples, 0.03%)</title><rect x="143.1" y="1091.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.1" y="1102.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$CertificateConfig (1 samples, 0.03%)</title><rect x="143.1" y="1075.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.1" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="143.1" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.1" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="143.1" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.1" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="143.1" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.1" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.1" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.1" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="995.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.1" y="1006.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.1" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.1" y="963.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.1" y="974.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.1" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.1" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.1" y="942.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.1" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.1" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.1" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="883.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.1" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.1" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.1" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.1" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.1" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.1" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.1" y="819.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="146.1" y="830.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="143.1" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.1" y="814.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="143.1" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.1" y="798.0"></text>
</g>
<g>
<title>Matcher.replaceAll (1 samples, 0.03%)</title><rect x="143.1" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.1" y="782.0"></text>
</g>
<g>
<title>Matcher.appendReplacement (1 samples, 0.03%)</title><rect x="143.1" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.1" y="766.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="143.1" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.1" y="750.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="143.1" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.1" y="734.0"></text>
</g>
<g>
<title>Config.rtParseKey (2 samples, 0.06%)</title><rect x="143.5" y="1107.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.5" y="1118.0"></text>
</g>
<g>
<title>Config.rtParseKey:log (2 samples, 0.06%)</title><rect x="143.5" y="1091.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.5" y="1102.0"></text>
</g>
<g>
<title>Config.rtParseKey:log:filter (2 samples, 0.06%)</title><rect x="143.5" y="1075.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.5" y="1086.0"></text>
</g>
<g>
<title>Config.rtParseKey:log:filter:* (2 samples, 0.06%)</title><rect x="143.5" y="1059.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.5" y="1070.0"></text>
</g>
<g>
<title>Config.rtParseKey:log:filter:*:if-starts-with (2 samples, 0.06%)</title><rect x="143.5" y="1043.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.5" y="1054.0"></text>
</g>
<g>
<title>Config.rtGetEnclosing:log:LogConfig#filters:*:CleanupFilterConfig#ifStartsWith (2 samples, 0.06%)</title><rect x="143.5" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.5" y="1038.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$runtime$logging$CleanupFilterConfig (1 samples, 0.03%)</title><rect x="143.5" y="1011.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.5" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="143.5" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.5" y="1006.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="143.5" y="979.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.5" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="143.5" y="963.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.5" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.5" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.5" y="958.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="931.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.5" y="942.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.5" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.5" y="899.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.5" y="910.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.5" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.5" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.5" y="878.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="851.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.5" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.5" y="835.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.5" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.5" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.5" y="803.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.5" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="787.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.5" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="143.5" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.5" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="143.5" y="755.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.5" y="766.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="143.5" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.5" y="750.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="143.5" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.5" y="734.0"></text>
</g>
<g>
<title>ConfigUtils$DotEnvConfigSource.getRawValue (1 samples, 0.03%)</title><rect x="143.5" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.5" y="718.0"></text>
</g>
<g>
<title>HashMap.get (1 samples, 0.03%)</title><rect x="143.5" y="691.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.5" y="702.0"></text>
</g>
<g>
<title>HashMap.hash (1 samples, 0.03%)</title><rect x="143.5" y="675.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.5" y="686.0"></text>
</g>
<g>
<title>String.hashCode (1 samples, 0.03%)</title><rect x="143.5" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.5" y="670.0"></text>
</g>
<g>
<title>StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="143.5" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.5" y="654.0"></text>
</g>
<g>
<title>NameIterator.getPreviousSegment (1 samples, 0.03%)</title><rect x="144.0" y="1011.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.0" y="1022.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="144.0" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="147.0" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="144.4" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="147.4" y="1118.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="144.4" y="1091.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="147.4" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="144.4" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="147.4" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(Klass*, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="144.4" y="1059.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="147.4" y="1070.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.03%)</title><rect x="144.4" y="1043.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="147.4" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass const*) const (1 samples, 0.03%)</title><rect x="144.4" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="147.4" y="1038.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="144.4" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="147.4" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.build (2 samples, 0.06%)</title><rect x="144.9" y="1107.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.9" y="1118.0"></text>
</g>
<g>
<title>SmallRyeConfig.&lt;init&gt; (2 samples, 0.06%)</title><rect x="144.9" y="1091.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.9" y="1102.0"></text>
</g>
<g>
<title>SmallRyeConfig$ConfigSources.&lt;init&gt; (1 samples, 0.03%)</title><rect x="144.9" y="1075.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.9" y="1086.0"></text>
</g>
<g>
<title>ArrayList.sort (1 samples, 0.03%)</title><rect x="144.9" y="1059.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.9" y="1070.0"></text>
</g>
<g>
<title>Arrays.sort (1 samples, 0.03%)</title><rect x="144.9" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.9" y="1054.0"></text>
</g>
<g>
<title>TimSort.sort (1 samples, 0.03%)</title><rect x="144.9" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.9" y="1038.0"></text>
</g>
<g>
<title>TimSort.binarySort (1 samples, 0.03%)</title><rect x="144.9" y="1011.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.9" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfig$1.compare (1 samples, 0.03%)</title><rect x="144.9" y="995.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="147.9" y="1006.0"></text>
</g>
<g>
<title>SmallRyeConfig$1.compare (1 samples, 0.03%)</title><rect x="144.9" y="979.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.9" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="144.9" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="147.9" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="144.9" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="147.9" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="144.9" y="931.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="147.9" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="144.9" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="147.9" y="926.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="144.9" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="147.9" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="144.9" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="147.9" y="894.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="144.9" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="147.9" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="144.9" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="147.9" y="862.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="144.9" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="147.9" y="846.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.03%)</title><rect x="144.9" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="147.9" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfig.buildConfigSources (1 samples, 0.03%)</title><rect x="145.3" y="1075.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.3" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.discoverSources (1 samples, 0.03%)</title><rect x="145.3" y="1059.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.3" y="1070.0"></text>
</g>
<g>
<title>Iterable.forEach (1 samples, 0.03%)</title><rect x="145.3" y="1043.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.3" y="1054.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="145.3" y="1027.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.3" y="1038.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="145.3" y="1011.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.3" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="145.3" y="995.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.3" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="145.3" y="979.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="148.3" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="145.3" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.3" y="974.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="145.3" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.3" y="958.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="145.3" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.3" y="942.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="145.3" y="915.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.3" y="926.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="145.3" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.3" y="910.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasMoreElements (1 samples, 0.03%)</title><rect x="145.3" y="883.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.3" y="894.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasNext (1 samples, 0.03%)</title><rect x="145.3" y="867.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.3" y="878.0"></text>
</g>
<g>
<title>URLClassPath$1.hasMoreElements (1 samples, 0.03%)</title><rect x="145.3" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.3" y="862.0"></text>
</g>
<g>
<title>URLClassPath$1.next (1 samples, 0.03%)</title><rect x="145.3" y="835.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.3" y="846.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="145.3" y="819.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.3" y="830.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="145.3" y="803.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.3" y="814.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="145.3" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.3" y="798.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="145.3" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.3" y="782.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="145.3" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.3" y="766.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="145.3" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.3" y="750.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.3" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.3" y="734.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.ensureOpen (1 samples, 0.03%)</title><rect x="145.3" y="707.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.3" y="718.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="145.3" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.3" y="702.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="145.3" y="675.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.3" y="686.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="145.3" y="659.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.3" y="670.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getJarFile (1 samples, 0.03%)</title><rect x="145.3" y="643.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.3" y="654.0"></text>
</g>
<g>
<title>FileURLMapper.exists (1 samples, 0.03%)</title><rect x="145.3" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.3" y="638.0"></text>
</g>
<g>
<title>File.exists (1 samples, 0.03%)</title><rect x="145.3" y="611.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.3" y="622.0"></text>
</g>
<g>
<title>UnixFileSystem.getBooleanAttributes (1 samples, 0.03%)</title><rect x="145.3" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.3" y="606.0"></text>
</g>
<g>
<title>UnixFileSystem.getBooleanAttributes0 (1 samples, 0.03%)</title><rect x="145.3" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.3" y="590.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="145.3" y="563.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="148.3" y="574.0"></text>
</g>
<g>
<title>SmallRyeContextPropagationProcessor$build1986214403.deploy (1 samples, 0.03%)</title><rect x="145.8" y="1139.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.8" y="1150.0"></text>
</g>
<g>
<title>SmallRyeContextPropagationProcessor$build1986214403.deploy_0 (1 samples, 0.03%)</title><rect x="145.8" y="1123.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.8" y="1134.0"></text>
</g>
<g>
<title>SmallRyeContextPropagationRecorder.configureRuntime (1 samples, 0.03%)</title><rect x="145.8" y="1107.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.8" y="1118.0"></text>
</g>
<g>
<title>SmallRyeContextManager$Builder.build (1 samples, 0.03%)</title><rect x="145.8" y="1091.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.8" y="1102.0"></text>
</g>
<g>
<title>SmallRyeContextManager.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.8" y="1075.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.8" y="1086.0"></text>
</g>
<g>
<title>DefaultValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.8" y="1059.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.8" y="1070.0"></text>
</g>
<g>
<title>DefaultValues.resolveConfiguration (1 samples, 0.03%)</title><rect x="145.8" y="1043.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.8" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="145.8" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.8" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="145.8" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.8" y="1022.0"></text>
</g>
<g>
<title>ConfigMessages_$bundle.propertyNotFound (1 samples, 0.03%)</title><rect x="145.8" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.8" y="1006.0"></text>
</g>
<g>
<title>NoSuchElementException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.8" y="979.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.8" y="990.0"></text>
</g>
<g>
<title>RuntimeException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.8" y="963.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.8" y="974.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.8" y="947.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.8" y="958.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="145.8" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="148.8" y="942.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="145.8" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.8" y="926.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="145.8" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.8" y="910.0"></text>
</g>
<g>
<title>ThreadPoolSetup$createExecutor-168269452.deploy (5 samples, 0.14%)</title><rect x="146.2" y="1139.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="149.2" y="1150.0"></text>
</g>
<g>
<title>ThreadPoolSetup$createExecutor-168269452.deploy_0 (5 samples, 0.14%)</title><rect x="146.2" y="1123.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.2" y="1134.0"></text>
</g>
<g>
<title>ExecutorRecorder.setupRunTime (5 samples, 0.14%)</title><rect x="146.2" y="1107.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.2" y="1118.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor.prestartAllCoreThreads (1 samples, 0.03%)</title><rect x="146.2" y="1091.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.2" y="1102.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor.prestartCoreThread (1 samples, 0.03%)</title><rect x="146.2" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.2" y="1086.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor.tryAllocateThread (1 samples, 0.03%)</title><rect x="146.2" y="1059.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.2" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="146.2" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="149.2" y="1054.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="146.2" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="149.2" y="1038.0"></text>
</g>
<g>
<title>ExecutorRecorder.createExecutor (4 samples, 0.11%)</title><rect x="146.6" y="1091.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.6" y="1102.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor$Builder.&lt;init&gt; (3 samples, 0.08%)</title><rect x="146.6" y="1075.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.6" y="1086.0"></text>
</g>
<g>
<title>EnhancedQueueExecutor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="146.6" y="1059.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.6" y="1070.0"></text>
</g>
<g>
<title>Version.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="146.6" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.6" y="1054.0"></text>
</g>
<g>
<title>Messages.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="146.6" y="1027.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.6" y="1038.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="146.6" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.6" y="1022.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="146.6" y="995.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.6" y="1006.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="146.6" y="979.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.6" y="990.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="146.6" y="963.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.6" y="974.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="146.6" y="947.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.6" y="958.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="146.6" y="931.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="149.6" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="146.6" y="915.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="149.6" y="926.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="146.6" y="899.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="149.6" y="910.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="883.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="149.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="149.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="149.6" y="862.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="149.6" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="149.6" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="149.6" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="146.6" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="149.6" y="798.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="146.6" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="149.6" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="147.1" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="150.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="147.1" y="1043.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="150.1" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="150.1" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="1011.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="150.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="150.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="979.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="150.1" y="990.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="150.1" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="150.1" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="147.1" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="150.1" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="147.5" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.5" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="147.5" y="1043.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.5" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="147.5" y="1027.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.5" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="147.5" y="1011.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="150.5" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="147.5" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.5" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="147.5" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.5" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="147.5" y="963.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.5" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="147.5" y="947.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.5" y="958.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="147.5" y="931.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="150.5" y="942.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="147.5" y="915.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="150.5" y="926.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="899.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="150.5" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="150.5" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="150.5" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="150.5" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="150.5" y="846.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="819.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="150.5" y="830.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="150.5" y="814.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="147.5" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="150.5" y="798.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="147.5" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="150.5" y="782.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate_work(unsigned long) (1 samples, 0.03%)</title><rect x="147.5" y="755.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="150.5" y="766.0"></text>
</g>
<g>
<title>metaspace::Metachunk::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="147.5" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="150.5" y="750.0"></text>
</g>
<g>
<title>JBossExecutors.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="148.0" y="1075.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.0" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="148.0" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="151.0" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="148.0" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="151.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="148.0" y="1027.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="151.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="148.0" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="151.0" y="1022.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="148.0" y="995.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="151.0" y="1006.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="148.0" y="979.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="151.0" y="990.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="148.0" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="151.0" y="974.0"></text>
</g>
<g>
<title>Rewriter::compute_index_maps() (1 samples, 0.03%)</title><rect x="148.0" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="151.0" y="958.0"></text>
</g>
<g>
<title>Rewriter::init_maps(int) (1 samples, 0.03%)</title><rect x="148.0" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="151.0" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.03%)</title><rect x="148.0" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="151.0" y="926.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 0.03%)</title><rect x="148.0" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="151.0" y="910.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="148.0" y="883.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="151.0" y="894.0"></text>
</g>
<g>
<title>Timing.printStartupTime (12 samples, 0.34%)</title><rect x="148.4" y="1139.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="151.4" y="1150.0"></text>
</g>
<g>
<title>Logger.infof (12 samples, 0.34%)</title><rect x="148.4" y="1123.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.4" y="1134.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.doLogf (12 samples, 0.34%)</title><rect x="148.4" y="1107.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.4" y="1118.0"></text>
</g>
<g>
<title>Logger.log (12 samples, 0.34%)</title><rect x="148.4" y="1091.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.4" y="1102.0"></text>
</g>
<g>
<title>Logger.logRaw (12 samples, 0.34%)</title><rect x="148.4" y="1075.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.4" y="1086.0"></text>
</g>
<g>
<title>LoggerNode.publish (12 samples, 0.34%)</title><rect x="148.4" y="1059.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.4" y="1070.0"></text>
</g>
<g>
<title>LoggerNode.publish (12 samples, 0.34%)</title><rect x="148.4" y="1043.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.4" y="1054.0"></text>
</g>
<g>
<title>LoggerNode.publish (12 samples, 0.34%)</title><rect x="148.4" y="1027.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.4" y="1038.0"></text>
</g>
<g>
<title>ExtHandler.publish (12 samples, 0.34%)</title><rect x="148.4" y="1011.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.4" y="1022.0"></text>
</g>
<g>
<title>DelayedHandler.doPublish (12 samples, 0.34%)</title><rect x="148.4" y="995.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.4" y="1006.0"></text>
</g>
<g>
<title>DelayedHandler.publishToChildren (12 samples, 0.34%)</title><rect x="148.4" y="979.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.4" y="990.0"></text>
</g>
<g>
<title>ExtHandler.publish (12 samples, 0.34%)</title><rect x="148.4" y="963.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.4" y="974.0"></text>
</g>
<g>
<title>WriterHandler.doPublish (12 samples, 0.34%)</title><rect x="148.4" y="947.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.4" y="958.0"></text>
</g>
<g>
<title>ExtFormatter.format (12 samples, 0.34%)</title><rect x="148.4" y="931.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.4" y="942.0"></text>
</g>
<g>
<title>BannerFormatter.format (12 samples, 0.34%)</title><rect x="148.4" y="915.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.4" y="926.0"></text>
</g>
<g>
<title>MultistepFormatter.format (12 samples, 0.34%)</title><rect x="148.4" y="899.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.4" y="910.0"></text>
</g>
<g>
<title>ColorPatternFormatter$ColorStep.render (12 samples, 0.34%)</title><rect x="148.4" y="883.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="151.4" y="894.0"></text>
</g>
<g>
<title>ColorUtil.startFgColor (1 samples, 0.03%)</title><rect x="148.4" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.4" y="878.0"></text>
</g>
<g>
<title>ColorUtil.startColor (1 samples, 0.03%)</title><rect x="148.4" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.4" y="862.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="148.4" y="835.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.4" y="846.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="148.4" y="819.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.4" y="830.0"></text>
</g>
<g>
<title>Formatters$JustifyingFormatStep.render (11 samples, 0.31%)</title><rect x="148.9" y="867.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.9" y="878.0"></text>
</g>
<g>
<title>Formatters$16.renderRaw (1 samples, 0.03%)</title><rect x="148.9" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.9" y="862.0"></text>
</g>
<g>
<title>ColorPatternFormatter.formatMessage (1 samples, 0.03%)</title><rect x="148.9" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.9" y="846.0"></text>
</g>
<g>
<title>Printf.format (1 samples, 0.03%)</title><rect x="148.9" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.9" y="830.0"></text>
</g>
<g>
<title>ColorPrintf.formatDirect (1 samples, 0.03%)</title><rect x="148.9" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.9" y="814.0"></text>
</g>
<g>
<title>Printf.formatDirect (1 samples, 0.03%)</title><rect x="148.9" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.9" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="148.9" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="151.9" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="148.9" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="151.9" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="148.9" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="151.9" y="750.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="148.9" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="151.9" y="734.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="148.9" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="151.9" y="718.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="148.9" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="151.9" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="148.9" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="151.9" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="148.9" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="151.9" y="670.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="148.9" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="151.9" y="654.0"></text>
</g>
<g>
<title>DictionaryEntry::contains_protection_domain(oopDesc*) const (1 samples, 0.03%)</title><rect x="148.9" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="151.9" y="638.0"></text>
</g>
<g>
<title>ProtectionDomainEntry::object_no_keepalive() (1 samples, 0.03%)</title><rect x="148.9" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="151.9" y="622.0"></text>
</g>
<g>
<title>Formatters$7.renderRaw (10 samples, 0.28%)</title><rect x="149.3" y="851.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.3" y="862.0"></text>
</g>
<g>
<title>ThreadLocal.get (10 samples, 0.28%)</title><rect x="149.3" y="835.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.3" y="846.0"></text>
</g>
<g>
<title>ThreadLocal.setInitialValue (10 samples, 0.28%)</title><rect x="149.3" y="819.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.3" y="830.0"></text>
</g>
<g>
<title>Formatters$7$1.initialValue (10 samples, 0.28%)</title><rect x="149.3" y="803.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.3" y="814.0"></text>
</g>
<g>
<title>Formatters$7$1.initialValue (10 samples, 0.28%)</title><rect x="149.3" y="787.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.3" y="798.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="149.3" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.3" y="782.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="149.3" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.3" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="149.3" y="739.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.3" y="750.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="149.3" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="152.3" y="734.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="149.3" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.3" y="718.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="149.3" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.3" y="702.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="149.3" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.3" y="686.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="149.3" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.3" y="670.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="149.3" y="643.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="152.3" y="654.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="149.3" y="627.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="152.3" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="611.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="152.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="152.3" y="606.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="152.3" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="152.3" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="152.3" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="152.3" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="152.3" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="149.3" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="152.3" y="510.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="149.3" y="483.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="152.3" y="494.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="149.3" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="152.3" y="478.0"></text>
</g>
<g>
<title>SimpleDateFormat.&lt;init&gt; (9 samples, 0.25%)</title><rect x="149.7" y="771.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.7" y="782.0"></text>
</g>
<g>
<title>SimpleDateFormat.&lt;init&gt; (9 samples, 0.25%)</title><rect x="149.7" y="755.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.7" y="766.0"></text>
</g>
<g>
<title>SimpleDateFormat.initialize (2 samples, 0.06%)</title><rect x="149.7" y="739.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="152.7" y="750.0"></text>
</g>
<g>
<title>NumberFormat.getIntegerInstance (2 samples, 0.06%)</title><rect x="149.7" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.7" y="734.0"></text>
</g>
<g>
<title>NumberFormat.getInstance (2 samples, 0.06%)</title><rect x="149.7" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.7" y="718.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.getAdapter (1 samples, 0.03%)</title><rect x="149.7" y="691.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="152.7" y="702.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.findAdapter (1 samples, 0.03%)</title><rect x="149.7" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.7" y="686.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.getLocaleServiceProvider (1 samples, 0.03%)</title><rect x="149.7" y="659.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.7" y="670.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.getNumberFormatProvider (1 samples, 0.03%)</title><rect x="149.7" y="643.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.7" y="654.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="149.7" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.7" y="638.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="149.7" y="611.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="152.7" y="622.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="149.7" y="595.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.7" y="606.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="149.7" y="579.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.7" y="590.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="149.7" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.7" y="574.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="149.7" y="547.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="152.7" y="558.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="149.7" y="531.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.7" y="542.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="149.7" y="515.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.7" y="526.0"></text>
</g>
<g>
<title>AbstractValidatingLambdaMetafactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="149.7" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.7" y="510.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.lookupClass (1 samples, 0.03%)</title><rect x="149.7" y="483.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.7" y="494.0"></text>
</g>
<g>
<title>NumberFormat.getInstance (1 samples, 0.03%)</title><rect x="150.2" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.2" y="702.0"></text>
</g>
<g>
<title>NumberFormatProviderImpl.getIntegerInstance (1 samples, 0.03%)</title><rect x="150.2" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.2" y="686.0"></text>
</g>
<g>
<title>NumberFormatProviderImpl.getInstance (1 samples, 0.03%)</title><rect x="150.2" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.2" y="670.0"></text>
</g>
<g>
<title>DecimalFormat.&lt;init&gt; (1 samples, 0.03%)</title><rect x="150.2" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.2" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="150.2" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="153.2" y="638.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="153.2" y="622.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="153.2" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="153.2" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="153.2" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="547.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="153.2" y="558.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="153.2" y="542.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="153.2" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="153.2" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="483.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="153.2" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="467.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="153.2" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="150.2" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="153.2" y="462.0"></text>
</g>
<g>
<title>ConstantPool::tag_at(int) const (1 samples, 0.03%)</title><rect x="150.2" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="153.2" y="446.0"></text>
</g>
<g>
<title>SimpleDateFormat.initializeCalendar (7 samples, 0.20%)</title><rect x="150.6" y="739.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.6" y="750.0"></text>
</g>
<g>
<title>Calendar.getInstance (7 samples, 0.20%)</title><rect x="150.6" y="723.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.6" y="734.0"></text>
</g>
<g>
<title>Calendar.createCalendar (7 samples, 0.20%)</title><rect x="150.6" y="707.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.6" y="718.0"></text>
</g>
<g>
<title>CalendarProviderImpl.getInstance (7 samples, 0.20%)</title><rect x="150.6" y="691.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.6" y="702.0"></text>
</g>
<g>
<title>Calendar$Builder.build (6 samples, 0.17%)</title><rect x="150.6" y="675.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.6" y="686.0"></text>
</g>
<g>
<title>GregorianCalendar.&lt;init&gt; (6 samples, 0.17%)</title><rect x="150.6" y="659.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="153.6" y="670.0"></text>
</g>
<g>
<title>Calendar.&lt;init&gt; (5 samples, 0.14%)</title><rect x="150.6" y="643.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.6" y="654.0"></text>
</g>
<g>
<title>Calendar.setWeekCountData (5 samples, 0.14%)</title><rect x="150.6" y="627.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.6" y="638.0"></text>
</g>
<g>
<title>CalendarDataUtility.retrieveFirstDayOfWeek (5 samples, 0.14%)</title><rect x="150.6" y="611.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="622.0"></text>
</g>
<g>
<title>LocaleServiceProviderPool.getLocalizedObject (5 samples, 0.14%)</title><rect x="150.6" y="595.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.6" y="606.0"></text>
</g>
<g>
<title>LocaleServiceProviderPool.getLocalizedObjectImpl (5 samples, 0.14%)</title><rect x="150.6" y="579.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.6" y="590.0"></text>
</g>
<g>
<title>LocaleServiceProviderPool.findProviders (5 samples, 0.14%)</title><rect x="150.6" y="563.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.6" y="574.0"></text>
</g>
<g>
<title>LocaleServiceProvider.isSupportedLocale (5 samples, 0.14%)</title><rect x="150.6" y="547.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.6" y="558.0"></text>
</g>
<g>
<title>CalendarDataProviderImpl.getAvailableLocales (5 samples, 0.14%)</title><rect x="150.6" y="531.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="542.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.toLocaleArray (5 samples, 0.14%)</title><rect x="150.6" y="515.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.6" y="526.0"></text>
</g>
<g>
<title>Locale.forLanguageTag (4 samples, 0.11%)</title><rect x="151.1" y="499.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.1" y="510.0"></text>
</g>
<g>
<title>InternalLocaleBuilder.getBaseLocale (3 samples, 0.08%)</title><rect x="151.1" y="483.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.1" y="494.0"></text>
</g>
<g>
<title>BaseLocale.getInstance (3 samples, 0.08%)</title><rect x="151.1" y="467.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.1" y="478.0"></text>
</g>
<g>
<title>LocaleObjectCache.get (2 samples, 0.06%)</title><rect x="151.5" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.5" y="462.0"></text>
</g>
<g>
<title>BaseLocale$Cache.normalizeKey (2 samples, 0.06%)</title><rect x="151.5" y="435.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="154.5" y="446.0"></text>
</g>
<g>
<title>BaseLocale$Cache.normalizeKey (2 samples, 0.06%)</title><rect x="151.5" y="419.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.5" y="430.0"></text>
</g>
<g>
<title>BaseLocale$Key.normalize (2 samples, 0.06%)</title><rect x="151.5" y="403.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.5" y="414.0"></text>
</g>
<g>
<title>BaseLocale$Key.&lt;init&gt; (2 samples, 0.06%)</title><rect x="151.5" y="387.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.5" y="398.0"></text>
</g>
<g>
<title>BaseLocale.&lt;init&gt; (2 samples, 0.06%)</title><rect x="151.5" y="371.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.5" y="382.0"></text>
</g>
<g>
<title>LocaleUtils.toUpperString (1 samples, 0.03%)</title><rect x="151.5" y="355.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.5" y="366.0"></text>
</g>
<g>
<title>String.intern (1 samples, 0.03%)</title><rect x="151.9" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.9" y="366.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.03%)</title><rect x="151.9" y="339.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="154.9" y="350.0"></text>
</g>
<g>
<title>StringTable::intern(oopDesc*, Thread*) (1 samples, 0.03%)</title><rect x="151.9" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="154.9" y="334.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="151.9" y="307.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="154.9" y="318.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.03%)</title><rect x="151.9" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="154.9" y="302.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupJchar, StringTableGet&gt;(Thread*, StringTableLookupJchar&amp;, StringTableGet&amp;, bool*) (1 samples, 0.03%)</title><rect x="151.9" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="154.9" y="286.0"></text>
</g>
<g>
<title>StringTableGet::operator()(WeakHandle&lt;(WeakHandleType)2&gt;*) (1 samples, 0.03%)</title><rect x="151.9" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="154.9" y="270.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="151.9" y="243.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="154.9" y="254.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="151.9" y="227.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="154.9" y="238.0"></text>
</g>
<g>
<title>LanguageTag.parse (1 samples, 0.03%)</title><rect x="152.4" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.4" y="494.0"></text>
</g>
<g>
<title>Gregorian.newCalendarDate (1 samples, 0.03%)</title><rect x="152.8" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.8" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="152.8" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="155.8" y="638.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="155.8" y="622.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="155.8" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="155.8" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="563.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="155.8" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="547.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="155.8" y="558.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="155.8" y="542.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="515.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="155.8" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="155.8" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="483.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="155.8" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="155.8" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="451.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="155.8" y="462.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="435.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="155.8" y="446.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="155.8" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="403.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="155.8" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="155.8" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="371.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="155.8" y="382.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="152.8" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="155.8" y="366.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="152.8" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="155.8" y="350.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="152.8" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="155.8" y="334.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="153.3" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="156.3" y="686.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="156.3" y="670.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="156.3" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="156.3" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="156.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="156.3" y="606.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="156.3" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="563.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="156.3" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="156.3" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="531.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="156.3" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="156.3" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="153.3" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="156.3" y="510.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="153.3" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="156.3" y="494.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="153.3" y="467.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="156.3" y="478.0"></text>
</g>
<g>
<title>VertxCoreProcessor$build-956362597.deploy (1 samples, 0.03%)</title><rect x="153.7" y="1139.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="156.7" y="1150.0"></text>
</g>
<g>
<title>VertxCoreProcessor$build-956362597.deploy_0 (1 samples, 0.03%)</title><rect x="153.7" y="1123.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.7" y="1134.0"></text>
</g>
<g>
<title>VertxCoreRecorder.bossSupplier (1 samples, 0.03%)</title><rect x="153.7" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="156.7" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="153.7" y="1091.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="156.7" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="153.7" y="1075.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="156.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="153.7" y="1059.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="156.7" y="1070.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="153.7" y="1043.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="156.7" y="1054.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="153.7" y="1027.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="156.7" y="1038.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="153.7" y="1011.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="156.7" y="1022.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="153.7" y="995.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="156.7" y="1006.0"></text>
</g>
<g>
<title>VertxHttpProcessor$bodyHandler1204734842.deploy (3 samples, 0.08%)</title><rect x="154.2" y="1139.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="157.2" y="1150.0"></text>
</g>
<g>
<title>VertxHttpProcessor$bodyHandler1204734842.deploy_0 (3 samples, 0.08%)</title><rect x="154.2" y="1123.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.2" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="154.2" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="157.2" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="154.2" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="157.2" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="154.2" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="157.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="154.2" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="157.2" y="1070.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="154.2" y="1043.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="157.2" y="1054.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="154.2" y="1027.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="157.2" y="1038.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="154.2" y="1011.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.2" y="1022.0"></text>
</g>
<g>
<title>AdapterBlob::create(CodeBuffer*) (1 samples, 0.03%)</title><rect x="154.2" y="995.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="157.2" y="1006.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, int, int) (1 samples, 0.03%)</title><rect x="154.2" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="157.2" y="990.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="154.2" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="157.2" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="154.6" y="1107.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.6" y="1118.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="154.6" y="1091.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.6" y="1102.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="154.6" y="1075.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.6" y="1086.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="154.6" y="1059.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.6" y="1070.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="154.6" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.6" y="1054.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="154.6" y="1027.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.6" y="1038.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="154.6" y="1011.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="157.6" y="1022.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="154.6" y="995.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="157.6" y="1006.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="154.6" y="979.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="157.6" y="990.0"></text>
</g>
<g>
<title>VertxHttpRecorder.createBodyHandler (1 samples, 0.03%)</title><rect x="155.0" y="1107.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.0" y="1118.0"></text>
</g>
<g>
<title>BodyHandler.create (1 samples, 0.03%)</title><rect x="155.0" y="1091.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.0" y="1102.0"></text>
</g>
<g>
<title>BodyHandlerImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="155.0" y="1075.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.0" y="1086.0"></text>
</g>
<g>
<title>LoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="155.0" y="1059.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.0" y="1070.0"></text>
</g>
<g>
<title>LoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="155.0" y="1043.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.0" y="1054.0"></text>
</g>
<g>
<title>JULLogDelegateFactory.createDelegate (1 samples, 0.03%)</title><rect x="155.0" y="1027.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="158.0" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="155.0" y="1011.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.0" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="155.0" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="158.0" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="155.0" y="979.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.0" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="155.0" y="963.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.0" y="974.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="155.0" y="947.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="158.0" y="958.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="155.0" y="931.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="158.0" y="942.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="915.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="158.0" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.0" y="910.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="158.0" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="158.0" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="158.0" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="158.0" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="158.0" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::copy_localvariable_table(ConstMethod const*, int, unsigned short*, void const**, int, unsigned short*, void const**, Thread*) (1 samples, 0.03%)</title><rect x="155.0" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="158.0" y="814.0"></text>
</g>
<g>
<title>VertxHttpProcessor$cors-1956812358.deploy (1 samples, 0.03%)</title><rect x="155.5" y="1139.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="158.5" y="1150.0"></text>
</g>
<g>
<title>VertxHttpProcessor$cors-1956812358.deploy_0 (1 samples, 0.03%)</title><rect x="155.5" y="1123.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.5" y="1134.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="155.5" y="1107.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.5" y="1118.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="155.5" y="1091.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.5" y="1102.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="155.5" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="155.5" y="1059.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.5" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="155.5" y="1043.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="158.5" y="1054.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="155.5" y="1027.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="158.5" y="1038.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="1011.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="158.5" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="158.5" y="1006.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="979.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.5" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="963.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="158.5" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="158.5" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="931.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="158.5" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="155.5" y="915.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="158.5" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="155.5" y="899.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="158.5" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="155.5" y="883.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="158.5" y="894.0"></text>
</g>
<g>
<title>VertxHttpProcessor$finalizeRouter749274288.deploy (2 samples, 0.06%)</title><rect x="155.9" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="158.9" y="1150.0"></text>
</g>
<g>
<title>VertxHttpProcessor$finalizeRouter749274288.deploy_0 (2 samples, 0.06%)</title><rect x="155.9" y="1123.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.9" y="1134.0"></text>
</g>
<g>
<title>VertxHttpRecorder.finalizeRouter (2 samples, 0.06%)</title><rect x="155.9" y="1107.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.9" y="1118.0"></text>
</g>
<g>
<title>EventImpl.fire (1 samples, 0.03%)</title><rect x="155.9" y="1091.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.9" y="1102.0"></text>
</g>
<g>
<title>EventImpl.getNotifier (1 samples, 0.03%)</title><rect x="155.9" y="1075.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.9" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="155.9" y="1059.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.9" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="155.9" y="1043.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="158.9" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="158.9" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at(int, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="158.9" y="1022.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at_impl(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.9" y="1006.0"></text>
</g>
<g>
<title>ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&amp;, int, int, int, objArrayHandle, int, bool, Handle, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="158.9" y="990.0"></text>
</g>
<g>
<title>ConstantPool::resolve_possibly_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="963.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.9" y="974.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="158.9" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_type(Symbol*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="158.9" y="942.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_parameters() (1 samples, 0.03%)</title><rect x="155.9" y="915.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="158.9" y="926.0"></text>
</g>
<g>
<title>SignatureIterator::parse_type() (1 samples, 0.03%)</title><rect x="155.9" y="899.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="158.9" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="156.4" y="1091.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="159.4" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="156.4" y="1075.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.4" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="156.4" y="1059.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.4" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="156.4" y="1043.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.4" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="156.4" y="1027.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="159.4" y="1038.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="156.4" y="1011.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="159.4" y="1022.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="156.4" y="995.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="159.4" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="156.4" y="979.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="159.4" y="990.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="156.4" y="963.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="159.4" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="156.4" y="947.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="159.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance_klass(ClassFileParser const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="156.4" y="931.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.4" y="942.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="156.4" y="915.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="159.4" y="926.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="156.4" y="899.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="159.4" y="910.0"></text>
</g>
<g>
<title>VertxHttpProcessor$initializeRouter304369008.deploy (2 samples, 0.06%)</title><rect x="156.8" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.8" y="1150.0"></text>
</g>
<g>
<title>VertxHttpProcessor$initializeRouter304369008.deploy_0 (2 samples, 0.06%)</title><rect x="156.8" y="1123.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.8" y="1134.0"></text>
</g>
<g>
<title>VertxHttpRecorder.addRoute (1 samples, 0.03%)</title><rect x="156.8" y="1107.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.8" y="1118.0"></text>
</g>
<g>
<title>BasicRoute.apply (1 samples, 0.03%)</title><rect x="156.8" y="1091.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.8" y="1102.0"></text>
</g>
<g>
<title>BasicRoute.apply (1 samples, 0.03%)</title><rect x="156.8" y="1075.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.8" y="1086.0"></text>
</g>
<g>
<title>RouterImpl.route (1 samples, 0.03%)</title><rect x="156.8" y="1059.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.8" y="1070.0"></text>
</g>
<g>
<title>RouteImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="156.8" y="1043.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.8" y="1054.0"></text>
</g>
<g>
<title>RouteImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="156.8" y="1027.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.8" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="156.8" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="159.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="156.8" y="995.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="159.8" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="156.8" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="159.8" y="990.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="156.8" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="159.8" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="156.8" y="947.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="159.8" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="156.8" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="159.8" y="942.0"></text>
</g>
<g>
<title>RawBytecodeStream::raw_next() (1 samples, 0.03%)</title><rect x="156.8" y="915.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.8" y="926.0"></text>
</g>
<g>
<title>VertxHttpRecorder.initializeRouter (1 samples, 0.03%)</title><rect x="157.3" y="1107.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.3" y="1118.0"></text>
</g>
<g>
<title>Router.router (1 samples, 0.03%)</title><rect x="157.3" y="1091.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.3" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="157.3" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="160.3" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="157.3" y="1059.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.3" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="157.3" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.3" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="157.3" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.3" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="157.3" y="1011.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="160.3" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="157.3" y="995.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="160.3" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="979.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="160.3" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="963.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="160.3" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="947.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="160.3" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="160.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="915.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="160.3" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="160.3" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="160.3" y="894.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="160.3" y="878.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="160.3" y="862.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="157.3" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="160.3" y="846.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="157.3" y="819.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="160.3" y="830.0"></text>
</g>
<g>
<title>VertxHttpProcessor$openSocket-2064782366.deploy (8 samples, 0.22%)</title><rect x="157.7" y="1139.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.7" y="1150.0"></text>
</g>
<g>
<title>VertxHttpProcessor$openSocket-2064782366.deploy_0 (8 samples, 0.22%)</title><rect x="157.7" y="1123.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.7" y="1134.0"></text>
</g>
<g>
<title>VertxHttpRecorder.startServer (8 samples, 0.22%)</title><rect x="157.7" y="1107.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.7" y="1118.0"></text>
</g>
<g>
<title>VertxHttpRecorder.doServerStart (8 samples, 0.22%)</title><rect x="157.7" y="1091.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.7" y="1102.0"></text>
</g>
<g>
<title>VertxHttpRecorder.createHttpServerOptions (1 samples, 0.03%)</title><rect x="157.7" y="1075.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.7" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="157.7" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="160.7" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="157.7" y="1043.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="160.7" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="157.7" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="160.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="157.7" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="160.7" y="1022.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="157.7" y="995.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="160.7" y="1006.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="157.7" y="979.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="160.7" y="990.0"></text>
</g>
<g>
<title>ClassVerifier::verify_aload(unsigned short, StackMapFrame*, Thread*) (1 samples, 0.03%)</title><rect x="157.7" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="160.7" y="974.0"></text>
</g>
<g>
<title>VertxHttpRecorder.createSslOptions (1 samples, 0.03%)</title><rect x="158.1" y="1075.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.1" y="1086.0"></text>
</g>
<g>
<title>JdkSSLEngineOptions.isAlpnAvailable (1 samples, 0.03%)</title><rect x="158.1" y="1059.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.1" y="1070.0"></text>
</g>
<g>
<title>Bytecode_loadconstant::result_type() const (1 samples, 0.03%)</title><rect x="158.1" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="161.1" y="1054.0"></text>
</g>
<g>
<title>VertxImpl.deployVerticle (6 samples, 0.17%)</title><rect x="158.6" y="1075.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.6" y="1086.0"></text>
</g>
<g>
<title>DeploymentManager.deployVerticle (6 samples, 0.17%)</title><rect x="158.6" y="1059.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.6" y="1070.0"></text>
</g>
<g>
<title>DeploymentManager.doDeploy (5 samples, 0.14%)</title><rect x="158.6" y="1043.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.6" y="1054.0"></text>
</g>
<g>
<title>DeploymentManager.generateDeploymentID (1 samples, 0.03%)</title><rect x="158.6" y="1027.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.6" y="1038.0"></text>
</g>
<g>
<title>UUID.randomUUID (1 samples, 0.03%)</title><rect x="158.6" y="1011.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.6" y="1022.0"></text>
</g>
<g>
<title>SecureRandom.nextBytes (1 samples, 0.03%)</title><rect x="158.6" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.6" y="1006.0"></text>
</g>
<g>
<title>NativePRNG.engineNextBytes (1 samples, 0.03%)</title><rect x="158.6" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.6" y="990.0"></text>
</g>
<g>
<title>NativePRNG$RandomIO.implNextBytes (1 samples, 0.03%)</title><rect x="158.6" y="963.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.6" y="974.0"></text>
</g>
<g>
<title>SecureRandom.engineNextBytes (1 samples, 0.03%)</title><rect x="158.6" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.6" y="958.0"></text>
</g>
<g>
<title>MessageDigest.update (1 samples, 0.03%)</title><rect x="158.6" y="931.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.6" y="942.0"></text>
</g>
<g>
<title>MessageDigest$Delegate.engineUpdate (1 samples, 0.03%)</title><rect x="158.6" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.6" y="926.0"></text>
</g>
<g>
<title>DigestBase.engineUpdate (1 samples, 0.03%)</title><rect x="158.6" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="161.6" y="910.0"></text>
</g>
<g>
<title>DigestBase.engineReset (1 samples, 0.03%)</title><rect x="158.6" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.6" y="894.0"></text>
</g>
<g>
<title>EventLoopContext.runOnContext (1 samples, 0.03%)</title><rect x="159.0" y="1027.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.0" y="1038.0"></text>
</g>
<g>
<title>ContextImpl.runOnContext (1 samples, 0.03%)</title><rect x="159.0" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.0" y="1022.0"></text>
</g>
<g>
<title>EventLoopContext.executeAsync (1 samples, 0.03%)</title><rect x="159.0" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.0" y="1006.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.execute (1 samples, 0.03%)</title><rect x="159.0" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.0" y="990.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.execute (1 samples, 0.03%)</title><rect x="159.0" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.0" y="974.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.startThread (1 samples, 0.03%)</title><rect x="159.0" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.0" y="958.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.doStartThread (1 samples, 0.03%)</title><rect x="159.0" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.0" y="942.0"></text>
</g>
<g>
<title>ThreadExecutorMap$1.execute (1 samples, 0.03%)</title><rect x="159.0" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.0" y="926.0"></text>
</g>
<g>
<title>ThreadPerTaskExecutor.execute (1 samples, 0.03%)</title><rect x="159.0" y="899.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.0" y="910.0"></text>
</g>
<g>
<title>Thread.start (1 samples, 0.03%)</title><rect x="159.0" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.0" y="894.0"></text>
</g>
<g>
<title>Thread.start0 (1 samples, 0.03%)</title><rect x="159.0" y="867.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.0" y="878.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.03%)</title><rect x="159.0" y="851.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="162.0" y="862.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (1 samples, 0.03%)</title><rect x="159.0" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="162.0" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="159.0" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="162.0" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="159.0" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="162.0" y="814.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="159.0" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="162.0" y="798.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="159.0" y="771.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="162.0" y="782.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="159.5" y="1027.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.5" y="1038.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="159.5" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.5" y="1022.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="159.5" y="995.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.5" y="1006.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="159.5" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.5" y="990.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="159.5" y="963.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.5" y="974.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="159.5" y="947.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="162.5" y="958.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="159.5" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.5" y="942.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="159.5" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.5" y="926.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findStatic (1 samples, 0.03%)</title><rect x="159.5" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.5" y="910.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethod (1 samples, 0.03%)</title><rect x="159.5" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.5" y="894.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="159.5" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.5" y="878.0"></text>
</g>
<g>
<title>VertxImpl.createEventLoopContext (2 samples, 0.06%)</title><rect x="159.9" y="1027.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.9" y="1038.0"></text>
</g>
<g>
<title>VertxImpl.createEventLoopContext (2 samples, 0.06%)</title><rect x="159.9" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.9" y="1022.0"></text>
</g>
<g>
<title>EventLoopContext.&lt;init&gt; (2 samples, 0.06%)</title><rect x="159.9" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.9" y="1006.0"></text>
</g>
<g>
<title>ContextImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="160.3" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.3" y="990.0"></text>
</g>
<g>
<title>ContextImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="160.3" y="963.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.3" y="974.0"></text>
</g>
<g>
<title>TaskQueue.&lt;init&gt; (1 samples, 0.03%)</title><rect x="160.3" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.3" y="958.0"></text>
</g>
<g>
<title>DeploymentOptions.getIsolatedClasses (1 samples, 0.03%)</title><rect x="160.8" y="1043.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.8" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="160.8" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="163.8" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="160.8" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="163.8" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="160.8" y="995.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="163.8" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="160.8" y="979.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="163.8" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="160.8" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="163.8" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="160.8" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="163.8" y="958.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.03%)</title><rect x="160.8" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="163.8" y="942.0"></text>
</g>
<g>
<title>ApplicationStateNotification.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="161.2" y="1155.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.2" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="161.2" y="1139.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.2" y="1150.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="161.2" y="1123.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.2" y="1134.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="161.2" y="1107.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.2" y="1118.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="161.2" y="1091.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.2" y="1102.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="161.2" y="1075.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.2" y="1086.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="161.2" y="1059.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.2" y="1070.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="161.2" y="1043.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="164.2" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="161.2" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.2" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="161.2" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.2" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="161.2" y="995.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="164.2" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="161.2" y="979.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="164.2" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="161.2" y="963.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="164.2" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="161.2" y="947.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="164.2" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="161.2" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="164.2" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="161.2" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="164.2" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="161.2" y="899.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="164.2" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="161.2" y="883.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="164.2" y="894.0"></text>
</g>
<g>
<title>JavaClasses::get_injected(Symbol*, int*) (1 samples, 0.03%)</title><rect x="161.2" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="164.2" y="878.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="161.2" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="164.2" y="862.0"></text>
</g>
<g>
<title>Application.stop (6 samples, 0.17%)</title><rect x="161.7" y="1171.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.7" y="1182.0"></text>
</g>
<g>
<title>Application.stop (6 samples, 0.17%)</title><rect x="161.7" y="1155.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.7" y="1166.0"></text>
</g>
<g>
<title>ApplicationImpl.doStop (5 samples, 0.14%)</title><rect x="161.7" y="1139.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.7" y="1150.0"></text>
</g>
<g>
<title>StartupContext.close (5 samples, 0.14%)</title><rect x="161.7" y="1123.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.7" y="1134.0"></text>
</g>
<g>
<title>StartupContext.runAllInReverseOrder (5 samples, 0.14%)</title><rect x="161.7" y="1107.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="164.7" y="1118.0"></text>
</g>
<g>
<title>ArcRecorder$1.run (2 samples, 0.06%)</title><rect x="161.7" y="1091.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.7" y="1102.0"></text>
</g>
<g>
<title>Arc.shutdown (2 samples, 0.06%)</title><rect x="161.7" y="1075.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.7" y="1086.0"></text>
</g>
<g>
<title>ArcContainerImpl.shutdown (2 samples, 0.06%)</title><rect x="161.7" y="1059.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.7" y="1070.0"></text>
</g>
<g>
<title>AbstractSharedContext.destroy (1 samples, 0.03%)</title><rect x="161.7" y="1043.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.7" y="1054.0"></text>
</g>
<g>
<title>ContextInstanceHandleImpl.destroy (1 samples, 0.03%)</title><rect x="161.7" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.7" y="1038.0"></text>
</g>
<g>
<title>InstanceHandleImpl.destroyInternal (1 samples, 0.03%)</title><rect x="161.7" y="1011.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.7" y="1022.0"></text>
</g>
<g>
<title>DataSources_Bean.destroy (1 samples, 0.03%)</title><rect x="161.7" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.7" y="1006.0"></text>
</g>
<g>
<title>DataSources_Bean.destroy (1 samples, 0.03%)</title><rect x="161.7" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.7" y="990.0"></text>
</g>
<g>
<title>DataSources.stop (1 samples, 0.03%)</title><rect x="161.7" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.7" y="974.0"></text>
</g>
<g>
<title>DataSource.close (1 samples, 0.03%)</title><rect x="161.7" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="164.7" y="958.0"></text>
</g>
<g>
<title>ConnectionPool.close (1 samples, 0.03%)</title><rect x="161.7" y="931.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.7" y="942.0"></text>
</g>
<g>
<title>PriorityScheduledExecutor.shutdownNow (1 samples, 0.03%)</title><rect x="161.7" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.7" y="926.0"></text>
</g>
<g>
<title>ConcurrentLinkedQueue.clear (1 samples, 0.03%)</title><rect x="161.7" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.7" y="910.0"></text>
</g>
<g>
<title>MethodHandleNatives.findMethodHandleType (1 samples, 0.03%)</title><rect x="161.7" y="883.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.7" y="894.0"></text>
</g>
<g>
<title>MethodType.makeImpl (1 samples, 0.03%)</title><rect x="161.7" y="867.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.7" y="878.0"></text>
</g>
<g>
<title>MethodType$ConcurrentWeakInternSet.get (1 samples, 0.03%)</title><rect x="161.7" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.7" y="862.0"></text>
</g>
<g>
<title>ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="161.7" y="835.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="164.7" y="846.0"></text>
</g>
<g>
<title>MethodType$ConcurrentWeakInternSet$WeakEntry.hashCode (1 samples, 0.03%)</title><rect x="161.7" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.7" y="830.0"></text>
</g>
<g>
<title>EventImpl$Notifier.notify (1 samples, 0.03%)</title><rect x="162.1" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.1" y="1054.0"></text>
</g>
<g>
<title>EventImpl$Notifier.notify (1 samples, 0.03%)</title><rect x="162.1" y="1027.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.1" y="1038.0"></text>
</g>
<g>
<title>EventImpl$Notifier.notifyObservers (1 samples, 0.03%)</title><rect x="162.1" y="1011.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.1" y="1022.0"></text>
</g>
<g>
<title>JPAConfig_Observer_destroy_4d75ae0cbe7e61a766b92c59cd8bbdeb2c1debf7.notify (1 samples, 0.03%)</title><rect x="162.1" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.1" y="1006.0"></text>
</g>
<g>
<title>JPAConfig.destroy (1 samples, 0.03%)</title><rect x="162.1" y="979.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.1" y="990.0"></text>
</g>
<g>
<title>JPAConfig$LazyPersistenceUnit.close (1 samples, 0.03%)</title><rect x="162.1" y="963.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.1" y="974.0"></text>
</g>
<g>
<title>SessionFactoryImpl.close (1 samples, 0.03%)</title><rect x="162.1" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="165.1" y="958.0"></text>
</g>
<g>
<title>SessionFactoryObserverChain.sessionFactoryClosed (1 samples, 0.03%)</title><rect x="162.1" y="931.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.1" y="942.0"></text>
</g>
<g>
<title>FastBootEntityManagerFactoryBuilder$ServiceRegistryCloser.sessionFactoryClosed (1 samples, 0.03%)</title><rect x="162.1" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.1" y="926.0"></text>
</g>
<g>
<title>SessionFactoryServiceRegistryImpl.destroy (1 samples, 0.03%)</title><rect x="162.1" y="899.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.1" y="910.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.destroy (1 samples, 0.03%)</title><rect x="162.1" y="883.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.1" y="894.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.deRegisterChild (1 samples, 0.03%)</title><rect x="162.1" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.1" y="878.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.destroy (1 samples, 0.03%)</title><rect x="162.1" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="165.1" y="862.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.destroy (1 samples, 0.03%)</title><rect x="162.1" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="165.1" y="846.0"></text>
</g>
<g>
<title>ConcurrentHashMap.clear (1 samples, 0.03%)</title><rect x="162.1" y="819.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.1" y="830.0"></text>
</g>
<g>
<title>VertxCoreRecorder$1.run (1 samples, 0.03%)</title><rect x="162.6" y="1091.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.6" y="1102.0"></text>
</g>
<g>
<title>VertxCoreRecorder.destroy (1 samples, 0.03%)</title><rect x="162.6" y="1075.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.6" y="1086.0"></text>
</g>
<g>
<title>VertxImpl.close (1 samples, 0.03%)</title><rect x="162.6" y="1059.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.6" y="1070.0"></text>
</g>
<g>
<title>CloseHooks.run (1 samples, 0.03%)</title><rect x="162.6" y="1043.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="165.6" y="1054.0"></text>
</g>
<g>
<title>Future.succeededFuture (1 samples, 0.03%)</title><rect x="162.6" y="1027.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.6" y="1038.0"></text>
</g>
<g>
<title>VertxHttpRecorder$13.run (2 samples, 0.06%)</title><rect x="163.0" y="1091.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.0" y="1102.0"></text>
</g>
<g>
<title>VertxImpl.undeploy (2 samples, 0.06%)</title><rect x="163.0" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.0" y="1086.0"></text>
</g>
<g>
<title>Future.compose (2 samples, 0.06%)</title><rect x="163.0" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.0" y="1070.0"></text>
</g>
<g>
<title>Future.compose (2 samples, 0.06%)</title><rect x="163.0" y="1043.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.0" y="1054.0"></text>
</g>
<g>
<title>FutureImpl.onComplete (1 samples, 0.03%)</title><rect x="163.0" y="1027.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.0" y="1038.0"></text>
</g>
<g>
<title>FutureImpl.dispatch (1 samples, 0.03%)</title><rect x="163.0" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.0" y="1022.0"></text>
</g>
<g>
<title>1388958672.handle (1 samples, 0.03%)</title><rect x="163.0" y="995.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="166.0" y="1006.0"></text>
</g>
<g>
<title>Future.lambda$compose$3 (1 samples, 0.03%)</title><rect x="163.0" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.0" y="990.0"></text>
</g>
<g>
<title>1703458581.apply (1 samples, 0.03%)</title><rect x="163.0" y="963.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="166.0" y="974.0"></text>
</g>
<g>
<title>VertxImpl.lambda$undeploy$27 (1 samples, 0.03%)</title><rect x="163.0" y="947.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.0" y="958.0"></text>
</g>
<g>
<title>DeploymentManager.undeployVerticle (1 samples, 0.03%)</title><rect x="163.0" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.0" y="942.0"></text>
</g>
<g>
<title>DeploymentManager$DeploymentImpl.undeploy (1 samples, 0.03%)</title><rect x="163.0" y="915.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.0" y="926.0"></text>
</g>
<g>
<title>DeploymentManager$DeploymentImpl.doUndeploy (1 samples, 0.03%)</title><rect x="163.0" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.0" y="910.0"></text>
</g>
<g>
<title>EventLoopContext.runOnContext (1 samples, 0.03%)</title><rect x="163.0" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.0" y="894.0"></text>
</g>
<g>
<title>ContextImpl.runOnContext (1 samples, 0.03%)</title><rect x="163.0" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.0" y="878.0"></text>
</g>
<g>
<title>EventLoopContext.executeAsync (1 samples, 0.03%)</title><rect x="163.0" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.0" y="862.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="163.4" y="1027.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.4" y="1038.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="163.4" y="1011.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.4" y="1022.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="163.4" y="995.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.4" y="1006.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="163.4" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.4" y="990.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="163.4" y="963.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.4" y="974.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="163.4" y="947.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="166.4" y="958.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="163.4" y="931.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.4" y="942.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="163.4" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.4" y="926.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="163.4" y="899.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.4" y="910.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="163.4" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.4" y="894.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="163.4" y="867.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.4" y="878.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="163.4" y="851.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="166.4" y="862.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="163.4" y="835.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="166.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="163.4" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="166.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="163.4" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="166.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="163.4" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.4" y="798.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="163.4" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="166.4" y="782.0"></text>
</g>
<g>
<title>Verifier::is_eligible_for_verification(InstanceKlass*, bool) (1 samples, 0.03%)</title><rect x="163.4" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="166.4" y="766.0"></text>
</g>
<g>
<title>ShutdownRecorder.runShutdown (1 samples, 0.03%)</title><rect x="163.9" y="1139.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.9" y="1150.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="163.9" y="1123.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.9" y="1134.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="163.9" y="1107.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.9" y="1118.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="163.9" y="1091.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.9" y="1102.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="163.9" y="1075.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.9" y="1086.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="163.9" y="1059.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.9" y="1070.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="163.9" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.9" y="1054.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="163.9" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="166.9" y="1038.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="163.9" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.9" y="1022.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="163.9" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.9" y="1006.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="163.9" y="979.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.9" y="990.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="163.9" y="963.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="166.9" y="974.0"></text>
</g>
<g>
<title>Class.newInstance (578 samples, 16.18%)</title><rect x="164.3" y="1187.0" width="255.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.3" y="1198.0">Class.newInstance</text>
</g>
<g>
<title>Constructor.newInstance (578 samples, 16.18%)</title><rect x="164.3" y="1171.0" width="255.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.3" y="1182.0">Constructor.newInstance</text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (578 samples, 16.18%)</title><rect x="164.3" y="1155.0" width="255.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.3" y="1166.0">DelegatingConstructorAccessorImpl...</text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (578 samples, 16.18%)</title><rect x="164.3" y="1139.0" width="255.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="167.3" y="1150.0">NativeConstructorAccessorImpl.newI..</text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (578 samples, 16.18%)</title><rect x="164.3" y="1123.0" width="255.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.3" y="1134.0">NativeConstructorAccessorImpl.newI..</text>
</g>
<g>
<title>ApplicationImpl.&lt;clinit&gt; (578 samples, 16.18%)</title><rect x="164.3" y="1107.0" width="255.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.3" y="1118.0">ApplicationImpl.&lt;clinit&gt;</text>
</g>
<g>
<title>ArcProcessor$generateResources1649676420.deploy (325 samples, 9.10%)</title><rect x="164.3" y="1091.0" width="143.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.3" y="1102.0">ArcProcessor$gener..</text>
</g>
<g>
<title>ArcProcessor$generateResources1649676420.deploy_0 (325 samples, 9.10%)</title><rect x="164.3" y="1075.0" width="143.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.3" y="1086.0">ArcProcessor$gener..</text>
</g>
<g>
<title>ArcRecorder.getContainer (66 samples, 1.85%)</title><rect x="164.3" y="1059.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.3" y="1070.0">Ar..</text>
</g>
<g>
<title>Arc.initialize (65 samples, 1.82%)</title><rect x="164.3" y="1043.0" width="28.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="167.3" y="1054.0">Ar..</text>
</g>
<g>
<title>ArcContainerImpl.&lt;init&gt; (57 samples, 1.60%)</title><rect x="164.3" y="1027.0" width="25.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.3" y="1038.0">A..</text>
</g>
<g>
<title>ArcContainerImpl.addBuiltInBeans (1 samples, 0.03%)</title><rect x="164.3" y="1011.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.3" y="1022.0"></text>
</g>
<g>
<title>BeanManagerBean.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="164.3" y="995.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.3" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="164.3" y="979.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.3" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="164.3" y="963.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.3" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="164.3" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.3" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="164.3" y="931.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.3" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="164.3" y="915.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="167.3" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="164.3" y="899.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="167.3" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="883.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="167.3" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="167.3" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="167.3" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="167.3" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="167.3" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="167.3" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="164.3" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="167.3" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="164.3" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="167.3" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="164.3" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="167.3" y="766.0"></text>
</g>
<g>
<title>Default_ComponentsProvider.getComponents (50 samples, 1.40%)</title><rect x="164.8" y="1011.0" width="22.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.8" y="1022.0">D..</text>
</g>
<g>
<title>Default_ComponentsProvider.addBeans1 (36 samples, 1.01%)</title><rect x="164.8" y="995.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.8" y="1006.0"></text>
</g>
<g>
<title>CDIDelegatingTransactionManager_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="164.8" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.8" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="164.8" y="963.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.8" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="164.8" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.8" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="164.8" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.8" y="942.0"></text>
</g>
<g>
<title>DefaultEntityManagerProducer_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="165.2" y="979.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.2" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="165.2" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.2" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="165.2" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="168.2" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="165.2" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.2" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="165.2" y="915.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.2" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="165.2" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.2" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="165.2" y="883.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.2" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="165.2" y="867.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="168.2" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="165.2" y="851.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="168.2" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="165.2" y="835.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="168.2" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="165.2" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="168.2" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="165.2" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="168.2" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="165.2" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="168.2" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="165.2" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="168.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="165.2" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="168.2" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="165.2" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="168.2" y="750.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.03%)</title><rect x="165.2" y="723.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="168.2" y="734.0"></text>
</g>
<g>
<title>H2AgroalConnectionConfigurer_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="165.7" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.7" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="165.7" y="963.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.7" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="165.7" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.7" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="165.7" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.7" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="165.7" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.7" y="926.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="165.7" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="168.7" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="165.7" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.7" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="165.7" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.7" y="878.0"></text>
</g>
<g>
<title>JarResource.getProtectionDomain (1 samples, 0.03%)</title><rect x="165.7" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.7" y="862.0"></text>
</g>
<g>
<title>URI.toURL (1 samples, 0.03%)</title><rect x="165.7" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.7" y="846.0"></text>
</g>
<g>
<title>URL.fromURI (1 samples, 0.03%)</title><rect x="165.7" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.7" y="830.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="165.7" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.7" y="814.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="165.7" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="168.7" y="798.0"></text>
</g>
<g>
<title>Handler.parseAbsoluteSpec (1 samples, 0.03%)</title><rect x="165.7" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.7" y="782.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="165.7" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.7" y="766.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="165.7" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.7" y="750.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="165.7" y="723.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.7" y="734.0"></text>
</g>
<g>
<title>JPAConfig_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="166.1" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.1" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="166.1" y="963.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.1" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="166.1" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.1" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="166.1" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="169.1" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="166.1" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="169.1" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="166.1" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.1" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="166.1" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.1" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="166.1" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.1" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="166.1" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.1" y="862.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="166.1" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.1" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="166.1" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.1" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="166.1" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.1" y="814.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="166.1" y="787.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="169.1" y="798.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="166.1" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="169.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="166.1" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="169.1" y="766.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="166.1" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="169.1" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="166.1" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="169.1" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="166.1" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="169.1" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="166.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="169.1" y="702.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="166.1" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="169.1" y="686.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonbConfig_1c79043e425bda1d4532b032b7700718f0f73683_Bean.&lt;init&gt; (2 samples, 0.06%)</title><rect x="166.5" y="979.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.5" y="990.0"></text>
</g>
<g>
<title>Reflections.findMethod (1 samples, 0.03%)</title><rect x="166.5" y="963.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.5" y="974.0"></text>
</g>
<g>
<title>ComputingCache.getValue (1 samples, 0.03%)</title><rect x="166.5" y="947.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.5" y="958.0"></text>
</g>
<g>
<title>LazyValue.get (1 samples, 0.03%)</title><rect x="166.5" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.5" y="942.0"></text>
</g>
<g>
<title>931480286.get (1 samples, 0.03%)</title><rect x="166.5" y="915.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="169.5" y="926.0"></text>
</g>
<g>
<title>ComputingCache$CacheFunction.lambda$apply$0 (1 samples, 0.03%)</title><rect x="166.5" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.5" y="910.0"></text>
</g>
<g>
<title>Reflections$2.apply (1 samples, 0.03%)</title><rect x="166.5" y="883.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.5" y="894.0"></text>
</g>
<g>
<title>Reflections$2.apply (1 samples, 0.03%)</title><rect x="166.5" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.5" y="878.0"></text>
</g>
<g>
<title>Reflections.access$100 (1 samples, 0.03%)</title><rect x="166.5" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.5" y="862.0"></text>
</g>
<g>
<title>Reflections.findMethodInternal (1 samples, 0.03%)</title><rect x="166.5" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.5" y="846.0"></text>
</g>
<g>
<title>Class.getDeclaredMethod (1 samples, 0.03%)</title><rect x="166.5" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.5" y="830.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="166.5" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.5" y="814.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="166.5" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.5" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="166.5" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.5" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="166.5" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.5" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="166.5" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="169.5" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="166.5" y="723.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.5" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="166.5" y="707.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="169.5" y="718.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="166.5" y="691.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="169.5" y="702.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="675.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="169.5" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="659.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="169.5" y="670.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="643.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="169.5" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="169.5" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="169.5" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="595.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.5" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="579.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.5" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="166.5" y="563.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="169.5" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="167.0" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="170.0" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="167.0" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.0" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="167.0" y="931.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.0" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="167.0" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.0" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="167.0" y="899.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.0" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="167.0" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.0" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="167.0" y="867.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="170.0" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="167.0" y="851.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="170.0" y="862.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="167.0" y="835.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="170.0" y="846.0"></text>
</g>
<g>
<title>NarayanaJtaProducers_Bean.&lt;init&gt; (23 samples, 0.64%)</title><rect x="167.4" y="979.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.4" y="990.0"></text>
</g>
<g>
<title>Class.forName (23 samples, 0.64%)</title><rect x="167.4" y="963.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.4" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (23 samples, 0.64%)</title><rect x="167.4" y="947.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.4" y="958.0"></text>
</g>
<g>
<title>NarayanaJtaProducers.&lt;clinit&gt; (23 samples, 0.64%)</title><rect x="167.4" y="931.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.4" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="167.4" y="915.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.4" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="167.4" y="899.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="167.4" y="883.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="167.4" y="867.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.4" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="167.4" y="851.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="170.4" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="167.4" y="835.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="170.4" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="167.4" y="819.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="170.4" y="830.0"></text>
</g>
<g>
<title>PerfClassTraceTime::initialize() (1 samples, 0.03%)</title><rect x="167.4" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="170.4" y="814.0"></text>
</g>
<g>
<title>elapsedTimer::stop() (1 samples, 0.03%)</title><rect x="167.4" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="170.4" y="798.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="167.4" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="170.4" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="167.4" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="170.4" y="766.0"></text>
</g>
<g>
<title>UserTransaction.userTransaction (22 samples, 0.62%)</title><rect x="167.9" y="915.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.9" y="926.0"></text>
</g>
<g>
<title>JTAEnvironmentBean.getUserTransaction (2 samples, 0.06%)</title><rect x="167.9" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.9" y="910.0"></text>
</g>
<g>
<title>ClassloadingUtility.loadAndInstantiateClass (2 samples, 0.06%)</title><rect x="167.9" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.9" y="894.0"></text>
</g>
<g>
<title>ClassloadingUtility.loadClass (2 samples, 0.06%)</title><rect x="167.9" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.9" y="878.0"></text>
</g>
<g>
<title>ClassloadingUtility.loadClass (1 samples, 0.03%)</title><rect x="167.9" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.9" y="862.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="167.9" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.9" y="846.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="167.9" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.9" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="167.9" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.9" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="167.9" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.9" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="167.9" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.9" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="167.9" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.9" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="167.9" y="739.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="170.9" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="167.9" y="723.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="170.9" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="707.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="170.9" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="170.9" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="170.9" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="170.9" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="170.9" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="170.9" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="167.9" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="170.9" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="167.9" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="170.9" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="167.9" y="579.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="170.9" y="590.0"></text>
</g>
<g>
<title>commonLogger.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="168.3" y="851.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="171.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="168.3" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.3" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="168.3" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.3" y="830.0"></text>
</g>
<g>
<title>StringBuilder.toString (1 samples, 0.03%)</title><rect x="168.3" y="803.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.3" y="814.0"></text>
</g>
<g>
<title>StringLatin1.newString (1 samples, 0.03%)</title><rect x="168.3" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.3" y="798.0"></text>
</g>
<g>
<title>Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="168.3" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.3" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="168.3" y="755.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="171.3" y="766.0"></text>
</g>
<g>
<title>jtaPropertyManager.getJTAEnvironmentBean (20 samples, 0.56%)</title><rect x="168.8" y="899.0" width="8.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="171.8" y="910.0"></text>
</g>
<g>
<title>BeanPopulator.getDefaultInstance (20 samples, 0.56%)</title><rect x="168.8" y="883.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.8" y="894.0"></text>
</g>
<g>
<title>BeanPopulator.getNamedInstance (20 samples, 0.56%)</title><rect x="168.8" y="867.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.8" y="878.0"></text>
</g>
<g>
<title>BeanPopulator.configureFromProperties (6 samples, 0.17%)</title><rect x="168.8" y="851.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.8" y="862.0"></text>
</g>
<g>
<title>AccessibleObject.isAnnotationPresent (1 samples, 0.03%)</title><rect x="168.8" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.8" y="846.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (1 samples, 0.03%)</title><rect x="168.8" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.8" y="830.0"></text>
</g>
<g>
<title>Field.getAnnotation (1 samples, 0.03%)</title><rect x="168.8" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.8" y="814.0"></text>
</g>
<g>
<title>Field.declaredAnnotations (1 samples, 0.03%)</title><rect x="168.8" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.8" y="798.0"></text>
</g>
<g>
<title>Field.declaredAnnotations (1 samples, 0.03%)</title><rect x="168.8" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.8" y="782.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="168.8" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.8" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="168.8" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.8" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="168.8" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.8" y="734.0"></text>
</g>
<g>
<title>AnnotationType.getInstance (1 samples, 0.03%)</title><rect x="168.8" y="707.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.8" y="718.0"></text>
</g>
<g>
<title>AnnotationType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="168.8" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.8" y="702.0"></text>
</g>
<g>
<title>AnnotationParser.parseSelectAnnotations (1 samples, 0.03%)</title><rect x="168.8" y="675.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.8" y="686.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="168.8" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.8" y="670.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="168.8" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.8" y="654.0"></text>
</g>
<g>
<title>AnnotationParser.parseMemberValue (1 samples, 0.03%)</title><rect x="168.8" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.8" y="638.0"></text>
</g>
<g>
<title>AnnotationParser.parseEnumValue (1 samples, 0.03%)</title><rect x="168.8" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.8" y="622.0"></text>
</g>
<g>
<title>ConstantPool.getUTF8At (1 samples, 0.03%)</title><rect x="168.8" y="595.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.8" y="606.0"></text>
</g>
<g>
<title>ConstantPool.getUTF8At0 (1 samples, 0.03%)</title><rect x="168.8" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.8" y="590.0"></text>
</g>
<g>
<title>JVM_ConstantPoolGetUTF8At (1 samples, 0.03%)</title><rect x="168.8" y="563.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="171.8" y="574.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="168.8" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="171.8" y="558.0"></text>
</g>
<g>
<title>BeanPopulator.handleGroupProperty (3 samples, 0.08%)</title><rect x="169.2" y="835.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.2" y="846.0"></text>
</g>
<g>
<title>BeanPopulator.getValueFromProperties (1 samples, 0.03%)</title><rect x="169.2" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.2" y="830.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="169.2" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.2" y="814.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="169.2" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.2" y="798.0"></text>
</g>
<g>
<title>AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="169.2" y="771.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.2" y="782.0"></text>
</g>
<g>
<title>Method.invoke (2 samples, 0.06%)</title><rect x="169.6" y="819.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.6" y="830.0"></text>
</g>
<g>
<title>DelegatingMethodAccessorImpl.invoke (2 samples, 0.06%)</title><rect x="169.6" y="803.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.6" y="814.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke (2 samples, 0.06%)</title><rect x="169.6" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.6" y="798.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke0 (2 samples, 0.06%)</title><rect x="169.6" y="771.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.6" y="782.0"></text>
</g>
<g>
<title>JTAEnvironmentBean.setXaRecoveryNodes (2 samples, 0.06%)</title><rect x="169.6" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.6" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="169.6" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.6" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="169.6" y="723.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.6" y="734.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="169.6" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.6" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="169.6" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="172.6" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="169.6" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="172.6" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="169.6" y="659.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="172.6" y="670.0"></text>
</g>
<g>
<title>CompiledIC::is_clean() const (1 samples, 0.03%)</title><rect x="169.6" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="172.6" y="654.0"></text>
</g>
<g>
<title>CompiledIC::ic_destination() const (1 samples, 0.03%)</title><rect x="169.6" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="172.6" y="638.0"></text>
</g>
<g>
<title>InlineCacheBuffer::contains(unsigned char*) (1 samples, 0.03%)</title><rect x="169.6" y="611.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="172.6" y="622.0"></text>
</g>
<g>
<title>jtaLogger.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="170.1" y="739.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="173.1" y="750.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="170.1" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.1" y="734.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="170.1" y="707.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.1" y="718.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="170.1" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.1" y="702.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="170.1" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.1" y="686.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="170.1" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.1" y="670.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="170.1" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.1" y="654.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="170.1" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.1" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="170.1" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.1" y="622.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="170.1" y="595.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.1" y="606.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="170.1" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.1" y="590.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="170.1" y="563.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="173.1" y="574.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="170.1" y="547.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="173.1" y="558.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="170.1" y="531.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="173.1" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="170.1" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="173.1" y="526.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="170.1" y="499.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="173.1" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="170.1" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="173.1" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="170.1" y="467.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="173.1" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="170.1" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="173.1" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="170.1" y="435.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="173.1" y="446.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="170.1" y="419.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="173.1" y="430.0"></text>
</g>
<g>
<title>BeanPopulator.handleSimpleProperty (1 samples, 0.03%)</title><rect x="170.5" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.5" y="846.0"></text>
</g>
<g>
<title>Class.isAnnotationPresent (1 samples, 0.03%)</title><rect x="170.5" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.5" y="830.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (1 samples, 0.03%)</title><rect x="170.5" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.5" y="814.0"></text>
</g>
<g>
<title>Class.getAnnotation (1 samples, 0.03%)</title><rect x="170.5" y="787.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.5" y="798.0"></text>
</g>
<g>
<title>Class.annotationData (1 samples, 0.03%)</title><rect x="170.5" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.5" y="782.0"></text>
</g>
<g>
<title>Class.createAnnotationData (1 samples, 0.03%)</title><rect x="170.5" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.5" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="170.5" y="739.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.5" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="170.5" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.5" y="734.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="170.5" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.5" y="718.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="170.5" y="691.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.5" y="702.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="170.5" y="675.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.5" y="686.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="170.5" y="659.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.5" y="670.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="170.5" y="643.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.5" y="654.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="170.5" y="627.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.5" y="638.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="170.5" y="611.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.5" y="622.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="170.5" y="595.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.5" y="606.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="170.5" y="579.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.5" y="590.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="170.5" y="563.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="173.5" y="574.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="170.5" y="547.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.5" y="558.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="170.5" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.5" y="542.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="170.5" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.5" y="526.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="170.5" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.5" y="510.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="170.5" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.5" y="494.0"></text>
</g>
<g>
<title>HashMap$Values.iterator (1 samples, 0.03%)</title><rect x="170.5" y="467.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.5" y="478.0"></text>
</g>
<g>
<title>HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="170.5" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.5" y="462.0"></text>
</g>
<g>
<title>HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="170.5" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.5" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="171.0" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="174.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="171.0" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="174.0" y="830.0"></text>
</g>
<g>
<title>Class.newInstance (1 samples, 0.03%)</title><rect x="171.4" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.4" y="862.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="171.4" y="835.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.4" y="846.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="171.4" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.4" y="830.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="171.4" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.4" y="814.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="171.4" y="787.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="174.4" y="798.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="171.4" y="771.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="174.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="171.4" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="174.4" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="171.4" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="174.4" y="750.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="171.4" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="174.4" y="734.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="171.4" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="174.4" y="718.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="171.4" y="691.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="174.4" y="702.0"></text>
</g>
<g>
<title>JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="171.4" y="675.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="174.4" y="686.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.03%)</title><rect x="171.4" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="174.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="171.4" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="174.4" y="654.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="171.4" y="627.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="174.4" y="638.0"></text>
</g>
<g>
<title>PropertiesFactory.getDefaultProperties (13 samples, 0.36%)</title><rect x="171.8" y="851.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="174.8" y="862.0"></text>
</g>
<g>
<title>AbstractPropertiesFactory.getDefaultProperties (13 samples, 0.36%)</title><rect x="171.8" y="835.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.8" y="846.0"></text>
</g>
<g>
<title>AbstractPropertiesFactory.initDefaultProperties (13 samples, 0.36%)</title><rect x="171.8" y="819.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.8" y="830.0"></text>
</g>
<g>
<title>AbstractPropertiesFactory.getPropertiesFromFile (13 samples, 0.36%)</title><rect x="171.8" y="803.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.8" y="814.0"></text>
</g>
<g>
<title>AbstractPropertiesFactory.loadFromFile (12 samples, 0.34%)</title><rect x="171.8" y="787.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.8" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="171.8" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="174.8" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="171.8" y="755.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="174.8" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="174.8" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="174.8" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="174.8" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.8" y="702.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="174.8" y="686.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="174.8" y="670.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="171.8" y="643.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="174.8" y="654.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="171.8" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="174.8" y="638.0"></text>
</g>
<g>
<title>PropertiesFactoryStax.loadFromXML (11 samples, 0.31%)</title><rect x="172.3" y="771.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.3" y="782.0"></text>
</g>
<g>
<title>XMLInputFactory.newInstance (4 samples, 0.11%)</title><rect x="172.7" y="755.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.7" y="766.0"></text>
</g>
<g>
<title>FactoryFinder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="172.7" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.7" y="750.0"></text>
</g>
<g>
<title>SecuritySupport.getSystemProperty (1 samples, 0.03%)</title><rect x="172.7" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.7" y="734.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="172.7" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.7" y="718.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="172.7" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="175.7" y="702.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="172.7" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="175.7" y="686.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="172.7" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.7" y="670.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="172.7" y="643.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.7" y="654.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="172.7" y="627.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.7" y="638.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="172.7" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.7" y="622.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="172.7" y="595.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="175.7" y="606.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findStatic (1 samples, 0.03%)</title><rect x="172.7" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.7" y="590.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethod (1 samples, 0.03%)</title><rect x="172.7" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.7" y="574.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="172.7" y="547.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.7" y="558.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="172.7" y="531.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.7" y="542.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="172.7" y="515.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.7" y="526.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="172.7" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.7" y="510.0"></text>
</g>
<g>
<title>DirectMethodHandle.shouldBeInitialized (1 samples, 0.03%)</title><rect x="172.7" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.7" y="494.0"></text>
</g>
<g>
<title>VerifyAccess.isSamePackage (1 samples, 0.03%)</title><rect x="172.7" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.7" y="478.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="172.7" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.7" y="462.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="172.7" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="175.7" y="446.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="172.7" y="419.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.7" y="430.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="172.7" y="403.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="175.7" y="414.0"></text>
</g>
<g>
<title>java_lang_Class::name(Handle, Thread*) (1 samples, 0.03%)</title><rect x="172.7" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="175.7" y="398.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (1 samples, 0.03%)</title><rect x="172.7" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="175.7" y="382.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short*, int, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="172.7" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="175.7" y="366.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="172.7" y="339.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="175.7" y="350.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="172.7" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="175.7" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="172.7" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="175.7" y="318.0"></text>
</g>
<g>
<title>FactoryFinder.find (3 samples, 0.08%)</title><rect x="173.2" y="739.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.2" y="750.0"></text>
</g>
<g>
<title>FactoryFinder.find (3 samples, 0.08%)</title><rect x="173.2" y="723.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.2" y="734.0"></text>
</g>
<g>
<title>FactoryFinder.findServiceProvider (1 samples, 0.03%)</title><rect x="173.2" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.2" y="718.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="173.2" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.2" y="702.0"></text>
</g>
<g>
<title>FactoryFinder$1.run (1 samples, 0.03%)</title><rect x="173.2" y="675.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.2" y="686.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="173.2" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.2" y="670.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="173.2" y="643.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.2" y="654.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="173.2" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.2" y="638.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="173.2" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.2" y="622.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="173.2" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.2" y="606.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="173.2" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.2" y="590.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="173.2" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="574.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="173.2" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="558.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="173.2" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.2" y="542.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasMoreElements (1 samples, 0.03%)</title><rect x="173.2" y="515.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.2" y="526.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasNext (1 samples, 0.03%)</title><rect x="173.2" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="510.0"></text>
</g>
<g>
<title>URLClassPath$1.hasMoreElements (1 samples, 0.03%)</title><rect x="173.2" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="494.0"></text>
</g>
<g>
<title>URLClassPath$1.next (1 samples, 0.03%)</title><rect x="173.2" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.2" y="478.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="173.2" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.2" y="462.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="173.2" y="435.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.2" y="446.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="173.2" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.2" y="430.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="173.2" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.2" y="414.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="173.2" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.2" y="398.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="173.2" y="371.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.2" y="382.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="173.2" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.2" y="366.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.ensureOpen (1 samples, 0.03%)</title><rect x="173.2" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.2" y="350.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="173.2" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="334.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="173.2" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.2" y="318.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="173.2" y="291.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.2" y="302.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getJarFile (1 samples, 0.03%)</title><rect x="173.2" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.2" y="286.0"></text>
</g>
<g>
<title>FileNotFoundException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="173.2" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.2" y="270.0"></text>
</g>
<g>
<title>IOException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="173.2" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.2" y="254.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="173.2" y="227.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.2" y="238.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="173.2" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.2" y="222.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="173.2" y="195.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="206.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="173.2" y="179.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="190.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="173.2" y="163.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="176.2" y="174.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="173.2" y="147.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="176.2" y="158.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="173.2" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="176.2" y="142.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="173.2" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="176.2" y="126.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.03%)</title><rect x="173.2" y="99.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="176.2" y="110.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.03%)</title><rect x="173.2" y="83.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="176.2" y="94.0"></text>
</g>
<g>
<title>FactoryFinder.newInstance (2 samples, 0.06%)</title><rect x="173.6" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.6" y="718.0"></text>
</g>
<g>
<title>FactoryFinder.newInstance (2 samples, 0.06%)</title><rect x="173.6" y="691.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.6" y="702.0"></text>
</g>
<g>
<title>Constructor.newInstance (2 samples, 0.06%)</title><rect x="173.6" y="675.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.6" y="686.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.06%)</title><rect x="173.6" y="659.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.6" y="670.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (2 samples, 0.06%)</title><rect x="173.6" y="643.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.6" y="654.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (2 samples, 0.06%)</title><rect x="173.6" y="627.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.6" y="638.0"></text>
</g>
<g>
<title>XMLInputFactoryImpl.&lt;init&gt; (2 samples, 0.06%)</title><rect x="173.6" y="611.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.6" y="622.0"></text>
</g>
<g>
<title>PropertyManager.&lt;init&gt; (2 samples, 0.06%)</title><rect x="173.6" y="595.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.6" y="606.0"></text>
</g>
<g>
<title>PropertyManager.initConfigurableReaderProperties (2 samples, 0.06%)</title><rect x="173.6" y="579.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.6" y="590.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="173.6" y="563.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="176.6" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="173.6" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="176.6" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="173.6" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="176.6" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="173.6" y="515.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="176.6" y="526.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="173.6" y="499.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="176.6" y="510.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="173.6" y="483.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="176.6" y="494.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="173.6" y="467.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="176.6" y="478.0"></text>
</g>
<g>
<title>AdapterHandlerTable::lookup(int, BasicType*) (1 samples, 0.03%)</title><rect x="173.6" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="176.6" y="462.0"></text>
</g>
<g>
<title>JdkXmlUtils.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="174.1" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.1" y="574.0"></text>
</g>
<g>
<title>CatalogFeatures$Feature.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="174.1" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.1" y="558.0"></text>
</g>
<g>
<title>CatalogFeatures$Feature.&lt;init&gt; (1 samples, 0.03%)</title><rect x="174.1" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.1" y="542.0"></text>
</g>
<g>
<title>XMLInputFactoryImpl.createXMLStreamReader (5 samples, 0.14%)</title><rect x="174.5" y="755.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.5" y="766.0"></text>
</g>
<g>
<title>XMLInputFactoryImpl.getXMLStreamReaderImpl (5 samples, 0.14%)</title><rect x="174.5" y="739.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.5" y="750.0"></text>
</g>
<g>
<title>XMLStreamReaderImpl.&lt;init&gt; (5 samples, 0.14%)</title><rect x="174.5" y="723.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.5" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="174.5" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="177.5" y="718.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="177.5" y="702.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="177.5" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="177.5" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="177.5" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="177.5" y="638.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="177.5" y="622.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="177.5" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="579.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="177.5" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="563.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="177.5" y="574.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="547.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="177.5" y="558.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="174.5" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="177.5" y="542.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="174.5" y="515.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="177.5" y="526.0"></text>
</g>
<g>
<title>SymbolTable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="174.9" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.9" y="718.0"></text>
</g>
<g>
<title>SymbolTable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="174.9" y="691.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.9" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="174.9" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="177.9" y="686.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="174.9" y="659.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="177.9" y="670.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="174.9" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="177.9" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="174.9" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="177.9" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="174.9" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="177.9" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="174.9" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="177.9" y="606.0"></text>
</g>
<g>
<title>PackageEntryTable::lookup_only(Symbol*) (1 samples, 0.03%)</title><rect x="174.9" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="177.9" y="590.0"></text>
</g>
<g>
<title>XMLDocumentScannerImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="175.4" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="178.4" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="175.4" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="178.4" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="175.4" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="178.4" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="175.4" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="178.4" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="175.4" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="178.4" y="654.0"></text>
</g>
<g>
<title>LinkResolver::check_field_loader_constraints(Symbol*, Symbol*, Klass*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="175.4" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="178.4" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="175.4" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="178.4" y="622.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="175.4" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="178.4" y="606.0"></text>
</g>
<g>
<title>XMLEntityManager.&lt;init&gt; (1 samples, 0.03%)</title><rect x="175.8" y="707.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.8" y="718.0"></text>
</g>
<g>
<title>XMLEntityStorage.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="175.8" y="691.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.8" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="175.8" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="178.8" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="175.8" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="178.8" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="175.8" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="178.8" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="175.8" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="178.8" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="175.8" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="178.8" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="175.8" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="178.8" y="606.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="175.8" y="579.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="178.8" y="590.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="175.8" y="563.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="178.8" y="574.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.03%)</title><rect x="175.8" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="178.8" y="558.0"></text>
</g>
<g>
<title>AccessFlags::field_has_generic_signature() const (1 samples, 0.03%)</title><rect x="175.8" y="531.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="178.8" y="542.0"></text>
</g>
<g>
<title>XMLStreamReaderImpl.setInputSource (1 samples, 0.03%)</title><rect x="176.3" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="718.0"></text>
</g>
<g>
<title>XMLDocumentScannerImpl.setInputSource (1 samples, 0.03%)</title><rect x="176.3" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.3" y="702.0"></text>
</g>
<g>
<title>XMLEntityManager.startDocumentEntity (1 samples, 0.03%)</title><rect x="176.3" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.3" y="686.0"></text>
</g>
<g>
<title>XMLEntityManager.startEntity (1 samples, 0.03%)</title><rect x="176.3" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.3" y="670.0"></text>
</g>
<g>
<title>XMLEntityManager.setupCurrentEntity (1 samples, 0.03%)</title><rect x="176.3" y="643.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.3" y="654.0"></text>
</g>
<g>
<title>XMLEntityManager.createReader (1 samples, 0.03%)</title><rect x="176.3" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.3" y="638.0"></text>
</g>
<g>
<title>UTF8Reader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="176.3" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.3" y="622.0"></text>
</g>
<g>
<title>ThreadLocalBufferAllocator.getBufferAllocator (1 samples, 0.03%)</title><rect x="176.3" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.3" y="606.0"></text>
</g>
<g>
<title>ThreadLocal.get (1 samples, 0.03%)</title><rect x="176.3" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.3" y="590.0"></text>
</g>
<g>
<title>ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="176.3" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.3" y="574.0"></text>
</g>
<g>
<title>ThreadLocal$ThreadLocalMap.set (1 samples, 0.03%)</title><rect x="176.3" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="176.3" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="179.3" y="542.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="176.3" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="179.3" y="526.0"></text>
</g>
<g>
<title>XMLStreamReaderImpl.next (1 samples, 0.03%)</title><rect x="176.7" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.7" y="766.0"></text>
</g>
<g>
<title>XMLNSDocumentScannerImpl.next (1 samples, 0.03%)</title><rect x="176.7" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.7" y="750.0"></text>
</g>
<g>
<title>XMLDocumentScannerImpl.next (1 samples, 0.03%)</title><rect x="176.7" y="723.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.7" y="734.0"></text>
</g>
<g>
<title>XMLDocumentScannerImpl$PrologDriver.next (1 samples, 0.03%)</title><rect x="176.7" y="707.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.7" y="718.0"></text>
</g>
<g>
<title>XMLDocumentScannerImpl$DTDDriver.next (1 samples, 0.03%)</title><rect x="176.7" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.7" y="702.0"></text>
</g>
<g>
<title>XMLDocumentScannerImpl$DTDDriver.dispatch (1 samples, 0.03%)</title><rect x="176.7" y="675.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.7" y="686.0"></text>
</g>
<g>
<title>XMLDTDScannerImpl.reset (1 samples, 0.03%)</title><rect x="176.7" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.7" y="670.0"></text>
</g>
<g>
<title>DTDGrammar.&lt;init&gt; (1 samples, 0.03%)</title><rect x="176.7" y="643.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.7" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="176.7" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="179.7" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="176.7" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="179.7" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="176.7" y="595.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="179.7" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="176.7" y="579.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="179.7" y="590.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="176.7" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="179.7" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="176.7" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="179.7" y="558.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="176.7" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="179.7" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="176.7" y="515.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="179.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="176.7" y="499.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="179.7" y="510.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="176.7" y="483.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="179.7" y="494.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="177.2" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="180.2" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="177.2" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="180.2" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="180.2" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="180.2" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="180.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="180.2" y="718.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="180.2" y="702.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="180.2" y="686.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="180.2" y="670.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="177.2" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="180.2" y="654.0"></text>
</g>
<g>
<title>PublisherResource_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="177.6" y="979.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.6" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="177.6" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.6" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="177.6" y="947.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.6" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="177.6" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="177.6" y="915.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.6" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="177.6" y="899.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.6" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="177.6" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.6" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="177.6" y="867.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="180.6" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="177.6" y="851.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="180.6" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="835.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="180.6" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="180.6" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="180.6" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="787.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="180.6" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="180.6" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="180.6" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="177.6" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="180.6" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="177.6" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="180.6" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="177.6" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="180.6" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="178.0" y="979.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.0" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="178.0" y="963.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.0" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="178.0" y="947.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.0" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="178.0" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.0" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="178.0" y="915.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="181.0" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="178.0" y="899.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="181.0" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="883.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="181.0" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="181.0" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="181.0" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="181.0" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="181.0" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="181.0" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="181.0" y="798.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="181.0" y="782.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="178.0" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="181.0" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="178.0" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="181.0" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="178.0" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="181.0" y="734.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="178.5" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.5" y="958.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="178.5" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.5" y="942.0"></text>
</g>
<g>
<title>JVM_FindLoadedClass (1 samples, 0.03%)</title><rect x="178.5" y="915.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="181.5" y="926.0"></text>
</g>
<g>
<title>java_lang_String::char_converter(Handle, unsigned short, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="178.5" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="181.5" y="910.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="178.5" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="181.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="178.5" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="181.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="178.5" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="181.5" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="178.5" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="181.5" y="846.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="178.5" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="181.5" y="830.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="178.5" y="803.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="181.5" y="814.0"></text>
</g>
<g>
<title>JarResource.getResourceData (2 samples, 0.06%)</title><rect x="178.9" y="947.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.9" y="958.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="178.9" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="181.9" y="942.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="178.9" y="915.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.9" y="926.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="178.9" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.9" y="910.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="178.9" y="883.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="181.9" y="894.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="178.9" y="867.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="181.9" y="878.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="178.9" y="851.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="181.9" y="862.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="179.4" y="931.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.4" y="942.0"></text>
</g>
<g>
<title>Collections$SetFromMap.add (1 samples, 0.03%)</title><rect x="179.4" y="915.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="182.4" y="926.0"></text>
</g>
<g>
<title>WeakHashMap.put (1 samples, 0.03%)</title><rect x="179.4" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.4" y="910.0"></text>
</g>
<g>
<title>WeakHashMap.hash (1 samples, 0.03%)</title><rect x="179.4" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.4" y="894.0"></text>
</g>
<g>
<title>Object.hashCode (1 samples, 0.03%)</title><rect x="179.4" y="867.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.4" y="878.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="179.4" y="851.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="182.4" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="179.4" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="182.4" y="846.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="179.4" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="182.4" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="179.8" y="947.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.8" y="958.0"></text>
</g>
<g>
<title>ClassLoader.definePackage (1 samples, 0.03%)</title><rect x="179.8" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.8" y="942.0"></text>
</g>
<g>
<title>Package.&lt;init&gt; (1 samples, 0.03%)</title><rect x="179.8" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="182.8" y="926.0"></text>
</g>
<g>
<title>NamedPackage.&lt;init&gt; (1 samples, 0.03%)</title><rect x="179.8" y="899.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.8" y="910.0"></text>
</g>
<g>
<title>String.isEmpty (1 samples, 0.03%)</title><rect x="179.8" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.8" y="894.0"></text>
</g>
<g>
<title>TransactionalInterceptorRequired_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="180.2" y="979.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="183.2" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="180.2" y="963.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.2" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="180.2" y="947.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.2" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="180.2" y="931.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.2" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="180.2" y="915.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.2" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="180.2" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.2" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="180.2" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.2" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="180.2" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.2" y="878.0"></text>
</g>
<g>
<title>Default_ComponentsProvider.addBeans2 (13 samples, 0.36%)</title><rect x="180.7" y="995.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.7" y="1006.0"></text>
</g>
<g>
<title>CommandLineArgumentsProducer_ProducerMethod_getCommandLineArgs_fcffb0711c3031ac5af6b7cdefb4d990a1f6c810_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="180.7" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.7" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="180.7" y="963.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="183.7" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="180.7" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.7" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="180.7" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.7" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="180.7" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.7" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="180.7" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.7" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="180.7" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.7" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="180.7" y="867.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="183.7" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="180.7" y="851.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="183.7" y="862.0"></text>
</g>
<g>
<title>DataSources_Bean.&lt;init&gt; (2 samples, 0.06%)</title><rect x="181.1" y="979.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.1" y="990.0"></text>
</g>
<g>
<title>CurrentInjectionPointProvider.&lt;init&gt; (1 samples, 0.03%)</title><rect x="181.1" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.1" y="974.0"></text>
</g>
<g>
<title>CurrentInjectionPointProvider$InjectionPointImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="181.1" y="947.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.1" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="181.1" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="184.1" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="184.1" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="899.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="184.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="184.1" y="894.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="184.1" y="878.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="184.1" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="184.1" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="181.1" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="184.1" y="830.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="181.1" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="184.1" y="814.0"></text>
</g>
<g>
<title>Reflections.findConstructor (1 samples, 0.03%)</title><rect x="181.6" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.6" y="974.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructor (1 samples, 0.03%)</title><rect x="181.6" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="184.6" y="958.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="181.6" y="931.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.6" y="942.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="181.6" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.6" y="926.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="181.6" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="184.6" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.6" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.6" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="181.6" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.6" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="181.6" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.6" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.6" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.6" y="814.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.6" y="798.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.6" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.6" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="181.6" y="739.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.6" y="750.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="181.6" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.6" y="734.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="181.6" y="707.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.6" y="718.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.03%)</title><rect x="181.6" y="691.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.6" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="181.6" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.6" y="686.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="181.6" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.6" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="181.6" y="643.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.6" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass2 (1 samples, 0.03%)</title><rect x="181.6" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.6" y="638.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="611.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.6" y="622.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="181.6" y="595.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.6" y="606.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="181.6" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="184.6" y="590.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.03%)</title><rect x="181.6" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.6" y="574.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="181.6" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.6" y="558.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.read (1 samples, 0.03%)</title><rect x="181.6" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.6" y="542.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.03%)</title><rect x="181.6" y="515.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.6" y="526.0"></text>
</g>
<g>
<title>ImageReader.findLocation (1 samples, 0.03%)</title><rect x="181.6" y="499.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.6" y="510.0"></text>
</g>
<g>
<title>BasicImageReader.findLocation (1 samples, 0.03%)</title><rect x="181.6" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.6" y="494.0"></text>
</g>
<g>
<title>ImageLocation.verify (1 samples, 0.03%)</title><rect x="181.6" y="467.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.6" y="478.0"></text>
</g>
<g>
<title>ImageLocation.verifyName (1 samples, 0.03%)</title><rect x="181.6" y="451.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="184.6" y="462.0"></text>
</g>
<g>
<title>String.regionMatches (1 samples, 0.03%)</title><rect x="181.6" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.6" y="446.0"></text>
</g>
<g>
<title>EventLoopGroup_6ef9dd9271a740aaa271e8a1efa2231088d015f4_Synthetic_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="182.0" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.0" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="182.0" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.0" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="182.0" y="947.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.0" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="182.0" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.0" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="182.0" y="915.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.0" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="182.0" y="899.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="185.0" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="182.0" y="883.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="185.0" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="867.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="185.0" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="185.0" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="185.0" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="185.0" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="185.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::set_package(ClassLoaderData*, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="185.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::check_prohibited_package(Symbol*, ClassLoaderData*, Thread*) (1 samples, 0.03%)</title><rect x="182.0" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="185.0" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::is_platform_class_loader_data() const (1 samples, 0.03%)</title><rect x="182.0" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="185.0" y="766.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.03%)</title><rect x="182.0" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="185.0" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="182.5" y="979.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="185.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="182.5" y="963.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="185.5" y="974.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.03%)</title><rect x="182.5" y="947.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="185.5" y="958.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="182.5" y="931.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="185.5" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="182.5" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="185.5" y="926.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="182.5" y="899.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="185.5" y="910.0"></text>
</g>
<g>
<title>JaxrsEndPointValidationInterceptor_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="182.9" y="979.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.9" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="182.9" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.9" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="182.9" y="947.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.9" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="182.9" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.9" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="182.9" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.9" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="182.9" y="899.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.9" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="182.9" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.9" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="182.9" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.9" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="182.9" y="851.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.9" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="182.9" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.9" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="182.9" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.9" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="182.9" y="803.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="185.9" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="182.9" y="787.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="185.9" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="771.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="185.9" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="185.9" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="185.9" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="185.9" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="185.9" y="718.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="185.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::do_local_static_fields(void (*)(fieldDescriptor*, Handle, Thread*), Handle, Thread*) (1 samples, 0.03%)</title><rect x="182.9" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="185.9" y="686.0"></text>
</g>
<g>
<title>MethodValidationInterceptor_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="183.3" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.3" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="183.3" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.3" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="183.3" y="947.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.3" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="183.3" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.3" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="183.3" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.3" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="183.3" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.3" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClassSourceLocation (1 samples, 0.03%)</title><rect x="183.3" y="883.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.3" y="894.0"></text>
</g>
<g>
<title>URL.toString (1 samples, 0.03%)</title><rect x="183.3" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.3" y="878.0"></text>
</g>
<g>
<title>URL.toExternalForm (1 samples, 0.03%)</title><rect x="183.3" y="851.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.3" y="862.0"></text>
</g>
<g>
<title>URLStreamHandler.toExternalForm (1 samples, 0.03%)</title><rect x="183.3" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.3" y="846.0"></text>
</g>
<g>
<title>StringBuilder.toString (1 samples, 0.03%)</title><rect x="183.3" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.3" y="830.0"></text>
</g>
<g>
<title>StringLatin1.newString (1 samples, 0.03%)</title><rect x="183.3" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.3" y="814.0"></text>
</g>
<g>
<title>Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="183.3" y="787.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.3" y="798.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="183.8" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.8" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="183.8" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.8" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="183.8" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.8" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="183.8" y="931.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.8" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="183.8" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.8" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="183.8" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.8" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="183.8" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.8" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="183.8" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.8" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="183.8" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.8" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="183.8" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.8" y="846.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="183.8" y="819.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.8" y="830.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="183.8" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.8" y="814.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="183.8" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.8" y="798.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="183.8" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.8" y="782.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="183.8" y="755.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="186.8" y="766.0"></text>
</g>
<g>
<title>java_lang_Class::name(Handle, Thread*) (1 samples, 0.03%)</title><rect x="183.8" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="186.8" y="750.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (1 samples, 0.03%)</title><rect x="183.8" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="186.8" y="734.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short*, int, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="183.8" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="186.8" y="718.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::internal_insert&lt;StringTableLookupOop, StringTableCreateEntry, StringTableCreateEntry&gt;(Thread*, StringTableLookupOop&amp;, StringTableCreateEntry&amp;, StringTableCreateEntry&amp;, bool*) (1 samples, 0.03%)</title><rect x="183.8" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="186.8" y="702.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)2&gt;::create(Handle) (1 samples, 0.03%)</title><rect x="183.8" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="186.8" y="686.0"></text>
</g>
<g>
<title>OopStorage::allocate() (1 samples, 0.03%)</title><rect x="183.8" y="659.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="186.8" y="670.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="183.8" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="186.8" y="654.0"></text>
</g>
<g>
<title>RouterProducer_ProducerMethod_produceRouter_47a03b0c0aa0db1a64462fa81c394956a357811a_Bean.&lt;init&gt; (1 samples, 0.03%)</title><rect x="184.2" y="979.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.2" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="184.2" y="963.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.2" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="184.2" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="187.2" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="184.2" y="931.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.2" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="184.2" y="915.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.2" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="184.2" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="187.2" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="184.2" y="883.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.2" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="184.2" y="867.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="187.2" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="184.2" y="851.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="187.2" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="835.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="187.2" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="187.2" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="187.2" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="187.2" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="187.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="187.2" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_generic_signature_attribute(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="184.2" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="187.2" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="184.7" y="979.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.7" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="184.7" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.7" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="184.7" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.7" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="184.7" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.7" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="184.7" y="915.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="187.7" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="184.7" y="899.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="187.7" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="883.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="187.7" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="187.7" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.7" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="187.7" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="187.7" y="830.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="187.7" y="814.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="184.7" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="187.7" y="798.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="184.7" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="187.7" y="782.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="185.1" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.1" y="958.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="185.1" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.1" y="942.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="185.1" y="915.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.1" y="926.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="185.1" y="899.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.1" y="910.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="185.1" y="883.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="188.1" y="894.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="185.1" y="867.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="188.1" y="878.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="185.1" y="851.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="188.1" y="862.0"></text>
</g>
<g>
<title>Vertx_7c31d5064e6d5db248fafa10f188ca6323f3f983_Synthetic_Bean.&lt;init&gt; (2 samples, 0.06%)</title><rect x="185.6" y="979.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.6" y="990.0"></text>
</g>
<g>
<title>Class.forName (2 samples, 0.06%)</title><rect x="185.6" y="963.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.6" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (2 samples, 0.06%)</title><rect x="185.6" y="947.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.6" y="958.0"></text>
</g>
<g>
<title>Vertx.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="185.6" y="931.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="185.6" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.6" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="185.6" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.6" y="910.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="185.6" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.6" y="894.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="185.6" y="867.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.6" y="878.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="185.6" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.6" y="862.0"></text>
</g>
<g>
<title>ZipFile.getZipEntry (1 samples, 0.03%)</title><rect x="185.6" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.6" y="846.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactory (1 samples, 0.03%)</title><rect x="186.0" y="915.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.0" y="926.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactoryOrNull (1 samples, 0.03%)</title><rect x="186.0" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.0" y="910.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactories (1 samples, 0.03%)</title><rect x="186.0" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.0" y="894.0"></text>
</g>
<g>
<title>ServiceHelper.loadFactories (1 samples, 0.03%)</title><rect x="186.0" y="867.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.0" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="186.0" y="851.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.0" y="862.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="186.0" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.0" y="846.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="186.0" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.0" y="830.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="186.0" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.0" y="814.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="186.0" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.0" y="798.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="186.0" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="189.0" y="782.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="186.0" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.0" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="186.0" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.0" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="186.0" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.0" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="186.0" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.0" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="186.0" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.0" y="702.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="186.0" y="675.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="189.0" y="686.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="186.0" y="659.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="189.0" y="670.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="186.0" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="189.0" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="186.0" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="189.0" y="638.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="186.0" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="189.0" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="186.0" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="189.0" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="186.0" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="189.0" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_classfile_attributes(ClassFileStream const*, ConstantPool*, ClassFileParser::ClassAnnotationCollector*, Thread*) (1 samples, 0.03%)</title><rect x="186.0" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="189.0" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="186.4" y="995.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.4" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="186.4" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.4" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="186.4" y="963.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.4" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="186.4" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.4" y="958.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="186.4" y="931.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="189.4" y="942.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="186.4" y="915.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="189.4" y="926.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="186.4" y="899.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="189.4" y="910.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="186.9" y="1011.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.9" y="1022.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="186.9" y="995.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.9" y="1006.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="186.9" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.9" y="990.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.03%)</title><rect x="186.9" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.9" y="974.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="186.9" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.9" y="958.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="186.9" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.9" y="942.0"></text>
</g>
<g>
<title>MethodType.insertParameterTypes (1 samples, 0.03%)</title><rect x="186.9" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.9" y="926.0"></text>
</g>
<g>
<title>RequestContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="187.3" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.3" y="1022.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="187.3" y="995.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.3" y="1006.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="187.3" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.3" y="990.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="187.3" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.3" y="974.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="187.3" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.3" y="958.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="187.3" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.3" y="942.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="187.3" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.3" y="926.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="187.3" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.3" y="910.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="187.3" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.3" y="894.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="187.3" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.3" y="878.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="187.3" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="187.8" y="1011.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.8" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="187.8" y="995.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.8" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="187.8" y="979.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="190.8" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="187.8" y="963.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.8" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="187.8" y="947.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.8" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="187.8" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.8" y="942.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="187.8" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.8" y="926.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="187.8" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.8" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="187.8" y="883.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.8" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="187.8" y="867.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.8" y="878.0"></text>
</g>
<g>
<title>InflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="187.8" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.8" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.03%)</title><rect x="187.8" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="190.8" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="187.8" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="190.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="187.8" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="190.8" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="187.8" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="190.8" y="798.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="187.8" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="190.8" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="187.8" y="755.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="190.8" y="766.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="188.2" y="979.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.2" y="990.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="188.2" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.2" y="974.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="188.2" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.2" y="958.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="188.2" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.2" y="942.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="188.2" y="915.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="191.2" y="926.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="188.2" y="899.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="191.2" y="910.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="188.2" y="883.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="191.2" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (2 samples, 0.06%)</title><rect x="188.7" y="1011.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.7" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (2 samples, 0.06%)</title><rect x="188.7" y="995.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.7" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (2 samples, 0.06%)</title><rect x="188.7" y="979.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.7" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (2 samples, 0.06%)</title><rect x="188.7" y="963.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.7" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="188.7" y="947.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.7" y="958.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="188.7" y="931.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.7" y="942.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="188.7" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="191.7" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="188.7" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="191.7" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="188.7" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="191.7" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="188.7" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.7" y="878.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="188.7" y="851.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.7" y="862.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="188.7" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.7" y="846.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="188.7" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="191.7" y="830.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="188.7" y="803.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="191.7" y="814.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="188.7" y="787.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="191.7" y="798.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="188.7" y="771.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="191.7" y="782.0"></text>
</g>
<g>
<title>ServiceLoader.getConstructor (1 samples, 0.03%)</title><rect x="189.1" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.1" y="958.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="189.1" y="931.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.1" y="942.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (1 samples, 0.03%)</title><rect x="189.1" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.1" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (1 samples, 0.03%)</title><rect x="189.1" y="899.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.1" y="910.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="189.1" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="192.1" y="894.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="189.1" y="867.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="192.1" y="878.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="189.1" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.1" y="862.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="189.1" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.1" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="189.1" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.1" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="189.1" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.1" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="189.1" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.1" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="189.1" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.1" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="189.1" y="755.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="192.1" y="766.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="189.1" y="739.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="192.1" y="750.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="723.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="192.1" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="192.1" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="192.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="192.1" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="192.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="192.1" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="189.1" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="192.1" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="189.1" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="192.1" y="622.0"></text>
</g>
<g>
<title>UTF8::is_legal_utf8(unsigned char const*, int, bool) (1 samples, 0.03%)</title><rect x="189.1" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="192.1" y="606.0"></text>
</g>
<g>
<title>ArcContainerImpl.init (7 samples, 0.20%)</title><rect x="189.5" y="1027.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.5" y="1038.0"></text>
</g>
<g>
<title>ArcCDIProvider.&lt;init&gt; (1 samples, 0.03%)</title><rect x="189.5" y="1011.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.5" y="1022.0"></text>
</g>
<g>
<title>ArcCDIProvider$ArcCDI.&lt;init&gt; (1 samples, 0.03%)</title><rect x="189.5" y="995.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.5" y="1006.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanManager (1 samples, 0.03%)</title><rect x="189.5" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.5" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="189.5" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.5" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="189.5" y="947.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.5" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="189.5" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.5" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="189.5" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.5" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="189.5" y="899.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="192.5" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="189.5" y="883.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="192.5" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="189.5" y="867.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="192.5" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="189.5" y="851.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="192.5" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="189.5" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="192.5" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="189.5" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="192.5" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="189.5" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="192.5" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="189.5" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="192.5" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="189.5" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="192.5" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="189.5" y="755.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="192.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="189.5" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="192.5" y="750.0"></text>
</g>
<g>
<title>EventImpl$Notifier.notify (1 samples, 0.03%)</title><rect x="190.0" y="1011.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.0" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="190.0" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="193.0" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="190.0" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.0" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="963.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="193.0" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="947.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="193.0" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="931.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="193.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="915.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="193.0" y="926.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="193.0" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="193.0" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="867.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="193.0" y="878.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="190.0" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="193.0" y="862.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="190.0" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="193.0" y="846.0"></text>
</g>
<g>
<title>EventImpl.createNotifier (4 samples, 0.11%)</title><rect x="190.4" y="1011.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.4" y="1022.0"></text>
</g>
<g>
<title>ArcContainerImpl.resolveObservers (4 samples, 0.11%)</title><rect x="190.4" y="995.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.4" y="1006.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="190.4" y="979.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.4" y="990.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="190.4" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.4" y="974.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="190.4" y="947.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.4" y="958.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="190.4" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.4" y="942.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="190.4" y="915.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.4" y="926.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="190.4" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.4" y="910.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="190.4" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.4" y="894.0"></text>
</g>
<g>
<title>AbstractValidatingLambdaMetafactory.validateMetafactoryArgs (1 samples, 0.03%)</title><rect x="190.4" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="193.4" y="878.0"></text>
</g>
<g>
<title>Qualifiers.verify (3 samples, 0.08%)</title><rect x="190.9" y="979.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="193.9" y="990.0"></text>
</g>
<g>
<title>Qualifiers.verifyQualifier (3 samples, 0.08%)</title><rect x="190.9" y="963.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.9" y="974.0"></text>
</g>
<g>
<title>Class.isAnnotationPresent (3 samples, 0.08%)</title><rect x="190.9" y="947.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.9" y="958.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (3 samples, 0.08%)</title><rect x="190.9" y="931.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.9" y="942.0"></text>
</g>
<g>
<title>Class.getAnnotation (3 samples, 0.08%)</title><rect x="190.9" y="915.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.9" y="926.0"></text>
</g>
<g>
<title>Class.annotationData (3 samples, 0.08%)</title><rect x="190.9" y="899.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.9" y="910.0"></text>
</g>
<g>
<title>Class.createAnnotationData (3 samples, 0.08%)</title><rect x="190.9" y="883.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.9" y="894.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (3 samples, 0.08%)</title><rect x="190.9" y="867.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.9" y="878.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (3 samples, 0.08%)</title><rect x="190.9" y="851.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.9" y="862.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (3 samples, 0.08%)</title><rect x="190.9" y="835.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.9" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="190.9" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.9" y="830.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="190.9" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="193.9" y="814.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="190.9" y="787.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="193.9" y="798.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="190.9" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.9" y="782.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="190.9" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.9" y="766.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="190.9" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.9" y="750.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="190.9" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.9" y="734.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="190.9" y="707.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.9" y="718.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="190.9" y="691.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="193.9" y="702.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="190.9" y="675.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.9" y="686.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="190.9" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.9" y="670.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="190.9" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="193.9" y="654.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="190.9" y="627.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.9" y="638.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="190.9" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.9" y="622.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.write (1 samples, 0.03%)</title><rect x="190.9" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.9" y="606.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool$ValueEntry.write (1 samples, 0.03%)</title><rect x="190.9" y="579.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.9" y="590.0"></text>
</g>
<g>
<title>DataOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="190.9" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.9" y="574.0"></text>
</g>
<g>
<title>DataOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="190.9" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.9" y="558.0"></text>
</g>
<g>
<title>AnnotationParser.parseMemberValue (1 samples, 0.03%)</title><rect x="191.3" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="194.3" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.parseArray (1 samples, 0.03%)</title><rect x="191.3" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.3" y="814.0"></text>
</g>
<g>
<title>AnnotationParser.parseEnumArray (1 samples, 0.03%)</title><rect x="191.3" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.3" y="798.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="191.3" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.3" y="782.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="191.3" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.3" y="766.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="191.3" y="739.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.3" y="750.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="191.3" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.3" y="734.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="191.3" y="707.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.3" y="718.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="191.3" y="691.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.3" y="702.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="191.3" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.3" y="686.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="191.3" y="659.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.3" y="670.0"></text>
</g>
<g>
<title>ClassWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="191.3" y="643.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.3" y="654.0"></text>
</g>
<g>
<title>AnnotationType.getInstance (1 samples, 0.03%)</title><rect x="191.7" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="194.7" y="830.0"></text>
</g>
<g>
<title>AnnotationType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="191.7" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.7" y="814.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="191.7" y="787.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.7" y="798.0"></text>
</g>
<g>
<title>AnnotationType$1.run (1 samples, 0.03%)</title><rect x="191.7" y="771.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.7" y="782.0"></text>
</g>
<g>
<title>AnnotationType$1.run (1 samples, 0.03%)</title><rect x="191.7" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.7" y="766.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods (1 samples, 0.03%)</title><rect x="191.7" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.7" y="750.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="191.7" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.7" y="734.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="191.7" y="707.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.7" y="718.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredMethods (1 samples, 0.03%)</title><rect x="191.7" y="691.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="194.7" y="702.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="191.7" y="675.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="194.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="191.7" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="194.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="191.7" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="194.7" y="654.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="191.7" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="194.7" y="638.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="191.7" y="611.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="194.7" y="622.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="191.7" y="595.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="194.7" y="606.0"></text>
</g>
<g>
<title>make_class_info_from_name (1 samples, 0.03%)</title><rect x="191.7" y="579.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="194.7" y="590.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="191.7" y="563.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="194.7" y="574.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="191.7" y="547.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="194.7" y="558.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="191.7" y="531.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="194.7" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="191.7" y="515.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="194.7" y="526.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="191.7" y="499.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="194.7" y="510.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="192.2" y="1011.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="195.2" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="192.2" y="995.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="195.2" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="979.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.2" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="195.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="195.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="195.2" y="942.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="195.2" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="195.2" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="883.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="195.2" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="195.2" y="878.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.2" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="192.2" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.2" y="846.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="192.2" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.2" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="192.6" y="1027.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="192.6" y="1011.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="195.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="192.6" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="195.6" y="1006.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="192.6" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="195.6" y="990.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="192.6" y="963.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="195.6" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="192.6" y="947.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="195.6" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::generate_code_data(methodHandle const&amp;, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="192.6" y="931.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="195.6" y="942.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="192.6" y="915.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="195.6" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="193.1" y="1043.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.1" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="193.1" y="1027.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="193.1" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.1" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="193.1" y="995.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.1" y="1006.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="193.1" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="196.1" y="990.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="193.1" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.1" y="974.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="193.1" y="947.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.1" y="958.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="193.1" y="931.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="196.1" y="942.0"></text>
</g>
<g>
<title>java_lang_Class::name(Handle, Thread*) (1 samples, 0.03%)</title><rect x="193.1" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="196.1" y="926.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (1 samples, 0.03%)</title><rect x="193.1" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="196.1" y="910.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="193.1" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="196.1" y="894.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.03%)</title><rect x="193.1" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="196.1" y="878.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupJchar, StringTableGet&gt;(Thread*, StringTableLookupJchar&amp;, StringTableGet&amp;, bool*) (1 samples, 0.03%)</title><rect x="193.1" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="196.1" y="862.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)2&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupJchar&gt;(Thread*, StringTableLookupJchar&amp;, bool*) (1 samples, 0.03%)</title><rect x="193.1" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.1" y="846.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupJchar&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupJchar&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="193.1" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="196.1" y="830.0"></text>
</g>
<g>
<title>StringTableLookupJchar::equals(WeakHandle&lt;(WeakHandleType)2&gt;*, bool*) (1 samples, 0.03%)</title><rect x="193.1" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.1" y="814.0"></text>
</g>
<g>
<title>ArcRecorder.initBeanContainer (259 samples, 7.25%)</title><rect x="193.5" y="1059.0" width="114.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.5" y="1070.0">ArcRecorder.in..</text>
</g>
<g>
<title>ArcRecorder$5.created (1 samples, 0.03%)</title><rect x="193.5" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.5" y="1054.0"></text>
</g>
<g>
<title>BeanContainer.instance (1 samples, 0.03%)</title><rect x="193.5" y="1027.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.5" y="1038.0"></text>
</g>
<g>
<title>ArcRecorder$2$1.create (1 samples, 0.03%)</title><rect x="193.5" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.5" y="1022.0"></text>
</g>
<g>
<title>ArcContainerImpl$1.get (1 samples, 0.03%)</title><rect x="193.5" y="995.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.5" y="1006.0"></text>
</g>
<g>
<title>ArcContainerImpl$1.get (1 samples, 0.03%)</title><rect x="193.5" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.5" y="990.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanInstanceHandle (1 samples, 0.03%)</title><rect x="193.5" y="963.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.5" y="974.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanInstanceHandle (1 samples, 0.03%)</title><rect x="193.5" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.5" y="958.0"></text>
</g>
<g>
<title>CommandLineArgumentsProducer_Bean.get (1 samples, 0.03%)</title><rect x="193.5" y="931.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.5" y="942.0"></text>
</g>
<g>
<title>CommandLineArgumentsProducer_Bean.get (1 samples, 0.03%)</title><rect x="193.5" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.5" y="926.0"></text>
</g>
<g>
<title>CommandLineArgumentsProducer_Bean.proxy (1 samples, 0.03%)</title><rect x="193.5" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="193.5" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.5" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="193.5" y="867.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.5" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="193.5" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.5" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="193.5" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="193.5" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.5" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="193.5" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.5" y="814.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="193.5" y="787.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.5" y="798.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="193.5" y="771.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.5" y="782.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="193.5" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.5" y="766.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="193.5" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.5" y="750.0"></text>
</g>
<g>
<title>InflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="193.5" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.5" y="734.0"></text>
</g>
<g>
<title>HibernateOrmRecorder$4.created (150 samples, 4.20%)</title><rect x="194.0" y="1043.0" width="66.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.0" y="1054.0">Hiberna..</text>
</g>
<g>
<title>PersistenceUnitsHolder.initializeJpa (150 samples, 4.20%)</title><rect x="194.0" y="1027.0" width="66.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.0" y="1038.0">Persist..</text>
</g>
<g>
<title>PersistenceUnitsHolder.constructMetadataAdvance (150 samples, 4.20%)</title><rect x="194.0" y="1011.0" width="66.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.0" y="1022.0">Persist..</text>
</g>
<g>
<title>PersistenceUnitsHolder.createMetadata (150 samples, 4.20%)</title><rect x="194.0" y="995.0" width="66.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.0" y="1006.0">Persist..</text>
</g>
<g>
<title>FastBootMetadataBuilder.&lt;clinit&gt; (4 samples, 0.11%)</title><rect x="194.0" y="979.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.0" y="990.0"></text>
</g>
<g>
<title>HEMLogging.messageLogger (4 samples, 0.11%)</title><rect x="194.0" y="963.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.0" y="974.0"></text>
</g>
<g>
<title>HEMLogging.messageLogger (4 samples, 0.11%)</title><rect x="194.0" y="947.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.0" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (4 samples, 0.11%)</title><rect x="194.0" y="931.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.0" y="942.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (4 samples, 0.11%)</title><rect x="194.0" y="915.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.0" y="926.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (4 samples, 0.11%)</title><rect x="194.0" y="899.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.0" y="910.0"></text>
</g>
<g>
<title>Logger$1.run (4 samples, 0.11%)</title><rect x="194.0" y="883.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.0" y="894.0"></text>
</g>
<g>
<title>Class.forName (4 samples, 0.11%)</title><rect x="194.0" y="867.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.0" y="878.0"></text>
</g>
<g>
<title>Class.forName0 (4 samples, 0.11%)</title><rect x="194.0" y="851.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.0" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (2 samples, 0.06%)</title><rect x="194.0" y="835.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="197.0" y="846.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (2 samples, 0.06%)</title><rect x="194.0" y="819.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="197.0" y="830.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (2 samples, 0.06%)</title><rect x="194.0" y="803.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="197.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="194.0" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="197.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="194.0" y="771.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="197.0" y="782.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="194.0" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="197.0" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="194.0" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="197.0" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="194.0" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="197.0" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="194.0" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="197.0" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="194.0" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="197.0" y="702.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="194.4" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="197.4" y="766.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="194.4" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="197.4" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="194.8" y="835.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.8" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="194.8" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.8" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="194.8" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.8" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="194.8" y="787.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.8" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="194.8" y="771.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="197.8" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="194.8" y="755.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="197.8" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="739.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="197.8" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="197.8" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="197.8" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="197.8" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="675.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="197.8" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="197.8" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="197.8" y="654.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="197.8" y="638.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="197.8" y="622.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="194.8" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="197.8" y="606.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="194.8" y="579.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="197.8" y="590.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="195.3" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.3" y="814.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="195.3" y="787.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.3" y="798.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="195.3" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.3" y="782.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="195.3" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.3" y="766.0"></text>
</g>
<g>
<title>FastBootMetadataBuilder.&lt;init&gt; (77 samples, 2.16%)</title><rect x="195.7" y="979.0" width="34.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.7" y="990.0">Fa..</text>
</g>
<g>
<title>FastBootMetadataBuilder.mergeSettings (1 samples, 0.03%)</title><rect x="195.7" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.7" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="195.7" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="195.7" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="942.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="195.7" y="915.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.7" y="926.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="195.7" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.7" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="195.7" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.7" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="195.7" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.7" y="878.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="195.7" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.7" y="862.0"></text>
</g>
<g>
<title>MetadataBuildingProcess.prepare (4 samples, 0.11%)</title><rect x="196.2" y="963.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.2" y="974.0"></text>
</g>
<g>
<title>MetadataSources.getXmlMappingBinderAccess (3 samples, 0.08%)</title><rect x="196.2" y="947.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.2" y="958.0"></text>
</g>
<g>
<title>XmlMappingBinderAccess.&lt;init&gt; (3 samples, 0.08%)</title><rect x="196.2" y="931.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.2" y="942.0"></text>
</g>
<g>
<title>MappingBinder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="196.2" y="915.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.2" y="926.0"></text>
</g>
<g>
<title>AbstractBinder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="196.2" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.2" y="910.0"></text>
</g>
<g>
<title>LocalXmlResourceResolver.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="196.2" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="894.0"></text>
</g>
<g>
<title>LocalXmlResourceResolver$NamespaceSchemaMapping.&lt;init&gt; (1 samples, 0.03%)</title><rect x="196.2" y="867.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.2" y="878.0"></text>
</g>
<g>
<title>LocalSchemaLocator.resolveLocalSchemaUrl (1 samples, 0.03%)</title><rect x="196.2" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.2" y="862.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="196.2" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.2" y="846.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="196.2" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.2" y="830.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="196.2" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.2" y="814.0"></text>
</g>
<g>
<title>BootLoader.findResource (1 samples, 0.03%)</title><rect x="196.2" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.2" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResource (1 samples, 0.03%)</title><rect x="196.2" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.2" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findMiscResource (1 samples, 0.03%)</title><rect x="196.2" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.2" y="766.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="196.2" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.2" y="750.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="196.2" y="723.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.2" y="734.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="196.2" y="707.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.2" y="718.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.find (1 samples, 0.03%)</title><rect x="196.2" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="702.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.03%)</title><rect x="196.2" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.2" y="686.0"></text>
</g>
<g>
<title>ImageReader.findLocation (1 samples, 0.03%)</title><rect x="196.2" y="659.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="670.0"></text>
</g>
<g>
<title>BasicImageReader.findLocation (1 samples, 0.03%)</title><rect x="196.2" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.2" y="654.0"></text>
</g>
<g>
<title>ImageLocation.verify (1 samples, 0.03%)</title><rect x="196.2" y="627.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.2" y="638.0"></text>
</g>
<g>
<title>ImageStringsReader.get (1 samples, 0.03%)</title><rect x="196.2" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.2" y="622.0"></text>
</g>
<g>
<title>BasicImageReader.getString (1 samples, 0.03%)</title><rect x="196.2" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.2" y="606.0"></text>
</g>
<g>
<title>ImageStringsReader.stringFromByteBuffer (1 samples, 0.03%)</title><rect x="196.2" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.2" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.03%)</title><rect x="196.2" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="199.2" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="196.2" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="199.2" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="196.2" y="531.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="199.2" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="196.2" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="199.2" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::extract_attached_method(vframeStream&amp;) (1 samples, 0.03%)</title><rect x="196.2" y="499.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="199.2" y="510.0"></text>
</g>
<g>
<title>CompiledMethod::attached_method(unsigned char*) (1 samples, 0.03%)</title><rect x="196.2" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="199.2" y="494.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.03%)</title><rect x="196.2" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="199.2" y="478.0"></text>
</g>
<g>
<title>XMLEventFactory.newInstance (1 samples, 0.03%)</title><rect x="196.6" y="899.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="199.6" y="910.0"></text>
</g>
<g>
<title>FactoryFinder.find (1 samples, 0.03%)</title><rect x="196.6" y="883.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.6" y="894.0"></text>
</g>
<g>
<title>FactoryFinder.find (1 samples, 0.03%)</title><rect x="196.6" y="867.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.6" y="878.0"></text>
</g>
<g>
<title>FactoryFinder.findServiceProvider (1 samples, 0.03%)</title><rect x="196.6" y="851.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.6" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="196.6" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.6" y="846.0"></text>
</g>
<g>
<title>FactoryFinder$1.run (1 samples, 0.03%)</title><rect x="196.6" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.6" y="830.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="196.6" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.6" y="814.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="196.6" y="787.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="199.6" y="798.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="196.6" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.6" y="782.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="196.6" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.6" y="766.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="196.6" y="739.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.6" y="750.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="196.6" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.6" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="196.6" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="199.6" y="718.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="196.6" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="199.6" y="702.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="196.6" y="675.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="199.6" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="197.1" y="915.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.1" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="197.1" y="899.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.1" y="910.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="197.1" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.1" y="894.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="197.1" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.1" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="197.1" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.1" y="862.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="197.1" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.1" y="846.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="197.1" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="200.1" y="830.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="197.1" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.1" y="814.0"></text>
</g>
<g>
<title>ScanningCoordinator.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="197.5" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.5" y="958.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="931.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.5" y="942.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.5" y="926.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.5" y="910.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="197.5" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.5" y="894.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.5" y="878.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.5" y="862.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.5" y="846.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="197.5" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.5" y="830.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="197.5" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.5" y="814.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="197.5" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.5" y="798.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.5" y="782.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.5" y="766.0"></text>
</g>
<g>
<title>LogContext.getLogger (1 samples, 0.03%)</title><rect x="197.5" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.5" y="750.0"></text>
</g>
<g>
<title>MetadataSources.getMetadataBuilder (49 samples, 1.37%)</title><rect x="197.9" y="963.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.9" y="974.0">M..</text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="197.9" y="947.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="200.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="197.9" y="931.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="200.9" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="197.9" y="915.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="200.9" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="197.9" y="899.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="200.9" y="910.0"></text>
</g>
<g>
<title>PerfClassTraceTime::~PerfClassTraceTime() (1 samples, 0.03%)</title><rect x="197.9" y="883.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="200.9" y="894.0"></text>
</g>
<g>
<title>elapsedTimer::stop() (1 samples, 0.03%)</title><rect x="197.9" y="867.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="200.9" y="878.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="197.9" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="200.9" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="197.9" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="200.9" y="846.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="197.9" y="819.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="200.9" y="830.0"></text>
</g>
<g>
<title>MetadataBuilderImpl.&lt;init&gt; (48 samples, 1.34%)</title><rect x="198.4" y="947.0" width="21.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.4" y="958.0">M..</text>
</g>
<g>
<title>BootstrapContextImpl.&lt;init&gt; (41 samples, 1.15%)</title><rect x="198.4" y="931.0" width="18.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.4" y="942.0"></text>
</g>
<g>
<title>BootstrapContextImpl.generateHcannReflectionManager (3 samples, 0.08%)</title><rect x="198.4" y="915.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.4" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="198.4" y="899.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="201.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="201.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="201.4" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="201.4" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="201.4" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="819.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="201.4" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="201.4" y="814.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="201.4" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="198.4" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="201.4" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="198.4" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="201.4" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="198.4" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="201.4" y="750.0"></text>
</g>
<g>
<title>JavaReflectionManager.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="198.8" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.8" y="910.0"></text>
</g>
<g>
<title>LoggerFactory.make (1 samples, 0.03%)</title><rect x="198.8" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.8" y="894.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="198.8" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.8" y="878.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="198.8" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.8" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="198.8" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.8" y="846.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="198.8" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.8" y="830.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="803.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.8" y="814.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="787.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.8" y="798.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="198.8" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.8" y="782.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.8" y="766.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.8" y="750.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.8" y="734.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="198.8" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.8" y="718.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="198.8" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.8" y="702.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="198.8" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.8" y="686.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.8" y="670.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.8" y="654.0"></text>
</g>
<g>
<title>LogContext.getLogger (1 samples, 0.03%)</title><rect x="198.8" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.8" y="638.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="198.8" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="201.8" y="622.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="198.8" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.8" y="606.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="198.8" y="579.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.8" y="590.0"></text>
</g>
<g>
<title>CopyOnWriteMap.putIfAbsent (1 samples, 0.03%)</title><rect x="198.8" y="563.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.8" y="574.0"></text>
</g>
<g>
<title>AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (1 samples, 0.03%)</title><rect x="198.8" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.8" y="558.0"></text>
</g>
<g>
<title>Unsafe.compareAndSetObject (1 samples, 0.03%)</title><rect x="198.8" y="531.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_CompareAndSetObject(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="198.8" y="515.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="201.8" y="526.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="198.8" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="201.8" y="510.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="198.8" y="483.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="201.8" y="494.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="198.8" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="201.8" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="198.8" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="201.8" y="462.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="198.8" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="201.8" y="446.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="199.3" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.3" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="199.3" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.3" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="199.3" y="867.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.3" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.close (1 samples, 0.03%)</title><rect x="199.3" y="851.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.3" y="862.0"></text>
</g>
<g>
<title>PhantomCleanable.clean (1 samples, 0.03%)</title><rect x="199.3" y="835.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.3" y="846.0"></text>
</g>
<g>
<title>CleanerImpl$PhantomCleanableRef.performCleanup (1 samples, 0.03%)</title><rect x="199.3" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.3" y="830.0"></text>
</g>
<g>
<title>ZipFile$InflaterCleanupAction.run (1 samples, 0.03%)</title><rect x="199.3" y="803.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.3" y="814.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.releaseInflater (1 samples, 0.03%)</title><rect x="199.3" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.3" y="798.0"></text>
</g>
<g>
<title>Inflater.reset (1 samples, 0.03%)</title><rect x="199.3" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.3" y="782.0"></text>
</g>
<g>
<title>Inflater.reset (1 samples, 0.03%)</title><rect x="199.3" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.3" y="766.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_reset (1 samples, 0.03%)</title><rect x="199.3" y="739.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="202.3" y="750.0"></text>
</g>
<g>
<title>inflateReset (1 samples, 0.03%)</title><rect x="199.3" y="723.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="202.3" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="199.7" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.7" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="199.7" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.7" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="199.7" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.7" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="199.7" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.7" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="199.7" y="851.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="202.7" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="199.7" y="835.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="202.7" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="819.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="202.7" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="202.7" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="202.7" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="202.7" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="202.7" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="202.7" y="750.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="199.7" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="202.7" y="734.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="199.7" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="202.7" y="718.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="199.7" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="202.7" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="199.7" y="675.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="202.7" y="686.0"></text>
</g>
<g>
<title>TypeConfiguration.&lt;init&gt; (37 samples, 1.04%)</title><rect x="200.1" y="915.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.1" y="926.0"></text>
</g>
<g>
<title>BasicTypeRegistry.&lt;init&gt; (25 samples, 0.70%)</title><rect x="200.1" y="899.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.1" y="910.0"></text>
</g>
<g>
<title>BasicTypeRegistry.register (1 samples, 0.03%)</title><rect x="200.1" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.1" y="894.0"></text>
</g>
<g>
<title>BasicTypeRegistry.register (1 samples, 0.03%)</title><rect x="200.1" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.1" y="878.0"></text>
</g>
<g>
<title>DelegatingBasicLogger.debugf (1 samples, 0.03%)</title><rect x="200.1" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.1" y="862.0"></text>
</g>
<g>
<title>Logger.logf (1 samples, 0.03%)</title><rect x="200.1" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="846.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.isEnabled (1 samples, 0.03%)</title><rect x="200.1" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.1" y="830.0"></text>
</g>
<g>
<title>BigDecimalType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="200.6" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.6" y="894.0"></text>
</g>
<g>
<title>BigDecimalType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="200.6" y="867.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.6" y="878.0"></text>
</g>
<g>
<title>BigDecimalTypeDescriptor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="200.6" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.6" y="862.0"></text>
</g>
<g>
<title>BigDecimalTypeDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="200.6" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.6" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="200.6" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.6" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="200.6" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.6" y="814.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="200.6" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.6" y="798.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="200.6" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.6" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="200.6" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.6" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="200.6" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.6" y="750.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="200.6" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.6" y="734.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="200.6" y="707.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.6" y="718.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="200.6" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.6" y="702.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="200.6" y="675.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.6" y="686.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="200.6" y="659.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="203.6" y="670.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="200.6" y="643.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="203.6" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="203.6" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="203.6" y="622.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="203.6" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="203.6" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="203.6" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="203.6" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="203.6" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="203.6" y="526.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="203.6" y="510.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="200.6" y="483.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="203.6" y="494.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="200.6" y="467.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="203.6" y="478.0"></text>
</g>
<g>
<title>CalendarType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="201.0" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.0" y="894.0"></text>
</g>
<g>
<title>CalendarType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="201.0" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="201.0" y="851.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.0" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="201.0" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="201.0" y="819.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.0" y="830.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="201.0" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="204.0" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="201.0" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.0" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="201.0" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.0" y="782.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="201.0" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.0" y="766.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="201.0" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.0" y="750.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="201.0" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.0" y="734.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="201.0" y="707.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.0" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="201.0" y="691.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="204.0" y="702.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="201.0" y="675.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="204.0" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="659.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="204.0" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="204.0" y="654.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="204.0" y="638.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="204.0" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="204.0" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="579.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="204.0" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="563.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="204.0" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="547.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="204.0" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_linenumber_table(unsigned int, unsigned int, CompressedLineNumberWriteStream**, Thread*) (1 samples, 0.03%)</title><rect x="201.0" y="531.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="204.0" y="542.0"></text>
</g>
<g>
<title>ClassType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="201.5" y="883.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.5" y="894.0"></text>
</g>
<g>
<title>ClassType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="201.5" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.5" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="201.5" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="204.5" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="201.5" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="204.5" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="204.5" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="204.5" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="204.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="204.5" y="782.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="204.5" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="204.5" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="204.5" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="201.5" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="204.5" y="718.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="201.5" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="204.5" y="702.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="201.5" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="204.5" y="686.0"></text>
</g>
<g>
<title>InstantType.&lt;clinit&gt; (5 samples, 0.14%)</title><rect x="201.9" y="883.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="204.9" y="894.0"></text>
</g>
<g>
<title>DateTimeFormatter.&lt;clinit&gt; (5 samples, 0.14%)</title><rect x="201.9" y="867.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.9" y="878.0"></text>
</g>
<g>
<title>DateTimeFormatterBuilder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="201.9" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.9" y="862.0"></text>
</g>
<g>
<title>ChronoField.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="201.9" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.9" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="201.9" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="204.9" y="830.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="201.9" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="204.9" y="814.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="201.9" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="204.9" y="798.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle const&amp;, int, int, Thread*) (1 samples, 0.03%)</title><rect x="201.9" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="204.9" y="782.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="201.9" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="204.9" y="766.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (1 samples, 0.03%)</title><rect x="201.9" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="204.9" y="750.0"></text>
</g>
<g>
<title>UTF8::unicode_length(char const*, int, bool&amp;, bool&amp;) (1 samples, 0.03%)</title><rect x="201.9" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="204.9" y="734.0"></text>
</g>
<g>
<title>DateTimeFormatterBuilder.appendLiteral (1 samples, 0.03%)</title><rect x="202.4" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.4" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="202.4" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="205.4" y="846.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="205.4" y="830.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="205.4" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="205.4" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="205.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="205.4" y="766.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="205.4" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="205.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="205.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="205.4" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="205.4" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="202.4" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="205.4" y="670.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="202.4" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="205.4" y="654.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="202.4" y="627.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="205.4" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="202.8" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="205.8" y="862.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="205.8" y="846.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="819.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="205.8" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="205.8" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="205.8" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="205.8" y="782.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="205.8" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="205.8" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="205.8" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="205.8" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="205.8" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="202.8" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="205.8" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="202.8" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="205.8" y="670.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="202.8" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="205.8" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="203.2" y="851.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="206.2" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="203.2" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="206.2" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="206.2" y="830.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="206.2" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="206.2" y="798.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="206.2" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="206.2" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="206.2" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="206.2" y="734.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="206.2" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="206.2" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="675.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="206.2" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="206.2" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="206.2" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="206.2" y="638.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="611.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="206.2" y="622.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="203.2" y="595.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="206.2" y="606.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="203.2" y="579.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="206.2" y="590.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="203.7" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.7" y="862.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="203.7" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.7" y="846.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="203.7" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.7" y="830.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="203.7" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.7" y="814.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="203.7" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.7" y="798.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="203.7" y="771.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.7" y="782.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="203.7" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.7" y="766.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="203.7" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.7" y="750.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="203.7" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.7" y="734.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="203.7" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.7" y="718.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="203.7" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.7" y="702.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="203.7" y="675.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="206.7" y="686.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="203.7" y="659.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="206.7" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="203.7" y="643.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="206.7" y="654.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="203.7" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="206.7" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="203.7" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="206.7" y="622.0"></text>
</g>
<g>
<title>GrowableArray&lt;Method*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="203.7" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="206.7" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (2 samples, 0.06%)</title><rect x="204.1" y="883.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="207.1" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (2 samples, 0.06%)</title><rect x="204.1" y="867.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="207.1" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (2 samples, 0.06%)</title><rect x="204.1" y="851.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="207.1" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (2 samples, 0.06%)</title><rect x="204.1" y="835.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="207.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="204.1" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="207.1" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="204.1" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="207.1" y="814.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="204.1" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="207.1" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="204.1" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="207.1" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="204.1" y="755.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="207.1" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::generate_code_data(methodHandle const&amp;, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="204.1" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="207.1" y="750.0"></text>
</g>
<g>
<title>RawBytecodeStream::raw_next() (1 samples, 0.03%)</title><rect x="204.1" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="207.1" y="734.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="204.6" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="207.6" y="798.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="204.6" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="207.6" y="782.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*) (1 samples, 0.03%)</title><rect x="204.6" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="207.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="204.6" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="207.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="204.6" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="207.6" y="734.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="204.6" y="707.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="207.6" y="718.0"></text>
</g>
<g>
<title>LocalDateType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="205.0" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.0" y="894.0"></text>
</g>
<g>
<title>LocalDateType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="205.0" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.0" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="208.0" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.0" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="205.0" y="819.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.0" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="205.0" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.0" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="205.0" y="787.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="208.0" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="205.0" y="771.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="208.0" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="755.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="208.0" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="208.0" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="208.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="208.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="208.0" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="208.0" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="659.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="208.0" y="670.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="205.0" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="208.0" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="205.0" y="627.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="208.0" y="638.0"></text>
</g>
<g>
<title>LocalTimeType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="205.5" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.5" y="894.0"></text>
</g>
<g>
<title>LocalTimeType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="205.5" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.5" y="878.0"></text>
</g>
<g>
<title>LocalTimeJavaDescriptor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="205.5" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.5" y="862.0"></text>
</g>
<g>
<title>LocalTimeJavaDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="205.5" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.5" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.5" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.5" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.5" y="814.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.5" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.5" y="798.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.5" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.5" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.5" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.5" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="205.5" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.5" y="750.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="205.5" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.5" y="734.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="205.5" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.5" y="718.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="205.5" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.5" y="702.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="205.5" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.5" y="686.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="205.5" y="659.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="208.5" y="670.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="205.5" y="643.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="208.5" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="208.5" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="208.5" y="622.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="208.5" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="208.5" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="208.5" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="547.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="208.5" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="208.5" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="205.5" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="208.5" y="526.0"></text>
</g>
<g>
<title>OffsetTimeType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="205.9" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.9" y="894.0"></text>
</g>
<g>
<title>OffsetTimeType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="205.9" y="867.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.9" y="878.0"></text>
</g>
<g>
<title>OffsetTimeJavaDescriptor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="205.9" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.9" y="862.0"></text>
</g>
<g>
<title>OffsetTimeJavaDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="205.9" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.9" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.9" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.9" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.9" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.9" y="814.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.9" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.9" y="798.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.9" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.9" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="205.9" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.9" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="205.9" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.9" y="750.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="205.9" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.9" y="734.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="205.9" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.9" y="718.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="205.9" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.9" y="702.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="205.9" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.9" y="686.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="205.9" y="659.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="208.9" y="670.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="205.9" y="643.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="208.9" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="208.9" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="208.9" y="622.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="208.9" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="579.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="208.9" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="208.9" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="547.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="208.9" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="531.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="208.9" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="205.9" y="515.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="208.9" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (9 samples, 0.25%)</title><rect x="206.3" y="883.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (9 samples, 0.25%)</title><rect x="206.3" y="867.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.3" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (8 samples, 0.22%)</title><rect x="206.3" y="851.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.3" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (8 samples, 0.22%)</title><rect x="206.3" y="835.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.3" y="846.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (7 samples, 0.20%)</title><rect x="206.3" y="819.0" width="3.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="209.3" y="830.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (7 samples, 0.20%)</title><rect x="206.3" y="803.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="209.3" y="814.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (7 samples, 0.20%)</title><rect x="206.3" y="787.0" width="3.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="209.3" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (7 samples, 0.20%)</title><rect x="206.3" y="771.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="209.3" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (7 samples, 0.20%)</title><rect x="206.3" y="755.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="209.3" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (4 samples, 0.11%)</title><rect x="206.3" y="739.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="209.3" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (4 samples, 0.11%)</title><rect x="206.3" y="723.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="209.3" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (3 samples, 0.08%)</title><rect x="206.3" y="707.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="209.3" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (3 samples, 0.08%)</title><rect x="206.3" y="691.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="209.3" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (3 samples, 0.08%)</title><rect x="206.3" y="675.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="209.3" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (3 samples, 0.08%)</title><rect x="206.3" y="659.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="209.3" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="207.7" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="210.7" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="207.7" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="210.7" y="702.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="207.7" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.7" y="686.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="207.7" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="210.7" y="670.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="207.7" y="643.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="210.7" y="654.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="207.7" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="210.7" y="638.0"></text>
</g>
<g>
<title>metaspace::BlockFreelist::get_block(unsigned long) (1 samples, 0.03%)</title><rect x="207.7" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="210.7" y="622.0"></text>
</g>
<g>
<title>BinaryTreeDictionary&lt;metaspace::Metablock, FreeList&lt;metaspace::Metablock&gt; &gt;::get_chunk_from_tree(unsigned long) (1 samples, 0.03%)</title><rect x="207.7" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="210.7" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (2 samples, 0.06%)</title><rect x="208.1" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="211.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="208.1" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::set_package(ClassLoaderData*, Thread*) (1 samples, 0.03%)</title><rect x="208.1" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="211.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::package_from_name(Symbol const*, Thread*) (1 samples, 0.03%)</title><rect x="208.1" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="211.1" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="208.1" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance_klass(ClassFileParser const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="208.6" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="211.6" y="734.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="208.6" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="211.6" y="718.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="208.6" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="211.6" y="702.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate_work(unsigned long) (1 samples, 0.03%)</title><rect x="208.6" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="211.6" y="686.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::grow_and_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="208.6" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="211.6" y="670.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::add_chunk(metaspace::Metachunk*, bool) (1 samples, 0.03%)</title><rect x="208.6" y="643.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="211.6" y="654.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::retire_current_chunk() (1 samples, 0.03%)</title><rect x="208.6" y="627.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="211.6" y="638.0"></text>
</g>
<g>
<title>metaspace::BlockFreelist::return_block(MetaWord*, unsigned long) (1 samples, 0.03%)</title><rect x="208.6" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="211.6" y="622.0"></text>
</g>
<g>
<title>BinaryTreeDictionary&lt;metaspace::Metablock, FreeList&lt;metaspace::Metablock&gt; &gt;::insert_chunk_in_tree(metaspace::Metablock*) (1 samples, 0.03%)</title><rect x="208.6" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="211.6" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="209.0" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="212.0" y="750.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.03%)</title><rect x="209.0" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="212.0" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.4" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.4" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.4" y="803.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.4" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="209.4" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.4" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="209.4" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.4" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.4" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.4" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.4" y="739.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.4" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="209.4" y="723.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.4" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="209.4" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.4" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="209.4" y="691.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="212.4" y="702.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="209.4" y="675.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="212.4" y="686.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="209.4" y="659.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="212.4" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="209.4" y="643.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="212.4" y="654.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="209.4" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="212.4" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="209.4" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="212.4" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="209.4" y="595.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="212.4" y="606.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="209.4" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="212.4" y="590.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="209.4" y="563.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="212.4" y="574.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="209.4" y="547.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="212.4" y="558.0"></text>
</g>
<g>
<title>StatefulMethodFamily::record_method_and_dq_further(Method*) (1 samples, 0.03%)</title><rect x="209.4" y="531.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="212.4" y="542.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="209.4" y="515.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="212.4" y="526.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.9" y="851.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.9" y="862.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.9" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.9" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="209.9" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.9" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="209.9" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.9" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="209.9" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.9" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="209.9" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.9" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.03%)</title><rect x="209.9" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.9" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="209.9" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.9" y="750.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="209.9" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.9" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="209.9" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.9" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass2 (1 samples, 0.03%)</title><rect x="209.9" y="691.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.9" y="702.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass2 (1 samples, 0.03%)</title><rect x="209.9" y="675.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="212.9" y="686.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="209.9" y="659.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="212.9" y="670.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="209.9" y="643.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="212.9" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="209.9" y="627.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="212.9" y="638.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="209.9" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="212.9" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="209.9" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="212.9" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="209.9" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="212.9" y="590.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="209.9" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="212.9" y="574.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="209.9" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="212.9" y="558.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="209.9" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="212.9" y="542.0"></text>
</g>
<g>
<title>StatefulMethodFamily::record_method_and_dq_further(Method*) (1 samples, 0.03%)</title><rect x="209.9" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="212.9" y="526.0"></text>
</g>
<g>
<title>MethodFamily::add_method(Method*, QualifiedState) (1 samples, 0.03%)</title><rect x="209.9" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="212.9" y="510.0"></text>
</g>
<g>
<title>ResourceHashtable&lt;Method*, int, &amp;(unsigned int primitive_hash&lt;Method*&gt;(Method* const&amp;)), &amp;(bool primitive_equals&lt;Method*&gt;(Method* const&amp;, Method* const&amp;)), 256u, (ResourceObj::allocation_type)1, (MemoryType)7&gt;::put(Method* const&amp;, int const&amp;) (1 samples, 0.03%)</title><rect x="209.9" y="483.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="212.9" y="494.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="209.9" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="212.9" y="478.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="209.9" y="451.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="212.9" y="462.0"></text>
</g>
<g>
<title>TimeType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="210.3" y="883.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.3" y="894.0"></text>
</g>
<g>
<title>TimeType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="210.3" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.3" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="210.3" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="213.3" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="210.3" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.3" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="819.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="213.3" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="213.3" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="213.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="771.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="213.3" y="782.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="213.3" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="213.3" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="723.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="213.3" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*) (1 samples, 0.03%)</title><rect x="210.3" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="213.3" y="718.0"></text>
</g>
<g>
<title>WrapperBinaryType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="210.8" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.8" y="894.0"></text>
</g>
<g>
<title>WrapperBinaryType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="210.8" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.8" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="210.8" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="213.8" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="210.8" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="213.8" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="213.8" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="213.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="213.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="213.8" y="782.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.8" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="213.8" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="213.8" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="210.8" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="213.8" y="718.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.03%)</title><rect x="210.8" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="213.8" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="211.2" y="899.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="214.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="214.2" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="214.2" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="214.2" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="214.2" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.2" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="214.2" y="814.0"></text>
</g>
<g>
<title>VerificationType::is_reference_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="211.2" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="214.2" y="798.0"></text>
</g>
<g>
<title>VerificationType::resolve_and_check_assignability(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="214.2" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="214.2" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="214.2" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="214.2" y="734.0"></text>
</g>
<g>
<title>java_lang_String::create_from_symbol(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="211.2" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="214.2" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ull&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (1 samples, 0.03%)</title><rect x="211.2" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="214.2" y="702.0"></text>
</g>
<g>
<title>LocalObjectUuidHelper.generateLocalObjectUuid (3 samples, 0.08%)</title><rect x="211.6" y="899.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="910.0"></text>
</g>
<g>
<title>UUID.randomUUID (3 samples, 0.08%)</title><rect x="211.6" y="883.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="214.6" y="894.0"></text>
</g>
<g>
<title>SecureRandom.nextBytes (1 samples, 0.03%)</title><rect x="211.6" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.6" y="878.0"></text>
</g>
<g>
<title>NativePRNG.engineNextBytes (1 samples, 0.03%)</title><rect x="211.6" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.6" y="862.0"></text>
</g>
<g>
<title>NativePRNG$RandomIO.implNextBytes (1 samples, 0.03%)</title><rect x="211.6" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="846.0"></text>
</g>
<g>
<title>NativePRNG$RandomIO.getMixRandom (1 samples, 0.03%)</title><rect x="211.6" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="211.6" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="214.6" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="214.6" y="798.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="771.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="214.6" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="214.6" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="214.6" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="214.6" y="734.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="214.6" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="214.6" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="214.6" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="659.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="214.6" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="214.6" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="211.6" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="214.6" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="211.6" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.6" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="211.6" y="595.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="214.6" y="606.0"></text>
</g>
<g>
<title>UUID$Holder.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="212.1" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.1" y="878.0"></text>
</g>
<g>
<title>SecureRandom.&lt;init&gt; (2 samples, 0.06%)</title><rect x="212.1" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.1" y="862.0"></text>
</g>
<g>
<title>SecureRandom.getDefaultPRNG (2 samples, 0.06%)</title><rect x="212.1" y="835.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.1" y="846.0"></text>
</g>
<g>
<title>SecureRandom.getPrngAlgorithm (2 samples, 0.06%)</title><rect x="212.1" y="819.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.1" y="830.0"></text>
</g>
<g>
<title>AbstractList$Itr.next (1 samples, 0.03%)</title><rect x="212.1" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.1" y="814.0"></text>
</g>
<g>
<title>ProviderList$3.get (1 samples, 0.03%)</title><rect x="212.1" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.1" y="798.0"></text>
</g>
<g>
<title>ProviderList$3.get (1 samples, 0.03%)</title><rect x="212.1" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.1" y="782.0"></text>
</g>
<g>
<title>ProviderList.getProvider (1 samples, 0.03%)</title><rect x="212.1" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.1" y="766.0"></text>
</g>
<g>
<title>ProviderConfig.getProvider (1 samples, 0.03%)</title><rect x="212.1" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.1" y="750.0"></text>
</g>
<g>
<title>Sun.&lt;init&gt; (1 samples, 0.03%)</title><rect x="212.1" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.1" y="734.0"></text>
</g>
<g>
<title>SunEntries.putEntries (1 samples, 0.03%)</title><rect x="212.1" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.1" y="718.0"></text>
</g>
<g>
<title>Provider.put (1 samples, 0.03%)</title><rect x="212.1" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.1" y="702.0"></text>
</g>
<g>
<title>Providers.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="212.5" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.5" y="814.0"></text>
</g>
<g>
<title>ProviderList.fromSecurityProperties (1 samples, 0.03%)</title><rect x="212.5" y="787.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.5" y="798.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="212.5" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.5" y="782.0"></text>
</g>
<g>
<title>ProviderList$2.run (1 samples, 0.03%)</title><rect x="212.5" y="755.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.5" y="766.0"></text>
</g>
<g>
<title>ProviderList$2.run (1 samples, 0.03%)</title><rect x="212.5" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.5" y="750.0"></text>
</g>
<g>
<title>ProviderList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="212.5" y="723.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.5" y="734.0"></text>
</g>
<g>
<title>ProviderConfig.&lt;init&gt; (1 samples, 0.03%)</title><rect x="212.5" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="215.5" y="718.0"></text>
</g>
<g>
<title>ProviderConfig.&lt;init&gt; (1 samples, 0.03%)</title><rect x="212.5" y="691.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.5" y="702.0"></text>
</g>
<g>
<title>ProviderConfig.expand (1 samples, 0.03%)</title><rect x="212.5" y="675.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.5" y="686.0"></text>
</g>
<g>
<title>String.contains (1 samples, 0.03%)</title><rect x="212.5" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.5" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="213.0" y="899.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.0" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="213.0" y="883.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.0" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (4 samples, 0.11%)</title><rect x="213.0" y="867.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.0" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (4 samples, 0.11%)</title><rect x="213.0" y="851.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.0" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (4 samples, 0.11%)</title><rect x="213.0" y="835.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="216.0" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (4 samples, 0.11%)</title><rect x="213.0" y="819.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="216.0" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (4 samples, 0.11%)</title><rect x="213.0" y="803.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="216.0" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (4 samples, 0.11%)</title><rect x="213.0" y="787.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="216.0" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (3 samples, 0.08%)</title><rect x="213.0" y="771.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="216.0" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (3 samples, 0.08%)</title><rect x="213.0" y="755.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="216.0" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (3 samples, 0.08%)</title><rect x="213.0" y="739.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="216.0" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (3 samples, 0.08%)</title><rect x="213.0" y="723.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="216.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (3 samples, 0.08%)</title><rect x="213.0" y="707.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="216.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="213.0" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="216.0" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (2 samples, 0.06%)</title><rect x="213.4" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="216.4" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (2 samples, 0.06%)</title><rect x="213.4" y="675.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="216.4" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="214.3" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="217.3" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="214.3" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="217.3" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="214.3" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.3" y="750.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="214.3" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="217.3" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="214.3" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="217.3" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="214.3" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="217.3" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="214.3" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="217.3" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="214.3" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="217.3" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="214.3" y="643.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="217.3" y="654.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="214.7" y="867.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.7" y="878.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="214.7" y="851.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.7" y="862.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="214.7" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.7" y="846.0"></text>
</g>
<g>
<title>HeapByteBuffer.isDirect (1 samples, 0.03%)</title><rect x="214.7" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.7" y="830.0"></text>
</g>
<g>
<title>SqlTypeDescriptorRegistry.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="215.2" y="899.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.2" y="910.0"></text>
</g>
<g>
<title>SqlTypeDescriptorRegistry.&lt;init&gt; (3 samples, 0.08%)</title><rect x="215.2" y="883.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.2" y="894.0"></text>
</g>
<g>
<title>BlobTypeDescriptor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="215.2" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.2" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="215.2" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.2" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="215.2" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.2" y="846.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="215.2" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.2" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="215.2" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.2" y="814.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="215.2" y="787.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.2" y="798.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="215.2" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.2" y="782.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="215.2" y="755.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="218.2" y="766.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="215.2" y="739.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="218.2" y="750.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="215.2" y="723.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="218.2" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="215.6" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="218.6" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="215.6" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="218.6" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="215.6" y="835.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="218.6" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="215.6" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="218.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="215.6" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="218.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="215.6" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="218.6" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="215.6" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="218.6" y="782.0"></text>
</g>
<g>
<title>JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="215.6" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="218.6" y="766.0"></text>
</g>
<g>
<title>ThreadToNativeFromVM::ThreadToNativeFromVM(JavaThread*) (1 samples, 0.03%)</title><rect x="215.6" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="218.6" y="750.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="215.6" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="218.6" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="216.1" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.1" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="216.1" y="851.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.1" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="216.1" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.1" y="846.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="216.1" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.1" y="830.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="216.1" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.1" y="814.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="216.1" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.1" y="798.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="216.1" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.1" y="782.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="216.1" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.1" y="766.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="216.1" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.1" y="750.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="216.1" y="723.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="219.1" y="734.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="216.1" y="707.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="219.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="216.1" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="219.1" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="216.1" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="219.1" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="216.1" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="219.1" y="670.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="216.1" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="219.1" y="654.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="216.1" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="219.1" y="638.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="216.1" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="219.1" y="622.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="216.1" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="219.1" y="606.0"></text>
</g>
<g>
<title>MetadataBuilderImpl$MetadataBuildingOptionsImpl.&lt;init&gt; (6 samples, 0.17%)</title><rect x="216.5" y="931.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.5" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (4 samples, 0.11%)</title><rect x="216.5" y="915.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.5" y="926.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (4 samples, 0.11%)</title><rect x="216.5" y="899.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.5" y="910.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.createService (1 samples, 0.03%)</title><rect x="216.5" y="883.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.5" y="894.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.initiateService (1 samples, 0.03%)</title><rect x="216.5" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.5" y="878.0"></text>
</g>
<g>
<title>QuarkusRegionFactoryInitiator.initiateService (1 samples, 0.03%)</title><rect x="216.5" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.5" y="862.0"></text>
</g>
<g>
<title>QuarkusRegionFactoryInitiator.initiateService (1 samples, 0.03%)</title><rect x="216.5" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="216.5" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.5" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="216.5" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.5" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="216.5" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.5" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="216.5" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="216.5" y="755.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="219.5" y="766.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="216.5" y="739.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="219.5" y="750.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="723.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="219.5" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="219.5" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.5" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="675.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="219.5" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="659.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="219.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="643.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="219.5" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="216.5" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="219.5" y="638.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (2 samples, 0.06%)</title><rect x="217.0" y="883.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.0" y="894.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.applyInjections (2 samples, 0.06%)</title><rect x="217.0" y="867.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.0" y="878.0"></text>
</g>
<g>
<title>Class.getMethods (2 samples, 0.06%)</title><rect x="217.0" y="851.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.0" y="862.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (2 samples, 0.06%)</title><rect x="217.0" y="835.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.0" y="846.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (2 samples, 0.06%)</title><rect x="217.0" y="819.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.0" y="830.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (2 samples, 0.06%)</title><rect x="217.0" y="803.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.0" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="217.0" y="787.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.0" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="217.0" y="771.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.0" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="217.0" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.0" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="217.0" y="739.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.0" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="217.0" y="723.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="220.0" y="734.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="217.0" y="707.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="220.0" y="718.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="217.0" y="691.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="220.0" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="217.0" y="675.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="220.0" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="217.0" y="659.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="220.0" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="217.0" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="220.0" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="217.0" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="220.0" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="217.0" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="220.0" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="217.0" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="220.0" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="217.4" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="220.4" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="217.4" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="220.4" y="638.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="217.4" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="220.4" y="622.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="217.4" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="220.4" y="606.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::new_node_data(InstanceKlass*) (1 samples, 0.03%)</title><rect x="217.4" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.4" y="590.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="217.4" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="220.4" y="574.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="217.4" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="220.4" y="558.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.configureService (1 samples, 0.03%)</title><rect x="217.8" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="220.8" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="217.8" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.8" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="217.8" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.8" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="217.8" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.8" y="846.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="217.8" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.8" y="830.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="217.8" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.8" y="814.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="217.8" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.8" y="798.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="217.8" y="771.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.8" y="782.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="217.8" y="755.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.8" y="766.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="217.8" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.8" y="750.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="217.8" y="723.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="220.8" y="734.0"></text>
</g>
<g>
<title>IdGeneratorInterpreterImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="218.3" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.3" y="926.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="218.3" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.3" y="910.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="218.3" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.3" y="894.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="218.3" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.3" y="878.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="218.3" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.3" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="218.3" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.3" y="846.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="218.3" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.3" y="830.0"></text>
</g>
<g>
<title>Logger.access$000 (1 samples, 0.03%)</title><rect x="218.3" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="221.3" y="814.0"></text>
</g>
<g>
<title>Logger.join (1 samples, 0.03%)</title><rect x="218.3" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.3" y="798.0"></text>
</g>
<g>
<title>StringBuilder.toString (1 samples, 0.03%)</title><rect x="218.3" y="771.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.3" y="782.0"></text>
</g>
<g>
<title>StringLatin1.newString (1 samples, 0.03%)</title><rect x="218.3" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.3" y="766.0"></text>
</g>
<g>
<title>MetadataBuilderImpl$MetadataBuildingOptionsImpl.resolveInitialSourceProcessOrdering (1 samples, 0.03%)</title><rect x="218.7" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.7" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="218.7" y="899.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.7" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="218.7" y="883.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.7" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="218.7" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.7" y="878.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="218.7" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.7" y="862.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="218.7" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.7" y="846.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="218.7" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.7" y="830.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="218.7" y="803.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="221.7" y="814.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="218.7" y="787.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="221.7" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="219.2" y="931.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.2" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="219.2" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.2" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="219.2" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.2" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="219.2" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.2" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="219.2" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.2" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="219.2" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.2" y="862.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="219.2" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.2" y="846.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="219.2" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.2" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="219.2" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.2" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="219.2" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.2" y="798.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="219.2" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.2" y="782.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="219.2" y="755.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="222.2" y="766.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="219.2" y="739.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="222.2" y="750.0"></text>
</g>
<g>
<title>RecordableBootstrap.build (4 samples, 0.11%)</title><rect x="219.6" y="963.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.6" y="974.0"></text>
</g>
<g>
<title>RecordableBootstrap.applyServiceContributors (1 samples, 0.03%)</title><rect x="219.6" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.6" y="958.0"></text>
</g>
<g>
<title>FlatClassLoaderService.loadJavaServices (1 samples, 0.03%)</title><rect x="219.6" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.6" y="942.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="219.6" y="915.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.6" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="219.6" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.6" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="219.6" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.6" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="219.6" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.6" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="219.6" y="851.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.6" y="862.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="219.6" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.6" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.findResources (1 samples, 0.03%)</title><rect x="219.6" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.6" y="830.0"></text>
</g>
<g>
<title>JarResource.getResourceURL (1 samples, 0.03%)</title><rect x="219.6" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.6" y="814.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="219.6" y="787.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.6" y="798.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="219.6" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.6" y="782.0"></text>
</g>
<g>
<title>ZipFile$Source.getEntryPos (1 samples, 0.03%)</title><rect x="219.6" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.6" y="766.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.&lt;init&gt; (3 samples, 0.08%)</title><rect x="220.0" y="947.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.0" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.&lt;init&gt; (3 samples, 0.08%)</title><rect x="220.0" y="931.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="942.0"></text>
</g>
<g>
<title>Environment.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="220.0" y="915.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.0" y="926.0"></text>
</g>
<g>
<title>ConfigHelper.getResourceAsStream (1 samples, 0.03%)</title><rect x="220.0" y="899.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.0" y="910.0"></text>
</g>
<g>
<title>ClassLoader.getResourceAsStream (1 samples, 0.03%)</title><rect x="220.0" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.0" y="894.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="220.0" y="867.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.0" y="878.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="220.0" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.0" y="862.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="220.0" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.0" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="220.5" y="915.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.5" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="220.5" y="899.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.5" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="220.5" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.5" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="220.5" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.5" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="220.5" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.5" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="220.5" y="835.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.5" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="220.5" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.5" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="220.5" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.5" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="220.5" y="787.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="223.5" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="220.5" y="771.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="223.5" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="755.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="223.5" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="223.5" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="223.5" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="223.5" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="223.5" y="702.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="223.5" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::do_local_static_fields(void (*)(fieldDescriptor*, Handle, Thread*), Handle, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="223.5" y="670.0"></text>
</g>
<g>
<title>initialize_static_field(fieldDescriptor*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="643.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="223.5" y="654.0"></text>
</g>
<g>
<title>ConstantPool::uncached_string_at(int, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="627.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="223.5" y="638.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="223.5" y="622.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="220.5" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="223.5" y="606.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="220.9" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.9" y="894.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="220.9" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.9" y="878.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="220.9" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.9" y="862.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="220.9" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.9" y="846.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="220.9" y="819.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="223.9" y="830.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="220.9" y="803.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="223.9" y="814.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="220.9" y="787.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="223.9" y="798.0"></text>
</g>
<g>
<title>RecordableBootstrapFactory.createRecordableBootstrapBuilder (17 samples, 0.48%)</title><rect x="221.4" y="963.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.4" y="974.0"></text>
</g>
<g>
<title>RecordableBootstrap.&lt;init&gt; (8 samples, 0.22%)</title><rect x="221.4" y="947.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.4" y="958.0"></text>
</g>
<g>
<title>RecordableBootstrap.&lt;init&gt; (8 samples, 0.22%)</title><rect x="221.4" y="931.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.4" y="942.0"></text>
</g>
<g>
<title>StandardHibernateORMInitiatorListProvider.initialInitiatorList (7 samples, 0.20%)</title><rect x="221.4" y="915.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.4" y="926.0"></text>
</g>
<g>
<title>EntityCopyObserverFactoryInitiator.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="221.4" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.4" y="910.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="221.4" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.4" y="894.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="221.4" y="867.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.4" y="878.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="221.4" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.4" y="862.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="221.4" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.4" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="221.4" y="819.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.4" y="830.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="221.4" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.4" y="814.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="221.4" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.4" y="798.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="221.4" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.4" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="221.4" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.4" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="221.4" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.4" y="750.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="221.4" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.4" y="734.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="221.4" y="707.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.4" y="718.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="221.4" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.4" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="221.4" y="675.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.4" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="221.4" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.4" y="670.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="221.4" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.4" y="654.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="221.4" y="627.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.4" y="638.0"></text>
</g>
<g>
<title>JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="221.4" y="611.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.4" y="622.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="221.4" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.4" y="606.0"></text>
</g>
<g>
<title>JarFile.getVersionedEntry (1 samples, 0.03%)</title><rect x="221.4" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.4" y="590.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="221.4" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.4" y="574.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="221.4" y="547.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.4" y="558.0"></text>
</g>
<g>
<title>Integer.stringSize (1 samples, 0.03%)</title><rect x="221.4" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.4" y="542.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="221.8" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="224.8" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="221.8" y="883.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="224.8" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="224.8" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="224.8" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="224.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="224.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="224.8" y="814.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="224.8" y="798.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="224.8" y="782.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="221.8" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="224.8" y="766.0"></text>
</g>
<g>
<title>ConstantPool::tag_at(int) const (1 samples, 0.03%)</title><rect x="221.8" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="224.8" y="750.0"></text>
</g>
<g>
<title>QuarkusMutableIdentifierGeneratorFactoryInitiator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="222.3" y="899.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.3" y="910.0"></text>
</g>
<g>
<title>QuarkusMutableIdentifierGeneratorFactory.&lt;init&gt; (2 samples, 0.06%)</title><rect x="222.3" y="883.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.3" y="894.0"></text>
</g>
<g>
<title>DefaultIdentifierGeneratorFactory.&lt;init&gt; (2 samples, 0.06%)</title><rect x="222.3" y="867.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.3" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="222.3" y="851.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="222.3" y="835.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.3" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="222.3" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.3" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="222.3" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.3" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="222.3" y="787.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.3" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="222.3" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="225.3" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="222.3" y="755.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="225.3" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="222.3" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="225.3" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="222.3" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="225.3" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="222.3" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="225.3" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="222.3" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="225.3" y="702.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="222.3" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="225.3" y="686.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="222.3" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="225.3" y="670.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::new_node_data(InstanceKlass*) (1 samples, 0.03%)</title><rect x="222.3" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="225.3" y="654.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="222.7" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.7" y="830.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="222.7" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.7" y="814.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="222.7" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="222.7" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="225.7" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="222.7" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="225.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="222.7" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="225.7" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="222.7" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="225.7" y="734.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="222.7" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="225.7" y="718.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="222.7" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="225.7" y="702.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="222.7" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="225.7" y="686.0"></text>
</g>
<g>
<title>QueryTranslatorFactoryInitiator.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="223.1" y="899.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.1" y="910.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="223.1" y="883.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.1" y="894.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="223.1" y="867.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.1" y="878.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="223.1" y="851.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.1" y="862.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="223.1" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.1" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="223.1" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.1" y="830.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="223.1" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.1" y="814.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="223.1" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.1" y="798.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="223.1" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.1" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="223.1" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.1" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="223.1" y="739.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.1" y="750.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="223.1" y="723.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.1" y="734.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="223.1" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.1" y="718.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="223.1" y="691.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.1" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="223.1" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.1" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="223.1" y="659.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.1" y="670.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="223.1" y="643.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.1" y="654.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="223.1" y="627.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.1" y="638.0"></text>
</g>
<g>
<title>JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="223.1" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.1" y="622.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="223.1" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.1" y="606.0"></text>
</g>
<g>
<title>JarFile.getVersionedEntry (1 samples, 0.03%)</title><rect x="223.1" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.1" y="590.0"></text>
</g>
<g>
<title>JarFile.getEntry0 (1 samples, 0.03%)</title><rect x="223.1" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.1" y="574.0"></text>
</g>
<g>
<title>ZipFile$1.getEntry (1 samples, 0.03%)</title><rect x="223.1" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.1" y="558.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="223.1" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.1" y="542.0"></text>
</g>
<g>
<title>ZipCoder$UTF8.getBytes (1 samples, 0.03%)</title><rect x="223.1" y="515.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.1" y="526.0"></text>
</g>
<g>
<title>System$2.getBytesUTF8NoRepl (1 samples, 0.03%)</title><rect x="223.1" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.1" y="510.0"></text>
</g>
<g>
<title>StringCoding.getBytesUTF8NoRepl (1 samples, 0.03%)</title><rect x="223.1" y="483.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.1" y="494.0"></text>
</g>
<g>
<title>StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="223.1" y="467.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.1" y="478.0"></text>
</g>
<g>
<title>Arrays.copyOf (1 samples, 0.03%)</title><rect x="223.1" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.1" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="223.1" y="435.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="226.1" y="446.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="223.6" y="899.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.6" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="223.6" y="883.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.6" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="223.6" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.6" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="223.6" y="851.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.6" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="223.6" y="835.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="226.6" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="223.6" y="819.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="226.6" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="223.6" y="803.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="226.6" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="223.6" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="226.6" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="223.6" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="226.6" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="223.6" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="226.6" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="223.6" y="739.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="226.6" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="223.6" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="226.6" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="223.6" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="226.6" y="718.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="223.6" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="226.6" y="702.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="223.6" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="226.6" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="224.0" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="227.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="224.0" y="707.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="227.0" y="718.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="224.0" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="227.0" y="702.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="224.0" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="227.0" y="686.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="224.0" y="659.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="227.0" y="670.0"></text>
</g>
<g>
<title>StandardServiceRegistryBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="224.5" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.5" y="926.0"></text>
</g>
<g>
<title>ConfigLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="224.5" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="224.5" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="224.5" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.5" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="224.5" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.5" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="224.5" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.5" y="846.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="224.5" y="819.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="227.5" y="830.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="224.5" y="803.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="227.5" y="814.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="787.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="227.5" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="227.5" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="227.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.5" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="227.5" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="227.5" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="227.5" y="702.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="675.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="227.5" y="686.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="227.5" y="670.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="224.5" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="227.5" y="654.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="224.5" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="227.5" y="638.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="224.5" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="227.5" y="622.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="224.5" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="227.5" y="606.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="224.5" y="579.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="227.5" y="590.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="224.5" y="563.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="227.5" y="574.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="224.5" y="547.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="227.5" y="558.0"></text>
</g>
<g>
<title>RecordableBootstrapFactory.buildBootstrapServiceRegistry (8 samples, 0.22%)</title><rect x="224.9" y="947.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.9" y="958.0"></text>
</g>
<g>
<title>FlatClassLoaderService.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="224.9" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="942.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="224.9" y="915.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.9" y="926.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="224.9" y="899.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.9" y="910.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="224.9" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.9" y="894.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="224.9" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.9" y="878.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="224.9" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.9" y="862.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="224.9" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.9" y="846.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="224.9" y="819.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.9" y="830.0"></text>
</g>
<g>
<title>AccessibleObject.checkAccess (1 samples, 0.03%)</title><rect x="224.9" y="803.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.9" y="814.0"></text>
</g>
<g>
<title>AccessibleObject.verifyAccess (1 samples, 0.03%)</title><rect x="224.9" y="787.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.9" y="798.0"></text>
</g>
<g>
<title>AccessibleObject.slowVerifyAccess (1 samples, 0.03%)</title><rect x="224.9" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.9" y="782.0"></text>
</g>
<g>
<title>Reflection.verifyMemberAccess (1 samples, 0.03%)</title><rect x="224.9" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.9" y="766.0"></text>
</g>
<g>
<title>Reflection.verifyModuleAccess (1 samples, 0.03%)</title><rect x="224.9" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.9" y="750.0"></text>
</g>
<g>
<title>QuarkusStrategySelectorBuilder.buildSelector (6 samples, 0.17%)</title><rect x="225.4" y="931.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.4" y="942.0"></text>
</g>
<g>
<title>QuarkusStrategySelectorBuilder.addCacheKeysFactories (1 samples, 0.03%)</title><rect x="225.4" y="915.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.4" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="225.4" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.4" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="225.4" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="225.4" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.4" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="225.4" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.4" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="225.4" y="835.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="228.4" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="225.4" y="819.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="228.4" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="803.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="228.4" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="787.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="228.4" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="228.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="228.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="228.4" y="750.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="228.4" y="734.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="228.4" y="718.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="225.4" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="228.4" y="702.0"></text>
</g>
<g>
<title>QuarkusStrategySelectorBuilder.addMultiTableBulkIdStrategies (1 samples, 0.03%)</title><rect x="225.8" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.8" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="225.8" y="899.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.8" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="225.8" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.8" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="225.8" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.8" y="878.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="225.8" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.8" y="862.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="225.8" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.8" y="846.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="225.8" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.8" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="225.8" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.8" y="814.0"></text>
</g>
<g>
<title>QuarkusStrategySelectorBuilder.addTransactionCoordinatorBuilders (2 samples, 0.06%)</title><rect x="226.2" y="915.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.2" y="926.0"></text>
</g>
<g>
<title>StrategySelectorImpl.registerStrategyImplementor (2 samples, 0.06%)</title><rect x="226.2" y="899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.2" y="910.0"></text>
</g>
<g>
<title>String.format (2 samples, 0.06%)</title><rect x="226.2" y="883.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="894.0"></text>
</g>
<g>
<title>Formatter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="226.2" y="867.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.2" y="878.0"></text>
</g>
<g>
<title>Locale$Category.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="226.2" y="851.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.2" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="226.2" y="835.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="229.2" y="846.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="226.2" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="229.2" y="830.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="226.2" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="229.2" y="814.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="226.2" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.2" y="798.0"></text>
</g>
<g>
<title>Formatter.format (1 samples, 0.03%)</title><rect x="226.7" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.7" y="878.0"></text>
</g>
<g>
<title>Formatter.format (1 samples, 0.03%)</title><rect x="226.7" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.7" y="862.0"></text>
</g>
<g>
<title>Formatter.parse (1 samples, 0.03%)</title><rect x="226.7" y="835.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.7" y="846.0"></text>
</g>
<g>
<title>Matcher.find (1 samples, 0.03%)</title><rect x="226.7" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.7" y="830.0"></text>
</g>
<g>
<title>Matcher.getTextLength (1 samples, 0.03%)</title><rect x="226.7" y="803.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.7" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="227.1" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.1" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="227.1" y="899.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.1" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="227.1" y="883.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.1" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="227.1" y="867.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.1" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="227.1" y="851.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="230.1" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="227.1" y="835.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="230.1" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="227.1" y="819.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="230.1" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="227.1" y="803.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="230.1" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="227.1" y="787.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="230.1" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="230.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="230.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="230.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="230.1" y="734.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="230.1" y="718.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="230.1" y="702.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="227.1" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="230.1" y="686.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="227.1" y="659.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="230.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="227.6" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="230.6" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="227.6" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="230.6" y="766.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::compute_static_oop_field_count(oopDesc*) (1 samples, 0.03%)</title><rect x="227.6" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="230.6" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="228.0" y="931.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.0" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="228.0" y="915.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.0" y="926.0"></text>
</g>
<g>
<title>String.replace (1 samples, 0.03%)</title><rect x="228.0" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.0" y="910.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="228.0" y="883.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.0" y="894.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="228.0" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.0" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="228.0" y="851.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="231.0" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="228.4" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.4" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="228.4" y="931.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.4" y="942.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="228.4" y="915.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.4" y="926.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="228.4" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.4" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="228.4" y="883.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="231.4" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="228.9" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.9" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="228.9" y="947.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.9" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (2 samples, 0.06%)</title><rect x="228.9" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.9" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (2 samples, 0.06%)</title><rect x="228.9" y="915.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.9" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (2 samples, 0.06%)</title><rect x="228.9" y="899.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.9" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (2 samples, 0.06%)</title><rect x="228.9" y="883.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.9" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (2 samples, 0.06%)</title><rect x="228.9" y="867.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="231.9" y="878.0"></text>
</g>
<g>
<title>inflate (2 samples, 0.06%)</title><rect x="228.9" y="851.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="231.9" y="862.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="229.3" y="835.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="232.3" y="846.0"></text>
</g>
<g>
<title>FastBootMetadataBuilder.build (68 samples, 1.90%)</title><rect x="229.8" y="979.0" width="30.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.8" y="990.0">Fa..</text>
</g>
<g>
<title>FastBootMetadataBuilder.destroyServiceRegistry (1 samples, 0.03%)</title><rect x="229.8" y="963.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="974.0"></text>
</g>
<g>
<title>ServiceRegistryImplementor.close (1 samples, 0.03%)</title><rect x="229.8" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.8" y="958.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.destroy (1 samples, 0.03%)</title><rect x="229.8" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.8" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.destroy (1 samples, 0.03%)</title><rect x="229.8" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.8" y="926.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.stopService (1 samples, 0.03%)</title><rect x="229.8" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.8" y="910.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.stop (1 samples, 0.03%)</title><rect x="229.8" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.8" y="894.0"></text>
</g>
<g>
<title>QuarkusInfinispanRegionFactory.stopCacheRegions (1 samples, 0.03%)</title><rect x="229.8" y="867.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="229.8" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="232.8" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="229.8" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="232.8" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="232.8" y="830.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at(int, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="232.8" y="814.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at_impl(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="232.8" y="798.0"></text>
</g>
<g>
<title>ConstantPool::resolve_possibly_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="232.8" y="782.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="232.8" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="232.8" y="750.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.8" y="734.0"></text>
</g>
<g>
<title>CallInfo::set_resolved_method_name(Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="232.8" y="718.0"></text>
</g>
<g>
<title>java_lang_invoke_ResolvedMethodName::find_resolved_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="229.8" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="232.8" y="702.0"></text>
</g>
<g>
<title>ResolvedMethodTable::lookup(int, unsigned int, Method*) (1 samples, 0.03%)</title><rect x="229.8" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="232.8" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1187956ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1187956ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="229.8" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="232.8" y="670.0"></text>
</g>
<g>
<title>FastBootMetadataBuilder.getIntegrators (1 samples, 0.03%)</title><rect x="230.2" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.2" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="230.2" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="233.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="233.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.2" y="926.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="233.2" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="883.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="233.2" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="867.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="233.2" y="878.0"></text>
</g>
<g>
<title>ClassVerifier::verify_ldc(int, unsigned short, StackMapFrame*, constantPoolHandle const&amp;, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="851.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="233.2" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_cp_index(unsigned short, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="230.2" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="233.2" y="846.0"></text>
</g>
<g>
<title>MetadataBuildingProcess.complete (65 samples, 1.82%)</title><rect x="230.7" y="963.0" width="28.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.7" y="974.0">Me..</text>
</g>
<g>
<title>FlatClassLoaderService.loadJavaServices (2 samples, 0.06%)</title><rect x="230.7" y="947.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.7" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (2 samples, 0.06%)</title><rect x="230.7" y="931.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.7" y="942.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (2 samples, 0.06%)</title><rect x="230.7" y="915.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.7" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (2 samples, 0.06%)</title><rect x="230.7" y="899.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.7" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (2 samples, 0.06%)</title><rect x="230.7" y="883.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.7" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (2 samples, 0.06%)</title><rect x="230.7" y="867.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.7" y="878.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="230.7" y="851.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.7" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.findResources (1 samples, 0.03%)</title><rect x="230.7" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.7" y="846.0"></text>
</g>
<g>
<title>JarResource.getResourceURL (1 samples, 0.03%)</title><rect x="230.7" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.7" y="830.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="230.7" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.7" y="814.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="230.7" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="798.0"></text>
</g>
<g>
<title>ZipFile$Source.getEntryPos (1 samples, 0.03%)</title><rect x="230.7" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.7" y="782.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="231.1" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.1" y="862.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="231.1" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.1" y="846.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="231.1" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="234.1" y="830.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="231.1" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.1" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasMoreElements (1 samples, 0.03%)</title><rect x="231.1" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.1" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasNext (1 samples, 0.03%)</title><rect x="231.1" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.1" y="782.0"></text>
</g>
<g>
<title>URLClassPath$1.hasMoreElements (1 samples, 0.03%)</title><rect x="231.1" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.1" y="766.0"></text>
</g>
<g>
<title>URLClassPath$1.next (1 samples, 0.03%)</title><rect x="231.1" y="739.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.1" y="750.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="231.1" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.1" y="734.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="231.1" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.1" y="718.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="231.1" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.1" y="702.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="231.1" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.1" y="686.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="231.1" y="659.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.1" y="670.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="231.1" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.1" y="654.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="231.1" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.1" y="638.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="231.1" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.1" y="622.0"></text>
</g>
<g>
<title>URL.toLowerCase (1 samples, 0.03%)</title><rect x="231.1" y="595.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.1" y="606.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.&lt;init&gt; (16 samples, 0.45%)</title><rect x="231.5" y="947.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.5" y="958.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (13 samples, 0.36%)</title><rect x="231.5" y="931.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.5" y="942.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (13 samples, 0.36%)</title><rect x="231.5" y="915.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.5" y="926.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (13 samples, 0.36%)</title><rect x="231.5" y="899.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.5" y="910.0"></text>
</g>
<g>
<title>QuarkusMutableIdentifierGeneratorFactory.injectServices (13 samples, 0.36%)</title><rect x="231.5" y="883.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.5" y="894.0"></text>
</g>
<g>
<title>DefaultIdentifierGeneratorFactory.injectServices (13 samples, 0.36%)</title><rect x="231.5" y="867.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.5" y="878.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (13 samples, 0.36%)</title><rect x="231.5" y="851.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.5" y="862.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (13 samples, 0.36%)</title><rect x="231.5" y="835.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.5" y="846.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.createService (13 samples, 0.36%)</title><rect x="231.5" y="819.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="830.0"></text>
</g>
<g>
<title>StandardServiceRegistryImpl.initiateService (13 samples, 0.36%)</title><rect x="231.5" y="803.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.5" y="814.0"></text>
</g>
<g>
<title>JdbcEnvironmentInitiator.initiateService (13 samples, 0.36%)</title><rect x="231.5" y="787.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.5" y="798.0"></text>
</g>
<g>
<title>JdbcEnvironmentInitiator.initiateService (13 samples, 0.36%)</title><rect x="231.5" y="771.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.5" y="782.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (1 samples, 0.03%)</title><rect x="231.5" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.5" y="766.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (1 samples, 0.03%)</title><rect x="231.5" y="739.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.5" y="750.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (1 samples, 0.03%)</title><rect x="231.5" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="734.0"></text>
</g>
<g>
<title>DialectFactoryImpl.injectServices (1 samples, 0.03%)</title><rect x="231.5" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.5" y="718.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.getService (1 samples, 0.03%)</title><rect x="231.5" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="702.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.initializeService (1 samples, 0.03%)</title><rect x="231.5" y="675.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.5" y="686.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.injectDependencies (1 samples, 0.03%)</title><rect x="231.5" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.5" y="670.0"></text>
</g>
<g>
<title>AbstractServiceRegistryImpl.applyInjections (1 samples, 0.03%)</title><rect x="231.5" y="643.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="654.0"></text>
</g>
<g>
<title>Class.getMethods (1 samples, 0.03%)</title><rect x="231.5" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.5" y="638.0"></text>
</g>
<g>
<title>Class.privateGetPublicMethods (1 samples, 0.03%)</title><rect x="231.5" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.5" y="622.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="231.5" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.5" y="606.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="231.5" y="579.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="231.5" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.5" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="231.5" y="547.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="558.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="231.5" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="542.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="231.5" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.5" y="526.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="231.5" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.5" y="510.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="231.5" y="483.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.5" y="494.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="231.5" y="467.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="234.5" y="478.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="231.5" y="451.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="234.5" y="462.0"></text>
</g>
<g>
<title>JdbcEnvironmentImpl.&lt;init&gt; (4 samples, 0.11%)</title><rect x="232.0" y="755.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.0" y="766.0"></text>
</g>
<g>
<title>JdbcEnvironmentImpl.buildSqlExceptionHelper (2 samples, 0.06%)</title><rect x="232.0" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.0" y="750.0"></text>
</g>
<g>
<title>H2Dialect.buildSQLExceptionConversionDelegate (1 samples, 0.03%)</title><rect x="232.0" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.0" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="232.0" y="707.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.0" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="232.0" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.0" y="702.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="232.0" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="686.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="232.0" y="659.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.0" y="670.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="232.0" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.0" y="654.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="232.0" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.0" y="638.0"></text>
</g>
<g>
<title>Cleaner.register (1 samples, 0.03%)</title><rect x="232.0" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.0" y="622.0"></text>
</g>
<g>
<title>CleanerImpl$PhantomCleanableRef.&lt;init&gt; (1 samples, 0.03%)</title><rect x="232.0" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.0" y="606.0"></text>
</g>
<g>
<title>PhantomCleanable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="232.0" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.0" y="590.0"></text>
</g>
<g>
<title>PhantomCleanable.insert (1 samples, 0.03%)</title><rect x="232.0" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.0" y="574.0"></text>
</g>
<g>
<title>SqlExceptionHelper.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="232.4" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.4" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="232.4" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.4" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="232.4" y="691.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.4" y="702.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="232.4" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.4" y="686.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="232.4" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.4" y="670.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="232.4" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.4" y="654.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="232.4" y="627.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.4" y="638.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="232.4" y="611.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="235.4" y="622.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="232.4" y="595.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="235.4" y="606.0"></text>
</g>
<g>
<title>QuarkusH2Dialect.buildIdentifierHelper (2 samples, 0.06%)</title><rect x="232.9" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.9" y="750.0"></text>
</g>
<g>
<title>Dialect.buildIdentifierHelper (2 samples, 0.06%)</title><rect x="232.9" y="723.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.9" y="734.0"></text>
</g>
<g>
<title>IdentifierHelperBuilder.applyReservedWords (1 samples, 0.03%)</title><rect x="232.9" y="707.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.9" y="718.0"></text>
</g>
<g>
<title>TreeSet.addAll (1 samples, 0.03%)</title><rect x="232.9" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.9" y="702.0"></text>
</g>
<g>
<title>AbstractCollection.addAll (1 samples, 0.03%)</title><rect x="232.9" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.9" y="686.0"></text>
</g>
<g>
<title>TreeSet.add (1 samples, 0.03%)</title><rect x="232.9" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.9" y="670.0"></text>
</g>
<g>
<title>TreeMap.put (1 samples, 0.03%)</title><rect x="232.9" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.9" y="654.0"></text>
</g>
<g>
<title>String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="232.9" y="627.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.9" y="638.0"></text>
</g>
<g>
<title>String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="232.9" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.9" y="622.0"></text>
</g>
<g>
<title>StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="232.9" y="595.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.9" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="232.9" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="235.9" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="563.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="235.9" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="547.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="235.9" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="235.9" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="235.9" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="235.9" y="510.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="235.9" y="494.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.03%)</title><rect x="232.9" y="467.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="235.9" y="478.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="232.9" y="451.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="235.9" y="462.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="233.3" y="707.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.3" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="233.3" y="691.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.3" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="233.3" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.3" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="233.3" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.3" y="670.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="233.3" y="643.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="236.3" y="654.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="233.3" y="627.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="236.3" y="638.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="611.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="236.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="595.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="236.3" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="236.3" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="236.3" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="547.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="236.3" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="531.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="236.3" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="233.3" y="515.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="236.3" y="526.0"></text>
</g>
<g>
<title>RecordingDialectFactory.buildDialect (8 samples, 0.22%)</title><rect x="233.8" y="755.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.8" y="766.0"></text>
</g>
<g>
<title>DialectFactoryImpl.buildDialect (8 samples, 0.22%)</title><rect x="233.8" y="739.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.8" y="750.0"></text>
</g>
<g>
<title>DialectFactoryImpl.constructDialect (7 samples, 0.20%)</title><rect x="233.8" y="723.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.8" y="734.0"></text>
</g>
<g>
<title>StrategySelectorImpl.resolveStrategy (7 samples, 0.20%)</title><rect x="233.8" y="707.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.8" y="718.0"></text>
</g>
<g>
<title>StrategySelectorImpl.resolveDefaultableStrategy (7 samples, 0.20%)</title><rect x="233.8" y="691.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.8" y="702.0"></text>
</g>
<g>
<title>StrategySelectorImpl.resolveDefaultableStrategy (7 samples, 0.20%)</title><rect x="233.8" y="675.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.8" y="686.0"></text>
</g>
<g>
<title>StrategySelectorImpl.resolveStrategy (7 samples, 0.20%)</title><rect x="233.8" y="659.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.8" y="670.0"></text>
</g>
<g>
<title>1896074070.create (7 samples, 0.20%)</title><rect x="233.8" y="643.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="236.8" y="654.0"></text>
</g>
<g>
<title>StrategySelectorImpl.lambda$static$0 (7 samples, 0.20%)</title><rect x="233.8" y="627.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.8" y="638.0"></text>
</g>
<g>
<title>Class.newInstance (7 samples, 0.20%)</title><rect x="233.8" y="611.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.8" y="622.0"></text>
</g>
<g>
<title>Class.getConstructor0 (2 samples, 0.06%)</title><rect x="233.8" y="595.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.8" y="606.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (2 samples, 0.06%)</title><rect x="233.8" y="579.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.8" y="590.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (2 samples, 0.06%)</title><rect x="233.8" y="563.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.8" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="233.8" y="547.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.8" y="558.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="233.8" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.8" y="542.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="233.8" y="515.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.8" y="526.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="233.8" y="499.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.8" y="510.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="233.8" y="483.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="236.8" y="494.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="233.8" y="467.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="236.8" y="478.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="233.8" y="451.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="236.8" y="462.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="233.8" y="435.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="236.8" y="446.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="233.8" y="419.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="236.8" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="233.8" y="403.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="236.8" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="233.8" y="387.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="236.8" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="233.8" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="236.8" y="382.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="233.8" y="355.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="236.8" y="366.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="233.8" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="236.8" y="350.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="233.8" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="236.8" y="334.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="234.2" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="237.2" y="382.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="234.2" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="237.2" y="366.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="234.2" y="339.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="237.2" y="350.0"></text>
</g>
<g>
<title>Constructor.newInstance (5 samples, 0.14%)</title><rect x="234.6" y="595.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.6" y="606.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.14%)</title><rect x="234.6" y="579.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.6" y="590.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (5 samples, 0.14%)</title><rect x="234.6" y="563.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.6" y="574.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (5 samples, 0.14%)</title><rect x="234.6" y="547.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.6" y="558.0"></text>
</g>
<g>
<title>QuarkusH2Dialect.&lt;init&gt; (5 samples, 0.14%)</title><rect x="234.6" y="531.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.6" y="542.0"></text>
</g>
<g>
<title>H2Dialect.&lt;init&gt; (5 samples, 0.14%)</title><rect x="234.6" y="515.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.6" y="526.0"></text>
</g>
<g>
<title>Dialect.&lt;init&gt; (3 samples, 0.08%)</title><rect x="234.6" y="499.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.6" y="510.0"></text>
</g>
<g>
<title>Dialect.registerFunction (1 samples, 0.03%)</title><rect x="234.6" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.6" y="494.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="234.6" y="467.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.6" y="478.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="234.6" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="237.6" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="234.6" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="237.6" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="234.6" y="419.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="237.6" y="430.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="234.6" y="403.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="237.6" y="414.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*) (1 samples, 0.03%)</title><rect x="234.6" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="237.6" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="234.6" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="237.6" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="234.6" y="355.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="237.6" y="366.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="234.6" y="339.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="237.6" y="350.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="235.1" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.1" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="235.1" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.1" y="478.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="235.1" y="451.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.1" y="462.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="235.1" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.1" y="446.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="235.1" y="419.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="238.1" y="430.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="235.1" y="403.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="238.1" y="414.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="235.1" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="238.1" y="398.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="235.1" y="371.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="238.1" y="382.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="235.1" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="238.1" y="366.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="235.1" y="339.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="238.1" y="350.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="235.1" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="238.1" y="334.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="235.1" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="238.1" y="318.0"></text>
</g>
<g>
<title>StandardAnsiSqlAggregationFunctions.primeFunctionMap (1 samples, 0.03%)</title><rect x="235.5" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.5" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="235.5" y="467.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.5" y="478.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="235.5" y="451.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.5" y="462.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="235.5" y="435.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.5" y="446.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="235.5" y="419.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.5" y="430.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="235.5" y="403.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="238.5" y="414.0"></text>
</g>
<g>
<title>VerifyFixClassname (1 samples, 0.03%)</title><rect x="235.5" y="387.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="238.5" y="398.0"></text>
</g>
<g>
<title>next_utf2unicode (1 samples, 0.03%)</title><rect x="235.5" y="371.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="238.5" y="382.0"></text>
</g>
<g>
<title>ReflectHelper.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="236.0" y="499.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.0" y="510.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="236.0" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.0" y="494.0"></text>
</g>
<g>
<title>Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="236.0" y="467.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.0" y="478.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="236.0" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.0" y="462.0"></text>
</g>
<g>
<title>Pattern.expr (1 samples, 0.03%)</title><rect x="236.0" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.0" y="446.0"></text>
</g>
<g>
<title>Pattern.sequence (1 samples, 0.03%)</title><rect x="236.0" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.0" y="430.0"></text>
</g>
<g>
<title>Pattern.clazz (1 samples, 0.03%)</title><rect x="236.0" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.0" y="414.0"></text>
</g>
<g>
<title>Pattern.range (1 samples, 0.03%)</title><rect x="236.0" y="387.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.0" y="398.0"></text>
</g>
<g>
<title>Pattern.escape (1 samples, 0.03%)</title><rect x="236.0" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="382.0"></text>
</g>
<g>
<title>CharPredicates.DIGIT (1 samples, 0.03%)</title><rect x="236.0" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.0" y="366.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="236.0" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.0" y="350.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="236.0" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.0" y="334.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="236.0" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="318.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="236.0" y="291.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.0" y="302.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="236.0" y="275.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.0" y="286.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="236.0" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="239.0" y="270.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="236.0" y="243.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="239.0" y="254.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="236.0" y="227.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="239.0" y="238.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="236.0" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="239.0" y="222.0"></text>
</g>
<g>
<title>MethodCounters::highest_osr_comp_level() const (1 samples, 0.03%)</title><rect x="236.0" y="195.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="239.0" y="206.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="236.4" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.4" y="510.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="236.4" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.4" y="494.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="236.4" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.4" y="478.0"></text>
</g>
<g>
<title>DialectFactoryImpl.isEmpty (1 samples, 0.03%)</title><rect x="236.9" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.9" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="236.9" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.9" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="236.9" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.9" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="236.9" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.9" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="236.9" y="659.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.9" y="670.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="236.9" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="239.9" y="654.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="236.9" y="627.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="239.9" y="638.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="611.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="239.9" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="595.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="239.9" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="239.9" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="239.9" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="239.9" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="531.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="239.9" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="236.9" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="239.9" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="236.9" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="239.9" y="510.0"></text>
</g>
<g>
<title>AttributeConverterManager.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="237.3" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.3" y="942.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="237.3" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.3" y="926.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="237.3" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.3" y="910.0"></text>
</g>
<g>
<title>Invokers.linkToTargetMethod (1 samples, 0.03%)</title><rect x="237.3" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.3" y="894.0"></text>
</g>
<g>
<title>Invokers.callSiteForm (1 samples, 0.03%)</title><rect x="237.3" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.3" y="878.0"></text>
</g>
<g>
<title>MethodType.basicType (1 samples, 0.03%)</title><rect x="237.3" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.3" y="862.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.getDatabase (2 samples, 0.06%)</title><rect x="237.7" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.7" y="942.0"></text>
</g>
<g>
<title>Database.&lt;init&gt; (1 samples, 0.03%)</title><rect x="237.7" y="915.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.7" y="926.0"></text>
</g>
<g>
<title>Database.&lt;init&gt; (1 samples, 0.03%)</title><rect x="237.7" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.7" y="910.0"></text>
</g>
<g>
<title>Database.makeNamespace (1 samples, 0.03%)</title><rect x="237.7" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.7" y="894.0"></text>
</g>
<g>
<title>Namespace.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="237.7" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.7" y="878.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="237.7" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.7" y="862.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="237.7" y="835.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.7" y="846.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="237.7" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.7" y="830.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="237.7" y="803.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.7" y="814.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="237.7" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.7" y="798.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="237.7" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.7" y="782.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="237.7" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.7" y="766.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="237.7" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.7" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="237.7" y="723.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="240.7" y="734.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="237.7" y="707.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="240.7" y="718.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="237.7" y="691.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="240.7" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="237.7" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="240.7" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="237.7" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="240.7" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="237.7" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="240.7" y="654.0"></text>
</g>
<g>
<title>java_lang_String::char_converter(Handle, unsigned short, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="237.7" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="240.7" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.2" y="915.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.2" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.2" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.2" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="238.2" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.2" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="238.2" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.2" y="878.0"></text>
</g>
<g>
<title>VerifyFixClassname (1 samples, 0.03%)</title><rect x="238.2" y="851.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="241.2" y="862.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.buildMetadataInstance (4 samples, 0.11%)</title><rect x="238.6" y="947.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.6" y="958.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.processExportableProducers (3 samples, 0.08%)</title><rect x="238.6" y="931.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.6" y="942.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.handleIdentifierValueBinding (3 samples, 0.08%)</title><rect x="238.6" y="915.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.6" y="926.0"></text>
</g>
<g>
<title>SimpleValue.createIdentifierGenerator (3 samples, 0.08%)</title><rect x="238.6" y="899.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.6" y="910.0"></text>
</g>
<g>
<title>QuarkusMutableIdentifierGeneratorFactory.createIdentifierGenerator (2 samples, 0.06%)</title><rect x="238.6" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.6" y="894.0"></text>
</g>
<g>
<title>DefaultIdentifierGeneratorFactory.createIdentifierGenerator (2 samples, 0.06%)</title><rect x="238.6" y="867.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.6" y="878.0"></text>
</g>
<g>
<title>SequenceStyleGenerator.configure (2 samples, 0.06%)</title><rect x="238.6" y="851.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.6" y="862.0"></text>
</g>
<g>
<title>SequenceStyleGenerator.buildDatabaseStructure (1 samples, 0.03%)</title><rect x="238.6" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.6" y="846.0"></text>
</g>
<g>
<title>SequenceStyleGenerator.buildSequenceStructure (1 samples, 0.03%)</title><rect x="238.6" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.6" y="830.0"></text>
</g>
<g>
<title>SequenceStructure.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="238.6" y="803.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.6" y="814.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="238.6" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.6" y="798.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="238.6" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.6" y="782.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="238.6" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.6" y="766.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="238.6" y="739.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.6" y="750.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="238.6" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.6" y="734.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="238.6" y="707.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.6" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.6" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.6" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.6" y="675.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.6" y="686.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.6" y="659.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.6" y="670.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.6" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.6" y="654.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="238.6" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.6" y="638.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="238.6" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.6" y="622.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="238.6" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.6" y="606.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="238.6" y="579.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.6" y="590.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="238.6" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.6" y="574.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="238.6" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.6" y="558.0"></text>
</g>
<g>
<title>JVM_FindLoadedClass (1 samples, 0.03%)</title><rect x="238.6" y="531.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="241.6" y="542.0"></text>
</g>
<g>
<title>java_lang_String::char_converter(Handle, unsigned short, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="238.6" y="515.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="241.6" y="526.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="238.6" y="499.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="241.6" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="238.6" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="241.6" y="494.0"></text>
</g>
<g>
<title>SequenceStyleGenerator.determineOptimizationStrategy (1 samples, 0.03%)</title><rect x="239.1" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.1" y="846.0"></text>
</g>
<g>
<title>OptimizerFactory.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="239.1" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.1" y="830.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="239.1" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.1" y="814.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="239.1" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.1" y="798.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="239.1" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.1" y="782.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="239.1" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="766.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="239.1" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.1" y="750.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="239.1" y="723.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.1" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.1" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.1" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.1" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.1" y="702.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.1" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.1" y="686.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.1" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.1" y="670.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.1" y="643.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.1" y="654.0"></text>
</g>
<g>
<title>ClassNotFoundException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="239.1" y="627.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.1" y="638.0"></text>
</g>
<g>
<title>ReflectiveOperationException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="239.1" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.1" y="622.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="239.1" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.1" y="606.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="239.1" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.1" y="590.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="239.1" y="563.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.1" y="574.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="239.1" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.1" y="558.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="239.1" y="531.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="242.1" y="542.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="239.1" y="515.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="242.1" y="526.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="239.1" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="242.1" y="510.0"></text>
</g>
<g>
<title>RootClass.getIdentityTables (1 samples, 0.03%)</title><rect x="239.5" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.5" y="894.0"></text>
</g>
<g>
<title>PersistentClass.getSubclassClosureIterator (1 samples, 0.03%)</title><rect x="239.5" y="867.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.5" y="878.0"></text>
</g>
<g>
<title>PersistentClass.getSubclassIterator (1 samples, 0.03%)</title><rect x="239.5" y="851.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.5" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.5" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="239.5" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.5" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="239.5" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.5" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="239.5" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.5" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="239.5" y="771.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="242.5" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="239.5" y="755.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="242.5" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="739.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="242.5" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="242.5" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="242.5" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="242.5" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="242.5" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="242.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="242.5" y="654.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="242.5" y="638.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="242.5" y="622.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="239.5" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="242.5" y="606.0"></text>
</g>
<g>
<title>Symbol::Symbol(unsigned char const*, int, int) (1 samples, 0.03%)</title><rect x="239.5" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="242.5" y="590.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="239.9" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="242.9" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="239.9" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="242.9" y="926.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="239.9" y="899.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="242.9" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (2 samples, 0.06%)</title><rect x="240.4" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="243.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="240.4" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="243.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="240.4" y="915.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="243.4" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="240.4" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="243.4" y="910.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="240.4" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="243.4" y="894.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="240.4" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="243.4" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="240.4" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="243.4" y="862.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="240.8" y="899.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="243.8" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="240.8" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="243.8" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="240.8" y="867.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="243.8" y="878.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="240.8" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="243.8" y="862.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="240.8" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="243.8" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="240.8" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="243.8" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="241.3" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="244.3" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="241.3" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="244.3" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="244.3" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="244.3" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="883.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="244.3" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="867.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="244.3" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="244.3" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="244.3" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="244.3" y="830.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="244.3" y="814.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.3" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="241.3" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="244.3" y="782.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="241.3" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="244.3" y="766.0"></text>
</g>
<g>
<title>MetadataBuildingProcess$1.&lt;init&gt; (2 samples, 0.06%)</title><rect x="241.7" y="947.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.7" y="958.0"></text>
</g>
<g>
<title>AnnotationMetadataSourceProcessorImpl.&lt;init&gt; (2 samples, 0.06%)</title><rect x="241.7" y="931.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.7" y="942.0"></text>
</g>
<g>
<title>AnnotationMetadataSourceProcessorImpl.categorizeAnnotatedClass (2 samples, 0.06%)</title><rect x="241.7" y="915.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.7" y="926.0"></text>
</g>
<g>
<title>JavaReflectionManager.toXClass (1 samples, 0.03%)</title><rect x="241.7" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.7" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="241.7" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.7" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="241.7" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.7" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="241.7" y="851.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.7" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="241.7" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.7" y="846.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="241.7" y="819.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="244.7" y="830.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="241.7" y="803.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="244.7" y="814.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="241.7" y="787.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="244.7" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="241.7" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="244.7" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="241.7" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="244.7" y="766.0"></text>
</g>
<g>
<title>Verifier::should_verify_for(oopDesc*, bool) (1 samples, 0.03%)</title><rect x="241.7" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="244.7" y="750.0"></text>
</g>
<g>
<title>JavaXAnnotatedElement.isAnnotationPresent (1 samples, 0.03%)</title><rect x="242.2" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.2" y="910.0"></text>
</g>
<g>
<title>JavaAnnotationReader.isAnnotationPresent (1 samples, 0.03%)</title><rect x="242.2" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.2" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="242.2" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="245.2" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="242.2" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="245.2" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="242.2" y="835.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="245.2" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="242.2" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="245.2" y="830.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="242.2" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.2" y="814.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*) (1 samples, 0.03%)</title><rect x="242.2" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="242.2" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="245.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="242.2" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="245.2" y="766.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="242.2" y="739.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="245.2" y="750.0"></text>
</g>
<g>
<title>MetadataBuildingProcess$1.prepare (6 samples, 0.17%)</title><rect x="242.6" y="947.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.6" y="958.0"></text>
</g>
<g>
<title>AnnotationMetadataSourceProcessorImpl.prepare (6 samples, 0.17%)</title><rect x="242.6" y="931.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.6" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (2 samples, 0.06%)</title><rect x="242.6" y="915.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="245.6" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (2 samples, 0.06%)</title><rect x="242.6" y="899.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.6" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="245.6" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="867.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="245.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="851.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="245.6" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="245.6" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="245.6" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (2 samples, 0.06%)</title><rect x="242.6" y="787.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="245.6" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="242.6" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="245.6" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::append(Symbol* const&amp;) (1 samples, 0.03%)</title><rect x="242.6" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="245.6" y="766.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="242.6" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="245.6" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*) (1 samples, 0.03%)</title><rect x="243.0" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="246.0" y="782.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="243.0" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="246.0" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="243.5" y="915.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.5" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="243.5" y="899.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.5" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (4 samples, 0.11%)</title><rect x="243.5" y="883.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.5" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (4 samples, 0.11%)</title><rect x="243.5" y="867.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.5" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (4 samples, 0.11%)</title><rect x="243.5" y="851.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="246.5" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (4 samples, 0.11%)</title><rect x="243.5" y="835.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="246.5" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (4 samples, 0.11%)</title><rect x="243.5" y="819.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="246.5" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (4 samples, 0.11%)</title><rect x="243.5" y="803.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="246.5" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (4 samples, 0.11%)</title><rect x="243.5" y="787.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="246.5" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (3 samples, 0.08%)</title><rect x="243.5" y="771.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="246.5" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (3 samples, 0.08%)</title><rect x="243.5" y="755.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="246.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="243.5" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="246.5" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="243.5" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="246.5" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="243.5" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="246.5" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="243.5" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="246.5" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="243.9" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="246.9" y="750.0"></text>
</g>
<g>
<title>Array&lt;Klass*&gt;* MetadataFactory::new_array&lt;Klass*&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="243.9" y="723.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="246.9" y="734.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="243.9" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="246.9" y="718.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="243.9" y="691.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="246.9" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="244.4" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="247.4" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="244.4" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="247.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="244.8" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="247.8" y="782.0"></text>
</g>
<g>
<title>Method::sort_methods(Array&lt;Method*&gt;*, bool, bool) (1 samples, 0.03%)</title><rect x="244.8" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="247.8" y="766.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="244.8" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="247.8" y="750.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="244.8" y="723.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="247.8" y="734.0"></text>
</g>
<g>
<title>unsigned long QuickSort::partition&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="244.8" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="247.8" y="718.0"></text>
</g>
<g>
<title>MetadataBuildingProcess$1.processEntityHierarchies (26 samples, 0.73%)</title><rect x="245.3" y="947.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.3" y="958.0"></text>
</g>
<g>
<title>AnnotationMetadataSourceProcessorImpl.processEntityHierarchies (26 samples, 0.73%)</title><rect x="245.3" y="931.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.3" y="942.0"></text>
</g>
<g>
<title>AnnotationBinder.bindClass (25 samples, 0.70%)</title><rect x="245.3" y="915.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.3" y="926.0"></text>
</g>
<g>
<title>AnnotationBinder.bindFilterDefs (1 samples, 0.03%)</title><rect x="245.3" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.3" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.3" y="883.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.3" y="867.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.3" y="878.0"></text>
</g>
<g>
<title>String.startsWith (1 samples, 0.03%)</title><rect x="245.3" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.3" y="862.0"></text>
</g>
<g>
<title>AnnotationBinder.bindQueries (1 samples, 0.03%)</title><rect x="245.7" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.7" y="910.0"></text>
</g>
<g>
<title>QueryBinder.bindSqlResultSetMapping (1 samples, 0.03%)</title><rect x="245.7" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.7" y="894.0"></text>
</g>
<g>
<title>ResultsetMappingSecondPass.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="245.7" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.7" y="878.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="245.7" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.7" y="862.0"></text>
</g>
<g>
<title>CoreLogging.messageLogger (1 samples, 0.03%)</title><rect x="245.7" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.7" y="846.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="245.7" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.7" y="830.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="245.7" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.7" y="814.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="245.7" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.7" y="798.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="245.7" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.7" y="782.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="245.7" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.7" y="766.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="245.7" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.7" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.7" y="723.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.7" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.7" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.7" y="718.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.7" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.7" y="702.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.7" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.7" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="245.7" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="248.7" y="670.0"></text>
</g>
<g>
<title>ClassNotFoundException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="245.7" y="643.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.7" y="654.0"></text>
</g>
<g>
<title>ReflectiveOperationException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="245.7" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.7" y="638.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="245.7" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.7" y="622.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="245.7" y="595.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.7" y="606.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="245.7" y="579.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.7" y="590.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="245.7" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.7" y="574.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="245.7" y="547.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="248.7" y="558.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="245.7" y="531.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="248.7" y="542.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="245.7" y="515.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="248.7" y="526.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="245.7" y="499.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="248.7" y="510.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.03%)</title><rect x="245.7" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="248.7" y="494.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="245.7" y="467.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="248.7" y="478.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="245.7" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="248.7" y="462.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="245.7" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="248.7" y="446.0"></text>
</g>
<g>
<title>AnnotationBinder.mapAsIdClass (1 samples, 0.03%)</title><rect x="246.1" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.1" y="910.0"></text>
</g>
<g>
<title>InheritanceState.getClassWithIdClass (1 samples, 0.03%)</title><rect x="246.1" y="883.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.1" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="246.1" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.1" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="246.1" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.1" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="246.1" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.1" y="846.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="246.1" y="819.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.1" y="830.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="246.1" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.1" y="814.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="246.1" y="787.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.1" y="798.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="246.1" y="771.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="249.1" y="782.0"></text>
</g>
<g>
<title>jni_GetPrimitiveArrayCritical (1 samples, 0.03%)</title><rect x="246.1" y="755.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="249.1" y="766.0"></text>
</g>
<g>
<title>lock_gc_or_pin_object(JavaThread*, _jobject*) (1 samples, 0.03%)</title><rect x="246.1" y="739.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="249.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::supports_object_pinning() const (1 samples, 0.03%)</title><rect x="246.1" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="249.1" y="734.0"></text>
</g>
<g>
<title>AnnotationBinder.processIdPropertiesIfNotAlready (6 samples, 0.17%)</title><rect x="246.6" y="899.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.6" y="910.0"></text>
</g>
<g>
<title>AnnotationBinder.processElementAnnotations (6 samples, 0.17%)</title><rect x="246.6" y="883.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.6" y="894.0"></text>
</g>
<g>
<title>AnnotationBinder.processId (1 samples, 0.03%)</title><rect x="246.6" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.6" y="878.0"></text>
</g>
<g>
<title>AnnotationBinder.generatorType (1 samples, 0.03%)</title><rect x="246.6" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.6" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="246.6" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.6" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="246.6" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.6" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="246.6" y="803.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.6" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="246.6" y="787.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.6" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="246.6" y="771.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="249.6" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="246.6" y="755.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="249.6" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="739.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="249.6" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="249.6" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="249.6" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="249.6" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="249.6" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="249.6" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="246.6" y="643.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="249.6" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="246.6" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="249.6" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="246.6" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="249.6" y="622.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.03%)</title><rect x="246.6" y="595.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="249.6" y="606.0"></text>
</g>
<g>
<title>ColumnsBuilder.extractMetadata (1 samples, 0.03%)</title><rect x="247.0" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="247.0" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.0" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="247.0" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.0" y="846.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="247.0" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.0" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="247.0" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.0" y="814.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="247.0" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.0" y="798.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="247.0" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.0" y="782.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="247.0" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.0" y="766.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="247.0" y="739.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.0" y="750.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="247.0" y="723.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.0" y="734.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="247.0" y="707.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.0" y="718.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="247.0" y="691.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.0" y="702.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="247.0" y="675.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="250.0" y="686.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="247.0" y="659.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="250.0" y="670.0"></text>
</g>
<g>
<title>PropertyBinder.makePropertyValueAndBind (3 samples, 0.08%)</title><rect x="247.5" y="867.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.5" y="878.0"></text>
</g>
<g>
<title>PropertyBinder.makePropertyAndValue (3 samples, 0.08%)</title><rect x="247.5" y="851.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.5" y="862.0"></text>
</g>
<g>
<title>AbstractPropertyHolder.resolveAttributeConverterDescriptor (1 samples, 0.03%)</title><rect x="247.5" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.5" y="846.0"></text>
</g>
<g>
<title>AttributeConverterManager.findAutoApplyConverterForAttribute (1 samples, 0.03%)</title><rect x="247.5" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.5" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="247.5" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.5" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="247.5" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.5" y="798.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="247.5" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.5" y="782.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="247.5" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.5" y="766.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="247.5" y="739.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.5" y="750.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="247.5" y="723.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="250.5" y="734.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="247.5" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.5" y="718.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="247.5" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.5" y="702.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized (1 samples, 0.03%)</title><rect x="247.5" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.5" y="686.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized0 (1 samples, 0.03%)</title><rect x="247.5" y="659.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.5" y="670.0"></text>
</g>
<g>
<title>Unsafe_EnsureClassInitialized0(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="247.5" y="643.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="250.5" y="654.0"></text>
</g>
<g>
<title>AccessInternal::OopLoadProxy&lt;oopDesc*, 1048576ull&gt; Access&lt;1048576ull&gt;::oop_load&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="247.5" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="250.5" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="247.9" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="247.9" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.9" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="247.9" y="803.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.9" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="247.9" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.9" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="247.9" y="771.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="250.9" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="247.9" y="755.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="250.9" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="739.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="250.9" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="250.9" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="250.9" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="250.9" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="250.9" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="250.9" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="247.9" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="250.9" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="247.9" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="250.9" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="247.9" y="611.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="250.9" y="622.0"></text>
</g>
<g>
<title>SimpleValueBinder.make (1 samples, 0.03%)</title><rect x="248.3" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.3" y="846.0"></text>
</g>
<g>
<title>SimpleValueBinder.linkWithValue (1 samples, 0.03%)</title><rect x="248.3" y="819.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="830.0"></text>
</g>
<g>
<title>Ejb3Column.linkWithValue (1 samples, 0.03%)</title><rect x="248.3" y="803.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.3" y="814.0"></text>
</g>
<g>
<title>Ejb3Column.addColumnBinding (1 samples, 0.03%)</title><rect x="248.3" y="787.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.3" y="798.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.addColumnNameBinding (1 samples, 0.03%)</title><rect x="248.3" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.3" y="782.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.addColumnNameBinding (1 samples, 0.03%)</title><rect x="248.3" y="755.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.3" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="248.3" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.3" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="248.3" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.3" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="248.3" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.3" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="248.3" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.3" y="702.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="248.3" y="675.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="251.3" y="686.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="248.3" y="659.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="251.3" y="670.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="248.3" y="643.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="251.3" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="248.3" y="627.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="251.3" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="248.3" y="611.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="251.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="248.3" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="251.3" y="606.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="248.3" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="251.3" y="590.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="248.3" y="563.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.3" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="248.3" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="251.3" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="248.3" y="531.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="251.3" y="542.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="248.8" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.8" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="248.8" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.8" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="248.8" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.8" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="248.8" y="819.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.8" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="248.8" y="803.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="251.8" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="248.8" y="787.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="251.8" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="771.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="251.8" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="251.8" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="251.8" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="251.8" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="251.8" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="251.8" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="248.8" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="251.8" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="248.8" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="251.8" y="670.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="248.8" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="251.8" y="654.0"></text>
</g>
<g>
<title>AnnotationBinder.processSingleTableDiscriminatorProperties (1 samples, 0.03%)</title><rect x="249.2" y="899.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.2" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="249.2" y="883.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="252.2" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="249.2" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="252.2" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="851.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="252.2" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="252.2" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="252.2" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="252.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="252.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="252.2" y="782.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="249.2" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="252.2" y="766.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="249.2" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="252.2" y="750.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="249.2" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="252.2" y="734.0"></text>
</g>
<g>
<title>AdapterFingerPrint::as_string() (1 samples, 0.03%)</title><rect x="249.2" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="252.2" y="718.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.03%)</title><rect x="249.2" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="252.2" y="702.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="249.2" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.2" y="686.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.03%)</title><rect x="249.2" y="659.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="252.2" y="670.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.03%)</title><rect x="249.2" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="252.2" y="654.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.03%)</title><rect x="249.2" y="627.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="252.2" y="638.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.03%)</title><rect x="249.2" y="611.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="252.2" y="622.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.03%)</title><rect x="249.2" y="595.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="252.2" y="606.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.03%)</title><rect x="249.2" y="579.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="252.2" y="590.0"></text>
</g>
<g>
<title>__sfvwrite (1 samples, 0.03%)</title><rect x="249.2" y="563.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="252.2" y="574.0"></text>
</g>
<g>
<title>EntityBinder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="249.7" y="899.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.7" y="910.0"></text>
</g>
<g>
<title>EntityBinder.bindEjb3Annotation (1 samples, 0.03%)</title><rect x="249.7" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.7" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="249.7" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="252.7" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="249.7" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.7" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="252.7" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="252.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="252.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="252.7" y="798.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="252.7" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="252.7" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="252.7" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="249.7" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="252.7" y="734.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="249.7" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="252.7" y="718.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="249.7" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.7" y="702.0"></text>
</g>
<g>
<title>EntityBinder.bindHibernateAnnotation (1 samples, 0.03%)</title><rect x="250.1" y="883.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.1" y="894.0"></text>
</g>
<g>
<title>OptimisticLockType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="250.1" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.1" y="878.0"></text>
</g>
<g>
<title>frame::interpreter_frame_method() const (1 samples, 0.03%)</title><rect x="250.1" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="253.1" y="862.0"></text>
</g>
<g>
<title>EntityBinder.bindEntity (1 samples, 0.03%)</title><rect x="250.6" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.6" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="250.6" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.6" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="250.6" y="867.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.6" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="250.6" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.6" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="250.6" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.6" y="846.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="250.6" y="819.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="253.6" y="830.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="250.6" y="803.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="253.6" y="814.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="250.6" y="787.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="253.6" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="250.6" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="253.6" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="250.6" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="253.6" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::~ClassFileParser() (1 samples, 0.03%)</title><rect x="250.6" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="253.6" y="750.0"></text>
</g>
<g>
<title>Annotations::free_contents(ClassLoaderData*, Array&lt;Array&lt;unsigned char&gt;*&gt;*) (1 samples, 0.03%)</title><rect x="250.6" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="253.6" y="734.0"></text>
</g>
<g>
<title>EntityBinder.bindTable (2 samples, 0.06%)</title><rect x="251.0" y="899.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.0" y="910.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.addEntityTableXref (1 samples, 0.03%)</title><rect x="251.0" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.0" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="251.0" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="251.0" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.0" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="251.0" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="251.0" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.0" y="830.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="251.0" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.0" y="814.0"></text>
</g>
<g>
<title>String.intern (1 samples, 0.03%)</title><rect x="251.0" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.0" y="798.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.03%)</title><rect x="251.0" y="771.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="254.0" y="782.0"></text>
</g>
<g>
<title>StringTable::intern(oopDesc*, Thread*) (1 samples, 0.03%)</title><rect x="251.0" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.0" y="766.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="251.0" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="254.0" y="750.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.03%)</title><rect x="251.0" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.0" y="734.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupJchar, StringTableGet&gt;(Thread*, StringTableLookupJchar&amp;, StringTableGet&amp;, bool*) (1 samples, 0.03%)</title><rect x="251.0" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="254.0" y="718.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)2&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupJchar&gt;(Thread*, StringTableLookupJchar&amp;, bool*) (1 samples, 0.03%)</title><rect x="251.0" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="254.0" y="702.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupJchar&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupJchar&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="251.0" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="254.0" y="686.0"></text>
</g>
<g>
<title>StringTableLookupJchar::equals(WeakHandle&lt;(WeakHandleType)2&gt;*, bool*) (1 samples, 0.03%)</title><rect x="251.0" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="254.0" y="670.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, unsigned short*, int) (1 samples, 0.03%)</title><rect x="251.0" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="254.0" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 565366ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.03%)</title><rect x="251.0" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="254.0" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="251.4" y="883.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="254.4" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="251.4" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.4" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="254.4" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="254.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="254.4" y="814.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="787.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="254.4" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.4" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="755.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.4" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="251.4" y="739.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="254.4" y="750.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="251.4" y="723.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="254.4" y="734.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="251.4" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="254.4" y="718.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.addEntityBinding (1 samples, 0.03%)</title><rect x="251.9" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.9" y="910.0"></text>
</g>
<g>
<title>ReferencePipeline.findFirst (1 samples, 0.03%)</title><rect x="251.9" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.9" y="894.0"></text>
</g>
<g>
<title>FindOps.makeRef (1 samples, 0.03%)</title><rect x="251.9" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.9" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="251.9" y="851.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.9" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="251.9" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="254.9" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.9" y="830.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="254.9" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="254.9" y="798.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="254.9" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="254.9" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="254.9" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="254.9" y="734.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="254.9" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="254.9" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="254.9" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.9" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="254.9" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="254.9" y="638.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="254.9" y="622.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="254.9" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="254.9" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="563.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.9" y="574.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="251.9" y="547.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="254.9" y="558.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="251.9" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="254.9" y="542.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::push(InstanceKlass*, void*) (1 samples, 0.03%)</title><rect x="251.9" y="515.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="254.9" y="526.0"></text>
</g>
<g>
<title>GrowableArray&lt;HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::Node*&gt;::append(HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::Node* const&amp;) (1 samples, 0.03%)</title><rect x="251.9" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="254.9" y="510.0"></text>
</g>
<g>
<title>GrowableArray&lt;HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::Node*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="251.9" y="483.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="254.9" y="494.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="251.9" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.9" y="478.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.getClassType (1 samples, 0.03%)</title><rect x="252.3" y="899.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.3" y="910.0"></text>
</g>
<g>
<title>InFlightMetadataCollectorImpl.addClassType (1 samples, 0.03%)</title><rect x="252.3" y="883.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.3" y="894.0"></text>
</g>
<g>
<title>AnnotatedClassType.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="252.3" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.3" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::build_method_counters(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="252.3" y="851.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="255.3" y="862.0"></text>
</g>
<g>
<title>Method::build_method_counters(Method*, Thread*) (1 samples, 0.03%)</title><rect x="252.3" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="255.3" y="846.0"></text>
</g>
<g>
<title>MethodCounters::allocate(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="252.3" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="255.3" y="830.0"></text>
</g>
<g>
<title>MethodCounters::MethodCounters(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="252.3" y="803.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="255.3" y="814.0"></text>
</g>
<g>
<title>CompilerConfig::scaled_compile_threshold(long, double) (1 samples, 0.03%)</title><rect x="252.3" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="255.3" y="798.0"></text>
</g>
<g>
<title>InheritanceState.getElementsToProcess (4 samples, 0.11%)</title><rect x="252.8" y="899.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.8" y="910.0"></text>
</g>
<g>
<title>AnnotationBinder.addElementsOfClass (1 samples, 0.03%)</title><rect x="252.8" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.8" y="894.0"></text>
</g>
<g>
<title>PropertyContainer.getProperties (1 samples, 0.03%)</title><rect x="252.8" y="867.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.8" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="252.8" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="255.8" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="252.8" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="255.8" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="252.8" y="819.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="255.8" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="252.8" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="255.8" y="814.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="252.8" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="255.8" y="798.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="252.8" y="771.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="255.8" y="782.0"></text>
</g>
<g>
<title>InheritanceState.determineDefaultAccessType (3 samples, 0.08%)</title><rect x="253.2" y="883.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.2" y="894.0"></text>
</g>
<g>
<title>JavaXClass.getDeclaredProperties (2 samples, 0.06%)</title><rect x="253.2" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.2" y="878.0"></text>
</g>
<g>
<title>JavaXClass.getDeclaredProperties (2 samples, 0.06%)</title><rect x="253.2" y="851.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.2" y="862.0"></text>
</g>
<g>
<title>JavaXClass.getDeclaredMethodProperties (2 samples, 0.06%)</title><rect x="253.2" y="835.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.2" y="846.0"></text>
</g>
<g>
<title>JavaReflectionManager.getXProperty (1 samples, 0.03%)</title><rect x="253.2" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.2" y="830.0"></text>
</g>
<g>
<title>JavaXProperty.create (1 samples, 0.03%)</title><rect x="253.2" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.2" y="814.0"></text>
</g>
<g>
<title>JavaReflectionManager.toXType (1 samples, 0.03%)</title><rect x="253.2" y="787.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.2" y="798.0"></text>
</g>
<g>
<title>JavaReflectionManager.toApproximatingEnvironment (1 samples, 0.03%)</title><rect x="253.2" y="771.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.2" y="782.0"></text>
</g>
<g>
<title>TypeEnvironmentFactory.toApproximatingEnvironment (1 samples, 0.03%)</title><rect x="253.2" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.2" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="253.2" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.2" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="253.2" y="723.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.2" y="734.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="253.2" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.2" y="718.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="253.2" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.2" y="702.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="253.2" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.2" y="686.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="253.2" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.2" y="670.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="253.2" y="643.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="256.2" y="654.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="253.2" y="627.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="256.2" y="638.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="253.2" y="611.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="256.2" y="622.0"></text>
</g>
<g>
<title>ReflectionUtil.isProperty (1 samples, 0.03%)</title><rect x="253.7" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.7" y="830.0"></text>
</g>
<g>
<title>ReflectionUtil.isPropertyType (1 samples, 0.03%)</title><rect x="253.7" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.7" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="253.7" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.7" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="253.7" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.7" y="782.0"></text>
</g>
<g>
<title>HashMap.get (1 samples, 0.03%)</title><rect x="253.7" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.7" y="766.0"></text>
</g>
<g>
<title>HashMap.getNode (1 samples, 0.03%)</title><rect x="253.7" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.7" y="750.0"></text>
</g>
<g>
<title>String.equals (1 samples, 0.03%)</title><rect x="253.7" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.7" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="254.1" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.1" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="254.1" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.1" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="254.1" y="835.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.1" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="254.1" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.1" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="254.1" y="803.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="257.1" y="814.0"></text>
</g>
<g>
<title>VerifyFixClassname (1 samples, 0.03%)</title><rect x="254.1" y="787.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="257.1" y="798.0"></text>
</g>
<g>
<title>next_utf2unicode (1 samples, 0.03%)</title><rect x="254.1" y="771.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="257.1" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="254.5" y="899.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="257.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="254.5" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="257.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="254.5" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="257.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="254.5" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="257.5" y="862.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="254.5" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="257.5" y="846.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="254.5" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="257.5" y="830.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="254.5" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="257.5" y="814.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="254.5" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="257.5" y="798.0"></text>
</g>
<g>
<title>PropertyHolderBuilder.buildPropertyHolder (1 samples, 0.03%)</title><rect x="255.0" y="899.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.0" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="255.0" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="258.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="258.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="258.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="835.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="258.0" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="258.0" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="258.0" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="258.0" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="258.0" y="782.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="258.0" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="255.0" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="258.0" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="255.0" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="258.0" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="255.0" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="258.0" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="255.4" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.4" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="255.4" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="255.4" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.4" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="255.4" y="851.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.4" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="255.4" y="835.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="258.4" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="255.4" y="819.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="258.4" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="803.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="258.4" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="258.4" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="258.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="258.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="258.4" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="258.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="255.4" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="258.4" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="255.4" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="258.4" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="255.4" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="258.4" y="686.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="255.9" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.9" y="878.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="255.9" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.9" y="862.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="255.9" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.9" y="846.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="255.9" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.9" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="255.9" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.9" y="814.0"></text>
</g>
<g>
<title>AnnotationMetadataSourceProcessorImpl.orderAndFillHierarchy (1 samples, 0.03%)</title><rect x="256.3" y="915.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.3" y="926.0"></text>
</g>
<g>
<title>AnnotationMetadataSourceProcessorImpl.insertMappedSuperclasses (1 samples, 0.03%)</title><rect x="256.3" y="899.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="259.3" y="910.0"></text>
</g>
<g>
<title>JavaXClass.getSuperclass (1 samples, 0.03%)</title><rect x="256.3" y="883.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.3" y="894.0"></text>
</g>
<g>
<title>JavaReflectionManager.getTypeEnvironment (1 samples, 0.03%)</title><rect x="256.3" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.3" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="256.3" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="256.3" y="835.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.3" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="256.3" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.3" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="256.3" y="803.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.3" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="256.3" y="787.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="259.3" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="256.3" y="771.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="259.3" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="256.3" y="755.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="259.3" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="256.3" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.3" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="256.3" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="259.3" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="256.3" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="259.3" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="256.3" y="691.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="259.3" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="256.3" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="259.3" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="256.3" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="259.3" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="256.3" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="259.3" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="256.3" y="627.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="259.3" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (6 samples, 0.17%)</title><rect x="256.8" y="947.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.8" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (6 samples, 0.17%)</title><rect x="256.8" y="931.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.8" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (4 samples, 0.11%)</title><rect x="256.8" y="915.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.8" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (3 samples, 0.08%)</title><rect x="256.8" y="899.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.8" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="256.8" y="883.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="259.8" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="256.8" y="867.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="259.8" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="256.8" y="851.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="259.8" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="256.8" y="835.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="259.8" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="256.8" y="819.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="259.8" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="256.8" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="259.8" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="256.8" y="787.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="259.8" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="256.8" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.8" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="256.8" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="259.8" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="256.8" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="259.8" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="256.8" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="259.8" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="257.2" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="260.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="257.2" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="260.2" y="766.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="257.2" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="260.2" y="750.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="257.2" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="260.2" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="257.6" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.6" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="257.6" y="867.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.6" y="878.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="257.6" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.6" y="862.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="257.6" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.6" y="846.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="257.6" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.6" y="830.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="257.6" y="803.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.6" y="814.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="257.6" y="787.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="260.6" y="798.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="257.6" y="771.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="260.6" y="782.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="257.6" y="755.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="260.6" y="766.0"></text>
</g>
<g>
<title>ClassLoader.preDefineClass (1 samples, 0.03%)</title><rect x="258.1" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.1" y="910.0"></text>
</g>
<g>
<title>ClassLoader.checkName (1 samples, 0.03%)</title><rect x="258.1" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.1" y="894.0"></text>
</g>
<g>
<title>String.charAt (1 samples, 0.03%)</title><rect x="258.1" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.1" y="878.0"></text>
</g>
<g>
<title>String.isLatin1 (1 samples, 0.03%)</title><rect x="258.1" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.1" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (2 samples, 0.06%)</title><rect x="258.5" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.5" y="926.0"></text>
</g>
<g>
<title>InflaterInputStream.read (2 samples, 0.06%)</title><rect x="258.5" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.5" y="910.0"></text>
</g>
<g>
<title>Inflater.inflate (2 samples, 0.06%)</title><rect x="258.5" y="883.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.5" y="894.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (2 samples, 0.06%)</title><rect x="258.5" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.5" y="878.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (2 samples, 0.06%)</title><rect x="258.5" y="851.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="261.5" y="862.0"></text>
</g>
<g>
<title>inflate (2 samples, 0.06%)</title><rect x="258.5" y="835.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="261.5" y="846.0"></text>
</g>
<g>
<title>zError (2 samples, 0.06%)</title><rect x="258.5" y="819.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="261.5" y="830.0"></text>
</g>
<g>
<title>ProxyDefinitions.createFromMetadata (1 samples, 0.03%)</title><rect x="259.4" y="963.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.4" y="974.0"></text>
</g>
<g>
<title>ProxyDefinitions.generateProxyClass (1 samples, 0.03%)</title><rect x="259.4" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.4" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="259.4" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.4" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="259.4" y="915.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.4" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="259.4" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="259.4" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.4" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="259.4" y="867.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="262.4" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="259.4" y="851.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="262.4" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="835.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="262.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="262.4" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="262.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="262.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="262.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="262.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="259.4" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="262.4" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="259.4" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="262.4" y="734.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="259.4" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="262.4" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="259.8" y="979.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.8" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="259.8" y="963.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.8" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="259.8" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.8" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="259.8" y="931.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.8" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="259.8" y="915.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="262.8" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="259.8" y="899.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="262.8" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="883.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="262.8" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="262.8" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="851.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="262.8" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="835.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="262.8" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="262.8" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="262.8" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.8" y="798.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.8" y="782.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="262.8" y="766.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="259.8" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="262.8" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="259.8" y="723.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="262.8" y="734.0"></text>
</g>
<g>
<title>HibernateValidatorRecorder$1.created (108 samples, 3.02%)</title><rect x="260.3" y="1043.0" width="47.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.3" y="1054.0">Hibe..</text>
</g>
<g>
<title>AbstractConfigurationImpl.buildValidatorFactory (87 samples, 2.43%)</title><rect x="260.3" y="1027.0" width="38.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.3" y="1038.0">Abs..</text>
</g>
<g>
<title>AbstractConfigurationImpl.parseValidationXml (1 samples, 0.03%)</title><rect x="260.3" y="1011.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.3" y="1022.0"></text>
</g>
<g>
<title>Log_$logger.ignoringXmlConfiguration (1 samples, 0.03%)</title><rect x="260.3" y="995.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.3" y="1006.0"></text>
</g>
<g>
<title>Logger.logf (1 samples, 0.03%)</title><rect x="260.3" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.3" y="990.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.doLogf (1 samples, 0.03%)</title><rect x="260.3" y="963.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.3" y="974.0"></text>
</g>
<g>
<title>Logger.log (1 samples, 0.03%)</title><rect x="260.3" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.3" y="958.0"></text>
</g>
<g>
<title>ExtLogRecord.&lt;init&gt; (1 samples, 0.03%)</title><rect x="260.3" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.3" y="942.0"></text>
</g>
<g>
<title>LogRecord.&lt;init&gt; (1 samples, 0.03%)</title><rect x="260.3" y="915.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.3" y="926.0"></text>
</g>
<g>
<title>Instant.now (1 samples, 0.03%)</title><rect x="260.3" y="899.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.3" y="910.0"></text>
</g>
<g>
<title>Clock$SystemClock.instant (1 samples, 0.03%)</title><rect x="260.3" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.3" y="894.0"></text>
</g>
<g>
<title>VM.getNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="260.3" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.3" y="878.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="260.3" y="851.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="263.3" y="862.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="260.3" y="835.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="263.3" y="846.0"></text>
</g>
<g>
<title>PredefinedScopeHibernateValidator.buildValidatorFactory (86 samples, 2.41%)</title><rect x="260.7" y="1011.0" width="38.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.7" y="1022.0">Pre..</text>
</g>
<g>
<title>PredefinedScopeValidatorFactoryImpl.&lt;init&gt; (86 samples, 2.41%)</title><rect x="260.7" y="995.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.7" y="1006.0">Pre..</text>
</g>
<g>
<title>AbstractConfigurationImpl.getMessageInterpolator (9 samples, 0.25%)</title><rect x="260.7" y="979.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.7" y="990.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader (9 samples, 0.25%)</title><rect x="260.7" y="963.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.7" y="974.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.getDefaultMessageInterpolator (9 samples, 0.25%)</title><rect x="260.7" y="947.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.7" y="958.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.getDefaultResourceBundleLocator (1 samples, 0.03%)</title><rect x="260.7" y="931.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.7" y="942.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="260.7" y="915.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.7" y="926.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="260.7" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.7" y="910.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="260.7" y="883.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.7" y="894.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.doGetResourceBundle (1 samples, 0.03%)</title><rect x="260.7" y="867.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.7" y="878.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.loadBundle (1 samples, 0.03%)</title><rect x="260.7" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.7" y="862.0"></text>
</g>
<g>
<title>ResourceBundle.getBundle (1 samples, 0.03%)</title><rect x="260.7" y="835.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.7" y="846.0"></text>
</g>
<g>
<title>ResourceBundle.getBundleImpl (1 samples, 0.03%)</title><rect x="260.7" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.7" y="830.0"></text>
</g>
<g>
<title>ResourceBundle.getBundleImpl (1 samples, 0.03%)</title><rect x="260.7" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.7" y="814.0"></text>
</g>
<g>
<title>ResourceBundle$CacheKey.&lt;init&gt; (1 samples, 0.03%)</title><rect x="260.7" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.7" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="260.7" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="263.7" y="782.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="263.7" y="766.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="739.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="263.7" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="263.7" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="263.7" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="263.7" y="702.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="263.7" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="659.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="263.7" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="263.7" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.7" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="263.7" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="263.7" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="263.7" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="263.7" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="263.7" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="260.7" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="263.7" y="542.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_load(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="260.7" y="515.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="263.7" y="526.0"></text>
</g>
<g>
<title>JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="260.7" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="263.7" y="510.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="260.7" y="483.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="263.7" y="494.0"></text>
</g>
<g>
<title>ResourceBundleMessageInterpolator.&lt;init&gt; (7 samples, 0.20%)</title><rect x="261.2" y="931.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.2" y="942.0"></text>
</g>
<g>
<title>AbstractMessageInterpolator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="261.2" y="915.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="264.2" y="926.0"></text>
</g>
<g>
<title>AbstractMessageInterpolator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="261.2" y="899.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.2" y="910.0"></text>
</g>
<g>
<title>AbstractMessageInterpolator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="261.2" y="883.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.2" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="261.2" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="264.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="264.2" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="264.2" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="264.2" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="264.2" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="264.2" y="798.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="264.2" y="782.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="264.2" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="261.2" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="264.2" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="261.2" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="264.2" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="261.2" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="264.2" y="718.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.&lt;init&gt; (3 samples, 0.08%)</title><rect x="261.6" y="867.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.6" y="878.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="261.6" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.6" y="862.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="261.6" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.6" y="846.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.doGetResourceBundle (2 samples, 0.06%)</title><rect x="261.6" y="819.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.6" y="830.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.loadBundle (2 samples, 0.06%)</title><rect x="261.6" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.6" y="814.0"></text>
</g>
<g>
<title>ResourceBundle.getBundle (2 samples, 0.06%)</title><rect x="261.6" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.6" y="798.0"></text>
</g>
<g>
<title>ResourceBundle.getBundleImpl (2 samples, 0.06%)</title><rect x="261.6" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.6" y="782.0"></text>
</g>
<g>
<title>ResourceBundle.getBundleImpl (2 samples, 0.06%)</title><rect x="261.6" y="755.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.6" y="766.0"></text>
</g>
<g>
<title>ResourceBundle.findBundle (2 samples, 0.06%)</title><rect x="261.6" y="739.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.6" y="750.0"></text>
</g>
<g>
<title>ResourceBundle.findBundle (2 samples, 0.06%)</title><rect x="261.6" y="723.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.6" y="734.0"></text>
</g>
<g>
<title>ResourceBundle.findBundle (1 samples, 0.03%)</title><rect x="261.6" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.6" y="718.0"></text>
</g>
<g>
<title>ResourceBundle.loadBundle (1 samples, 0.03%)</title><rect x="261.6" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.6" y="702.0"></text>
</g>
<g>
<title>ResourceBundle$Control.newBundle (1 samples, 0.03%)</title><rect x="261.6" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.6" y="686.0"></text>
</g>
<g>
<title>PropertyResourceBundle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="261.6" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.6" y="670.0"></text>
</g>
<g>
<title>PropertyResourceBundle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="261.6" y="643.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.6" y="654.0"></text>
</g>
<g>
<title>Properties.load (1 samples, 0.03%)</title><rect x="261.6" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.6" y="638.0"></text>
</g>
<g>
<title>Properties.load0 (1 samples, 0.03%)</title><rect x="261.6" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.6" y="622.0"></text>
</g>
<g>
<title>Properties.loadConvert (1 samples, 0.03%)</title><rect x="261.6" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.6" y="606.0"></text>
</g>
<g>
<title>ResourceBundle.loadBundle (1 samples, 0.03%)</title><rect x="262.1" y="707.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.1" y="718.0"></text>
</g>
<g>
<title>ResourceBundle$Control.newBundle (1 samples, 0.03%)</title><rect x="262.1" y="691.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.1" y="702.0"></text>
</g>
<g>
<title>PropertyResourceBundle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.1" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.1" y="686.0"></text>
</g>
<g>
<title>PropertyResourceBundle.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.1" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.1" y="670.0"></text>
</g>
<g>
<title>Properties.load (1 samples, 0.03%)</title><rect x="262.1" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.1" y="654.0"></text>
</g>
<g>
<title>Properties.load0 (1 samples, 0.03%)</title><rect x="262.1" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.1" y="638.0"></text>
</g>
<g>
<title>Properties$LineReader.readLine (1 samples, 0.03%)</title><rect x="262.1" y="611.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.1" y="622.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.doGetResourceBundle (1 samples, 0.03%)</title><rect x="262.5" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.5" y="862.0"></text>
</g>
<g>
<title>PlatformResourceBundleLocator.loadBundle (1 samples, 0.03%)</title><rect x="262.5" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.5" y="846.0"></text>
</g>
<g>
<title>ResourceBundle.getBundle (1 samples, 0.03%)</title><rect x="262.5" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.5" y="830.0"></text>
</g>
<g>
<title>ResourceBundle.getBundleImpl (1 samples, 0.03%)</title><rect x="262.5" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.5" y="814.0"></text>
</g>
<g>
<title>ResourceBundle.getBundleImpl (1 samples, 0.03%)</title><rect x="262.5" y="787.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.5" y="798.0"></text>
</g>
<g>
<title>ResourceBundle.throwMissingResourceException (1 samples, 0.03%)</title><rect x="262.5" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.5" y="782.0"></text>
</g>
<g>
<title>MissingResourceException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.5" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.5" y="766.0"></text>
</g>
<g>
<title>RuntimeException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.5" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="750.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.5" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.5" y="734.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.5" y="707.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.5" y="718.0"></text>
</g>
<g>
<title>ResourceBundleMessageInterpolator.buildExpressionFactory (3 samples, 0.08%)</title><rect x="262.9" y="915.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.9" y="926.0"></text>
</g>
<g>
<title>ELManager.getExpressionFactory (1 samples, 0.03%)</title><rect x="262.9" y="899.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.9" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="262.9" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="265.9" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="262.9" y="867.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.9" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="265.9" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="265.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="265.9" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="265.9" y="814.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="265.9" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="265.9" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="265.9" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::generate_code_data(methodHandle const&amp;, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="262.9" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="265.9" y="750.0"></text>
</g>
<g>
<title>ResourceBundleMessageInterpolator.canLoadExpressionFactory (2 samples, 0.06%)</title><rect x="263.4" y="899.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="910.0"></text>
</g>
<g>
<title>ExpressionFactory.newInstance (1 samples, 0.03%)</title><rect x="263.4" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.4" y="894.0"></text>
</g>
<g>
<title>ExpressionFactory.newInstance (1 samples, 0.03%)</title><rect x="263.4" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.4" y="878.0"></text>
</g>
<g>
<title>FactoryFinder.find (1 samples, 0.03%)</title><rect x="263.4" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.4" y="862.0"></text>
</g>
<g>
<title>FactoryFinder.newInstance (1 samples, 0.03%)</title><rect x="263.4" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.4" y="846.0"></text>
</g>
<g>
<title>Class.newInstance (1 samples, 0.03%)</title><rect x="263.4" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.4" y="830.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="263.4" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.4" y="814.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="263.4" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.4" y="798.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="263.4" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.4" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="263.4" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.4" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="263.4" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.4" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="263.4" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.4" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="263.4" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.4" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="263.4" y="691.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="266.4" y="702.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="263.4" y="675.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="266.4" y="686.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="263.4" y="659.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="266.4" y="670.0"></text>
</g>
<g>
<title>PerfClassTraceTime::initialize() (1 samples, 0.03%)</title><rect x="263.4" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="266.4" y="654.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.03%)</title><rect x="263.4" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="266.4" y="638.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="263.4" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="266.4" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="263.4" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="266.4" y="606.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="263.4" y="579.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="266.4" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="263.8" y="883.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.8" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="263.8" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.8" y="878.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="263.8" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.8" y="862.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="263.8" y="835.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.8" y="846.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="263.8" y="819.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.8" y="830.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="263.8" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.8" y="814.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="263.8" y="787.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="266.8" y="798.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="263.8" y="771.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="266.8" y="782.0"></text>
</g>
<g>
<title>inflatePrime (1 samples, 0.03%)</title><rect x="263.8" y="755.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="266.8" y="766.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="263.8" y="739.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="266.8" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="263.8" y="723.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="266.8" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.3" y="931.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.3" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.3" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.3" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="264.3" y="899.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.3" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="264.3" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.3" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="264.3" y="867.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="267.3" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="264.3" y="851.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="267.3" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="264.3" y="835.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="267.3" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="264.3" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="267.3" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="264.3" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="267.3" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="264.3" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="267.3" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::check_constraints(unsigned int, InstanceKlass*, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="264.3" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="267.3" y="782.0"></text>
</g>
<g>
<title>stringStream::stringStream(unsigned long) (1 samples, 0.03%)</title><rect x="264.3" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="267.3" y="766.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="264.3" y="739.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="267.3" y="750.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="264.3" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="267.3" y="734.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="264.3" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="267.3" y="718.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="264.3" y="691.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="267.3" y="702.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="264.3" y="675.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="267.3" y="686.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="264.3" y="659.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="267.3" y="670.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="264.3" y="643.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="267.3" y="654.0"></text>
</g>
<g>
<title>ConstraintHelper.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="264.7" y="979.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.7" y="990.0"></text>
</g>
<g>
<title>LoggerFactory.make (1 samples, 0.03%)</title><rect x="264.7" y="963.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.7" y="974.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="264.7" y="947.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="267.7" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="264.7" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.7" y="942.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="264.7" y="915.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.7" y="926.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="264.7" y="899.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.7" y="910.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="264.7" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="894.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="264.7" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.7" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.7" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.7" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.7" y="846.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.7" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.7" y="830.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.7" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.7" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="264.7" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="264.7" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.7" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="264.7" y="755.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.7" y="766.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="264.7" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.7" y="750.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="264.7" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.7" y="734.0"></text>
</g>
<g>
<title>JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="264.7" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.7" y="718.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="264.7" y="691.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.7" y="702.0"></text>
</g>
<g>
<title>JarFile.getEntry0 (1 samples, 0.03%)</title><rect x="264.7" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.7" y="686.0"></text>
</g>
<g>
<title>ZipFile$1.getEntry (1 samples, 0.03%)</title><rect x="264.7" y="659.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.7" y="670.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="264.7" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.7" y="654.0"></text>
</g>
<g>
<title>ZipFile$Source.getEntryPos (1 samples, 0.03%)</title><rect x="264.7" y="627.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.7" y="638.0"></text>
</g>
<g>
<title>ConstraintHelper.forBuiltinConstraints (1 samples, 0.03%)</title><rect x="265.2" y="979.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.2" y="990.0"></text>
</g>
<g>
<title>ConstraintHelper.&lt;init&gt; (1 samples, 0.03%)</title><rect x="265.2" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.2" y="974.0"></text>
</g>
<g>
<title>ConstraintHelper.putBuiltinConstraint (1 samples, 0.03%)</title><rect x="265.2" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.2" y="958.0"></text>
</g>
<g>
<title>ConstraintValidatorDescriptor.forBuiltinClass (1 samples, 0.03%)</title><rect x="265.2" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.2" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="265.2" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.2" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="265.2" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.2" y="910.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="265.2" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.2" y="894.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="265.2" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.2" y="878.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="265.2" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.2" y="862.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="265.2" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.2" y="846.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="265.2" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="268.2" y="830.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="265.2" y="803.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="268.2" y="814.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="265.2" y="787.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="268.2" y="798.0"></text>
</g>
<g>
<title>ExecutableHelper.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="265.6" y="979.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.6" y="990.0"></text>
</g>
<g>
<title>LoggerFactory.make (1 samples, 0.03%)</title><rect x="265.6" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.6" y="974.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="265.6" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.6" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="265.6" y="931.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.6" y="942.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="265.6" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.6" y="926.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="265.6" y="899.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.6" y="910.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.6" y="894.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.6" y="878.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="265.6" y="851.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.6" y="862.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="846.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.6" y="830.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.6" y="814.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="265.6" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="798.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="265.6" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="782.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="265.6" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="766.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.6" y="750.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.6" y="734.0"></text>
</g>
<g>
<title>LogContext.getLogger (1 samples, 0.03%)</title><rect x="265.6" y="707.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.6" y="718.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="265.6" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.6" y="702.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="265.6" y="675.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.6" y="686.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="265.6" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="670.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="265.6" y="643.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.6" y="654.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="265.6" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.6" y="638.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="265.6" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.6" y="622.0"></text>
</g>
<g>
<title>CopyOnWriteMap.putIfAbsent (1 samples, 0.03%)</title><rect x="265.6" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.6" y="606.0"></text>
</g>
<g>
<title>FastCopyHashMap.clone (1 samples, 0.03%)</title><rect x="265.6" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.6" y="590.0"></text>
</g>
<g>
<title>Object.clone (1 samples, 0.03%)</title><rect x="265.6" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.6" y="574.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.03%)</title><rect x="265.6" y="547.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="268.6" y="558.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;540784ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)9, 540784ull&gt;::access_barrier(oopDesc*, oopDesc*, unsigned long) (1 samples, 0.03%)</title><rect x="265.6" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="268.6" y="542.0"></text>
</g>
<g>
<title>acl_CopyRight (1 samples, 0.03%)</title><rect x="265.6" y="515.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="268.6" y="526.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="266.0" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="269.0" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="269.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="269.0" y="958.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="269.0" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="269.0" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="899.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="269.0" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="269.0" y="894.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="266.0" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="269.0" y="878.0"></text>
</g>
<g>
<title>StackMapFrame::is_assignable_to(StackMapFrame const*, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="266.0" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="269.0" y="862.0"></text>
</g>
<g>
<title>VerificationType::is_reference_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="266.0" y="835.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="269.0" y="846.0"></text>
</g>
<g>
<title>VerificationType::resolve_and_check_assignability(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="269.0" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="269.0" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="266.0" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="269.0" y="798.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="266.0" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="269.0" y="782.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="266.0" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="269.0" y="766.0"></text>
</g>
<g>
<title>PredefinedScopeBeanMetaDataManager.&lt;init&gt; (55 samples, 1.54%)</title><rect x="266.5" y="979.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.5" y="990.0">P..</text>
</g>
<g>
<title>AnnotationMetaDataProvider.&lt;init&gt; (12 samples, 0.34%)</title><rect x="266.5" y="963.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.5" y="974.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.retrieveBeanConfiguration (12 samples, 0.34%)</title><rect x="266.5" y="947.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.5" y="958.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getMethodMetaData (11 samples, 0.31%)</title><rect x="266.5" y="931.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.5" y="942.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getMetaData (11 samples, 0.31%)</title><rect x="266.5" y="915.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.5" y="926.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findExecutableMetaData (11 samples, 0.31%)</title><rect x="266.5" y="899.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.5" y="910.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findCascadingMetaData (1 samples, 0.03%)</title><rect x="266.5" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.5" y="894.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getCascadingMetaData (1 samples, 0.03%)</title><rect x="266.5" y="867.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.5" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="266.5" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="269.5" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="266.5" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="269.5" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="269.5" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="269.5" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="269.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="269.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="269.5" y="766.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="269.5" y="750.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="269.5" y="734.0"></text>
</g>
<g>
<title>Rewriter::make_constant_pool_cache(Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="269.5" y="718.0"></text>
</g>
<g>
<title>MetaspaceObj::operator new(unsigned long, ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="266.5" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="269.5" y="702.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraints (4 samples, 0.11%)</title><rect x="266.9" y="883.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.9" y="894.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraints (4 samples, 0.11%)</title><rect x="266.9" y="867.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.9" y="878.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraintAnnotations (1 samples, 0.03%)</title><rect x="266.9" y="851.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.9" y="862.0"></text>
</g>
<g>
<title>ConstraintHelper.isJdkAnnotation (1 samples, 0.03%)</title><rect x="266.9" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.9" y="846.0"></text>
</g>
<g>
<title>Class.getPackage (1 samples, 0.03%)</title><rect x="266.9" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.9" y="830.0"></text>
</g>
<g>
<title>BootLoader.definePackage (1 samples, 0.03%)</title><rect x="266.9" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.9" y="814.0"></text>
</g>
<g>
<title>BootLoader.getDefinedPackage (1 samples, 0.03%)</title><rect x="266.9" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.9" y="798.0"></text>
</g>
<g>
<title>BootLoader$PackageHelper.definePackage (1 samples, 0.03%)</title><rect x="266.9" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.9" y="782.0"></text>
</g>
<g>
<title>BootLoader$PackageHelper.findModule (1 samples, 0.03%)</title><rect x="266.9" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.9" y="766.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="266.9" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.9" y="750.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="266.9" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.9" y="734.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="266.9" y="707.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.9" y="718.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="266.9" y="691.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.9" y="702.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="266.9" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.9" y="686.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="266.9" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.9" y="670.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="266.9" y="643.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.9" y="654.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="266.9" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.9" y="638.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="266.9" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.9" y="622.0"></text>
</g>
<g>
<title>ClassWriter.visitMethod (1 samples, 0.03%)</title><rect x="266.9" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.9" y="606.0"></text>
</g>
<g>
<title>MethodWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="266.9" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.9" y="590.0"></text>
</g>
<g>
<title>MethodVisitor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="266.9" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.9" y="574.0"></text>
</g>
<g>
<title>MethodVisitor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="266.9" y="547.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.9" y="558.0"></text>
</g>
<g>
<title>JavaBeanExecutable.getDeclaredAnnotations (3 samples, 0.08%)</title><rect x="267.4" y="851.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.4" y="862.0"></text>
</g>
<g>
<title>Method.getDeclaredAnnotations (3 samples, 0.08%)</title><rect x="267.4" y="835.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.4" y="846.0"></text>
</g>
<g>
<title>Executable.getDeclaredAnnotations (3 samples, 0.08%)</title><rect x="267.4" y="819.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.4" y="830.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (3 samples, 0.08%)</title><rect x="267.4" y="803.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.4" y="814.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (3 samples, 0.08%)</title><rect x="267.4" y="787.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.4" y="798.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (3 samples, 0.08%)</title><rect x="267.4" y="771.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.4" y="782.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (3 samples, 0.08%)</title><rect x="267.4" y="755.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.4" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (3 samples, 0.08%)</title><rect x="267.4" y="739.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.4" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (2 samples, 0.06%)</title><rect x="267.4" y="723.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.4" y="734.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="267.4" y="707.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.4" y="718.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (2 samples, 0.06%)</title><rect x="267.4" y="691.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.4" y="702.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (2 samples, 0.06%)</title><rect x="267.4" y="675.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="686.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (2 samples, 0.06%)</title><rect x="267.4" y="659.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.4" y="670.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (2 samples, 0.06%)</title><rect x="267.4" y="643.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.4" y="654.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (2 samples, 0.06%)</title><rect x="267.4" y="627.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.4" y="638.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (2 samples, 0.06%)</title><rect x="267.4" y="611.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.4" y="622.0"></text>
</g>
<g>
<title>1615056168.apply (2 samples, 0.06%)</title><rect x="267.4" y="595.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="270.4" y="606.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (2 samples, 0.06%)</title><rect x="267.4" y="579.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.4" y="590.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="267.4" y="563.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.4" y="574.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="267.4" y="547.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="558.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.mapToModule (2 samples, 0.06%)</title><rect x="267.4" y="531.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.4" y="542.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.getDynamicModule (2 samples, 0.06%)</title><rect x="267.4" y="515.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.4" y="526.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (2 samples, 0.06%)</title><rect x="267.4" y="499.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.4" y="510.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (2 samples, 0.06%)</title><rect x="267.4" y="483.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.4" y="494.0"></text>
</g>
<g>
<title>643489709.apply (2 samples, 0.06%)</title><rect x="267.4" y="467.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="270.4" y="478.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.lambda$getDynamicModule$1 (2 samples, 0.06%)</title><rect x="267.4" y="451.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.4" y="462.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="267.4" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.4" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="267.4" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="270.4" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="267.4" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="270.4" y="414.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="267.4" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="270.4" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="267.4" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="270.4" y="382.0"></text>
</g>
<g>
<title>Modules.addExports (1 samples, 0.03%)</title><rect x="267.8" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.8" y="446.0"></text>
</g>
<g>
<title>System$2.addExports (1 samples, 0.03%)</title><rect x="267.8" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.8" y="430.0"></text>
</g>
<g>
<title>Module.implAddExports (1 samples, 0.03%)</title><rect x="267.8" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.8" y="414.0"></text>
</g>
<g>
<title>Module.implAddExportsOrOpens (1 samples, 0.03%)</title><rect x="267.8" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.8" y="398.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="267.8" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.8" y="382.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="267.8" y="355.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.8" y="366.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="267.8" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.8" y="350.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="267.8" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.8" y="334.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="267.8" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.8" y="318.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="267.8" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.8" y="302.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="267.8" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.8" y="286.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="267.8" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.8" y="270.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="267.8" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.8" y="254.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="267.8" y="227.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.8" y="238.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="267.8" y="211.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.8" y="222.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="267.8" y="195.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="270.8" y="206.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="267.8" y="179.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="270.8" y="190.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="267.8" y="163.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="270.8" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="267.8" y="147.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="270.8" y="158.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="267.8" y="131.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="270.8" y="142.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="267.8" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="270.8" y="126.0"></text>
</g>
<g>
<title>oopDesc::slow_identity_hash() (1 samples, 0.03%)</title><rect x="267.8" y="99.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.8" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="267.8" y="83.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="270.8" y="94.0"></text>
</g>
<g>
<title>AnnotationType.getInstance (1 samples, 0.03%)</title><rect x="268.2" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.2" y="734.0"></text>
</g>
<g>
<title>AnnotationType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="268.2" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.2" y="718.0"></text>
</g>
<g>
<title>AnnotationParser.parseSelectAnnotations (1 samples, 0.03%)</title><rect x="268.2" y="691.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.2" y="702.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="268.2" y="675.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.2" y="686.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="268.2" y="659.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.2" y="670.0"></text>
</g>
<g>
<title>AnnotationParser.parseMemberValue (1 samples, 0.03%)</title><rect x="268.2" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.2" y="654.0"></text>
</g>
<g>
<title>AnnotationParser.parseEnumValue (1 samples, 0.03%)</title><rect x="268.2" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="271.2" y="638.0"></text>
</g>
<g>
<title>AnnotationParser.parseSig (1 samples, 0.03%)</title><rect x="268.2" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.2" y="622.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="268.2" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.2" y="606.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="268.2" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.2" y="590.0"></text>
</g>
<g>
<title>CoreReflectionFactory.makeNamedType (1 samples, 0.03%)</title><rect x="268.2" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.2" y="574.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="268.2" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.2" y="558.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="268.2" y="531.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.2" y="542.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="268.2" y="515.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="271.2" y="526.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="268.2" y="499.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="271.2" y="510.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="268.2" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="271.2" y="494.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="268.2" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="271.2" y="478.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="268.2" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="271.2" y="462.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getParameterMetaData (1 samples, 0.03%)</title><rect x="268.7" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.7" y="894.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findTypeAnnotationConstraintsForExecutableParameter (1 samples, 0.03%)</title><rect x="268.7" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.7" y="878.0"></text>
</g>
<g>
<title>JavaBeanParameter.getAnnotatedType (1 samples, 0.03%)</title><rect x="268.7" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.7" y="862.0"></text>
</g>
<g>
<title>Parameter.getAnnotatedType (1 samples, 0.03%)</title><rect x="268.7" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.7" y="846.0"></text>
</g>
<g>
<title>Executable.getAnnotatedParameterTypes (1 samples, 0.03%)</title><rect x="268.7" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.7" y="830.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedTypes (1 samples, 0.03%)</title><rect x="268.7" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.7" y="814.0"></text>
</g>
<g>
<title>Collectors.groupingBy (1 samples, 0.03%)</title><rect x="269.1" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.1" y="894.0"></text>
</g>
<g>
<title>Collectors.groupingBy (1 samples, 0.03%)</title><rect x="269.1" y="867.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.1" y="878.0"></text>
</g>
<g>
<title>Collectors.groupingBy (1 samples, 0.03%)</title><rect x="269.1" y="851.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.1" y="862.0"></text>
</g>
<g>
<title>Collectors.mapMerger (1 samples, 0.03%)</title><rect x="269.1" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.1" y="846.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="269.1" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.1" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="269.1" y="803.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.1" y="814.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="269.1" y="787.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.1" y="798.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="269.1" y="771.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.1" y="782.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="269.1" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.1" y="766.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="269.1" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.1" y="750.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="269.1" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.1" y="734.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="269.1" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.1" y="718.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="269.1" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.1" y="702.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="269.1" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.1" y="686.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="269.1" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.1" y="670.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="269.1" y="643.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="272.1" y="654.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="627.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="272.1" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="272.1" y="622.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="595.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.1" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="579.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="272.1" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="563.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="272.1" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.1" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="269.1" y="531.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="272.1" y="542.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="269.1" y="515.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.1" y="526.0"></text>
</g>
<g>
<title>SignatureIterator::parse_type() (1 samples, 0.03%)</title><rect x="269.1" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.1" y="510.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="269.6" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="272.6" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="269.6" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="272.6" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="272.6" y="862.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at(int, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="272.6" y="846.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at_impl(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="272.6" y="830.0"></text>
</g>
<g>
<title>ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&amp;, int, int, int, objArrayHandle, int, bool, Handle, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="272.6" y="814.0"></text>
</g>
<g>
<title>ConstantPool::resolve_possibly_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="272.6" y="798.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="272.6" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="272.6" y="766.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="272.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="272.6" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="272.6" y="718.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="272.6" y="702.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="272.6" y="686.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="272.6" y="670.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="272.6" y="654.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="272.6" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="269.6" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="272.6" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="269.6" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="272.6" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="269.6" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="272.6" y="590.0"></text>
</g>
<g>
<title>JavaBeanHelper.executable (2 samples, 0.06%)</title><rect x="270.0" y="883.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.0" y="894.0"></text>
</g>
<g>
<title>JavaBeanHelper.executable (2 samples, 0.06%)</title><rect x="270.0" y="867.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.0" y="878.0"></text>
</g>
<g>
<title>JavaBeanHelper.executable (2 samples, 0.06%)</title><rect x="270.0" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.0" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="270.0" y="835.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="273.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="270.0" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="273.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="270.0" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="273.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="270.0" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="273.0" y="798.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="270.0" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="273.0" y="782.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="270.0" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="273.0" y="766.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="270.0" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="273.0" y="750.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="270.0" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="273.0" y="734.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="270.0" y="707.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="273.0" y="718.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="270.0" y="691.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="273.0" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.5" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.5" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.5" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.5" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="270.5" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.5" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="270.5" y="787.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.5" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="270.5" y="771.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="273.5" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="270.5" y="755.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="273.5" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="270.5" y="739.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="273.5" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="270.5" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="273.5" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="270.5" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="273.5" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="270.5" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="273.5" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="270.5" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="273.5" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="270.5" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="273.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_class_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="270.5" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="273.5" y="654.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="270.5" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="273.5" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.9" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.9" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.9" y="867.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.9" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="270.9" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.9" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="270.9" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.9" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.9" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.9" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.9" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.9" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="270.9" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.9" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="270.9" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.9" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.9" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.9" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="270.9" y="739.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.9" y="750.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="270.9" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.9" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="271.3" y="931.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.3" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="271.3" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.3" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="271.3" y="899.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.3" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="271.3" y="883.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.3" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="271.3" y="867.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.3" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="271.3" y="851.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.3" y="862.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="271.3" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.3" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="271.3" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.3" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="271.3" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.3" y="814.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="271.3" y="787.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="274.3" y="798.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="271.3" y="771.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="274.3" y="782.0"></text>
</g>
<g>
<title>PredefinedScopeBeanMetaDataManager.createBeanMetaData (42 samples, 1.18%)</title><rect x="271.8" y="963.0" width="18.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.8" y="974.0"></text>
</g>
<g>
<title>BeanMetaDataBuilder.add (7 samples, 0.20%)</title><rect x="271.8" y="947.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.8" y="958.0"></text>
</g>
<g>
<title>BeanMetaDataBuilder.addMetaDataToBuilder (7 samples, 0.20%)</title><rect x="271.8" y="931.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.8" y="942.0"></text>
</g>
<g>
<title>BeanMetaDataBuilder$BuilderDelegate.&lt;init&gt; (1 samples, 0.03%)</title><rect x="271.8" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.8" y="926.0"></text>
</g>
<g>
<title>PropertyMetaData$Builder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="271.8" y="899.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.8" y="910.0"></text>
</g>
<g>
<title>PropertyMetaData$Builder.add (1 samples, 0.03%)</title><rect x="271.8" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.8" y="894.0"></text>
</g>
<g>
<title>MetaDataBuilder.add (1 samples, 0.03%)</title><rect x="271.8" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.8" y="878.0"></text>
</g>
<g>
<title>AbstractCollection.addAll (1 samples, 0.03%)</title><rect x="271.8" y="851.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.8" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="271.8" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="274.8" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="271.8" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="274.8" y="830.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="271.8" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="274.8" y="814.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="271.8" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="274.8" y="798.0"></text>
</g>
<g>
<title>bool SimpleThresholdPolicy::loop_predicate_helper&lt;(CompLevel)0&gt;(int, int, double, Method*) (1 samples, 0.03%)</title><rect x="271.8" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="274.8" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="271.8" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="274.8" y="766.0"></text>
</g>
<g>
<title>BeanMetaDataBuilder$BuilderDelegate.add (4 samples, 0.11%)</title><rect x="272.2" y="915.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.2" y="926.0"></text>
</g>
<g>
<title>ExecutableMetaData$Builder.accepts (3 samples, 0.08%)</title><rect x="272.2" y="899.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.2" y="910.0"></text>
</g>
<g>
<title>ExecutableMetaData$Builder.isResolvedToSameMethodInHierarchy (3 samples, 0.08%)</title><rect x="272.2" y="883.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="275.2" y="894.0"></text>
</g>
<g>
<title>JavaBeanExecutable.isResolvedToSameMethodInHierarchy (3 samples, 0.08%)</title><rect x="272.2" y="867.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="878.0"></text>
</g>
<g>
<title>ExecutableHelper.isResolvedToSameMethodInHierarchy (3 samples, 0.08%)</title><rect x="272.2" y="851.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.2" y="862.0"></text>
</g>
<g>
<title>ExecutableHelper.instanceMethodParametersResolveToSameTypes (3 samples, 0.08%)</title><rect x="272.2" y="835.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.2" y="846.0"></text>
</g>
<g>
<title>ExecutableHelper.run (1 samples, 0.03%)</title><rect x="272.2" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="830.0"></text>
</g>
<g>
<title>GetResolvedMemberMethods.run (1 samples, 0.03%)</title><rect x="272.2" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.2" y="814.0"></text>
</g>
<g>
<title>GetResolvedMemberMethods.run (1 samples, 0.03%)</title><rect x="272.2" y="787.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.2" y="798.0"></text>
</g>
<g>
<title>ResolvedTypeWithMembers.getMemberMethods (1 samples, 0.03%)</title><rect x="272.2" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.2" y="782.0"></text>
</g>
<g>
<title>ResolvedTypeWithMembers.resolveMemberMethods (1 samples, 0.03%)</title><rect x="272.2" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="766.0"></text>
</g>
<g>
<title>ResolvedTypeWithMembers.resolveMethod (1 samples, 0.03%)</title><rect x="272.2" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="272.2" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="275.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="272.2" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="275.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="272.2" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="275.2" y="702.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="272.2" y="675.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="275.2" y="686.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="272.2" y="659.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="275.2" y="670.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="272.2" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="275.2" y="654.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="272.2" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="275.2" y="638.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="272.2" y="611.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="275.2" y="622.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="272.7" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="275.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="272.7" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="275.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="272.7" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="275.7" y="798.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="272.7" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="275.7" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="272.7" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="275.7" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="272.7" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="275.7" y="750.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="272.7" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="275.7" y="734.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="272.7" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="275.7" y="718.0"></text>
</g>
<g>
<title>MemberResolver.resolve (1 samples, 0.03%)</title><rect x="273.1" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.1" y="830.0"></text>
</g>
<g>
<title>ResolvedTypeWithMembers.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="273.1" y="803.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.1" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="273.1" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.1" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="273.1" y="771.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.1" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="273.1" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.1" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="273.1" y="739.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.1" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="273.1" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.1" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="273.1" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.1" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="273.1" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.1" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="273.1" y="675.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.1" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="273.1" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.1" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="273.1" y="643.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.1" y="654.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="273.1" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.1" y="638.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="273.1" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.1" y="622.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="273.1" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.1" y="606.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="273.1" y="579.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.1" y="590.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="273.1" y="563.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="276.1" y="574.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="273.1" y="547.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="276.1" y="558.0"></text>
</g>
<g>
<title>ExecutableMetaData$Builder.add (1 samples, 0.03%)</title><rect x="273.6" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.6" y="910.0"></text>
</g>
<g>
<title>CascadingMetaDataBuilder.merge (1 samples, 0.03%)</title><rect x="273.6" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.6" y="894.0"></text>
</g>
<g>
<title>Collectors.toMap (1 samples, 0.03%)</title><rect x="273.6" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.6" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="273.6" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="276.6" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="273.6" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="276.6" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="273.6" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="276.6" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_dynamic_call(CallInfo&amp;, int, Handle, Symbol*, Symbol*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="273.6" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="276.6" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::find_dynamic_call_site_invoker(Klass*, int, Handle, Symbol*, Symbol*, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="273.6" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="276.6" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_type(Symbol*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="273.6" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="276.6" y="782.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.03%)</title><rect x="273.6" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="276.6" y="766.0"></text>
</g>
<g>
<title>HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="274.0" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.0" y="926.0"></text>
</g>
<g>
<title>HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="274.0" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.0" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="274.4" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.4" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="274.4" y="899.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="274.4" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="274.4" y="867.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.4" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="274.4" y="851.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="277.4" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="274.4" y="835.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="277.4" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="274.4" y="819.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="277.4" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="274.4" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="277.4" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="274.4" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="277.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="274.4" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="277.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="274.4" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="277.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_classfile_attributes(ClassFileStream const*, ConstantPool*, ClassFileParser::ClassAnnotationCollector*, Thread*) (1 samples, 0.03%)</title><rect x="274.4" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="277.4" y="750.0"></text>
</g>
<g>
<title>BeanMetaDataBuilder.build (11 samples, 0.31%)</title><rect x="274.9" y="947.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.9" y="958.0"></text>
</g>
<g>
<title>BeanMetaDataBuilder$BuilderDelegate.build (9 samples, 0.25%)</title><rect x="274.9" y="931.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.9" y="942.0"></text>
</g>
<g>
<title>ExecutableMetaData$Builder.build (7 samples, 0.20%)</title><rect x="274.9" y="915.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.9" y="926.0"></text>
</g>
<g>
<title>ExecutableMetaData$Builder.assertCorrectnessOfConfiguration (1 samples, 0.03%)</title><rect x="274.9" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.9" y="910.0"></text>
</g>
<g>
<title>Collections$UnmodifiableCollection$1.next (1 samples, 0.03%)</title><rect x="274.9" y="883.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.9" y="894.0"></text>
</g>
<g>
<title>HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="274.9" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.9" y="878.0"></text>
</g>
<g>
<title>HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="274.9" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.9" y="862.0"></text>
</g>
<g>
<title>ExecutableMetaData$Builder.findParameterMetaData (1 samples, 0.03%)</title><rect x="275.3" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.3" y="910.0"></text>
</g>
<g>
<title>ParameterMetaData$Builder.build (1 samples, 0.03%)</title><rect x="275.3" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="275.3" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.3" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="275.3" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.3" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="275.3" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.3" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="275.3" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.3" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="275.3" y="803.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="278.3" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="275.3" y="787.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="278.3" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="771.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="278.3" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.3" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.3" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="278.3" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.3" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="278.3" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="278.3" y="686.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="659.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="278.3" y="670.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="278.3" y="654.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="275.3" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="278.3" y="638.0"></text>
</g>
<g>
<title>ExecutableMetaData.&lt;init&gt; (4 samples, 0.11%)</title><rect x="275.8" y="899.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.8" y="910.0"></text>
</g>
<g>
<title>ExecutableMetaData.&lt;init&gt; (4 samples, 0.11%)</title><rect x="275.8" y="883.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.8" y="894.0"></text>
</g>
<g>
<title>AbstractConstraintMetaData.&lt;init&gt; (2 samples, 0.06%)</title><rect x="275.8" y="867.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.8" y="878.0"></text>
</g>
<g>
<title>Collectors.collectingAndThen (2 samples, 0.06%)</title><rect x="275.8" y="851.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.8" y="862.0"></text>
</g>
<g>
<title>RegularEnumSet.remove (2 samples, 0.06%)</title><rect x="275.8" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="278.8" y="846.0"></text>
</g>
<g>
<title>Object.getClass (1 samples, 0.03%)</title><rect x="276.2" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.2" y="830.0"></text>
</g>
<g>
<title>jni_GetObjectClass (1 samples, 0.03%)</title><rect x="276.2" y="803.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="279.2" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="276.2" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="279.2" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="276.2" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="279.2" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="276.2" y="755.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="279.2" y="766.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="276.2" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="279.2" y="750.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="276.2" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="279.2" y="734.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="276.2" y="707.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="279.2" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="276.6" y="867.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="279.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="276.6" y="851.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="279.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="276.6" y="835.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="279.6" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="276.6" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="279.6" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="276.6" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.6" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="276.6" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="279.6" y="798.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="276.6" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="279.6" y="782.0"></text>
</g>
<g>
<title>ReturnValueMetaData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="277.1" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.1" y="878.0"></text>
</g>
<g>
<title>AbstractConstraintMetaData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="277.1" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.1" y="862.0"></text>
</g>
<g>
<title>ReferencePipeline.collect (1 samples, 0.03%)</title><rect x="277.1" y="835.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.1" y="846.0"></text>
</g>
<g>
<title>1756573246.apply (1 samples, 0.03%)</title><rect x="277.1" y="819.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="280.1" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="277.1" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="280.1" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="277.1" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.1" y="798.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="277.1" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="280.1" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="277.5" y="899.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="277.5" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.5" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="277.5" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.5" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="277.5" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.5" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="277.5" y="835.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="280.5" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="277.5" y="819.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="280.5" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="803.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="280.5" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="280.5" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.5" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="280.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="280.5" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="280.5" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="277.5" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="280.5" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="277.5" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="280.5" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="277.5" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.5" y="686.0"></text>
</g>
<g>
<title>PropertyMetaData$Builder.build (2 samples, 0.06%)</title><rect x="278.0" y="915.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.0" y="926.0"></text>
</g>
<g>
<title>PropertyMetaData$Builder.build (2 samples, 0.06%)</title><rect x="278.0" y="899.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.0" y="910.0"></text>
</g>
<g>
<title>PropertyMetaData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="278.0" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.0" y="894.0"></text>
</g>
<g>
<title>PropertyMetaData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="278.0" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.0" y="878.0"></text>
</g>
<g>
<title>AbstractConstraintMetaData.&lt;init&gt; (1 samples, 0.03%)</title><rect x="278.0" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="281.0" y="862.0"></text>
</g>
<g>
<title>ReferencePipeline.collect (1 samples, 0.03%)</title><rect x="278.0" y="835.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.0" y="846.0"></text>
</g>
<g>
<title>AbstractPipeline.evaluate (1 samples, 0.03%)</title><rect x="278.0" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.0" y="830.0"></text>
</g>
<g>
<title>ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.03%)</title><rect x="278.0" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.0" y="814.0"></text>
</g>
<g>
<title>AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="278.0" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.0" y="798.0"></text>
</g>
<g>
<title>AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="278.0" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.0" y="782.0"></text>
</g>
<g>
<title>Spliterator.getExactSizeIfKnown (1 samples, 0.03%)</title><rect x="278.0" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.0" y="766.0"></text>
</g>
<g>
<title>Streams$ConcatSpliterator.estimateSize (1 samples, 0.03%)</title><rect x="278.0" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.0" y="750.0"></text>
</g>
<g>
<title>HashMap$HashMapSpliterator.estimateSize (1 samples, 0.03%)</title><rect x="278.0" y="723.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.0" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="278.4" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.4" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="278.4" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.4" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="278.4" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.4" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="278.4" y="835.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.4" y="846.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="278.4" y="819.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="281.4" y="830.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="278.4" y="803.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="281.4" y="814.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="787.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="281.4" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="281.4" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="281.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="281.4" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="281.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="707.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="281.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="278.4" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="281.4" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="278.4" y="675.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="281.4" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="278.4" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="281.4" y="670.0"></text>
</g>
<g>
<title>BeanMetaDataImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="278.9" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="942.0"></text>
</g>
<g>
<title>BeanMetaDataImpl.getDefaultGroupSequenceData (1 samples, 0.03%)</title><rect x="278.9" y="915.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.9" y="926.0"></text>
</g>
<g>
<title>ValidationOrder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="278.9" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.9" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="278.9" y="883.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.9" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="278.9" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.9" y="878.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="278.9" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="862.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="278.9" y="835.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.9" y="846.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="278.9" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.9" y="830.0"></text>
</g>
<g>
<title>ZipFile.getZipEntry (1 samples, 0.03%)</title><rect x="278.9" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.9" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="279.3" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.3" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="279.3" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.3" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="279.3" y="899.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.3" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="279.3" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.3" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="279.3" y="867.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="282.3" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="279.3" y="851.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="282.3" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="835.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="282.3" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="282.3" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="282.3" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.3" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="282.3" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="282.3" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="279.3" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="282.3" y="750.0"></text>
</g>
<g>
<title>PredefinedScopeBeanMetaDataManager.getBeanConfigurationForHierarchy (24 samples, 0.67%)</title><rect x="279.7" y="947.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.7" y="958.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getBeanConfiguration (24 samples, 0.67%)</title><rect x="279.7" y="931.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.7" y="942.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.retrieveBeanConfiguration (24 samples, 0.67%)</title><rect x="279.7" y="915.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.7" y="926.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getClassLevelConstraints (2 samples, 0.06%)</title><rect x="279.7" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.7" y="910.0"></text>
</g>
<g>
<title>Class.getDeclaredAnnotations (2 samples, 0.06%)</title><rect x="279.7" y="883.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.7" y="894.0"></text>
</g>
<g>
<title>Class.annotationData (2 samples, 0.06%)</title><rect x="279.7" y="867.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.7" y="878.0"></text>
</g>
<g>
<title>Class.createAnnotationData (2 samples, 0.06%)</title><rect x="279.7" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.7" y="862.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="279.7" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.7" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="279.7" y="819.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="279.7" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.7" y="814.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="279.7" y="787.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.7" y="798.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="279.7" y="771.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.7" y="782.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="279.7" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.7" y="766.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="279.7" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.7" y="750.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="279.7" y="723.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.7" y="734.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="279.7" y="707.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.7" y="718.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="279.7" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.7" y="702.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="279.7" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="686.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="279.7" y="659.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="282.7" y="670.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="279.7" y="643.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.7" y="654.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="279.7" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="638.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="279.7" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.7" y="622.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="279.7" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.7" y="606.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="279.7" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.7" y="590.0"></text>
</g>
<g>
<title>ProxyGenerator$ProxyMethod.generateMethod (1 samples, 0.03%)</title><rect x="279.7" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.7" y="574.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getInterfaceMethodRef (1 samples, 0.03%)</title><rect x="279.7" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.7" y="558.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getNameAndType (1 samples, 0.03%)</title><rect x="279.7" y="531.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.7" y="542.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getUtf8 (1 samples, 0.03%)</title><rect x="279.7" y="515.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.7" y="526.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getValue (1 samples, 0.03%)</title><rect x="279.7" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.7" y="510.0"></text>
</g>
<g>
<title>HashMap.put (1 samples, 0.03%)</title><rect x="279.7" y="483.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.7" y="494.0"></text>
</g>
<g>
<title>HashMap.putVal (1 samples, 0.03%)</title><rect x="279.7" y="467.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.7" y="478.0"></text>
</g>
<g>
<title>HashMap.resize (1 samples, 0.03%)</title><rect x="279.7" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.7" y="462.0"></text>
</g>
<g>
<title>LinkedHashMap.entrySet (1 samples, 0.03%)</title><rect x="280.2" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.2" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="280.2" y="819.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="283.2" y="830.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="283.2" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="283.2" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="283.2" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.2" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="283.2" y="750.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="283.2" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.2" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="283.2" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.2" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="283.2" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="280.2" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="283.2" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="280.2" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="283.2" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="280.2" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.2" y="622.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getFieldMetaData (17 samples, 0.48%)</title><rect x="280.6" y="899.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.6" y="910.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findPropertyMetaData (16 samples, 0.45%)</title><rect x="280.6" y="883.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.6" y="894.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.convertToMetaConstraints (4 samples, 0.11%)</title><rect x="280.6" y="867.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.6" y="878.0"></text>
</g>
<g>
<title>MetaConstraints.create (3 samples, 0.08%)</title><rect x="280.6" y="851.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.6" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="280.6" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="283.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="283.6" y="814.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="283.6" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="283.6" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="283.6" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="283.6" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::load_class(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="723.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.6" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="707.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="283.6" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="280.6" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.6" y="702.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.03%)</title><rect x="280.6" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="283.6" y="686.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::is_reflection_class_loader(oopDesc*) (1 samples, 0.03%)</title><rect x="280.6" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="283.6" y="670.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="281.1" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="284.1" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="281.1" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="284.1" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="281.1" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="284.1" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="281.1" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="284.1" y="798.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="281.1" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="284.1" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="281.1" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="284.1" y="766.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="281.1" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="284.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="281.1" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="284.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="281.1" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="284.1" y="718.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="281.1" y="691.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="284.1" y="702.0"></text>
</g>
<g>
<title>MetaConstraint.&lt;init&gt; (1 samples, 0.03%)</title><rect x="281.5" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.5" y="846.0"></text>
</g>
<g>
<title>ConstraintTree.of (1 samples, 0.03%)</title><rect x="281.5" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.5" y="830.0"></text>
</g>
<g>
<title>SimpleConstraintTree.&lt;init&gt; (1 samples, 0.03%)</title><rect x="281.5" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.5" y="814.0"></text>
</g>
<g>
<title>ConstraintTree.&lt;init&gt; (1 samples, 0.03%)</title><rect x="281.5" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.5" y="798.0"></text>
</g>
<g>
<title>PredefinedScopeConstraintValidatorManagerImpl.getInitializedValidator (1 samples, 0.03%)</title><rect x="281.5" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.5" y="782.0"></text>
</g>
<g>
<title>AbstractConstraintValidatorManagerImpl.createAndInitializeValidator (1 samples, 0.03%)</title><rect x="281.5" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.5" y="766.0"></text>
</g>
<g>
<title>AbstractConstraintValidatorManagerImpl.findMatchingValidatorDescriptor (1 samples, 0.03%)</title><rect x="281.5" y="739.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.5" y="750.0"></text>
</g>
<g>
<title>TypeHelper.getValidatorTypes (1 samples, 0.03%)</title><rect x="281.5" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.5" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="282.0" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.0" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="282.0" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="285.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="282.0" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.0" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="282.0" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.0" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="282.0" y="787.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="285.0" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="282.0" y="771.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="285.0" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="755.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="285.0" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="285.0" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="285.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="285.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="285.0" y="702.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="285.0" y="686.0"></text>
</g>
<g>
<title>Klass::set_java_mirror(Handle) (1 samples, 0.03%)</title><rect x="282.0" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="285.0" y="670.0"></text>
</g>
<g>
<title>ClassLoaderData::add_handle(Handle) (1 samples, 0.03%)</title><rect x="282.0" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="285.0" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="282.0" y="627.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="285.0" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="282.0" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="285.0" y="622.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="282.0" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="285.0" y="606.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraints (11 samples, 0.31%)</title><rect x="282.4" y="867.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.4" y="878.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraints (11 samples, 0.31%)</title><rect x="282.4" y="851.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.4" y="862.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraintAnnotations (6 samples, 0.17%)</title><rect x="282.4" y="835.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.4" y="846.0"></text>
</g>
<g>
<title>Collection.stream (1 samples, 0.03%)</title><rect x="282.4" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.4" y="830.0"></text>
</g>
<g>
<title>StreamSupport.stream (1 samples, 0.03%)</title><rect x="282.4" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.4" y="814.0"></text>
</g>
<g>
<title>ConstraintHelper.isConstraintAnnotation (1 samples, 0.03%)</title><rect x="282.8" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.8" y="830.0"></text>
</g>
<g>
<title>Class.getAnnotation (1 samples, 0.03%)</title><rect x="282.8" y="803.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.8" y="814.0"></text>
</g>
<g>
<title>Class.annotationData (1 samples, 0.03%)</title><rect x="282.8" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.8" y="798.0"></text>
</g>
<g>
<title>Class.createAnnotationData (1 samples, 0.03%)</title><rect x="282.8" y="771.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.8" y="782.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="282.8" y="755.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.8" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="282.8" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.8" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="282.8" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.8" y="734.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="282.8" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.8" y="718.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="282.8" y="691.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.8" y="702.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="282.8" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.8" y="686.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="282.8" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.8" y="670.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="282.8" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.8" y="654.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="282.8" y="627.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.8" y="638.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="282.8" y="611.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.8" y="622.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="282.8" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.8" y="606.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="282.8" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.8" y="590.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (1 samples, 0.03%)</title><rect x="282.8" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.8" y="574.0"></text>
</g>
<g>
<title>$Proxy16.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="282.8" y="547.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="285.8" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="282.8" y="531.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="285.8" y="542.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="282.8" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="285.8" y="526.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="282.8" y="499.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="285.8" y="510.0"></text>
</g>
<g>
<title>EnableIf&lt;AccessInternal::MustConvertCompressedOop&lt;2670710ull, oopDesc*&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;2670710ull&gt;::decode_internal&lt;2670710ull, oopDesc*&gt;(HeapOopType&lt;2670710ull&gt;::type) (1 samples, 0.03%)</title><rect x="282.8" y="483.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="285.8" y="494.0"></text>
</g>
<g>
<title>ReferencePipeline.collect (4 samples, 0.11%)</title><rect x="283.3" y="819.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.3" y="830.0"></text>
</g>
<g>
<title>AbstractPipeline.evaluate (4 samples, 0.11%)</title><rect x="283.3" y="803.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.3" y="814.0"></text>
</g>
<g>
<title>ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.11%)</title><rect x="283.3" y="787.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.3" y="798.0"></text>
</g>
<g>
<title>AbstractPipeline.wrapAndCopyInto (4 samples, 0.11%)</title><rect x="283.3" y="771.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.3" y="782.0"></text>
</g>
<g>
<title>AbstractPipeline.copyInto (4 samples, 0.11%)</title><rect x="283.3" y="755.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.3" y="766.0"></text>
</g>
<g>
<title>ArrayList$ArrayListSpliterator.forEachRemaining (4 samples, 0.11%)</title><rect x="283.3" y="739.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.3" y="750.0"></text>
</g>
<g>
<title>ReferencePipeline$3$1.accept (4 samples, 0.11%)</title><rect x="283.3" y="723.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.3" y="734.0"></text>
</g>
<g>
<title>1266265220.apply (4 samples, 0.11%)</title><rect x="283.3" y="707.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="286.3" y="718.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.lambda$findConstraintAnnotations$0 (4 samples, 0.11%)</title><rect x="283.3" y="691.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.3" y="702.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.buildConstraintDescriptor (4 samples, 0.11%)</title><rect x="283.3" y="675.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.3" y="686.0"></text>
</g>
<g>
<title>ConstraintDescriptorImpl.&lt;init&gt; (3 samples, 0.08%)</title><rect x="283.3" y="659.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.3" y="670.0"></text>
</g>
<g>
<title>ConstraintDescriptorImpl.&lt;init&gt; (3 samples, 0.08%)</title><rect x="283.3" y="643.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.3" y="654.0"></text>
</g>
<g>
<title>Class.isAnnotationPresent (1 samples, 0.03%)</title><rect x="283.3" y="627.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.3" y="638.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (1 samples, 0.03%)</title><rect x="283.3" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.3" y="622.0"></text>
</g>
<g>
<title>Class.getAnnotation (1 samples, 0.03%)</title><rect x="283.3" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.3" y="606.0"></text>
</g>
<g>
<title>Class.annotationData (1 samples, 0.03%)</title><rect x="283.3" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="286.3" y="590.0"></text>
</g>
<g>
<title>Class.createAnnotationData (1 samples, 0.03%)</title><rect x="283.3" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="574.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="283.3" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="558.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="283.3" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.3" y="542.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="283.3" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.3" y="526.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="283.3" y="499.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.3" y="510.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="283.3" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.3" y="494.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="283.3" y="467.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.3" y="478.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="283.3" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.3" y="462.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="283.3" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.3" y="446.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="283.3" y="419.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="286.3" y="430.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="283.3" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.3" y="414.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="283.3" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.3" y="398.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="283.3" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.3" y="382.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (1 samples, 0.03%)</title><rect x="283.3" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.3" y="366.0"></text>
</g>
<g>
<title>$Proxy17.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="283.3" y="339.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="286.3" y="350.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="283.3" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.3" y="334.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="283.3" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.3" y="318.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="283.3" y="291.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="286.3" y="302.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="283.3" y="275.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="286.3" y="286.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="283.3" y="259.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="286.3" y="270.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="283.3" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="286.3" y="254.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="283.3" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="286.3" y="238.0"></text>
</g>
<g>
<title>ConstraintDescriptorImpl.determineValidationAppliesTo (1 samples, 0.03%)</title><rect x="283.7" y="627.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.7" y="638.0"></text>
</g>
<g>
<title>ConstraintAnnotationDescriptor.getValidationAppliesTo (1 samples, 0.03%)</title><rect x="283.7" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.7" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="283.7" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.7" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="283.7" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.7" y="590.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="283.7" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.7" y="574.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="283.7" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.7" y="558.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="283.7" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.7" y="542.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="283.7" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.7" y="526.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="283.7" y="499.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="286.7" y="510.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="283.7" y="483.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="286.7" y="494.0"></text>
</g>
<g>
<title>ConstraintHelper.findValidatorDescriptors (1 samples, 0.03%)</title><rect x="284.2" y="627.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.2" y="638.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="284.2" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.2" y="622.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="284.2" y="595.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.2" y="606.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="284.2" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="590.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.03%)</title><rect x="284.2" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.2" y="574.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="284.2" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.2" y="558.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="284.2" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="542.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="284.2" y="515.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.2" y="526.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="284.2" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.2" y="510.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="284.2" y="483.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.2" y="494.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="284.2" y="467.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.2" y="478.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="284.2" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.2" y="462.0"></text>
</g>
<g>
<title>MethodHandleNatives.resolve (1 samples, 0.03%)</title><rect x="284.2" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.2" y="446.0"></text>
</g>
<g>
<title>MHN_resolve_Mem (1 samples, 0.03%)</title><rect x="284.2" y="419.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="287.2" y="430.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="284.2" y="403.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.2" y="414.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="284.2" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="287.2" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="284.2" y="371.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.2" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="284.2" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="287.2" y="366.0"></text>
</g>
<g>
<title>LinkResolver::lookup_polymorphic_method(LinkInfo const&amp;, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="284.2" y="339.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="287.2" y="350.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="284.2" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="287.2" y="334.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="284.2" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.2" y="318.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.03%)</title><rect x="284.2" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="287.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="284.2" y="275.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="287.2" y="286.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="284.6" y="659.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.6" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="284.6" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.6" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="284.6" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.6" y="638.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="284.6" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.6" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="284.6" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.6" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="284.6" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.6" y="590.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="284.6" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.6" y="574.0"></text>
</g>
<g>
<title>JavaBeanField.getDeclaredAnnotations (5 samples, 0.14%)</title><rect x="285.1" y="835.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.1" y="846.0"></text>
</g>
<g>
<title>Field.getDeclaredAnnotations (5 samples, 0.14%)</title><rect x="285.1" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.1" y="830.0"></text>
</g>
<g>
<title>Field.declaredAnnotations (5 samples, 0.14%)</title><rect x="285.1" y="803.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.1" y="814.0"></text>
</g>
<g>
<title>Field.declaredAnnotations (5 samples, 0.14%)</title><rect x="285.1" y="787.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="798.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (5 samples, 0.14%)</title><rect x="285.1" y="771.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="782.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (5 samples, 0.14%)</title><rect x="285.1" y="755.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.1" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (5 samples, 0.14%)</title><rect x="285.1" y="739.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (2 samples, 0.06%)</title><rect x="285.1" y="723.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="734.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="285.1" y="707.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.1" y="718.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (2 samples, 0.06%)</title><rect x="285.1" y="691.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.1" y="702.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (2 samples, 0.06%)</title><rect x="285.1" y="675.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.1" y="686.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (2 samples, 0.06%)</title><rect x="285.1" y="659.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.1" y="670.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (2 samples, 0.06%)</title><rect x="285.1" y="643.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.1" y="654.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (2 samples, 0.06%)</title><rect x="285.1" y="627.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.1" y="638.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (2 samples, 0.06%)</title><rect x="285.1" y="611.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.1" y="622.0"></text>
</g>
<g>
<title>1615056168.apply (2 samples, 0.06%)</title><rect x="285.1" y="595.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="288.1" y="606.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (2 samples, 0.06%)</title><rect x="285.1" y="579.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.1" y="590.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (2 samples, 0.06%)</title><rect x="285.1" y="563.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.1" y="574.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (2 samples, 0.06%)</title><rect x="285.1" y="547.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.1" y="558.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (2 samples, 0.06%)</title><rect x="285.1" y="531.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.1" y="542.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (2 samples, 0.06%)</title><rect x="285.1" y="515.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.1" y="526.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.write (2 samples, 0.06%)</title><rect x="285.1" y="499.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.1" y="510.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool$ValueEntry.write (2 samples, 0.06%)</title><rect x="285.1" y="483.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.1" y="494.0"></text>
</g>
<g>
<title>DataOutputStream.writeUTF (2 samples, 0.06%)</title><rect x="285.1" y="467.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.1" y="478.0"></text>
</g>
<g>
<title>DataOutputStream.writeUTF (2 samples, 0.06%)</title><rect x="285.1" y="451.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="462.0"></text>
</g>
<g>
<title>DataOutputStream.write (1 samples, 0.03%)</title><rect x="285.1" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.1" y="446.0"></text>
</g>
<g>
<title>DataOutputStream.write (1 samples, 0.03%)</title><rect x="285.1" y="419.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.1" y="430.0"></text>
</g>
<g>
<title>ByteArrayOutputStream.write (1 samples, 0.03%)</title><rect x="285.1" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.1" y="414.0"></text>
</g>
<g>
<title>ByteArrayOutputStream.ensureCapacity (1 samples, 0.03%)</title><rect x="285.1" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.1" y="398.0"></text>
</g>
<g>
<title>ByteArrayOutputStream.grow (1 samples, 0.03%)</title><rect x="285.1" y="371.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.1" y="382.0"></text>
</g>
<g>
<title>Arrays.copyOf (1 samples, 0.03%)</title><rect x="285.1" y="355.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.1" y="366.0"></text>
</g>
<g>
<title>String.charAt (1 samples, 0.03%)</title><rect x="285.5" y="435.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.5" y="446.0"></text>
</g>
<g>
<title>String.isLatin1 (1 samples, 0.03%)</title><rect x="285.5" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.5" y="430.0"></text>
</g>
<g>
<title>AnnotationParser.parseSig (1 samples, 0.03%)</title><rect x="285.9" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.9" y="734.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="285.9" y="707.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.9" y="718.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="285.9" y="691.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.9" y="702.0"></text>
</g>
<g>
<title>CoreReflectionFactory.makeNamedType (1 samples, 0.03%)</title><rect x="285.9" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.9" y="686.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="285.9" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.9" y="670.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="285.9" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.9" y="654.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="285.9" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.9" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="285.9" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.9" y="622.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="285.9" y="595.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.9" y="606.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="285.9" y="579.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.9" y="590.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="285.9" y="563.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="288.9" y="574.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="285.9" y="547.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="288.9" y="558.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="531.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="288.9" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="515.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.9" y="526.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="288.9" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="288.9" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="467.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="288.9" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="451.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="288.9" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="285.9" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="288.9" y="446.0"></text>
</g>
<g>
<title>AnnotationType.getInstance (2 samples, 0.06%)</title><rect x="286.4" y="723.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.4" y="734.0"></text>
</g>
<g>
<title>AnnotationType.&lt;init&gt; (2 samples, 0.06%)</title><rect x="286.4" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.4" y="718.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="286.4" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.4" y="702.0"></text>
</g>
<g>
<title>AnnotationType$1.run (1 samples, 0.03%)</title><rect x="286.4" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.4" y="686.0"></text>
</g>
<g>
<title>AnnotationType$1.run (1 samples, 0.03%)</title><rect x="286.4" y="659.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.4" y="670.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods (1 samples, 0.03%)</title><rect x="286.4" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.4" y="654.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="286.4" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.4" y="638.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="286.4" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.4" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="286.4" y="595.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.4" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="286.4" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.4" y="590.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="286.4" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.4" y="574.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="286.4" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.4" y="558.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="286.4" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.4" y="542.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="286.4" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.4" y="526.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="286.4" y="499.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="289.4" y="510.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="286.4" y="483.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="289.4" y="494.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="286.4" y="467.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="289.4" y="478.0"></text>
</g>
<g>
<title>AnnotationParser.parseSelectAnnotations (1 samples, 0.03%)</title><rect x="286.8" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.8" y="702.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="286.8" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.8" y="686.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="286.8" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.8" y="670.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="286.8" y="643.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.8" y="654.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="286.8" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.8" y="638.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="286.8" y="611.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.8" y="622.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="286.8" y="595.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="606.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="286.8" y="579.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.8" y="590.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="286.8" y="563.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.8" y="574.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="286.8" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.8" y="558.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="286.8" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="542.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="286.8" y="515.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.8" y="526.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generateConstructor (1 samples, 0.03%)</title><rect x="286.8" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.8" y="510.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generate (1 samples, 0.03%)</title><rect x="286.8" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.8" y="494.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="287.3" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.3" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="287.3" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.3" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="287.3" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.3" y="846.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="287.3" y="819.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.3" y="830.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="287.3" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.3" y="814.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="287.3" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.3" y="798.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.run (1 samples, 0.03%)</title><rect x="287.7" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.7" y="894.0"></text>
</g>
<g>
<title>GetDeclaredFields.run (1 samples, 0.03%)</title><rect x="287.7" y="867.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.7" y="878.0"></text>
</g>
<g>
<title>GetDeclaredFields.run (1 samples, 0.03%)</title><rect x="287.7" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.7" y="862.0"></text>
</g>
<g>
<title>Class.getDeclaredFields (1 samples, 0.03%)</title><rect x="287.7" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.7" y="846.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredFields (1 samples, 0.03%)</title><rect x="287.7" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.7" y="830.0"></text>
</g>
<g>
<title>Class.getDeclaredFields0 (1 samples, 0.03%)</title><rect x="287.7" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.7" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="287.7" y="787.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.7" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="287.7" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.7" y="782.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="287.7" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.7" y="766.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.close (1 samples, 0.03%)</title><rect x="287.7" y="739.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.7" y="750.0"></text>
</g>
<g>
<title>PhantomCleanable.clean (1 samples, 0.03%)</title><rect x="287.7" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.7" y="734.0"></text>
</g>
<g>
<title>CleanerImpl$PhantomCleanableRef.performCleanup (1 samples, 0.03%)</title><rect x="287.7" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.7" y="718.0"></text>
</g>
<g>
<title>ZipFile$InflaterCleanupAction.run (1 samples, 0.03%)</title><rect x="287.7" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.7" y="702.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.releaseInflater (1 samples, 0.03%)</title><rect x="287.7" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.7" y="686.0"></text>
</g>
<g>
<title>Inflater.reset (1 samples, 0.03%)</title><rect x="287.7" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.7" y="670.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getMethodMetaData (5 samples, 0.14%)</title><rect x="288.1" y="899.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.1" y="910.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getMetaData (5 samples, 0.14%)</title><rect x="288.1" y="883.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.1" y="894.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findExecutableMetaData (5 samples, 0.14%)</title><rect x="288.1" y="867.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.1" y="878.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraints (1 samples, 0.03%)</title><rect x="288.1" y="851.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.1" y="862.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findConstraints (1 samples, 0.03%)</title><rect x="288.1" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.1" y="846.0"></text>
</g>
<g>
<title>JavaBeanExecutable.getDeclaredAnnotations (1 samples, 0.03%)</title><rect x="288.1" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.1" y="830.0"></text>
</g>
<g>
<title>Method.getDeclaredAnnotations (1 samples, 0.03%)</title><rect x="288.1" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.1" y="814.0"></text>
</g>
<g>
<title>Executable.getDeclaredAnnotations (1 samples, 0.03%)</title><rect x="288.1" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.1" y="798.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (1 samples, 0.03%)</title><rect x="288.1" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.1" y="782.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (1 samples, 0.03%)</title><rect x="288.1" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.1" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="288.1" y="739.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.1" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="288.1" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.1" y="734.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="288.1" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.1" y="718.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="288.1" y="691.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.1" y="702.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="288.1" y="675.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.1" y="686.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="288.1" y="659.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.1" y="670.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="288.1" y="643.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.1" y="654.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="288.1" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.1" y="638.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="288.1" y="611.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.1" y="622.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="288.1" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.1" y="606.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="288.1" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.1" y="590.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="288.1" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.1" y="574.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (1 samples, 0.03%)</title><rect x="288.1" y="547.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.1" y="558.0"></text>
</g>
<g>
<title>$Proxy24.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="288.1" y="531.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="291.1" y="542.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="288.1" y="515.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="291.1" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="288.1" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="291.1" y="510.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="288.1" y="483.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="291.1" y="494.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findTypeAnnotationConstraints (1 samples, 0.03%)</title><rect x="288.6" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.6" y="862.0"></text>
</g>
<g>
<title>JavaBeanExecutable.getAnnotatedType (1 samples, 0.03%)</title><rect x="288.6" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="291.6" y="846.0"></text>
</g>
<g>
<title>Method.getAnnotatedReturnType (1 samples, 0.03%)</title><rect x="288.6" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.6" y="830.0"></text>
</g>
<g>
<title>Executable.getAnnotatedReturnType0 (1 samples, 0.03%)</title><rect x="288.6" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.6" y="814.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedType (1 samples, 0.03%)</title><rect x="288.6" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.6" y="798.0"></text>
</g>
<g>
<title>AnnotatedTypeFactory.nestingForType (1 samples, 0.03%)</title><rect x="288.6" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.6" y="782.0"></text>
</g>
<g>
<title>Class.getEnclosingClass (1 samples, 0.03%)</title><rect x="288.6" y="755.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.6" y="766.0"></text>
</g>
<g>
<title>Class.getEnclosingMethodInfo (1 samples, 0.03%)</title><rect x="288.6" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.6" y="750.0"></text>
</g>
<g>
<title>Class.getEnclosingMethod0 (1 samples, 0.03%)</title><rect x="288.6" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.6" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="288.6" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="291.6" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="288.6" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="291.6" y="702.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="288.6" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="291.6" y="686.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="288.6" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="291.6" y="670.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="288.6" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="291.6" y="654.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="288.6" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="291.6" y="638.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="288.6" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="291.6" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.03%)</title><rect x="288.6" y="595.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="291.6" y="606.0"></text>
</g>
<g>
<title>nmethod::new_native_nmethod(methodHandle const&amp;, int, CodeBuffer*, int, int, int, int, int, OopMapSet*) (1 samples, 0.03%)</title><rect x="288.6" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="291.6" y="590.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, CodeOffsets*, CodeBuffer*, int, int, int, OopMapSet*) (1 samples, 0.03%)</title><rect x="288.6" y="563.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="291.6" y="574.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.03%)</title><rect x="288.6" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="291.6" y="558.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.03%)</title><rect x="288.6" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="291.6" y="542.0"></text>
</g>
<g>
<title>RelocIterator::reloc() (1 samples, 0.03%)</title><rect x="288.6" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="291.6" y="526.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getParameterMetaData (1 samples, 0.03%)</title><rect x="289.0" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.0" y="862.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.findCascadingMetaData (1 samples, 0.03%)</title><rect x="289.0" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.0" y="846.0"></text>
</g>
<g>
<title>AnnotationMetaDataProvider.getCascadingMetaData (1 samples, 0.03%)</title><rect x="289.0" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.0" y="830.0"></text>
</g>
<g>
<title>JavaBeanParameter.getAnnotatedType (1 samples, 0.03%)</title><rect x="289.0" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.0" y="814.0"></text>
</g>
<g>
<title>Parameter.getAnnotatedType (1 samples, 0.03%)</title><rect x="289.0" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.0" y="798.0"></text>
</g>
<g>
<title>Executable.getAnnotatedParameterTypes (1 samples, 0.03%)</title><rect x="289.0" y="771.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.0" y="782.0"></text>
</g>
<g>
<title>Executable.getAllGenericParameterTypes (1 samples, 0.03%)</title><rect x="289.0" y="755.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.0" y="766.0"></text>
</g>
<g>
<title>Method.getParameterTypes (1 samples, 0.03%)</title><rect x="289.0" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.0" y="750.0"></text>
</g>
<g>
<title>Object.clone (1 samples, 0.03%)</title><rect x="289.0" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.0" y="734.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.03%)</title><rect x="289.0" y="707.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="292.0" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;540784ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)9, 540784ull&gt;::access_barrier(oopDesc*, oopDesc*, unsigned long) (1 samples, 0.03%)</title><rect x="289.0" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="292.0" y="702.0"></text>
</g>
<g>
<title>G1BarrierSet::write_region(MemRegion) (1 samples, 0.03%)</title><rect x="289.0" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="292.0" y="686.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="289.0" y="659.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="292.0" y="670.0"></text>
</g>
<g>
<title>ConstrainedExecutable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="289.5" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.5" y="862.0"></text>
</g>
<g>
<title>AbstractConstrainedElement.&lt;init&gt; (1 samples, 0.03%)</title><rect x="289.5" y="835.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.5" y="846.0"></text>
</g>
<g>
<title>JavaBeanHelper.executable (1 samples, 0.03%)</title><rect x="289.9" y="851.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.9" y="862.0"></text>
</g>
<g>
<title>JavaBeanHelper.executable (1 samples, 0.03%)</title><rect x="289.9" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.9" y="846.0"></text>
</g>
<g>
<title>JavaBeanHelper.executable (1 samples, 0.03%)</title><rect x="289.9" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.9" y="830.0"></text>
</g>
<g>
<title>JavaBeanMethod.&lt;init&gt; (1 samples, 0.03%)</title><rect x="289.9" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.9" y="814.0"></text>
</g>
<g>
<title>JavaBeanExecutable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="289.9" y="787.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.9" y="798.0"></text>
</g>
<g>
<title>ReflectionHelper.boxedType (1 samples, 0.03%)</title><rect x="289.9" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.9" y="782.0"></text>
</g>
<g>
<title>ReflectionHelper.internalBoxedType (1 samples, 0.03%)</title><rect x="289.9" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.9" y="766.0"></text>
</g>
<g>
<title>Collections$UnmodifiableMap.get (1 samples, 0.03%)</title><rect x="289.9" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.9" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="290.4" y="963.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.4" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="290.4" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.4" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="290.4" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.4" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="290.4" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.4" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="290.4" y="899.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="293.4" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="290.4" y="883.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="293.4" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="867.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="293.4" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="293.4" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="293.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="293.4" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="293.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="290.4" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="293.4" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="290.8" y="979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.8" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="290.8" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.8" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="290.8" y="947.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.8" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="290.8" y="931.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.8" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="290.8" y="915.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="293.8" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="290.8" y="899.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="293.8" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="883.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="293.8" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.8" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="293.8" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="293.8" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="819.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="293.8" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.8" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="290.8" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="293.8" y="798.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="290.8" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="293.8" y="782.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="290.8" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="293.8" y="766.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="290.8" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="293.8" y="750.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="290.8" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="293.8" y="734.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="290.8" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="293.8" y="718.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="290.8" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="293.8" y="702.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="290.8" y="675.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="293.8" y="686.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="290.8" y="659.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="293.8" y="670.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="290.8" y="643.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="293.8" y="654.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="290.8" y="627.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="293.8" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="291.2" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="294.2" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="291.2" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="294.2" y="766.0"></text>
</g>
<g>
<title>TypeResolutionHelper.&lt;init&gt; (2 samples, 0.06%)</title><rect x="291.7" y="979.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.7" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="291.7" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.7" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="291.7" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.7" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="291.7" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.7" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="291.7" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.7" y="926.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="291.7" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.7" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="291.7" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.7" y="894.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="291.7" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.7" y="878.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="291.7" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.7" y="862.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="291.7" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.7" y="846.0"></text>
</g>
<g>
<title>Java_java_io_RandomAccessFile_seek0 (1 samples, 0.03%)</title><rect x="291.7" y="819.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="294.7" y="830.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="291.7" y="803.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="294.7" y="814.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="291.7" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="294.7" y="798.0"></text>
</g>
<g>
<title>TypeResolver.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="292.1" y="963.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.1" y="974.0"></text>
</g>
<g>
<title>ResolvedObjectType.create (1 samples, 0.03%)</title><rect x="292.1" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.1" y="958.0"></text>
</g>
<g>
<title>ResolvedObjectType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="292.1" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="942.0"></text>
</g>
<g>
<title>ResolvedObjectType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="292.1" y="915.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.1" y="926.0"></text>
</g>
<g>
<title>ResolvedType.&lt;init&gt; (1 samples, 0.03%)</title><rect x="292.1" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.1" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="292.1" y="883.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.1" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="292.1" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="295.1" y="878.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="292.1" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.1" y="862.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="292.1" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.1" y="846.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="292.1" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.1" y="830.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="292.1" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.1" y="814.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="292.1" y="787.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="295.1" y="798.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="292.1" y="771.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="295.1" y="782.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="292.1" y="755.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="295.1" y="766.0"></text>
</g>
<g>
<title>ValidatorFactoryConfigurationHelper.determineConstraintMappings (1 samples, 0.03%)</title><rect x="292.6" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.6" y="990.0"></text>
</g>
<g>
<title>ServiceLoaderBasedConstraintMappingContributor.createConstraintMappings (1 samples, 0.03%)</title><rect x="292.6" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.6" y="974.0"></text>
</g>
<g>
<title>ValidatorFactoryConfigurationHelper$DefaultConstraintMappingBuilder.addConstraintMapping (1 samples, 0.03%)</title><rect x="292.6" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.6" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="292.6" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="292.6" y="915.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.6" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="292.6" y="899.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.6" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="292.6" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.6" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="292.6" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.6" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="292.6" y="851.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.6" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="292.6" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.6" y="846.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="292.6" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.6" y="830.0"></text>
</g>
<g>
<title>Collections$SetFromMap.add (1 samples, 0.03%)</title><rect x="292.6" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.6" y="814.0"></text>
</g>
<g>
<title>WeakHashMap.put (1 samples, 0.03%)</title><rect x="292.6" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.6" y="798.0"></text>
</g>
<g>
<title>WeakHashMap.getTable (1 samples, 0.03%)</title><rect x="292.6" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.6" y="782.0"></text>
</g>
<g>
<title>WeakHashMap.expungeStaleEntries (1 samples, 0.03%)</title><rect x="292.6" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.6" y="766.0"></text>
</g>
<g>
<title>ValidatorFactoryConfigurationHelper.determineGetterPropertySelectionStrategy (1 samples, 0.03%)</title><rect x="293.0" y="979.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.0" y="990.0"></text>
</g>
<g>
<title>DefaultGetterPropertySelectionStrategy.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="293.0" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.0" y="974.0"></text>
</g>
<g>
<title>LoggerFactory.make (1 samples, 0.03%)</title><rect x="293.0" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.0" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="293.0" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="942.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="293.0" y="915.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.0" y="926.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="293.0" y="899.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="910.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="293.0" y="883.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.0" y="894.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="293.0" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.0" y="878.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="293.0" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.0" y="862.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="293.0" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.0" y="846.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generateConstructor (1 samples, 0.03%)</title><rect x="293.0" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.0" y="830.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generate (1 samples, 0.03%)</title><rect x="293.0" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.0" y="814.0"></text>
</g>
<g>
<title>AccessorGenerator.emitCommonConstantPoolEntries (1 samples, 0.03%)</title><rect x="293.0" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.0" y="798.0"></text>
</g>
<g>
<title>ClassFileAssembler.emitConstantPoolUTF8 (1 samples, 0.03%)</title><rect x="293.0" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.0" y="782.0"></text>
</g>
<g>
<title>ClassFileAssembler.emitByte (1 samples, 0.03%)</title><rect x="293.0" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.0" y="766.0"></text>
</g>
<g>
<title>ByteVectorImpl.add (1 samples, 0.03%)</title><rect x="293.0" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.0" y="750.0"></text>
</g>
<g>
<title>ValidatorFactoryConfigurationHelper.determinePropertyNodeNameProvider (1 samples, 0.03%)</title><rect x="293.5" y="979.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.5" y="990.0"></text>
</g>
<g>
<title>Log_$logger.usingPropertyNodeNameProvider (1 samples, 0.03%)</title><rect x="293.5" y="963.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.5" y="974.0"></text>
</g>
<g>
<title>Logger.logf (1 samples, 0.03%)</title><rect x="293.5" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.5" y="958.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.doLogf (1 samples, 0.03%)</title><rect x="293.5" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.5" y="942.0"></text>
</g>
<g>
<title>Logger.log (1 samples, 0.03%)</title><rect x="293.5" y="915.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.5" y="926.0"></text>
</g>
<g>
<title>Logger.logRaw (1 samples, 0.03%)</title><rect x="293.5" y="899.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.5" y="910.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="883.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.5" y="894.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.5" y="878.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.5" y="862.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.5" y="846.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.5" y="830.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.5" y="814.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="293.5" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.5" y="798.0"></text>
</g>
<g>
<title>ExtHandler.publish (1 samples, 0.03%)</title><rect x="293.5" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.5" y="782.0"></text>
</g>
<g>
<title>DelayedHandler.doPublish (1 samples, 0.03%)</title><rect x="293.5" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.5" y="766.0"></text>
</g>
<g>
<title>ArrayDeque.addLast (1 samples, 0.03%)</title><rect x="293.5" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.5" y="750.0"></text>
</g>
<g>
<title>ValidatorFactoryConfigurationHelper.determineScriptEvaluatorFactory (1 samples, 0.03%)</title><rect x="293.9" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.9" y="990.0"></text>
</g>
<g>
<title>DefaultScriptEvaluatorFactory.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="293.9" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.9" y="974.0"></text>
</g>
<g>
<title>LoggerFactory.make (1 samples, 0.03%)</title><rect x="293.9" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.9" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="293.9" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.9" y="942.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="293.9" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.9" y="926.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="293.9" y="899.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.9" y="910.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="293.9" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.9" y="894.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.9" y="878.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.9" y="862.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="293.9" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.9" y="846.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.9" y="830.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="803.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.9" y="814.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.9" y="798.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="293.9" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.9" y="782.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="293.9" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.9" y="766.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="293.9" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.9" y="750.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.9" y="734.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.9" y="718.0"></text>
</g>
<g>
<title>LogContext.getLogger (1 samples, 0.03%)</title><rect x="293.9" y="691.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.9" y="702.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="293.9" y="675.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.9" y="686.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="293.9" y="659.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.9" y="670.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="293.9" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.9" y="654.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="293.9" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.9" y="638.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="293.9" y="611.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.9" y="622.0"></text>
</g>
<g>
<title>LoggerNode.getOrCreate (1 samples, 0.03%)</title><rect x="293.9" y="595.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.9" y="606.0"></text>
</g>
<g>
<title>CopyOnWriteMap.putIfAbsent (1 samples, 0.03%)</title><rect x="293.9" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.9" y="590.0"></text>
</g>
<g>
<title>FastCopyHashMap.put (1 samples, 0.03%)</title><rect x="293.9" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.9" y="574.0"></text>
</g>
<g>
<title>ValueExtractorManager.&lt;clinit&gt; (10 samples, 0.28%)</title><rect x="294.3" y="979.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.3" y="990.0"></text>
</g>
<g>
<title>BooleanArrayValueExtractor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="294.3" y="963.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.3" y="974.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="294.3" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.3" y="958.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.getValueExtractorDefinition (1 samples, 0.03%)</title><rect x="294.3" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.3" y="942.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.determineValueExtractorDefinitions (1 samples, 0.03%)</title><rect x="294.3" y="915.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.3" y="926.0"></text>
</g>
<g>
<title>Class.getAnnotatedInterfaces (1 samples, 0.03%)</title><rect x="294.3" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.3" y="910.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedInterfaces (1 samples, 0.03%)</title><rect x="294.3" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.3" y="894.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedTypes (1 samples, 0.03%)</title><rect x="294.3" y="867.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.3" y="878.0"></text>
</g>
<g>
<title>TypeAnnotationParser.parseTypeAnnotations (1 samples, 0.03%)</title><rect x="294.3" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.3" y="862.0"></text>
</g>
<g>
<title>HeapByteBuffer.getShort (1 samples, 0.03%)</title><rect x="294.3" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.3" y="846.0"></text>
</g>
<g>
<title>HeapByteBuffer.byteOffset (1 samples, 0.03%)</title><rect x="294.3" y="819.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.3" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="294.3" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="297.3" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="294.3" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="297.3" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="294.3" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="297.3" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="294.3" y="755.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="297.3" y="766.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="294.3" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="297.3" y="750.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="294.3" y="723.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="297.3" y="734.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="294.3" y="707.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="297.3" y="718.0"></text>
</g>
<g>
<title>ByteArrayValueExtractor.&lt;clinit&gt; (4 samples, 0.11%)</title><rect x="294.8" y="963.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.8" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="294.8" y="947.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="297.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="294.8" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="297.8" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="294.8" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="297.8" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="294.8" y="899.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.8" y="910.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="294.8" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="297.8" y="894.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="294.8" y="867.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="297.8" y="878.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="294.8" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="297.8" y="862.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="294.8" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="297.8" y="846.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="294.8" y="819.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="297.8" y="830.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.&lt;init&gt; (3 samples, 0.08%)</title><rect x="295.2" y="947.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.2" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="295.2" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="295.2" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.2" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="295.2" y="899.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.2" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="295.2" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.2" y="894.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="295.2" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.2" y="878.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="295.2" y="851.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.2" y="862.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="295.2" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.2" y="846.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="295.2" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.2" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="295.2" y="803.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.2" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="295.2" y="787.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.2" y="798.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="295.2" y="771.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="298.2" y="782.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.getContainerType (1 samples, 0.03%)</title><rect x="295.7" y="931.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.7" y="942.0"></text>
</g>
<g>
<title>TypeHelper.getErasedReferenceType (1 samples, 0.03%)</title><rect x="295.7" y="915.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.7" y="926.0"></text>
</g>
<g>
<title>TypeHelper.getErasedType (1 samples, 0.03%)</title><rect x="295.7" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.7" y="910.0"></text>
</g>
<g>
<title>TypeHelper.getArrayType (1 samples, 0.03%)</title><rect x="295.7" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.7" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="295.7" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="298.7" y="878.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="295.7" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="298.7" y="862.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="295.7" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="298.7" y="846.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.getValueExtractorDefinition (1 samples, 0.03%)</title><rect x="296.1" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.1" y="942.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.determineValueExtractorDefinitions (1 samples, 0.03%)</title><rect x="296.1" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.1" y="926.0"></text>
</g>
<g>
<title>Class.getAnnotatedInterfaces (1 samples, 0.03%)</title><rect x="296.1" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.1" y="910.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedInterfaces (1 samples, 0.03%)</title><rect x="296.1" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.1" y="894.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedTypes (1 samples, 0.03%)</title><rect x="296.1" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="299.1" y="878.0"></text>
</g>
<g>
<title>TypeAnnotationParser.parseTypeAnnotations (1 samples, 0.03%)</title><rect x="296.1" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.1" y="862.0"></text>
</g>
<g>
<title>TypeAnnotationParser.parseTypeAnnotation (1 samples, 0.03%)</title><rect x="296.1" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.1" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation (1 samples, 0.03%)</title><rect x="296.1" y="819.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.1" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="296.1" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.1" y="814.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="296.1" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.1" y="798.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="296.1" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.1" y="782.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="296.1" y="755.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.1" y="766.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="296.1" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.1" y="750.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="296.1" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.1" y="734.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="296.1" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.1" y="718.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="296.1" y="691.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.1" y="702.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="296.1" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.1" y="686.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="296.1" y="659.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="299.1" y="670.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="296.1" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.1" y="654.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="296.1" y="627.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.1" y="638.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="296.1" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.1" y="622.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="296.1" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.1" y="606.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="296.1" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.1" y="590.0"></text>
</g>
<g>
<title>ProxyGenerator.generateConstructor (1 samples, 0.03%)</title><rect x="296.1" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="299.1" y="574.0"></text>
</g>
<g>
<title>DataOutputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="296.1" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.1" y="558.0"></text>
</g>
<g>
<title>FilterOutputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="296.1" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.1" y="542.0"></text>
</g>
<g>
<title>LongArrayValueExtractor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="296.5" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.5" y="974.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="296.5" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.5" y="958.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor$Key.&lt;init&gt; (1 samples, 0.03%)</title><rect x="296.5" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.5" y="942.0"></text>
</g>
<g>
<title>OptionalDoubleValueExtractor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="297.0" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.0" y="974.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="297.0" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.0" y="958.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.getValueExtractorDefinition (1 samples, 0.03%)</title><rect x="297.0" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.0" y="942.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.determineValueExtractorDefinitions (1 samples, 0.03%)</title><rect x="297.0" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.0" y="926.0"></text>
</g>
<g>
<title>Class.getAnnotatedInterfaces (1 samples, 0.03%)</title><rect x="297.0" y="899.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.0" y="910.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedInterfaces (1 samples, 0.03%)</title><rect x="297.0" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.0" y="894.0"></text>
</g>
<g>
<title>TypeAnnotationParser.buildAnnotatedTypes (1 samples, 0.03%)</title><rect x="297.0" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.0" y="878.0"></text>
</g>
<g>
<title>TypeAnnotationParser.parseTypeAnnotations (1 samples, 0.03%)</title><rect x="297.0" y="851.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.0" y="862.0"></text>
</g>
<g>
<title>TypeAnnotationParser.parseTypeAnnotation (1 samples, 0.03%)</title><rect x="297.0" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.0" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation (1 samples, 0.03%)</title><rect x="297.0" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.0" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="297.0" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.0" y="814.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="297.0" y="787.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.0" y="798.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="297.0" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.0" y="782.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="297.0" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.0" y="766.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="297.0" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.0" y="750.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="297.0" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.0" y="734.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="297.0" y="707.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.0" y="718.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="297.0" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.0" y="702.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="297.0" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.0" y="686.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="297.0" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.0" y="670.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generateConstructor (1 samples, 0.03%)</title><rect x="297.0" y="643.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.0" y="654.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generate (1 samples, 0.03%)</title><rect x="297.0" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.0" y="638.0"></text>
</g>
<g>
<title>ClassFileAssembler.emitConstantPoolUTF8 (1 samples, 0.03%)</title><rect x="297.0" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.0" y="622.0"></text>
</g>
<g>
<title>UTF8.encode (1 samples, 0.03%)</title><rect x="297.0" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.0" y="606.0"></text>
</g>
<g>
<title>OptionalIntValueExtractor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="297.4" y="963.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.4" y="974.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="297.4" y="947.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.4" y="958.0"></text>
</g>
<g>
<title>ValueExtractorDescriptor.getExtractedTypeParameter (1 samples, 0.03%)</title><rect x="297.4" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.4" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="297.4" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="300.4" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="297.4" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="300.4" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="883.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.4" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="867.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="300.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.4" y="846.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="819.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="300.4" y="830.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="300.4" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.4" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="300.4" y="782.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.4" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="297.4" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="300.4" y="750.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="297.4" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="300.4" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="297.9" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.9" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="297.9" y="947.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.9" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="297.9" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.9" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="297.9" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.9" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="297.9" y="899.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="300.9" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="297.9" y="883.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="300.9" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="867.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="300.9" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="300.9" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="300.9" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="300.9" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="300.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="300.9" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="297.9" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.9" y="782.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="297.9" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="300.9" y="766.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="297.9" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.9" y="750.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="297.9" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="300.9" y="734.0"></text>
</g>
<g>
<title>ValueExtractorManager.isJavaFxExtensionsEnabled (1 samples, 0.03%)</title><rect x="298.3" y="963.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.3" y="974.0"></text>
</g>
<g>
<title>ValueExtractorManager.isJavaFxInClasspath (1 samples, 0.03%)</title><rect x="298.3" y="947.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.3" y="958.0"></text>
</g>
<g>
<title>ValueExtractorManager.isClassPresent (1 samples, 0.03%)</title><rect x="298.3" y="931.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.3" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="298.3" y="915.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.3" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="298.3" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="301.3" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="298.3" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.3" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="298.3" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.3" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="298.3" y="851.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="301.3" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="298.3" y="835.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="301.3" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="819.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="301.3" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="301.3" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="301.3" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="301.3" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="301.3" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="301.3" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="298.3" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="301.3" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="298.3" y="707.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="301.3" y="718.0"></text>
</g>
<g>
<title>UTF8::is_legal_utf8(unsigned char const*, int, bool) (1 samples, 0.03%)</title><rect x="298.3" y="691.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="301.3" y="702.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.defaultLocale (1 samples, 0.03%)</title><rect x="298.8" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.8" y="1038.0"></text>
</g>
<g>
<title>Messages_$bundle.parameterMustNotBeNull (1 samples, 0.03%)</title><rect x="298.8" y="1011.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.8" y="1022.0"></text>
</g>
<g>
<title>String.format (1 samples, 0.03%)</title><rect x="298.8" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.8" y="1006.0"></text>
</g>
<g>
<title>Formatter.format (1 samples, 0.03%)</title><rect x="298.8" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.8" y="990.0"></text>
</g>
<g>
<title>Formatter.format (1 samples, 0.03%)</title><rect x="298.8" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.8" y="974.0"></text>
</g>
<g>
<title>Formatter$FixedString.print (1 samples, 0.03%)</title><rect x="298.8" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.8" y="958.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="298.8" y="931.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.8" y="942.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="298.8" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.8" y="926.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="298.8" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.8" y="910.0"></text>
</g>
<g>
<title>AbstractStringBuilder.appendChars (1 samples, 0.03%)</title><rect x="298.8" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.8" y="894.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.locales (6 samples, 0.17%)</title><rect x="299.2" y="1027.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.2" y="1038.0"></text>
</g>
<g>
<title>Messages.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="299.2" y="1011.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.2" y="1022.0"></text>
</g>
<g>
<title>Messages.getBundle (1 samples, 0.03%)</title><rect x="299.2" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.2" y="1006.0"></text>
</g>
<g>
<title>Messages.getBundle (1 samples, 0.03%)</title><rect x="299.2" y="979.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.2" y="990.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="299.2" y="963.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.2" y="974.0"></text>
</g>
<g>
<title>Messages$1.run (1 samples, 0.03%)</title><rect x="299.2" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.2" y="958.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="299.2" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.2" y="942.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="299.2" y="915.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.2" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="299.2" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.2" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="299.2" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.2" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="299.2" y="867.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.2" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="299.2" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.2" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="299.2" y="835.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="302.2" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="299.2" y="819.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="302.2" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="803.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="302.2" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="302.2" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="302.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="302.2" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="302.2" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="302.2" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="302.2" y="718.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="302.2" y="702.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="302.2" y="686.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="299.2" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="302.2" y="670.0"></text>
</g>
<g>
<title>Symbol::Symbol(unsigned char const*, int, int) (1 samples, 0.03%)</title><rect x="299.2" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="302.2" y="654.0"></text>
</g>
<g>
<title>Messages_$bundle.parameterMustNotBeNull (5 samples, 0.14%)</title><rect x="299.6" y="1011.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.6" y="1022.0"></text>
</g>
<g>
<title>String.format (5 samples, 0.14%)</title><rect x="299.6" y="995.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.6" y="1006.0"></text>
</g>
<g>
<title>Formatter.&lt;init&gt; (4 samples, 0.11%)</title><rect x="299.6" y="979.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.6" y="990.0"></text>
</g>
<g>
<title>Formatter.&lt;init&gt; (4 samples, 0.11%)</title><rect x="299.6" y="963.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.6" y="974.0"></text>
</g>
<g>
<title>Formatter.getZero (4 samples, 0.11%)</title><rect x="299.6" y="947.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.6" y="958.0"></text>
</g>
<g>
<title>DecimalFormatSymbols.getInstance (4 samples, 0.11%)</title><rect x="299.6" y="931.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.6" y="942.0"></text>
</g>
<g>
<title>DecimalFormatSymbolsProviderImpl.getInstance (1 samples, 0.03%)</title><rect x="299.6" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.6" y="926.0"></text>
</g>
<g>
<title>DecimalFormatSymbols.&lt;init&gt; (1 samples, 0.03%)</title><rect x="299.6" y="899.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.6" y="910.0"></text>
</g>
<g>
<title>DecimalFormatSymbols.initialize (1 samples, 0.03%)</title><rect x="299.6" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.6" y="894.0"></text>
</g>
<g>
<title>LocaleResources.getDecimalFormatSymbolsData (1 samples, 0.03%)</title><rect x="299.6" y="867.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.6" y="878.0"></text>
</g>
<g>
<title>LocaleData.getNumberFormatData (1 samples, 0.03%)</title><rect x="299.6" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.6" y="862.0"></text>
</g>
<g>
<title>LocaleData.getBundle (1 samples, 0.03%)</title><rect x="299.6" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.6" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="299.6" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.6" y="830.0"></text>
</g>
<g>
<title>LocaleData$1.run (1 samples, 0.03%)</title><rect x="299.6" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.6" y="814.0"></text>
</g>
<g>
<title>LocaleData$1.run (1 samples, 0.03%)</title><rect x="299.6" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.6" y="798.0"></text>
</g>
<g>
<title>Bundles.of (1 samples, 0.03%)</title><rect x="299.6" y="771.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.6" y="782.0"></text>
</g>
<g>
<title>Bundles.loadBundleOf (1 samples, 0.03%)</title><rect x="299.6" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.6" y="766.0"></text>
</g>
<g>
<title>LocaleData$LocaleDataStrategy.getCandidateLocales (1 samples, 0.03%)</title><rect x="299.6" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.6" y="750.0"></text>
</g>
<g>
<title>CLDRLocaleProviderAdapter.getCandidateLocales (1 samples, 0.03%)</title><rect x="299.6" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.6" y="734.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.getCandidateLocales (1 samples, 0.03%)</title><rect x="299.6" y="707.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.6" y="718.0"></text>
</g>
<g>
<title>ResourceBundle$Control.getNoFallbackControl (1 samples, 0.03%)</title><rect x="299.6" y="691.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.6" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="299.6" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="302.6" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="299.6" y="659.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="302.6" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="299.6" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="302.6" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="299.6" y="627.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="302.6" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="299.6" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="302.6" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="299.6" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="302.6" y="606.0"></text>
</g>
<g>
<title>PerfClassTraceTime::~PerfClassTraceTime() (1 samples, 0.03%)</title><rect x="299.6" y="579.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="302.6" y="590.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.03%)</title><rect x="299.6" y="563.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="302.6" y="574.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="299.6" y="547.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="302.6" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="299.6" y="531.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="302.6" y="542.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="300.1" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.1" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="300.1" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="303.1" y="910.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="303.1" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="303.1" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="303.1" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="303.1" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="303.1" y="830.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="303.1" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="303.1" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.1" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="303.1" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="303.1" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="303.1" y="734.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="303.1" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="303.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="303.1" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="303.1" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="303.1" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.1" y="638.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="303.1" y="622.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.1" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="303.1" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="563.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="303.1" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="303.1" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="300.1" y="531.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="303.1" y="542.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="300.1" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="303.1" y="526.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="300.1" y="499.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="303.1" y="510.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.getAdapter (2 samples, 0.06%)</title><rect x="300.5" y="915.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.5" y="926.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.findAdapter (2 samples, 0.06%)</title><rect x="300.5" y="899.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.5" y="910.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.getLocaleServiceProvider (1 samples, 0.03%)</title><rect x="300.5" y="883.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.5" y="894.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.getDecimalFormatSymbolsProvider (1 samples, 0.03%)</title><rect x="300.5" y="867.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.5" y="878.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="300.5" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.5" y="862.0"></text>
</g>
<g>
<title>757708014.run (1 samples, 0.03%)</title><rect x="300.5" y="835.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="303.5" y="846.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.lambda$getDecimalFormatSymbolsProvider$4 (1 samples, 0.03%)</title><rect x="300.5" y="819.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.5" y="830.0"></text>
</g>
<g>
<title>JRELocaleProviderAdapter.getLanguageTagSet (1 samples, 0.03%)</title><rect x="300.5" y="803.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.5" y="814.0"></text>
</g>
<g>
<title>CLDRLocaleProviderAdapter.createLanguageTagSet (1 samples, 0.03%)</title><rect x="300.5" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.5" y="798.0"></text>
</g>
<g>
<title>LocaleProviderAdapter.forType (1 samples, 0.03%)</title><rect x="301.0" y="883.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.0" y="894.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="301.0" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.0" y="878.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="301.0" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.0" y="862.0"></text>
</g>
<g>
<title>CLDRLocaleProviderAdapter.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="301.0" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.0" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="301.0" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="304.0" y="830.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.0" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.0" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="304.0" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="304.0" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="304.0" y="750.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="304.0" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="304.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="304.0" y="702.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="304.0" y="686.0"></text>
</g>
<g>
<title>klassVtable::needs_new_vtable_entry(methodHandle const&amp;, Klass const*, Handle, Symbol*, AccessFlags, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="301.0" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="304.0" y="670.0"></text>
</g>
<g>
<title>Formatter.format (1 samples, 0.03%)</title><rect x="301.4" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="304.4" y="990.0"></text>
</g>
<g>
<title>Formatter.format (1 samples, 0.03%)</title><rect x="301.4" y="963.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.4" y="974.0"></text>
</g>
<g>
<title>Formatter.parse (1 samples, 0.03%)</title><rect x="301.4" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="304.4" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="301.4" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="304.4" y="942.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="304.4" y="926.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="899.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="304.4" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="304.4" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="304.4" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="304.4" y="862.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="835.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="304.4" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.4" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="304.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="304.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="304.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.4" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="304.4" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="304.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::package_from_name(Symbol const*, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="304.4" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="301.4" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.4" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="301.4" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="304.4" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="301.4" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="304.4" y="670.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="301.9" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="304.9" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="301.9" y="1011.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="304.9" y="1022.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.9" y="995.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="304.9" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="301.9" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="304.9" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.9" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.9" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="301.9" y="947.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="304.9" y="958.0"></text>
</g>
<g>
<title>java_lang_String::create_from_symbol(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="301.9" y="931.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="304.9" y="942.0"></text>
</g>
<g>
<title>UTF8::unicode_length(char const*, int, bool&amp;, bool&amp;) (1 samples, 0.03%)</title><rect x="301.9" y="915.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="304.9" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="302.3" y="1027.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="305.3" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="302.3" y="1011.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="305.3" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="305.3" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="305.3" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="963.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.3" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="305.3" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="305.3" y="942.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="915.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="305.3" y="926.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="899.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="305.3" y="910.0"></text>
</g>
<g>
<title>Rewriter::make_constant_pool_cache(Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="305.3" y="894.0"></text>
</g>
<g>
<title>ConstantPoolCache::allocate(ClassLoaderData*, GrowableArray&lt;int&gt; const&amp;, GrowableArray&lt;int&gt; const&amp;, GrowableArray&lt;int&gt; const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="305.3" y="878.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="305.3" y="862.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="302.3" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="305.3" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="302.3" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.3" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="302.3" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="305.3" y="814.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="302.3" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="305.3" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="302.7" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.7" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="302.7" y="1011.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.7" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="302.7" y="995.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.7" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="302.7" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.7" y="990.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="302.7" y="963.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.7" y="974.0"></text>
</g>
<g>
<title>String.intern (1 samples, 0.03%)</title><rect x="302.7" y="947.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.7" y="958.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.03%)</title><rect x="302.7" y="931.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="305.7" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="302.7" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="305.7" y="926.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="302.7" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="305.7" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="302.7" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.7" y="894.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="302.7" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="305.7" y="878.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="302.7" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="305.7" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="302.7" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="305.7" y="846.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="302.7" y="819.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="305.7" y="830.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="302.7" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="305.7" y="814.0"></text>
</g>
<g>
<title>Validation$ProviderSpecificBootstrapImpl.configure (9 samples, 0.25%)</title><rect x="303.2" y="1027.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.2" y="1038.0"></text>
</g>
<g>
<title>PredefinedScopeHibernateValidator.createSpecializedConfiguration (9 samples, 0.25%)</title><rect x="303.2" y="1011.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.2" y="1022.0"></text>
</g>
<g>
<title>PredefinedScopeHibernateValidator.createSpecializedConfiguration (9 samples, 0.25%)</title><rect x="303.2" y="995.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.2" y="1006.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.&lt;clinit&gt; (5 samples, 0.14%)</title><rect x="303.2" y="979.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.2" y="990.0"></text>
</g>
<g>
<title>Version.&lt;clinit&gt; (5 samples, 0.14%)</title><rect x="303.2" y="963.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.2" y="974.0"></text>
</g>
<g>
<title>LoggerFactory.make (5 samples, 0.14%)</title><rect x="303.2" y="947.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.2" y="958.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (4 samples, 0.11%)</title><rect x="303.2" y="931.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.2" y="942.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (4 samples, 0.11%)</title><rect x="303.2" y="915.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.2" y="926.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (4 samples, 0.11%)</title><rect x="303.2" y="899.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.2" y="910.0"></text>
</g>
<g>
<title>Logger$1.run (4 samples, 0.11%)</title><rect x="303.2" y="883.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.2" y="894.0"></text>
</g>
<g>
<title>Class.forName (4 samples, 0.11%)</title><rect x="303.2" y="867.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.2" y="878.0"></text>
</g>
<g>
<title>Class.forName0 (4 samples, 0.11%)</title><rect x="303.2" y="851.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.2" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (2 samples, 0.06%)</title><rect x="303.2" y="835.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="306.2" y="846.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (2 samples, 0.06%)</title><rect x="303.2" y="819.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="306.2" y="830.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (2 samples, 0.06%)</title><rect x="303.2" y="803.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="306.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="303.2" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="306.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="303.2" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="306.2" y="782.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="303.2" y="755.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="306.2" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="303.2" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="306.2" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="303.2" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="306.2" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="303.2" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="306.2" y="718.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="303.2" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="306.2" y="702.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="303.6" y="755.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="306.6" y="766.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="303.6" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="306.6" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="304.1" y="835.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.1" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="304.1" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.1" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="304.1" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.1" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="304.1" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.1" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="304.1" y="771.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="307.1" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="304.1" y="755.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="307.1" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="739.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="307.1" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="307.1" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="307.1" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="307.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="307.1" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="307.1" y="654.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="307.1" y="638.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="304.1" y="611.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="307.1" y="622.0"></text>
</g>
<g>
<title>ConstMethod::set_inlined_tables_length(InlineTableSizes*) (1 samples, 0.03%)</title><rect x="304.1" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.1" y="606.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="304.5" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.5" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="305.0" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.0" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="305.0" y="915.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.0" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="305.0" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.0" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="305.0" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="894.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="305.0" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.0" y="878.0"></text>
</g>
<g>
<title>PredefinedScopeConfigurationImpl.&lt;init&gt; (2 samples, 0.06%)</title><rect x="305.4" y="979.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.4" y="990.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.&lt;init&gt; (2 samples, 0.06%)</title><rect x="305.4" y="963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.4" y="974.0"></text>
</g>
<g>
<title>AbstractConfigurationImpl.&lt;init&gt; (2 samples, 0.06%)</title><rect x="305.4" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.4" y="958.0"></text>
</g>
<g>
<title>MethodValidationConfiguration$Builder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="305.4" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.4" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="305.4" y="915.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.4" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="305.4" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="308.4" y="910.0"></text>
</g>
<g>
<title>FieldType::basic_type(Symbol*) (1 samples, 0.03%)</title><rect x="305.4" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="308.4" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="305.8" y="931.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="305.8" y="915.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="305.8" y="899.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.8" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="305.8" y="883.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="894.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="305.8" y="867.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.8" y="878.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="305.8" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.8" y="862.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="305.8" y="835.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="308.8" y="846.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="305.8" y="819.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="308.8" y="830.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="305.8" y="803.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="308.8" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="306.3" y="979.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="309.3" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="306.3" y="963.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.3" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="306.3" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.3" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="306.3" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.3" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="306.3" y="915.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="309.3" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="306.3" y="899.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="309.3" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="883.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="309.3" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="309.3" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="309.3" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="309.3" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="309.3" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="309.3" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="306.3" y="787.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="309.3" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="306.3" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="309.3" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="306.3" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="309.3" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="306.7" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.7" y="958.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="306.7" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="309.7" y="942.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="306.7" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.7" y="926.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="306.7" y="899.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="309.7" y="910.0"></text>
</g>
<g>
<title>BootLoader.getDefinedPackage (1 samples, 0.03%)</title><rect x="306.7" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="309.7" y="894.0"></text>
</g>
<g>
<title>ClassLoader.getDefinedPackage (1 samples, 0.03%)</title><rect x="306.7" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.7" y="878.0"></text>
</g>
<g>
<title>ValidatorHolder.initialize (2 samples, 0.06%)</title><rect x="307.2" y="1027.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.2" y="1038.0"></text>
</g>
<g>
<title>PredefinedScopeValidatorFactoryImpl.getValidator (2 samples, 0.06%)</title><rect x="307.2" y="1011.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.2" y="1022.0"></text>
</g>
<g>
<title>PredefinedScopeValidatorFactoryImpl.createValidator (2 samples, 0.06%)</title><rect x="307.2" y="995.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.2" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="307.2" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="310.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="307.2" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="310.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="307.2" y="947.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="310.2" y="958.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="307.2" y="931.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="310.2" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="307.2" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="310.2" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="307.2" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="310.2" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="307.2" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="310.2" y="894.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="307.2" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="310.2" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="307.6" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.6" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="307.6" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.6" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="307.6" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.6" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="307.6" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.6" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="307.6" y="915.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="310.6" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="307.6" y="899.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="310.6" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="883.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="310.6" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="310.6" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="310.6" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="310.6" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="310.6" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="310.6" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="307.6" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="310.6" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="307.6" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="310.6" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="307.6" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="310.6" y="766.0"></text>
</g>
<g>
<title>CommandLineArgumentsProcessor$commandLineArgs71756378.deploy (1 samples, 0.03%)</title><rect x="308.0" y="1091.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.0" y="1102.0"></text>
</g>
<g>
<title>CommandLineArgumentsProcessor$commandLineArgs71756378.deploy_0 (1 samples, 0.03%)</title><rect x="308.0" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.0" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="308.0" y="1059.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.0" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="308.0" y="1043.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.0" y="1054.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="308.0" y="1027.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.0" y="1038.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="308.0" y="1011.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.0" y="1022.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="308.0" y="995.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.0" y="1006.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="308.0" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.0" y="990.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="308.0" y="963.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="311.0" y="974.0"></text>
</g>
<g>
<title>Config.&lt;clinit&gt; (126 samples, 3.53%)</title><rect x="308.5" y="1091.0" width="55.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="1102.0">Confi..</text>
</g>
<g>
<title>Config.initGroup$io$quarkus$agroal$runtime$LegacyDataSourcesJdbcBuildTimeConfig (1 samples, 0.03%)</title><rect x="308.5" y="1075.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="1086.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$agroal$runtime$LegacyDataSourceJdbcBuildTimeConfig (1 samples, 0.03%)</title><rect x="308.5" y="1059.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.5" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="308.5" y="1043.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.5" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="308.5" y="1027.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.5" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="308.5" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.5" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.5" y="1006.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="979.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.5" y="990.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.5" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.5" y="958.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="915.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.5" y="926.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.5" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="883.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.5" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.5" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.5" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.5" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="819.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.5" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.5" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.5" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.5" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.5" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.5" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="723.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.5" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="707.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.5" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.5" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.5" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="659.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.5" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="611.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.5" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="595.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.5" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.5" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="308.5" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.5" y="574.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="308.5" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.5" y="558.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="308.5" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.5" y="542.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="308.5" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.5" y="526.0"></text>
</g>
<g>
<title>BuildTimeRunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="308.5" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.5" y="510.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$datasource$runtime$DataSourcesBuildTimeConfig (1 samples, 0.03%)</title><rect x="308.9" y="1075.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.9" y="1086.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$datasource$runtime$DataSourceBuildTimeConfig (1 samples, 0.03%)</title><rect x="308.9" y="1059.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.9" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="308.9" y="1043.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.9" y="1054.0"></text>
</g>
<g>
<title>Converters$OptionalConverter.convert (1 samples, 0.03%)</title><rect x="308.9" y="1027.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.9" y="1038.0"></text>
</g>
<g>
<title>Converters$OptionalConverter.convert (1 samples, 0.03%)</title><rect x="308.9" y="1011.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.9" y="1022.0"></text>
</g>
<g>
<title>DatabaseKindConverter.convert (1 samples, 0.03%)</title><rect x="308.9" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.9" y="1006.0"></text>
</g>
<g>
<title>DatabaseKindConverter.convert (1 samples, 0.03%)</title><rect x="308.9" y="979.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.9" y="990.0"></text>
</g>
<g>
<title>DatabaseKind.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="308.9" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.9" y="974.0"></text>
</g>
<g>
<title>DatabaseKind$SupportedDatabaseKind.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="308.9" y="947.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.9" y="958.0"></text>
</g>
<g>
<title>DatabaseKind$SupportedDatabaseKind.&lt;init&gt; (1 samples, 0.03%)</title><rect x="308.9" y="931.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.9" y="942.0"></text>
</g>
<g>
<title>Arrays.asList (1 samples, 0.03%)</title><rect x="308.9" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.9" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="308.9" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="311.9" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="308.9" y="883.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="311.9" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="308.9" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="311.9" y="878.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="308.9" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="311.9" y="862.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$runtime$LocalesBuildTimeConfig (1 samples, 0.03%)</title><rect x="309.4" y="1075.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.4" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="309.4" y="1059.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.4" y="1070.0"></text>
</g>
<g>
<title>Converters$CollectionConverter.convert (1 samples, 0.03%)</title><rect x="309.4" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.4" y="1054.0"></text>
</g>
<g>
<title>Converters$CollectionConverter.convert (1 samples, 0.03%)</title><rect x="309.4" y="1027.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.4" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="309.4" y="1011.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.4" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="309.4" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.4" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="309.4" y="979.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.4" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="309.4" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.4" y="974.0"></text>
</g>
<g>
<title>ClassLoader.addClass (1 samples, 0.03%)</title><rect x="309.4" y="947.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.4" y="958.0"></text>
</g>
<g>
<title>Vector.addElement (1 samples, 0.03%)</title><rect x="309.4" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.4" y="942.0"></text>
</g>
<g>
<title>Vector.add (1 samples, 0.03%)</title><rect x="309.4" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.4" y="926.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$HttpBuildTimeConfig (11 samples, 0.31%)</title><rect x="309.8" y="1075.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.8" y="1086.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$AuthConfig (4 samples, 0.11%)</title><rect x="309.8" y="1059.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.8" y="1070.0"></text>
</g>
<g>
<title>Config.initGroup$io$quarkus$vertx$http$runtime$FormAuthConfig (3 samples, 0.08%)</title><rect x="309.8" y="1043.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.8" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (3 samples, 0.08%)</title><rect x="309.8" y="1027.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.8" y="1038.0"></text>
</g>
<g>
<title>DurationConverter.convert (1 samples, 0.03%)</title><rect x="309.8" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.8" y="1022.0"></text>
</g>
<g>
<title>DurationConverter.convert (1 samples, 0.03%)</title><rect x="309.8" y="995.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.8" y="1006.0"></text>
</g>
<g>
<title>Duration.parse (1 samples, 0.03%)</title><rect x="309.8" y="979.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.8" y="990.0"></text>
</g>
<g>
<title>Duration$Lazy.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="309.8" y="963.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.8" y="974.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="309.8" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.8" y="958.0"></text>
</g>
<g>
<title>Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="309.8" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="312.8" y="942.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="309.8" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.8" y="926.0"></text>
</g>
<g>
<title>Pattern.expr (1 samples, 0.03%)</title><rect x="309.8" y="899.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.8" y="910.0"></text>
</g>
<g>
<title>Pattern.sequence (1 samples, 0.03%)</title><rect x="309.8" y="883.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.8" y="894.0"></text>
</g>
<g>
<title>Pattern.group0 (1 samples, 0.03%)</title><rect x="309.8" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.8" y="878.0"></text>
</g>
<g>
<title>Pattern.expr (1 samples, 0.03%)</title><rect x="309.8" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.8" y="862.0"></text>
</g>
<g>
<title>Pattern.sequence (1 samples, 0.03%)</title><rect x="309.8" y="835.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.8" y="846.0"></text>
</g>
<g>
<title>Pattern.group0 (1 samples, 0.03%)</title><rect x="309.8" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.8" y="830.0"></text>
</g>
<g>
<title>Pattern.expr (1 samples, 0.03%)</title><rect x="309.8" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.8" y="814.0"></text>
</g>
<g>
<title>Pattern.sequence (1 samples, 0.03%)</title><rect x="309.8" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.8" y="798.0"></text>
</g>
<g>
<title>Pattern.clazz (1 samples, 0.03%)</title><rect x="309.8" y="771.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.8" y="782.0"></text>
</g>
<g>
<title>Pattern.range (1 samples, 0.03%)</title><rect x="309.8" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.8" y="766.0"></text>
</g>
<g>
<title>Pattern.CIRange (1 samples, 0.03%)</title><rect x="309.8" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="309.8" y="723.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.8" y="734.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="309.8" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.8" y="718.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="309.8" y="691.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.8" y="702.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="309.8" y="675.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.8" y="686.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="309.8" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.8" y="670.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="309.8" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.8" y="654.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="309.8" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.8" y="638.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="309.8" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.8" y="622.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="309.8" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.8" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (2 samples, 0.06%)</title><rect x="310.3" y="1011.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.3" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (2 samples, 0.06%)</title><rect x="310.3" y="995.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="313.3" y="1006.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="310.3" y="979.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.3" y="990.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="310.3" y="963.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.3" y="974.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="310.3" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.3" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="310.3" y="931.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.3" y="942.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="310.3" y="915.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="313.3" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="310.3" y="899.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="313.3" y="910.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="310.3" y="883.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.3" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="310.3" y="867.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.3" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="310.3" y="851.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.3" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="310.3" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.3" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="310.3" y="819.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.3" y="830.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="310.3" y="803.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.3" y="814.0"></text>
</g>
<g>
<title>EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="310.3" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.3" y="798.0"></text>
</g>
<g>
<title>EnvConfigSource.replaceNonAlphanumericByUnderscores (1 samples, 0.03%)</title><rect x="310.3" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.3" y="782.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="310.3" y="755.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.3" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="310.7" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.7" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="310.7" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.7" y="798.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="310.7" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.7" y="782.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="310.7" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.7" y="766.0"></text>
</g>
<g>
<title>Matcher.replaceAll (1 samples, 0.03%)</title><rect x="310.7" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.7" y="750.0"></text>
</g>
<g>
<title>Matcher.find (1 samples, 0.03%)</title><rect x="310.7" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.7" y="734.0"></text>
</g>
<g>
<title>Matcher.search (1 samples, 0.03%)</title><rect x="310.7" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.7" y="718.0"></text>
</g>
<g>
<title>Pattern$Start.match (1 samples, 0.03%)</title><rect x="310.7" y="691.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.7" y="702.0"></text>
</g>
<g>
<title>Pattern$CharProperty.match (1 samples, 0.03%)</title><rect x="310.7" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.7" y="686.0"></text>
</g>
<g>
<title>961419791.is (1 samples, 0.03%)</title><rect x="310.7" y="659.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="313.7" y="670.0"></text>
</g>
<g>
<title>Pattern$CharPredicate.lambda$negate$3 (1 samples, 0.03%)</title><rect x="310.7" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.7" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="311.1" y="1043.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.1" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="311.1" y="1027.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.1" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="311.1" y="1011.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.1" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="311.1" y="995.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.1" y="1006.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.1" y="990.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="963.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.1" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="311.1" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="314.1" y="958.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.1" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="311.1" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.1" y="926.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="314.1" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="311.1" y="883.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.1" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.1" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="311.1" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.1" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="835.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.1" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="311.1" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.1" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="311.1" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.1" y="814.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="311.1" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.1" y="798.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.getValue (1 samples, 0.03%)</title><rect x="311.1" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.1" y="782.0"></text>
</g>
<g>
<title>Pattern.matcher (1 samples, 0.03%)</title><rect x="311.1" y="755.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.1" y="766.0"></text>
</g>
<g>
<title>Matcher.&lt;init&gt; (1 samples, 0.03%)</title><rect x="311.1" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.1" y="750.0"></text>
</g>
<g>
<title>Matcher.reset (1 samples, 0.03%)</title><rect x="311.1" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.1" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (7 samples, 0.20%)</title><rect x="311.6" y="1059.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.6" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (7 samples, 0.20%)</title><rect x="311.6" y="1043.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.6" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (7 samples, 0.20%)</title><rect x="311.6" y="1027.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.6" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (7 samples, 0.20%)</title><rect x="311.6" y="1011.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.6" y="1022.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (7 samples, 0.20%)</title><rect x="311.6" y="995.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.6" y="1006.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (7 samples, 0.20%)</title><rect x="311.6" y="979.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.6" y="990.0"></text>
</g>
<g>
<title>Expression.compile (1 samples, 0.03%)</title><rect x="311.6" y="963.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.6" y="974.0"></text>
</g>
<g>
<title>Expression.compile (1 samples, 0.03%)</title><rect x="311.6" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.6" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="311.6" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="311.6" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.6" y="926.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="311.6" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.6" y="910.0"></text>
</g>
<g>
<title>Object.hashCode (1 samples, 0.03%)</title><rect x="311.6" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.6" y="894.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="311.6" y="867.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="314.6" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="311.6" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="314.6" y="862.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="311.6" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="314.6" y="846.0"></text>
</g>
<g>
<title>revoke_bias(oopDesc*, bool, bool, JavaThread*, JavaThread**) (1 samples, 0.03%)</title><rect x="311.6" y="819.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="314.6" y="830.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (1 samples, 0.03%)</title><rect x="311.6" y="803.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="314.6" y="814.0"></text>
</g>
<g>
<title>vframe::java_sender() const (1 samples, 0.03%)</title><rect x="311.6" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="314.6" y="798.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.03%)</title><rect x="311.6" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="314.6" y="782.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.03%)</title><rect x="311.6" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.6" y="766.0"></text>
</g>
<g>
<title>Expression.evaluate (1 samples, 0.03%)</title><rect x="312.0" y="963.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.0" y="974.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="312.0" y="947.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.0" y="958.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="312.0" y="931.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.0" y="942.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.canBeCached (1 samples, 0.03%)</title><rect x="312.0" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="315.0" y="926.0"></text>
</g>
<g>
<title>MemberName.isCallerSensitive (1 samples, 0.03%)</title><rect x="312.0" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.0" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="312.5" y="963.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="315.5" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="312.5" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="315.5" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="315.5" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="915.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="315.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="883.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="315.5" y="894.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="315.5" y="878.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.5" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="315.5" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="315.5" y="830.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="312.5" y="803.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="315.5" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.findMethodHandleType (1 samples, 0.03%)</title><rect x="312.9" y="963.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.9" y="974.0"></text>
</g>
<g>
<title>MethodType.makeImpl (1 samples, 0.03%)</title><rect x="312.9" y="947.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.9" y="958.0"></text>
</g>
<g>
<title>MethodType$ConcurrentWeakInternSet.add (1 samples, 0.03%)</title><rect x="312.9" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="315.9" y="942.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="312.9" y="915.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="315.9" y="926.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putVal (1 samples, 0.03%)</title><rect x="312.9" y="899.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.9" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (3 samples, 0.08%)</title><rect x="313.4" y="963.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.4" y="974.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (3 samples, 0.08%)</title><rect x="313.4" y="947.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.4" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (3 samples, 0.08%)</title><rect x="313.4" y="931.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.4" y="942.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (3 samples, 0.08%)</title><rect x="313.4" y="915.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.4" y="926.0"></text>
</g>
<g>
<title>SecretKeys.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="313.4" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.4" y="910.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="313.4" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.4" y="894.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="313.4" y="867.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.4" y="878.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="313.4" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.4" y="862.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="313.4" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.4" y="846.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="313.4" y="819.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.4" y="830.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="313.4" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.4" y="814.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="313.4" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.4" y="798.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="313.4" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.4" y="782.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="313.4" y="755.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.4" y="766.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="313.4" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.4" y="750.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="313.4" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.4" y="734.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="313.4" y="707.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="316.4" y="718.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="313.4" y="691.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="316.4" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="313.4" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="316.4" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.8" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="883.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.8" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="867.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.8" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="851.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.8" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.8" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="819.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.8" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="803.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.8" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.8" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.8" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.8" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.8" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.8" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.8" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="691.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="316.8" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="675.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.8" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="659.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.8" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="643.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.8" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="627.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.8" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="611.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.8" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="595.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.8" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (2 samples, 0.06%)</title><rect x="313.8" y="579.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.8" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (2 samples, 0.06%)</title><rect x="313.8" y="563.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.8" y="574.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (2 samples, 0.06%)</title><rect x="313.8" y="547.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.8" y="558.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="313.8" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.8" y="542.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="313.8" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.8" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="313.8" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.8" y="510.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="313.8" y="483.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.8" y="494.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="313.8" y="467.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.8" y="478.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="313.8" y="451.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="316.8" y="462.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="313.8" y="435.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="316.8" y="446.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="313.8" y="419.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="316.8" y="430.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="313.8" y="403.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="316.8" y="414.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="313.8" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.8" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="313.8" y="371.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="316.8" y="382.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="313.8" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="316.8" y="366.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="313.8" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="316.8" y="350.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="313.8" y="323.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="316.8" y="334.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="313.8" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="316.8" y="318.0"></text>
</g>
<g>
<title>ConfigValue.builder (1 samples, 0.03%)</title><rect x="314.2" y="531.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.2" y="542.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="314.2" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="317.2" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="314.2" y="499.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="317.2" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="314.2" y="483.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="317.2" y="494.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="314.2" y="467.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="317.2" y="478.0"></text>
</g>
<g>
<title>JvmtiClassEventMark::JvmtiClassEventMark(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="314.2" y="451.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="317.2" y="462.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.03%)</title><rect x="314.2" y="435.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="317.2" y="446.0"></text>
</g>
<g>
<title>ConfigProviderResolver.instance (1 samples, 0.03%)</title><rect x="314.7" y="1075.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.7" y="1086.0"></text>
</g>
<g>
<title>ConfigProviderResolver.loadSpi (1 samples, 0.03%)</title><rect x="314.7" y="1059.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.7" y="1070.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="314.7" y="1043.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.7" y="1054.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="314.7" y="1027.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.7" y="1038.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="314.7" y="1011.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.7" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="314.7" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.7" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="314.7" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.7" y="990.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="314.7" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.7" y="974.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="314.7" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.7" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="314.7" y="931.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.7" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="314.7" y="915.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.7" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="314.7" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.7" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="314.7" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.7" y="894.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="314.7" y="867.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.7" y="878.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="314.7" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.7" y="862.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="314.7" y="835.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="317.7" y="846.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="314.7" y="819.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="317.7" y="830.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="314.7" y="803.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="317.7" y="814.0"></text>
</g>
<g>
<title>ConfigUtils.&lt;clinit&gt; (43 samples, 1.20%)</title><rect x="315.1" y="1075.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="318.1" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="315.1" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="318.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="315.1" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="318.1" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="1027.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.1" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="1011.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="318.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="995.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="318.1" y="990.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="963.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="318.1" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="318.1" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="318.1" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="318.1" y="926.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="318.1" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="315.1" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="318.1" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="315.1" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="318.1" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="315.1" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="318.1" y="862.0"></text>
</g>
<g>
<title>Logger.getLogger (41 samples, 1.15%)</title><rect x="315.6" y="1059.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.6" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="315.6" y="1043.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="315.6" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.6" y="1038.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="315.6" y="1011.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.6" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="315.6" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.6" y="1006.0"></text>
</g>
<g>
<title>LoggerProviders.&lt;clinit&gt; (40 samples, 1.12%)</title><rect x="316.0" y="1043.0" width="17.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.0" y="1054.0"></text>
</g>
<g>
<title>LoggerProviders.find (40 samples, 1.12%)</title><rect x="316.0" y="1027.0" width="17.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.0" y="1038.0"></text>
</g>
<g>
<title>LoggerProviders.findProvider (40 samples, 1.12%)</title><rect x="316.0" y="1011.0" width="17.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.0" y="1022.0"></text>
</g>
<g>
<title>LoggerProviders.tryJBossLogManager (33 samples, 0.92%)</title><rect x="316.0" y="995.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.0" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="316.0" y="979.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="319.0" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="316.0" y="963.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="319.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="316.0" y="947.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="319.0" y="958.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="316.0" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="319.0" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="316.0" y="915.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="319.0" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="316.0" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="319.0" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="316.0" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="319.0" y="894.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_parameters() (1 samples, 0.03%)</title><rect x="316.0" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="319.0" y="878.0"></text>
</g>
<g>
<title>ArgumentSizeComputer::set(int, BasicType) (1 samples, 0.03%)</title><rect x="316.0" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="319.0" y="862.0"></text>
</g>
<g>
<title>LogManager.&lt;clinit&gt; (5 samples, 0.14%)</title><rect x="316.4" y="979.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.4" y="990.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (5 samples, 0.14%)</title><rect x="316.4" y="963.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.4" y="974.0"></text>
</g>
<g>
<title>AccessController.createWrapper (2 samples, 0.06%)</title><rect x="316.4" y="947.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.4" y="958.0"></text>
</g>
<g>
<title>AccessControlContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="316.4" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.4" y="942.0"></text>
</g>
<g>
<title>FilePermCompat.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="316.4" y="915.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.4" y="926.0"></text>
</g>
<g>
<title>SecurityProperties.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="316.4" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.4" y="910.0"></text>
</g>
<g>
<title>SecurityProperties.includedInExceptions (1 samples, 0.03%)</title><rect x="316.4" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.4" y="894.0"></text>
</g>
<g>
<title>SecurityProperties.privilegedGetOverridable (1 samples, 0.03%)</title><rect x="316.4" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.4" y="878.0"></text>
</g>
<g>
<title>SecurityProperties.getOverridableProperty (1 samples, 0.03%)</title><rect x="316.4" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.4" y="862.0"></text>
</g>
<g>
<title>Security.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="316.4" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.4" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="316.4" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.4" y="830.0"></text>
</g>
<g>
<title>Security$1.run (1 samples, 0.03%)</title><rect x="316.4" y="803.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.4" y="814.0"></text>
</g>
<g>
<title>Security$1.run (1 samples, 0.03%)</title><rect x="316.4" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.4" y="798.0"></text>
</g>
<g>
<title>Security.initialize (1 samples, 0.03%)</title><rect x="316.4" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.4" y="782.0"></text>
</g>
<g>
<title>Properties.load (1 samples, 0.03%)</title><rect x="316.4" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.4" y="766.0"></text>
</g>
<g>
<title>Properties.load0 (1 samples, 0.03%)</title><rect x="316.4" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.4" y="750.0"></text>
</g>
<g>
<title>Properties$LineReader.readLine (1 samples, 0.03%)</title><rect x="316.4" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.4" y="734.0"></text>
</g>
<g>
<title>AccessController.getCallerPD (1 samples, 0.03%)</title><rect x="316.9" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="319.9" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="316.9" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="319.9" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="316.9" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="319.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="316.9" y="883.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="319.9" y="894.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="316.9" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="319.9" y="878.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="316.9" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="319.9" y="862.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="316.9" y="835.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="319.9" y="846.0"></text>
</g>
<g>
<title>JvmtiEnv::GetClassMethods(oopDesc*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="316.9" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="319.9" y="830.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType) (1 samples, 0.03%)</title><rect x="316.9" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="319.9" y="814.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="316.9" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="319.9" y="798.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="316.9" y="771.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="319.9" y="782.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="316.9" y="755.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="319.9" y="766.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="317.3" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.3" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="317.3" y="931.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="320.3" y="942.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="317.3" y="915.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="320.3" y="926.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="317.3" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="320.3" y="910.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="317.3" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="320.3" y="894.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="317.3" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="320.3" y="878.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="317.3" y="851.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="320.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="835.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="320.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="819.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="320.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="803.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="320.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="787.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="320.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="771.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="320.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="755.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="320.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="739.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="317.3" y="723.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="320.3" y="734.0"></text>
</g>
<g>
<title>LogManager$1.run (2 samples, 0.06%)</title><rect x="317.8" y="947.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.8" y="958.0"></text>
</g>
<g>
<title>LogManager$1.run (2 samples, 0.06%)</title><rect x="317.8" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.8" y="942.0"></text>
</g>
<g>
<title>Class.newInstance (2 samples, 0.06%)</title><rect x="317.8" y="915.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.8" y="926.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="317.8" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.8" y="910.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="317.8" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.8" y="894.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="317.8" y="867.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="320.8" y="878.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="317.8" y="851.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="320.8" y="862.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="835.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="320.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="320.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="320.8" y="814.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="320.8" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="320.8" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="320.8" y="766.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="320.8" y="750.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="320.8" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="317.8" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="320.8" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="317.8" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="320.8" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="317.8" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="320.8" y="686.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="318.2" y="899.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.2" y="910.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="318.2" y="883.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.2" y="894.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="318.2" y="867.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.2" y="878.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (1 samples, 0.03%)</title><rect x="318.2" y="851.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.2" y="862.0"></text>
</g>
<g>
<title>LogManager.&lt;init&gt; (1 samples, 0.03%)</title><rect x="318.2" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.2" y="846.0"></text>
</g>
<g>
<title>LogManager.&lt;init&gt; (1 samples, 0.03%)</title><rect x="318.2" y="819.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.2" y="830.0"></text>
</g>
<g>
<title>LogManager.&lt;init&gt; (1 samples, 0.03%)</title><rect x="318.2" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.2" y="814.0"></text>
</g>
<g>
<title>ReentrantLock.&lt;init&gt; (1 samples, 0.03%)</title><rect x="318.2" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.2" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="318.2" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="321.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="321.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="321.2" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="723.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="321.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="321.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="321.2" y="702.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="675.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="321.2" y="686.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="321.2" y="670.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="318.2" y="643.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="321.2" y="654.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="318.2" y="627.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="321.2" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="318.2" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="321.2" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="318.2" y="595.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="321.2" y="606.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="318.2" y="579.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="321.2" y="590.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="318.2" y="563.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="321.2" y="574.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.03%)</title><rect x="318.2" y="547.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="321.2" y="558.0"></text>
</g>
<g>
<title>FieldInfo::from_field_array(Array&lt;unsigned short&gt;*, int) (1 samples, 0.03%)</title><rect x="318.2" y="531.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="321.2" y="542.0"></text>
</g>
<g>
<title>LogManager.getLogManager (2 samples, 0.06%)</title><rect x="318.7" y="979.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.7" y="990.0"></text>
</g>
<g>
<title>LogManager.ensureLogManagerInitialized (2 samples, 0.06%)</title><rect x="318.7" y="963.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="321.7" y="974.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="318.7" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.7" y="958.0"></text>
</g>
<g>
<title>LogManager$2.run (2 samples, 0.06%)</title><rect x="318.7" y="931.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="321.7" y="942.0"></text>
</g>
<g>
<title>LogManager.readPrimordialConfiguration (2 samples, 0.06%)</title><rect x="318.7" y="915.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="321.7" y="926.0"></text>
</g>
<g>
<title>BootstrapLogger.redirectTemporaryLoggers (2 samples, 0.06%)</title><rect x="318.7" y="899.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.7" y="910.0"></text>
</g>
<g>
<title>BootstrapLogger.releaseSurrogateLoggers (2 samples, 0.06%)</title><rect x="318.7" y="883.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.7" y="894.0"></text>
</g>
<g>
<title>BootstrapLogger.useSurrogateLoggers (2 samples, 0.06%)</title><rect x="318.7" y="867.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.7" y="878.0"></text>
</g>
<g>
<title>BootstrapLogger$DetectBackend.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="318.7" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.7" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="318.7" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.7" y="846.0"></text>
</g>
<g>
<title>BootstrapLogger$DetectBackend$1.run (1 samples, 0.03%)</title><rect x="318.7" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.7" y="830.0"></text>
</g>
<g>
<title>BootstrapLogger$DetectBackend$1.run (1 samples, 0.03%)</title><rect x="318.7" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.7" y="814.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="318.7" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.7" y="798.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="318.7" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.7" y="782.0"></text>
</g>
<g>
<title>ServiceLoader$ModuleServicesLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="318.7" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.7" y="766.0"></text>
</g>
<g>
<title>ServiceLoader.loadProvider (1 samples, 0.03%)</title><rect x="318.7" y="739.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.7" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="318.7" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="321.7" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="318.7" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="321.7" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="318.7" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="321.7" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="318.7" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="321.7" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="318.7" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="321.7" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="318.7" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="321.7" y="654.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="318.7" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="321.7" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="318.7" y="611.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="321.7" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="318.7" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="321.7" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="319.1" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="322.1" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="319.1" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="322.1" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="319.1" y="819.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="322.1" y="830.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="319.1" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="322.1" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="319.1" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="322.1" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="319.1" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="322.1" y="782.0"></text>
</g>
<g>
<title>LoggerProviders.logProvider (25 samples, 0.70%)</title><rect x="319.5" y="979.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.5" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="319.5" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="322.5" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="319.5" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="322.5" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="319.5" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="322.5" y="942.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="319.5" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="322.5" y="926.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="319.5" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="322.5" y="910.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="319.5" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="322.5" y="894.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (12 samples, 0.34%)</title><rect x="320.0" y="963.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.0" y="974.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (12 samples, 0.34%)</title><rect x="320.0" y="947.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.0" y="958.0"></text>
</g>
<g>
<title>LogContext.&lt;clinit&gt; (12 samples, 0.34%)</title><rect x="320.0" y="931.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.0" y="942.0"></text>
</g>
<g>
<title>Level.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="320.0" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="323.0" y="926.0"></text>
</g>
<g>
<title>Level.&lt;init&gt; (1 samples, 0.03%)</title><rect x="320.0" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.0" y="910.0"></text>
</g>
<g>
<title>Level.&lt;init&gt; (1 samples, 0.03%)</title><rect x="320.0" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="323.0" y="894.0"></text>
</g>
<g>
<title>Level.&lt;init&gt; (1 samples, 0.03%)</title><rect x="320.0" y="867.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.0" y="878.0"></text>
</g>
<g>
<title>Level.&lt;init&gt; (1 samples, 0.03%)</title><rect x="320.0" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="323.0" y="862.0"></text>
</g>
<g>
<title>Level$KnownLevel.add (1 samples, 0.03%)</title><rect x="320.0" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.0" y="846.0"></text>
</g>
<g>
<title>Level$KnownLevel.registerWithClassLoader (1 samples, 0.03%)</title><rect x="320.0" y="819.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.0" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="320.0" y="803.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.0" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="320.0" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.0" y="798.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="320.0" y="771.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.0" y="782.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="320.0" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.0" y="766.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="320.0" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.0" y="750.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="320.0" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.0" y="734.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="320.0" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="323.0" y="718.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="320.0" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.0" y="702.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="320.0" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.0" y="686.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="320.0" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.0" y="670.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="320.0" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.0" y="654.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="320.0" y="627.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="323.0" y="638.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="320.0" y="611.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="323.0" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="320.0" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="323.0" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="320.0" y="579.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="323.0" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="320.0" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="323.0" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="320.0" y="547.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="323.0" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_classfile_attributes(ClassFileStream const*, ConstantPool*, ClassFileParser::ClassAnnotationCollector*, Thread*) (1 samples, 0.03%)</title><rect x="320.0" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="323.0" y="542.0"></text>
</g>
<g>
<title>LogContext.&lt;init&gt; (5 samples, 0.14%)</title><rect x="320.4" y="915.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="323.4" y="926.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="320.4" y="899.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.4" y="910.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="320.4" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="323.4" y="894.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="320.4" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.4" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="320.4" y="851.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.4" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="320.4" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.4" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="320.4" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.4" y="830.0"></text>
</g>
<g>
<title>LoggerNode.&lt;init&gt; (4 samples, 0.11%)</title><rect x="320.9" y="899.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.9" y="910.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="320.9" y="883.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.9" y="894.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="320.9" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.9" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="320.9" y="851.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.9" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="320.9" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.9" y="846.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="320.9" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.9" y="830.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="320.9" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.9" y="814.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="320.9" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.9" y="798.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="320.9" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.9" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="320.9" y="755.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="323.9" y="766.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="320.9" y="739.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="323.9" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="323.9" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="323.9" y="718.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="323.9" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="323.9" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="323.9" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="323.9" y="654.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="323.9" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::do_local_static_fields(void (*)(fieldDescriptor*, Handle, Thread*), Handle, Thread*) (1 samples, 0.03%)</title><rect x="320.9" y="611.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="323.9" y="622.0"></text>
</g>
<g>
<title>FieldInfo::offset() const (1 samples, 0.03%)</title><rect x="320.9" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="323.9" y="606.0"></text>
</g>
<g>
<title>CopyOnWriteMap.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="321.3" y="883.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.3" y="894.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="321.3" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.3" y="878.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="321.3" y="851.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.3" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="321.3" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.3" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="321.3" y="819.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.3" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="321.3" y="803.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.3" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="321.3" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.3" y="798.0"></text>
</g>
<g>
<title>Resource.getBytes (1 samples, 0.03%)</title><rect x="321.3" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.3" y="782.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="321.3" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.3" y="766.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="321.3" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="324.3" y="750.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="321.3" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.3" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="321.3" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="324.3" y="718.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="321.3" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="324.3" y="702.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="321.3" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="324.3" y="686.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="321.3" y="659.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="324.3" y="670.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="321.3" y="643.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="324.3" y="654.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="321.3" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="324.3" y="638.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="321.3" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="324.3" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.03%)</title><rect x="321.3" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="324.3" y="606.0"></text>
</g>
<g>
<title>nmethod::new_native_nmethod(methodHandle const&amp;, int, CodeBuffer*, int, int, int, int, int, OopMapSet*) (1 samples, 0.03%)</title><rect x="321.3" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="324.3" y="590.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, CodeOffsets*, CodeBuffer*, int, int, int, OopMapSet*) (1 samples, 0.03%)</title><rect x="321.3" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="324.3" y="574.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.03%)</title><rect x="321.3" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="324.3" y="558.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.03%)</title><rect x="321.3" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="324.3" y="542.0"></text>
</g>
<g>
<title>RelocIterator::reloc() (1 samples, 0.03%)</title><rect x="321.3" y="515.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="324.3" y="526.0"></text>
</g>
<g>
<title>SpinLock.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="321.8" y="883.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.8" y="894.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="321.8" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.8" y="878.0"></text>
</g>
<g>
<title>655381473.run (1 samples, 0.03%)</title><rect x="321.8" y="851.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="324.8" y="862.0"></text>
</g>
<g>
<title>SpinLock.lambda$static$0 (1 samples, 0.03%)</title><rect x="321.8" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.8" y="846.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="321.8" y="819.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.8" y="830.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="321.8" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.8" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="321.8" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.8" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="321.8" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.8" y="782.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="321.8" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.8" y="766.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="321.8" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.8" y="750.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="321.8" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.8" y="734.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.checkResource (1 samples, 0.03%)</title><rect x="321.8" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.8" y="718.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="321.8" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.8" y="702.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="321.8" y="675.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.8" y="686.0"></text>
</g>
<g>
<title>JDKSpecific.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="322.2" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.2" y="878.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="322.2" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.2" y="862.0"></text>
</g>
<g>
<title>JDKSpecific$1.run (1 samples, 0.03%)</title><rect x="322.2" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.2" y="846.0"></text>
</g>
<g>
<title>JDKSpecific$1.run (1 samples, 0.03%)</title><rect x="322.2" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.2" y="830.0"></text>
</g>
<g>
<title>Field.setAccessible (1 samples, 0.03%)</title><rect x="322.2" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.2" y="814.0"></text>
</g>
<g>
<title>Field.checkCanSetAccessible (1 samples, 0.03%)</title><rect x="322.2" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.2" y="798.0"></text>
</g>
<g>
<title>AccessibleObject.checkCanSetAccessible (1 samples, 0.03%)</title><rect x="322.2" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.2" y="782.0"></text>
</g>
<g>
<title>AccessibleObject.checkCanSetAccessible (1 samples, 0.03%)</title><rect x="322.2" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.2" y="766.0"></text>
</g>
<g>
<title>AccessibleObject.logIfOpenedForIllegalAccess (1 samples, 0.03%)</title><rect x="322.2" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.2" y="750.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="322.2" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.2" y="734.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="322.2" y="707.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.2" y="718.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="322.2" y="691.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.2" y="702.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="322.2" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.2" y="686.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="322.2" y="659.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.2" y="670.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="322.2" y="643.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.2" y="654.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="322.2" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.2" y="638.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="322.2" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.2" y="622.0"></text>
</g>
<g>
<title>String.replace (1 samples, 0.03%)</title><rect x="322.2" y="595.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.2" y="606.0"></text>
</g>
<g>
<title>StringLatin1.replace (1 samples, 0.03%)</title><rect x="322.2" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.2" y="590.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.03%)</title><rect x="322.2" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="325.2" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="322.2" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="325.2" y="558.0"></text>
</g>
<g>
<title>LogContext.getConfigurator (6 samples, 0.17%)</title><rect x="322.6" y="915.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.6" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (4 samples, 0.11%)</title><rect x="322.6" y="899.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.6" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (4 samples, 0.11%)</title><rect x="322.6" y="883.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.6" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (4 samples, 0.11%)</title><rect x="322.6" y="867.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (4 samples, 0.11%)</title><rect x="322.6" y="851.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.6" y="862.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (3 samples, 0.08%)</title><rect x="322.6" y="835.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.6" y="846.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="322.6" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.6" y="830.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="322.6" y="803.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.6" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResources (1 samples, 0.03%)</title><rect x="322.6" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findMiscResource (1 samples, 0.03%)</title><rect x="322.6" y="771.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.6" y="782.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="322.6" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.6" y="766.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.03%)</title><rect x="322.6" y="739.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="325.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="322.6" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="325.6" y="734.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (2 samples, 0.06%)</title><rect x="323.1" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.1" y="830.0"></text>
</g>
<g>
<title>JarURLConnection.getInputStream (1 samples, 0.03%)</title><rect x="323.1" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.1" y="814.0"></text>
</g>
<g>
<title>JarURLConnection.connect (1 samples, 0.03%)</title><rect x="323.1" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.1" y="798.0"></text>
</g>
<g>
<title>URLJarFile.getEntry (1 samples, 0.03%)</title><rect x="323.1" y="771.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.1" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="323.1" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="326.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="323.1" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="323.1" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="326.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="323.1" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.1" y="718.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="323.1" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="326.1" y="702.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="323.1" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="326.1" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="323.1" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="326.1" y="670.0"></text>
</g>
<g>
<title>URL.openConnection (1 samples, 0.03%)</title><rect x="323.5" y="803.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.5" y="814.0"></text>
</g>
<g>
<title>Handler.openConnection (1 samples, 0.03%)</title><rect x="323.5" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="326.5" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="323.5" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="326.5" y="782.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="326.5" y="766.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="326.5" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="326.5" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="326.5" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="326.5" y="702.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="675.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="326.5" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="326.5" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="643.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.5" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="326.5" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.5" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="326.5" y="606.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="579.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="326.5" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="563.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="326.5" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="547.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="326.5" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="531.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="326.5" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="515.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="326.5" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="499.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="326.5" y="510.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="326.5" y="494.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="326.5" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="451.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="326.5" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="435.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="326.5" y="446.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="326.5" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="323.5" y="403.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.5" y="414.0"></text>
</g>
<g>
<title>ServiceLoader.getConstructor (1 samples, 0.03%)</title><rect x="324.0" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.0" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="324.0" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.0" y="830.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (1 samples, 0.03%)</title><rect x="324.0" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.0" y="814.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (1 samples, 0.03%)</title><rect x="324.0" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.0" y="798.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="324.0" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.0" y="782.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="324.0" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.0" y="766.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="324.0" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.0" y="750.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="324.0" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.0" y="734.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="324.0" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.0" y="718.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="324.0" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.0" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="324.0" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.0" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="324.0" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.0" y="670.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="324.0" y="643.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.0" y="654.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="324.0" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.0" y="638.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="324.0" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.0" y="622.0"></text>
</g>
<g>
<title>JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="324.0" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.0" y="606.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="324.0" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.0" y="590.0"></text>
</g>
<g>
<title>JarFile.getVersionedEntry (1 samples, 0.03%)</title><rect x="324.0" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.0" y="574.0"></text>
</g>
<g>
<title>JarFile.getEntry0 (1 samples, 0.03%)</title><rect x="324.0" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.0" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="324.0" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="327.0" y="542.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="324.0" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="327.0" y="526.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="324.0" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="327.0" y="510.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="324.0" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="327.0" y="494.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="324.0" y="467.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="327.0" y="478.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="324.0" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="327.0" y="462.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="324.0" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="327.0" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="324.0" y="419.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="327.0" y="430.0"></text>
</g>
<g>
<title>ServiceLoader$3.next (2 samples, 0.06%)</title><rect x="324.4" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.4" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$ProviderImpl.get (2 samples, 0.06%)</title><rect x="324.4" y="883.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.4" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$ProviderImpl.newInstance (2 samples, 0.06%)</title><rect x="324.4" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.4" y="878.0"></text>
</g>
<g>
<title>Constructor.newInstance (2 samples, 0.06%)</title><rect x="324.4" y="851.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.4" y="862.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.06%)</title><rect x="324.4" y="835.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.4" y="846.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (2 samples, 0.06%)</title><rect x="324.4" y="819.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.4" y="830.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (2 samples, 0.06%)</title><rect x="324.4" y="803.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.4" y="814.0"></text>
</g>
<g>
<title>InitialConfigurator.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="324.4" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.4" y="798.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (2 samples, 0.06%)</title><rect x="324.4" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.4" y="782.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (2 samples, 0.06%)</title><rect x="324.4" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.4" y="766.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (2 samples, 0.06%)</title><rect x="324.4" y="739.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.4" y="750.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (2 samples, 0.06%)</title><rect x="324.4" y="723.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.4" y="734.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="324.4" y="707.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.4" y="718.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="324.4" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.4" y="702.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="324.4" y="675.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.4" y="686.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="324.4" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.4" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="324.4" y="643.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.4" y="654.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="324.4" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.4" y="638.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="324.4" y="611.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.4" y="622.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="324.4" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.4" y="606.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="324.4" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.4" y="590.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="324.4" y="563.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.4" y="574.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="324.4" y="547.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.4" y="558.0"></text>
</g>
<g>
<title>Resource.getBytes (1 samples, 0.03%)</title><rect x="324.4" y="531.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.4" y="542.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="324.4" y="515.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="327.4" y="526.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="324.4" y="499.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.4" y="510.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="324.4" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.4" y="494.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="324.4" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.4" y="478.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="324.4" y="451.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.4" y="462.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="324.4" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.4" y="446.0"></text>
</g>
<g>
<title>Java_java_io_RandomAccessFile_seek0 (1 samples, 0.03%)</title><rect x="324.4" y="419.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="327.4" y="430.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.03%)</title><rect x="324.4" y="403.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="327.4" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="324.4" y="387.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="327.4" y="398.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="324.4" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="327.4" y="382.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findLoadedModule (1 samples, 0.03%)</title><rect x="324.9" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.9" y="718.0"></text>
</g>
<g>
<title>Logger.debugf (12 samples, 0.34%)</title><rect x="325.3" y="963.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.3" y="974.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.doLogf (12 samples, 0.34%)</title><rect x="325.3" y="947.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.3" y="958.0"></text>
</g>
<g>
<title>Logger.log (12 samples, 0.34%)</title><rect x="325.3" y="931.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.3" y="942.0"></text>
</g>
<g>
<title>ExtLogRecord.&lt;init&gt; (12 samples, 0.34%)</title><rect x="325.3" y="915.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.3" y="926.0"></text>
</g>
<g>
<title>HostName.&lt;clinit&gt; (7 samples, 0.20%)</title><rect x="325.3" y="899.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.3" y="910.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (7 samples, 0.20%)</title><rect x="325.3" y="883.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.3" y="894.0"></text>
</g>
<g>
<title>GetHostInfoAction.run (7 samples, 0.20%)</title><rect x="325.3" y="867.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.3" y="878.0"></text>
</g>
<g>
<title>GetHostInfoAction.run (7 samples, 0.20%)</title><rect x="325.3" y="851.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.3" y="862.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="325.3" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.3" y="846.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="325.3" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.3" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="325.3" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.3" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="325.3" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="328.3" y="798.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="325.3" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.3" y="782.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="325.3" y="755.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.3" y="766.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="325.3" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.3" y="750.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="325.3" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.3" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="325.3" y="707.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="328.3" y="718.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="325.3" y="691.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="328.3" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="328.3" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="328.3" y="670.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="328.3" y="654.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="328.3" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="328.3" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="328.3" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="328.3" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="325.3" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="328.3" y="574.0"></text>
</g>
<g>
<title>HostName.getLocalHost (4 samples, 0.11%)</title><rect x="325.7" y="835.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.7" y="846.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="325.7" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.7" y="830.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="325.7" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.7" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="325.7" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.7" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="325.7" y="771.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.7" y="782.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="325.7" y="755.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.7" y="766.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="325.7" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.7" y="750.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="325.7" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="328.7" y="734.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="325.7" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.7" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="325.7" y="691.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="328.7" y="702.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="325.7" y="675.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="328.7" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="328.7" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="328.7" y="654.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="328.7" y="638.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="328.7" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="328.7" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="579.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="328.7" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="563.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="328.7" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="547.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="328.7" y="558.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="531.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="328.7" y="542.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="325.7" y="515.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.7" y="526.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="325.7" y="499.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="328.7" y="510.0"></text>
</g>
<g>
<title>InetAddress.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="326.2" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.2" y="830.0"></text>
</g>
<g>
<title>ConcurrentSkipListSet.&lt;init&gt; (1 samples, 0.03%)</title><rect x="326.2" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.2" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="326.2" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="329.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="326.2" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="329.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="326.2" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="326.2" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="329.2" y="750.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="326.2" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="329.2" y="734.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="326.2" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.2" y="718.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="326.2" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="329.2" y="702.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="326.2" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.2" y="686.0"></text>
</g>
<g>
<title>Rewriter::maybe_rewrite_invokehandle(unsigned char*, int, int, bool) (1 samples, 0.03%)</title><rect x="326.2" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="329.2" y="670.0"></text>
</g>
<g>
<title>MethodHandles::signature_polymorphic_name_id(Klass*, Symbol*) (1 samples, 0.03%)</title><rect x="326.2" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="329.2" y="654.0"></text>
</g>
<g>
<title>MethodHandles::signature_polymorphic_name_id(Symbol*) (1 samples, 0.03%)</title><rect x="326.2" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="329.2" y="638.0"></text>
</g>
<g>
<title>MethodHandles::is_method_handle_invoke_name(Klass*, Symbol*) (1 samples, 0.03%)</title><rect x="326.2" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="329.2" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::find_method(Symbol const*, Symbol const*) const (1 samples, 0.03%)</title><rect x="326.2" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="329.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="326.2" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="329.2" y="590.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="326.2" y="563.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="329.2" y="574.0"></text>
</g>
<g>
<title>InetAddress.getLocalHost (2 samples, 0.06%)</title><rect x="326.6" y="819.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.6" y="830.0"></text>
</g>
<g>
<title>InetAddress.getAllByName0 (2 samples, 0.06%)</title><rect x="326.6" y="803.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.6" y="814.0"></text>
</g>
<g>
<title>InetAddress$NameServiceAddresses.get (2 samples, 0.06%)</title><rect x="326.6" y="787.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.6" y="798.0"></text>
</g>
<g>
<title>ConcurrentSkipListSet.add (1 samples, 0.03%)</title><rect x="326.6" y="771.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.6" y="782.0"></text>
</g>
<g>
<title>ConcurrentSkipListMap.putIfAbsent (1 samples, 0.03%)</title><rect x="326.6" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="329.6" y="766.0"></text>
</g>
<g>
<title>ConcurrentSkipListMap.doPut (1 samples, 0.03%)</title><rect x="326.6" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.6" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="326.6" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="329.6" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="326.6" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="329.6" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="691.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="329.6" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="329.6" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="329.6" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="643.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="329.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="329.6" y="638.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.6" y="622.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.6" y="606.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="326.6" y="579.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="329.6" y="590.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="326.6" y="563.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="329.6" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="326.6" y="547.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.6" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="326.6" y="531.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="329.6" y="542.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.03%)</title><rect x="326.6" y="515.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="329.6" y="526.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="326.6" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="329.6" y="510.0"></text>
</g>
<g>
<title>InetAddress.getAddressesFromNameService (1 samples, 0.03%)</title><rect x="327.1" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.1" y="782.0"></text>
</g>
<g>
<title>InetAddress$PlatformNameService.lookupAllHostAddr (1 samples, 0.03%)</title><rect x="327.1" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.1" y="766.0"></text>
</g>
<g>
<title>Inet6AddressImpl.lookupAllHostAddr (1 samples, 0.03%)</title><rect x="327.1" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.1" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="327.1" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="330.1" y="734.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="327.1" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="330.1" y="718.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="327.1" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="330.1" y="702.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="327.1" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="330.1" y="686.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="327.1" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="330.1" y="670.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="327.1" y="643.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="330.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="327.1" y="627.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="330.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="327.1" y="611.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="330.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="327.1" y="595.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="330.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="327.1" y="579.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="330.1" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="327.1" y="563.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="330.1" y="574.0"></text>
</g>
<g>
<title>Matcher.find (1 samples, 0.03%)</title><rect x="327.5" y="835.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.5" y="846.0"></text>
</g>
<g>
<title>Matcher.search (1 samples, 0.03%)</title><rect x="327.5" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="330.5" y="830.0"></text>
</g>
<g>
<title>Pattern$Start.match (1 samples, 0.03%)</title><rect x="327.5" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="814.0"></text>
</g>
<g>
<title>Pattern$Branch.match (1 samples, 0.03%)</title><rect x="327.5" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.5" y="798.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="327.9" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.9" y="846.0"></text>
</g>
<g>
<title>Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="327.9" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.9" y="830.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="327.9" y="803.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.9" y="814.0"></text>
</g>
<g>
<title>Pattern.expr (1 samples, 0.03%)</title><rect x="327.9" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.9" y="798.0"></text>
</g>
<g>
<title>Pattern.sequence (1 samples, 0.03%)</title><rect x="327.9" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="330.9" y="782.0"></text>
</g>
<g>
<title>Pattern.atom (1 samples, 0.03%)</title><rect x="327.9" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.9" y="766.0"></text>
</g>
<g>
<title>Pattern.escape (1 samples, 0.03%)</title><rect x="327.9" y="739.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.9" y="750.0"></text>
</g>
<g>
<title>CharPredicates.ASCII_DIGIT (1 samples, 0.03%)</title><rect x="327.9" y="723.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.9" y="734.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="327.9" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.9" y="718.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="327.9" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.9" y="702.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="327.9" y="675.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.9" y="686.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="327.9" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.9" y="670.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="327.9" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="330.9" y="654.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="327.9" y="627.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.9" y="638.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="327.9" y="611.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.9" y="622.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="327.9" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.9" y="606.0"></text>
</g>
<g>
<title>MethodHandles.constant (1 samples, 0.03%)</title><rect x="327.9" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.9" y="590.0"></text>
</g>
<g>
<title>MethodHandles.identity (1 samples, 0.03%)</title><rect x="327.9" y="563.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.9" y="574.0"></text>
</g>
<g>
<title>MethodHandles.makeIdentity (1 samples, 0.03%)</title><rect x="327.9" y="547.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.9" y="558.0"></text>
</g>
<g>
<title>MethodType.methodType (1 samples, 0.03%)</title><rect x="327.9" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.9" y="542.0"></text>
</g>
<g>
<title>MethodType.makeImpl (1 samples, 0.03%)</title><rect x="327.9" y="515.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.9" y="526.0"></text>
</g>
<g>
<title>MethodType$ConcurrentWeakInternSet.add (1 samples, 0.03%)</title><rect x="327.9" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.9" y="510.0"></text>
</g>
<g>
<title>MethodType$ConcurrentWeakInternSet$WeakEntry.&lt;init&gt; (1 samples, 0.03%)</title><rect x="327.9" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.9" y="494.0"></text>
</g>
<g>
<title>LogRecord.&lt;init&gt; (1 samples, 0.03%)</title><rect x="328.4" y="899.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.4" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="328.4" y="883.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="331.4" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="328.4" y="867.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.4" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="331.4" y="862.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="331.4" y="846.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="331.4" y="830.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="803.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="331.4" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="331.4" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="331.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="331.4" y="766.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.4" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="331.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="331.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="331.4" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="331.4" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="331.4" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="331.4" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="331.4" y="638.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="331.4" y="622.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="331.4" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="331.4" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="331.4" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="547.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="331.4" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="331.4" y="542.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="515.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="331.4" y="526.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="328.4" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="331.4" y="510.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="328.4" y="483.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="331.4" y="494.0"></text>
</g>
<g>
<title>NDC.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="328.8" y="899.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.8" y="910.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="328.8" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.8" y="894.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="328.8" y="867.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.8" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="328.8" y="851.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.8" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="328.8" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.8" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="328.8" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.8" y="830.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="328.8" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.8" y="814.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="328.8" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.8" y="798.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.checkResource (1 samples, 0.03%)</title><rect x="328.8" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="331.8" y="782.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="328.8" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.8" y="766.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="328.8" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="331.8" y="750.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="328.8" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.8" y="734.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="328.8" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.8" y="718.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="328.8" y="691.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.8" y="702.0"></text>
</g>
<g>
<title>AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="328.8" y="675.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.8" y="686.0"></text>
</g>
<g>
<title>Arrays.copyOf (1 samples, 0.03%)</title><rect x="328.8" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.8" y="670.0"></text>
</g>
<g>
<title>Process.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="329.3" y="899.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.3" y="910.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (3 samples, 0.08%)</title><rect x="329.3" y="883.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="332.3" y="894.0"></text>
</g>
<g>
<title>GetProcessInfoAction.run (3 samples, 0.08%)</title><rect x="329.3" y="867.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.3" y="878.0"></text>
</g>
<g>
<title>GetProcessInfoAction.run (3 samples, 0.08%)</title><rect x="329.3" y="851.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.3" y="862.0"></text>
</g>
<g>
<title>ProcessHandle.current (3 samples, 0.08%)</title><rect x="329.3" y="835.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.3" y="846.0"></text>
</g>
<g>
<title>ProcessHandleImpl.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="329.3" y="819.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="332.3" y="830.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="329.3" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.3" y="814.0"></text>
</g>
<g>
<title>1206883981.run (2 samples, 0.06%)</title><rect x="329.3" y="787.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="332.3" y="798.0"></text>
</g>
<g>
<title>ProcessHandleImpl.lambda$static$1 (2 samples, 0.06%)</title><rect x="329.3" y="771.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.3" y="782.0"></text>
</g>
<g>
<title>Executors.newCachedThreadPool (1 samples, 0.03%)</title><rect x="329.3" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.3" y="766.0"></text>
</g>
<g>
<title>ThreadPoolExecutor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="329.3" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.3" y="750.0"></text>
</g>
<g>
<title>ThreadPoolExecutor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="329.3" y="723.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.3" y="734.0"></text>
</g>
<g>
<title>ReentrantLock.newCondition (1 samples, 0.03%)</title><rect x="329.3" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.3" y="718.0"></text>
</g>
<g>
<title>ReentrantLock$Sync.newCondition (1 samples, 0.03%)</title><rect x="329.3" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.3" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="329.3" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="332.3" y="686.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="332.3" y="670.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="332.3" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="332.3" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="611.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="332.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="332.3" y="606.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="332.3" y="590.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="563.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="332.3" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="332.3" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="531.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="332.3" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="515.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="332.3" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="332.3" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="332.3" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="332.3" y="478.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="451.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="332.3" y="462.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="332.3" y="446.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="332.3" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="332.3" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="332.3" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="329.3" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="332.3" y="382.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="329.3" y="355.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="332.3" y="366.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="329.3" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="332.3" y="350.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="329.7" y="755.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.7" y="766.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="329.7" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.7" y="750.0"></text>
</g>
<g>
<title>Invokers.linkToTargetMethod (1 samples, 0.03%)</title><rect x="329.7" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.7" y="734.0"></text>
</g>
<g>
<title>Invokers.callSiteForm (1 samples, 0.03%)</title><rect x="329.7" y="707.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.7" y="718.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="329.7" y="691.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.7" y="702.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="329.7" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.7" y="686.0"></text>
</g>
<g>
<title>Invokers.basicInvoker (1 samples, 0.03%)</title><rect x="329.7" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.7" y="670.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="329.7" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.7" y="654.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="329.7" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.7" y="638.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="329.7" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.7" y="622.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="329.7" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.7" y="606.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="329.7" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.7" y="590.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="329.7" y="563.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.7" y="574.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="329.7" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.7" y="558.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="329.7" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.7" y="542.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="329.7" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.7" y="526.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="329.7" y="499.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.7" y="510.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="329.7" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.7" y="494.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.methodEpilogue (1 samples, 0.03%)</title><rect x="329.7" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.7" y="478.0"></text>
</g>
<g>
<title>MethodWriter.visitMaxs (1 samples, 0.03%)</title><rect x="329.7" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.7" y="462.0"></text>
</g>
<g>
<title>Frame.initInputFrame (1 samples, 0.03%)</title><rect x="329.7" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.7" y="446.0"></text>
</g>
<g>
<title>Type.getDescriptor (1 samples, 0.03%)</title><rect x="329.7" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.7" y="430.0"></text>
</g>
<g>
<title>Type.getDescriptor (1 samples, 0.03%)</title><rect x="329.7" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.7" y="414.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="329.7" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.7" y="398.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="329.7" y="371.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.7" y="382.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="330.2" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.2" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="330.2" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="333.2" y="798.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="330.2" y="771.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.2" y="782.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="330.2" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.2" y="766.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="330.2" y="739.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.2" y="750.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="330.2" y="723.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.2" y="734.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="330.2" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.2" y="718.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="330.2" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.2" y="702.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="330.2" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.2" y="686.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="330.2" y="659.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.2" y="670.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="330.2" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.2" y="654.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="330.2" y="627.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="333.2" y="638.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="611.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="333.2" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="333.2" y="606.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="579.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="333.2" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="563.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="333.2" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="547.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="333.2" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="333.2" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="515.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="333.2" y="526.0"></text>
</g>
<g>
<title>PlaceholderTable::find_and_add(int, unsigned int, Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="330.2" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="333.2" y="510.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (4 samples, 0.11%)</title><rect x="330.6" y="995.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.6" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (4 samples, 0.11%)</title><rect x="330.6" y="979.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.6" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (4 samples, 0.11%)</title><rect x="330.6" y="963.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.6" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (4 samples, 0.11%)</title><rect x="330.6" y="947.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.6" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (4 samples, 0.11%)</title><rect x="330.6" y="931.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.6" y="942.0"></text>
</g>
<g>
<title>ClassLoader.getResources (4 samples, 0.11%)</title><rect x="330.6" y="915.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.6" y="926.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResources (1 samples, 0.03%)</title><rect x="330.6" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.6" y="910.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findMiscResource (1 samples, 0.03%)</title><rect x="330.6" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.6" y="894.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="330.6" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.6" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="330.6" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.6" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="330.6" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.6" y="846.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.find (1 samples, 0.03%)</title><rect x="330.6" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.6" y="830.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.03%)</title><rect x="330.6" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.6" y="814.0"></text>
</g>
<g>
<title>ImageReader.findLocation (1 samples, 0.03%)</title><rect x="330.6" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.6" y="798.0"></text>
</g>
<g>
<title>BasicImageReader.findLocation (1 samples, 0.03%)</title><rect x="330.6" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="333.6" y="782.0"></text>
</g>
<g>
<title>ImageLocation.verify (1 samples, 0.03%)</title><rect x="330.6" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.6" y="766.0"></text>
</g>
<g>
<title>ImageStringsReader.get (1 samples, 0.03%)</title><rect x="330.6" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.6" y="750.0"></text>
</g>
<g>
<title>BasicImageReader.getString (1 samples, 0.03%)</title><rect x="330.6" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.6" y="734.0"></text>
</g>
<g>
<title>BasicImageReader.slice (1 samples, 0.03%)</title><rect x="330.6" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.6" y="718.0"></text>
</g>
<g>
<title>DirectByteBufferR.slice (1 samples, 0.03%)</title><rect x="330.6" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.6" y="702.0"></text>
</g>
<g>
<title>DirectByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="330.6" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.6" y="686.0"></text>
</g>
<g>
<title>DirectByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="330.6" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.6" y="670.0"></text>
</g>
<g>
<title>MappedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="330.6" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.6" y="654.0"></text>
</g>
<g>
<title>ClassLoader.getResources (3 samples, 0.08%)</title><rect x="331.0" y="899.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.0" y="910.0"></text>
</g>
<g>
<title>BootLoader.findResources (3 samples, 0.08%)</title><rect x="331.0" y="883.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.0" y="894.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResources (3 samples, 0.08%)</title><rect x="331.0" y="867.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="334.0" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findMiscResource (3 samples, 0.08%)</title><rect x="331.0" y="851.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.0" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (3 samples, 0.08%)</title><rect x="331.0" y="835.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.0" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (2 samples, 0.06%)</title><rect x="331.0" y="819.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.0" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (2 samples, 0.06%)</title><rect x="331.0" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.0" y="814.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.find (2 samples, 0.06%)</title><rect x="331.0" y="787.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.0" y="798.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.findImageLocation (2 samples, 0.06%)</title><rect x="331.0" y="771.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.0" y="782.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemImage.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="331.0" y="755.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="334.0" y="766.0"></text>
</g>
<g>
<title>ImageReaderFactory.getImageReader (2 samples, 0.06%)</title><rect x="331.0" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.0" y="750.0"></text>
</g>
<g>
<title>ImageReaderFactory.get (2 samples, 0.06%)</title><rect x="331.0" y="723.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.0" y="734.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (2 samples, 0.06%)</title><rect x="331.0" y="707.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.0" y="718.0"></text>
</g>
<g>
<title>ImageReaderFactory$1.apply (2 samples, 0.06%)</title><rect x="331.0" y="691.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="334.0" y="702.0"></text>
</g>
<g>
<title>ImageReaderFactory$1.apply (2 samples, 0.06%)</title><rect x="331.0" y="675.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.0" y="686.0"></text>
</g>
<g>
<title>ImageReader.open (2 samples, 0.06%)</title><rect x="331.0" y="659.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.0" y="670.0"></text>
</g>
<g>
<title>ImageReader.open (2 samples, 0.06%)</title><rect x="331.0" y="643.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.0" y="654.0"></text>
</g>
<g>
<title>ImageReader$SharedImageReader.open (2 samples, 0.06%)</title><rect x="331.0" y="627.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.0" y="638.0"></text>
</g>
<g>
<title>ImageReader$SharedImageReader.&lt;init&gt; (2 samples, 0.06%)</title><rect x="331.0" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.0" y="622.0"></text>
</g>
<g>
<title>BasicImageReader.&lt;init&gt; (2 samples, 0.06%)</title><rect x="331.0" y="595.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.0" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="331.0" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="334.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="331.0" y="563.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="334.0" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="331.0" y="547.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="334.0" y="558.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="331.0" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="334.0" y="542.0"></text>
</g>
<g>
<title>klassVtable::fill_in_mirandas(int) (1 samples, 0.03%)</title><rect x="331.0" y="515.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="334.0" y="526.0"></text>
</g>
<g>
<title>klassVtable::get_mirandas(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Klass*&gt;*, bool) (1 samples, 0.03%)</title><rect x="331.0" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="334.0" y="510.0"></text>
</g>
<g>
<title>klassVtable::add_new_mirandas_to_lists(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="331.0" y="483.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="334.0" y="494.0"></text>
</g>
<g>
<title>klassVtable::is_miranda(Method*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="331.0" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="334.0" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_method(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="331.0" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="334.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="331.0" y="435.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="334.0" y="446.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="331.0" y="419.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="334.0" y="430.0"></text>
</g>
<g>
<title>NativeImageBuffer.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="331.5" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.5" y="590.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="331.5" y="563.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.5" y="574.0"></text>
</g>
<g>
<title>NativeImageBuffer$1.run (1 samples, 0.03%)</title><rect x="331.5" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.5" y="558.0"></text>
</g>
<g>
<title>NativeImageBuffer$1.run (1 samples, 0.03%)</title><rect x="331.5" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.5" y="542.0"></text>
</g>
<g>
<title>System.loadLibrary (1 samples, 0.03%)</title><rect x="331.5" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.5" y="526.0"></text>
</g>
<g>
<title>Runtime.loadLibrary0 (1 samples, 0.03%)</title><rect x="331.5" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.5" y="510.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary (1 samples, 0.03%)</title><rect x="331.5" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.5" y="494.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary0 (1 samples, 0.03%)</title><rect x="331.5" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="334.5" y="478.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.loadLibrary (1 samples, 0.03%)</title><rect x="331.5" y="451.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.5" y="462.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load (1 samples, 0.03%)</title><rect x="331.5" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.5" y="446.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load0 (1 samples, 0.03%)</title><rect x="331.5" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.5" y="430.0"></text>
</g>
<g>
<title>Profiler::NativeLibraryLoadTrap(JNIEnv_*, _jobject*, _jstring*, unsigned char) (1 samples, 0.03%)</title><rect x="331.5" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="334.5" y="414.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_load0 (1 samples, 0.03%)</title><rect x="331.5" y="387.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="334.5" y="398.0"></text>
</g>
<g>
<title>JVM_LoadLibrary (1 samples, 0.03%)</title><rect x="331.5" y="371.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="334.5" y="382.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.03%)</title><rect x="331.5" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="334.5" y="366.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="331.5" y="339.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="334.5" y="350.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="331.5" y="323.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="334.5" y="334.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="331.5" y="307.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="334.5" y="318.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="331.5" y="291.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="334.5" y="302.0"></text>
</g>
<g>
<title>ClassLoader.findNative (1 samples, 0.03%)</title><rect x="331.9" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.9" y="830.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.findEntry (1 samples, 0.03%)</title><rect x="331.9" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.9" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.03%)</title><rect x="331.9" y="787.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="334.9" y="798.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="331.9" y="771.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="334.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="331.9" y="755.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="334.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="331.9" y="739.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="334.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="331.9" y="723.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="334.9" y="734.0"></text>
</g>
<g>
<title>ServiceLoader.iterator (3 samples, 0.08%)</title><rect x="332.4" y="995.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.4" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader.newLookupIterator (3 samples, 0.08%)</title><rect x="332.4" y="979.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.4" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$ModuleServicesLookupIterator.&lt;init&gt; (3 samples, 0.08%)</title><rect x="332.4" y="963.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.4" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$ModuleServicesLookupIterator.iteratorFor (3 samples, 0.08%)</title><rect x="332.4" y="947.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.4" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$ModuleServicesLookupIterator.providers (1 samples, 0.03%)</title><rect x="332.4" y="931.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.4" y="942.0"></text>
</g>
<g>
<title>System$2.getServicesCatalog (1 samples, 0.03%)</title><rect x="332.4" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.4" y="926.0"></text>
</g>
<g>
<title>ModuleLayer.getServicesCatalog (1 samples, 0.03%)</title><rect x="332.4" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.4" y="910.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="332.4" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.4" y="894.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="332.4" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.4" y="878.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="332.4" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.4" y="862.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="332.4" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.4" y="846.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="332.4" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.4" y="830.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="332.4" y="803.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.4" y="814.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="332.4" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.4" y="798.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="332.4" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="335.4" y="782.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findStatic (1 samples, 0.03%)</title><rect x="332.4" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.4" y="766.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethod (1 samples, 0.03%)</title><rect x="332.4" y="739.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.4" y="750.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="332.4" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.4" y="734.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="332.4" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.4" y="718.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="332.4" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.4" y="702.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="332.4" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.4" y="686.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="332.4" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.4" y="670.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="332.4" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.4" y="654.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="332.4" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.4" y="638.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.returnType (1 samples, 0.03%)</title><rect x="332.4" y="611.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="335.4" y="622.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.methodType (1 samples, 0.03%)</title><rect x="332.4" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.4" y="606.0"></text>
</g>
<g>
<title>MemberName.getInvocationType (1 samples, 0.03%)</title><rect x="332.4" y="579.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="335.4" y="590.0"></text>
</g>
<g>
<title>MemberName.getMethodOrFieldType (1 samples, 0.03%)</title><rect x="332.4" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.4" y="574.0"></text>
</g>
<g>
<title>System$2.layers (2 samples, 0.06%)</title><rect x="332.8" y="931.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.8" y="942.0"></text>
</g>
<g>
<title>ModuleLayer.layers (2 samples, 0.06%)</title><rect x="332.8" y="915.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.8" y="926.0"></text>
</g>
<g>
<title>Collection.stream (2 samples, 0.06%)</title><rect x="332.8" y="899.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.8" y="910.0"></text>
</g>
<g>
<title>StreamSupport.stream (2 samples, 0.06%)</title><rect x="332.8" y="883.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.8" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="332.8" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="335.8" y="878.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="335.8" y="862.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="335.8" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="335.8" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="335.8" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="335.8" y="798.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="335.8" y="782.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="755.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="335.8" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="335.8" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="335.8" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="335.8" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="335.8" y="702.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="675.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="335.8" y="686.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="335.8" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="335.8" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="335.8" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="335.8" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="332.8" y="595.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="335.8" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="332.8" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="335.8" y="590.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="332.8" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="335.8" y="574.0"></text>
</g>
<g>
<title>StreamOpFlag.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="333.3" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.3" y="878.0"></text>
</g>
<g>
<title>StreamOpFlag.set (1 samples, 0.03%)</title><rect x="333.3" y="851.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.3" y="862.0"></text>
</g>
<g>
<title>EnumMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="333.3" y="835.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.3" y="846.0"></text>
</g>
<g>
<title>EnumMap.getKeyUniverse (1 samples, 0.03%)</title><rect x="333.3" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.3" y="830.0"></text>
</g>
<g>
<title>System$2.getEnumConstantsShared (1 samples, 0.03%)</title><rect x="333.3" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="336.3" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="333.7" y="1059.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.7" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="333.7" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.7" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="333.7" y="1027.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.7" y="1038.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="333.7" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.7" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="333.7" y="995.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="336.7" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="333.7" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.7" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="333.7" y="963.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.7" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="333.7" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.7" y="958.0"></text>
</g>
<g>
<title>Resource.getBytes (1 samples, 0.03%)</title><rect x="333.7" y="931.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.7" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="333.7" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.7" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="333.7" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.7" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="333.7" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.7" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="333.7" y="867.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="336.7" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="333.7" y="851.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="336.7" y="862.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="333.7" y="835.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="336.7" y="846.0"></text>
</g>
<g>
<title>ConfigUtils.configBuilder (23 samples, 0.64%)</title><rect x="334.1" y="1075.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.1" y="1086.0"></text>
</g>
<g>
<title>ConfigUtils.configBuilder (23 samples, 0.64%)</title><rect x="334.1" y="1059.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.1" y="1070.0"></text>
</g>
<g>
<title>ApplicationPropertiesConfigSource$InJar.&lt;init&gt; (2 samples, 0.06%)</title><rect x="334.1" y="1043.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="337.1" y="1054.0"></text>
</g>
<g>
<title>ApplicationPropertiesConfigSource$InJar.openStream (1 samples, 0.03%)</title><rect x="334.1" y="1027.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.getResourceAsStream (1 samples, 0.03%)</title><rect x="334.1" y="1011.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.1" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="334.1" y="995.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.1" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="334.1" y="979.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.1" y="990.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="334.1" y="963.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.1" y="974.0"></text>
</g>
<g>
<title>BootLoader.findResource (1 samples, 0.03%)</title><rect x="334.1" y="947.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.1" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResource (1 samples, 0.03%)</title><rect x="334.1" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.1" y="942.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findMiscResource (1 samples, 0.03%)</title><rect x="334.1" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.1" y="926.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="334.1" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.1" y="910.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="334.1" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.1" y="894.0"></text>
</g>
<g>
<title>BuiltinClassLoader$2.run (1 samples, 0.03%)</title><rect x="334.1" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.1" y="878.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.find (1 samples, 0.03%)</title><rect x="334.1" y="851.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="337.1" y="862.0"></text>
</g>
<g>
<title>SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.03%)</title><rect x="334.1" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.1" y="846.0"></text>
</g>
<g>
<title>ImageReader.findLocation (1 samples, 0.03%)</title><rect x="334.1" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="337.1" y="830.0"></text>
</g>
<g>
<title>BasicImageReader.findLocation (1 samples, 0.03%)</title><rect x="334.1" y="803.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.1" y="814.0"></text>
</g>
<g>
<title>ApplicationPropertiesConfigSource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="334.6" y="1027.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.6" y="1038.0"></text>
</g>
<g>
<title>ApplicationPropertiesConfigSource.readProperties (1 samples, 0.03%)</title><rect x="334.6" y="1011.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.6" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="334.6" y="995.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="337.6" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="334.6" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.6" y="990.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="334.6" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="337.6" y="974.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="334.6" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.6" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="334.6" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.6" y="942.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="334.6" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.6" y="926.0"></text>
</g>
<g>
<title>ClassLoader.getClassLoadingLock (1 samples, 0.03%)</title><rect x="334.6" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.6" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="334.6" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="337.6" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="337.6" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="851.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="337.6" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="337.6" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="337.6" y="830.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="337.6" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="337.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="334.6" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="337.6" y="782.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="334.6" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="337.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="334.6" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="337.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="334.6" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.6" y="734.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="334.6" y="707.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="337.6" y="718.0"></text>
</g>
<g>
<title>ApplicationPropertiesConfigSource$MpConfigInJar.&lt;init&gt; (16 samples, 0.45%)</title><rect x="335.0" y="1043.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.0" y="1054.0"></text>
</g>
<g>
<title>ApplicationPropertiesConfigSource$MpConfigInJar.openStream (16 samples, 0.45%)</title><rect x="335.0" y="1027.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.getResourceAsStream (16 samples, 0.45%)</title><rect x="335.0" y="1011.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.0" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.getResource (16 samples, 0.45%)</title><rect x="335.0" y="995.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.0" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.getResource (1 samples, 0.03%)</title><rect x="335.0" y="979.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.0" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResource (1 samples, 0.03%)</title><rect x="335.0" y="963.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.0" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResourceOnClassPath (1 samples, 0.03%)</title><rect x="335.0" y="947.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.0" y="958.0"></text>
</g>
<g>
<title>URLClassPath.findResource (1 samples, 0.03%)</title><rect x="335.0" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.0" y="942.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="335.0" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.0" y="926.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="335.0" y="899.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="338.0" y="910.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="335.0" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="338.0" y="894.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="335.0" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.0" y="878.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="335.0" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.0" y="862.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="335.0" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.0" y="846.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="335.0" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.0" y="830.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.ensureOpen (1 samples, 0.03%)</title><rect x="335.0" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.0" y="814.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="335.0" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.0" y="798.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="335.0" y="771.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.0" y="782.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="335.0" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.0" y="766.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getJarFile (1 samples, 0.03%)</title><rect x="335.0" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.0" y="750.0"></text>
</g>
<g>
<title>FileNotFoundException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="335.0" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.0" y="734.0"></text>
</g>
<g>
<title>IOException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="335.0" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.0" y="718.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="335.0" y="691.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.0" y="702.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="335.0" y="675.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.0" y="686.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="335.0" y="659.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="338.0" y="670.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="335.0" y="643.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.0" y="654.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="335.0" y="627.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="338.0" y="638.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="335.0" y="611.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="338.0" y="622.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="335.0" y="595.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="338.0" y="606.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="335.0" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="338.0" y="590.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.03%)</title><rect x="335.0" y="563.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="338.0" y="574.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="335.0" y="547.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="338.0" y="558.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="335.0" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="338.0" y="542.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="335.0" y="515.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="338.0" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.findResource (15 samples, 0.42%)</title><rect x="335.5" y="979.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.5" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceURL (15 samples, 0.42%)</title><rect x="335.5" y="963.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.5" y="974.0"></text>
</g>
<g>
<title>JarResource.file (15 samples, 0.42%)</title><rect x="335.5" y="947.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="338.5" y="958.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (15 samples, 0.42%)</title><rect x="335.5" y="931.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.5" y="942.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (15 samples, 0.42%)</title><rect x="335.5" y="915.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.5" y="926.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (15 samples, 0.42%)</title><rect x="335.5" y="899.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.5" y="910.0"></text>
</g>
<g>
<title>PerfCounter.addElapsedTimeFrom (2 samples, 0.06%)</title><rect x="335.5" y="883.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.5" y="894.0"></text>
</g>
<g>
<title>System.nanoTime (2 samples, 0.06%)</title><rect x="335.5" y="867.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.5" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (2 samples, 0.06%)</title><rect x="335.5" y="851.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="338.5" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (2 samples, 0.06%)</title><rect x="335.5" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.5" y="846.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.06%)</title><rect x="335.5" y="819.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="338.5" y="830.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (2 samples, 0.06%)</title><rect x="335.5" y="803.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.5" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (2 samples, 0.06%)</title><rect x="335.5" y="787.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="338.5" y="798.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (2 samples, 0.06%)</title><rect x="335.5" y="771.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.5" y="782.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (2 samples, 0.06%)</title><rect x="335.5" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="338.5" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (2 samples, 0.06%)</title><rect x="335.5" y="739.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="338.5" y="750.0"></text>
</g>
<g>
<title>Method::critical_native_function() (2 samples, 0.06%)</title><rect x="335.5" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="338.5" y="734.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (2 samples, 0.06%)</title><rect x="335.5" y="707.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="338.5" y="718.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (2 samples, 0.06%)</title><rect x="335.5" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="338.5" y="702.0"></text>
</g>
<g>
<title>os::dll_address_to_library_name(unsigned char*, char*, int, int*) (1 samples, 0.03%)</title><rect x="335.5" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="338.5" y="686.0"></text>
</g>
<g>
<title>_dispatch_io_fds (1 samples, 0.03%)</title><rect x="335.5" y="659.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="338.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="335.5" y="643.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="338.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="335.5" y="627.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="338.5" y="638.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.03%)</title><rect x="335.9" y="675.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="338.9" y="686.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="335.9" y="659.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="338.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="335.9" y="643.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="338.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="335.9" y="627.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="338.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="335.9" y="611.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="338.9" y="622.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.get (13 samples, 0.36%)</title><rect x="336.3" y="883.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.3" y="894.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.&lt;init&gt; (13 samples, 0.36%)</title><rect x="336.3" y="867.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.3" y="878.0"></text>
</g>
<g>
<title>ZipFile$Source.get (13 samples, 0.36%)</title><rect x="336.3" y="851.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.3" y="862.0"></text>
</g>
<g>
<title>Files.readAttributes (3 samples, 0.08%)</title><rect x="336.8" y="835.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.8" y="846.0"></text>
</g>
<g>
<title>UnixFileSystemProvider.readAttributes (3 samples, 0.08%)</title><rect x="336.8" y="819.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.8" y="830.0"></text>
</g>
<g>
<title>UnixFileAttributeViews$Basic.readAttributes (2 samples, 0.06%)</title><rect x="336.8" y="803.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.8" y="814.0"></text>
</g>
<g>
<title>UnixFileAttributes.get (2 samples, 0.06%)</title><rect x="336.8" y="787.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.8" y="798.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.stat (2 samples, 0.06%)</title><rect x="336.8" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.8" y="782.0"></text>
</g>
<g>
<title>UnixNativeDispatcher.stat0 (2 samples, 0.06%)</title><rect x="336.8" y="755.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.8" y="766.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.06%)</title><rect x="336.8" y="739.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="339.8" y="750.0"></text>
</g>
<g>
<title>UnixFileSystemProvider.getFileAttributeView (1 samples, 0.03%)</title><rect x="337.7" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="340.7" y="814.0"></text>
</g>
<g>
<title>Util.followLinks (1 samples, 0.03%)</title><rect x="337.7" y="787.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.7" y="798.0"></text>
</g>
<g>
<title>ZipFile$Source.&lt;init&gt; (9 samples, 0.25%)</title><rect x="338.1" y="835.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.1" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.&lt;init&gt; (4 samples, 0.11%)</title><rect x="338.1" y="819.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.1" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.&lt;init&gt; (4 samples, 0.11%)</title><rect x="338.1" y="803.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.1" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.open (4 samples, 0.11%)</title><rect x="338.1" y="787.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.1" y="798.0"></text>
</g>
<g>
<title>RandomAccessFile.open0 (4 samples, 0.11%)</title><rect x="338.1" y="771.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="341.1" y="782.0"></text>
</g>
<g>
<title>fileOpen (4 samples, 0.11%)</title><rect x="338.1" y="755.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="341.1" y="766.0"></text>
</g>
<g>
<title>_info_key_initialized (1 samples, 0.03%)</title><rect x="338.1" y="739.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="341.1" y="750.0"></text>
</g>
<g>
<title>module_mutex (3 samples, 0.08%)</title><rect x="338.6" y="739.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="341.6" y="750.0"></text>
</g>
<g>
<title>ZipFile$Source.initCEN (5 samples, 0.14%)</title><rect x="339.9" y="819.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.9" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.03%)</title><rect x="340.3" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="343.3" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="340.3" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="343.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="340.3" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="343.3" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="340.3" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="343.3" y="766.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="340.3" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.3" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="340.3" y="723.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="343.3" y="734.0"></text>
</g>
<g>
<title>ZipFile$Source.hashN (2 samples, 0.06%)</title><rect x="340.8" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.8" y="814.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="341.7" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.7" y="814.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="341.7" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.7" y="798.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="341.7" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.7" y="782.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="341.7" y="755.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="344.7" y="766.0"></text>
</g>
<g>
<title>ConfigUtils$EnvConfigSource.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="342.1" y="1043.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.1" y="1054.0"></text>
</g>
<g>
<title>Pattern.compile (2 samples, 0.06%)</title><rect x="342.1" y="1027.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.1" y="1038.0"></text>
</g>
<g>
<title>Pattern.&lt;init&gt; (2 samples, 0.06%)</title><rect x="342.1" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.1" y="1022.0"></text>
</g>
<g>
<title>Pattern.compile (2 samples, 0.06%)</title><rect x="342.1" y="995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.1" y="1006.0"></text>
</g>
<g>
<title>Pattern.expr (2 samples, 0.06%)</title><rect x="342.1" y="979.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.1" y="990.0"></text>
</g>
<g>
<title>Pattern.sequence (2 samples, 0.06%)</title><rect x="342.1" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.1" y="974.0"></text>
</g>
<g>
<title>Pattern.clazz (2 samples, 0.06%)</title><rect x="342.1" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.1" y="958.0"></text>
</g>
<g>
<title>Pattern$CharPredicate.negate (1 samples, 0.03%)</title><rect x="342.1" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.1" y="942.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="342.1" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.1" y="926.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="342.1" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.1" y="910.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="342.1" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.1" y="894.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="342.1" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.1" y="878.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="342.1" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.1" y="862.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="342.1" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.1" y="846.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="342.1" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.1" y="830.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="342.1" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.1" y="814.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="342.1" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.1" y="798.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="342.1" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.1" y="782.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="342.1" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.1" y="766.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="342.1" y="739.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="345.1" y="750.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="342.1" y="723.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="345.1" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="342.1" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="345.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="342.1" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="345.1" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="342.1" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="345.1" y="686.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="342.1" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="345.1" y="670.0"></text>
</g>
<g>
<title>JvmtiClassEventMark::JvmtiClassEventMark(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="342.1" y="643.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="345.1" y="654.0"></text>
</g>
<g>
<title>JvmtiEventMark::to_jclass(Klass*) (1 samples, 0.03%)</title><rect x="342.1" y="627.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="345.1" y="638.0"></text>
</g>
<g>
<title>Pattern.range (1 samples, 0.03%)</title><rect x="342.5" y="931.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="345.5" y="942.0"></text>
</g>
<g>
<title>Pattern.Range (1 samples, 0.03%)</title><rect x="342.5" y="915.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.5" y="926.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="342.5" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.5" y="910.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="342.5" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="345.5" y="894.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="342.5" y="867.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.5" y="878.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="342.5" y="851.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="345.5" y="862.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="342.5" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.5" y="846.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="342.5" y="819.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.5" y="830.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="342.5" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.5" y="814.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="342.5" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.5" y="798.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="342.5" y="771.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.5" y="782.0"></text>
</g>
<g>
<title>ClassWriter.toByteArray (1 samples, 0.03%)</title><rect x="342.5" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.5" y="766.0"></text>
</g>
<g>
<title>MethodWriter.put (1 samples, 0.03%)</title><rect x="342.5" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.5" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="343.0" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="346.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="343.0" y="1027.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="346.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="343.0" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="346.0" y="1022.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="343.0" y="995.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.0" y="1006.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="343.0" y="979.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="346.0" y="990.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="343.0" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.0" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="343.0" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="346.0" y="958.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="343.0" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="346.0" y="942.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="343.0" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="346.0" y="926.0"></text>
</g>
<g>
<title>StackMapFrame::is_assignable_to(StackMapFrame const*, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="343.0" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="346.0" y="910.0"></text>
</g>
<g>
<title>VerificationType::is_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="343.0" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="346.0" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="343.4" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.4" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="343.4" y="1027.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.4" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="343.4" y="1011.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.4" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="343.4" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="346.4" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="343.4" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="346.4" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="343.4" y="963.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.4" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="343.4" y="947.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.4" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="343.4" y="931.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="346.4" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="343.4" y="915.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="346.4" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="343.4" y="899.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="346.4" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="883.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="346.4" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="346.4" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.4" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="835.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.4" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="346.4" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="346.4" y="798.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="346.4" y="782.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="346.4" y="766.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="343.4" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.4" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="343.4" y="723.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="346.4" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="343.9" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.9" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="343.9" y="1027.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.9" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="343.9" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="346.9" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="343.9" y="995.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.9" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="343.9" y="979.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.9" y="990.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="343.9" y="963.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="346.9" y="974.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="343.9" y="947.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="346.9" y="958.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="931.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="346.9" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="346.9" y="926.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="346.9" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="346.9" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.9" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::set_package(ClassLoaderData*, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="346.9" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::package_from_name(Symbol const*, Thread*) (1 samples, 0.03%)</title><rect x="343.9" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="346.9" y="846.0"></text>
</g>
<g>
<title>Converters.newOptionalConverter (1 samples, 0.03%)</title><rect x="344.3" y="1075.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="347.3" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="344.3" y="1059.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.3" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="344.3" y="1043.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.3" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="344.3" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.3" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="344.3" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.3" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="344.3" y="995.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="347.3" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="344.3" y="979.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="347.3" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="963.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="347.3" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="947.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="347.3" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="931.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="347.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="915.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="347.3" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="347.3" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="347.3" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="867.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="347.3" y="878.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="347.3" y="862.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="344.3" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="347.3" y="846.0"></text>
</g>
<g>
<title>ConstMethod::set_inlined_tables_length(InlineTableSizes*) (1 samples, 0.03%)</title><rect x="344.3" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="347.3" y="830.0"></text>
</g>
<g>
<title>HyphenateEnumConverter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="344.7" y="1075.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.7" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="345.2" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="348.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="348.2" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="348.2" y="1054.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="348.2" y="1038.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="1011.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="348.2" y="1022.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="995.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="348.2" y="1006.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="348.2" y="990.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="963.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="348.2" y="974.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="345.2" y="947.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="348.2" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="345.6" y="1075.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="348.6" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="345.6" y="1059.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.6" y="1070.0"></text>
</g>
<g>
<title>ConstantPoolCacheEntry::set_direct_or_vtable_call(Bytecodes::Code, methodHandle const&amp;, int, bool) (1 samples, 0.03%)</title><rect x="345.6" y="1043.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="348.6" y="1054.0"></text>
</g>
<g>
<title>Method::is_final_method(AccessFlags) const (1 samples, 0.03%)</title><rect x="345.6" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.6" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (8 samples, 0.22%)</title><rect x="346.1" y="1075.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.1" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (8 samples, 0.22%)</title><rect x="346.1" y="1059.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.1" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="346.1" y="1043.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.1" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="346.1" y="1027.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.1" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="346.1" y="1011.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.1" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="346.1" y="995.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.1" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="346.1" y="979.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.1" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="346.1" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.1" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="346.1" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.1" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="346.1" y="931.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.1" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="346.1" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.1" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="346.1" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.1" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="346.1" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="349.1" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="346.1" y="867.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.1" y="878.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="346.1" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.1" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="346.1" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.1" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="346.1" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.1" y="830.0"></text>
</g>
<g>
<title>JarResource.getProtectionDomain (1 samples, 0.03%)</title><rect x="346.1" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.1" y="814.0"></text>
</g>
<g>
<title>URI.&lt;init&gt; (1 samples, 0.03%)</title><rect x="346.1" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.1" y="798.0"></text>
</g>
<g>
<title>URI.&lt;init&gt; (1 samples, 0.03%)</title><rect x="346.1" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.1" y="782.0"></text>
</g>
<g>
<title>URI$Parser.parse (1 samples, 0.03%)</title><rect x="346.1" y="755.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.1" y="766.0"></text>
</g>
<g>
<title>URI$Parser.scan (1 samples, 0.03%)</title><rect x="346.1" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.1" y="750.0"></text>
</g>
<g>
<title>String.replace (1 samples, 0.03%)</title><rect x="346.5" y="979.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.5" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="346.5" y="963.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="349.5" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="346.5" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="349.5" y="958.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (2 samples, 0.06%)</title><rect x="347.0" y="1043.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.0" y="1054.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (2 samples, 0.06%)</title><rect x="347.0" y="1027.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.0" y="1038.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (2 samples, 0.06%)</title><rect x="347.0" y="1011.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.0" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (2 samples, 0.06%)</title><rect x="347.0" y="995.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.0" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.06%)</title><rect x="347.0" y="979.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="350.0" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (2 samples, 0.06%)</title><rect x="347.0" y="963.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.0" y="974.0"></text>
</g>
<g>
<title>CodeSource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="347.0" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.0" y="958.0"></text>
</g>
<g>
<title>URLUtil.urlNoFragString (1 samples, 0.03%)</title><rect x="347.0" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.0" y="942.0"></text>
</g>
<g>
<title>StringBuilder.append (1 samples, 0.03%)</title><rect x="347.0" y="915.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.0" y="926.0"></text>
</g>
<g>
<title>AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="347.0" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="350.0" y="910.0"></text>
</g>
<g>
<title>AbstractStringBuilder.putStringAt (1 samples, 0.03%)</title><rect x="347.0" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.0" y="894.0"></text>
</g>
<g>
<title>String.getBytes (1 samples, 0.03%)</title><rect x="347.0" y="867.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.0" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="347.0" y="851.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="350.0" y="862.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="347.4" y="947.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.4" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="347.4" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.4" y="942.0"></text>
</g>
<g>
<title>ClassLoader.postDefineClass (1 samples, 0.03%)</title><rect x="347.4" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.4" y="926.0"></text>
</g>
<g>
<title>Class.getPackageName (1 samples, 0.03%)</title><rect x="347.4" y="899.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.4" y="910.0"></text>
</g>
<g>
<title>Class.getName (1 samples, 0.03%)</title><rect x="347.4" y="883.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.4" y="894.0"></text>
</g>
<g>
<title>Class.initClassName (1 samples, 0.03%)</title><rect x="347.4" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.4" y="878.0"></text>
</g>
<g>
<title>JVM_InitClassName (1 samples, 0.03%)</title><rect x="347.4" y="851.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="350.4" y="862.0"></text>
</g>
<g>
<title>java_lang_Class::name(Handle, Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="350.4" y="846.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="819.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="350.4" y="830.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short*, int, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="350.4" y="814.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.4" y="798.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="350.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="350.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="347.4" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="350.4" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="347.4" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="347.4" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="350.4" y="718.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (2 samples, 0.06%)</title><rect x="347.8" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.8" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="347.8" y="1027.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="350.8" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="347.8" y="1011.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="350.8" y="1022.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="347.8" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.8" y="1006.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="347.8" y="979.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="350.8" y="990.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="347.8" y="963.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="350.8" y="974.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="347.8" y="947.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="350.8" y="958.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="347.8" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="350.8" y="942.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="347.8" y="915.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="350.8" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="348.3" y="1027.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.3" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="348.3" y="1011.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.3" y="1022.0"></text>
</g>
<g>
<title>JarResource.getProtectionDomain (1 samples, 0.03%)</title><rect x="348.3" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.3" y="1006.0"></text>
</g>
<g>
<title>URI.toURL (1 samples, 0.03%)</title><rect x="348.3" y="979.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.3" y="990.0"></text>
</g>
<g>
<title>URL.fromURI (1 samples, 0.03%)</title><rect x="348.3" y="963.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.3" y="974.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.3" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.3" y="958.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="348.3" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.3" y="942.0"></text>
</g>
<g>
<title>Handler.parseAbsoluteSpec (1 samples, 0.03%)</title><rect x="348.3" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.3" y="926.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.3" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.3" y="910.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.3" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.3" y="894.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.3" y="867.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.3" y="878.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="348.3" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.3" y="862.0"></text>
</g>
<g>
<title>URLStreamHandler.parseURL (1 samples, 0.03%)</title><rect x="348.3" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.3" y="846.0"></text>
</g>
<g>
<title>URLStreamHandler.setURL (1 samples, 0.03%)</title><rect x="348.3" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.3" y="830.0"></text>
</g>
<g>
<title>IPAddressUtil.checkHostString (1 samples, 0.03%)</title><rect x="348.3" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.3" y="814.0"></text>
</g>
<g>
<title>IPAddressUtil.scan (1 samples, 0.03%)</title><rect x="348.3" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.3" y="798.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="348.7" y="1043.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.7" y="1054.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="348.7" y="1027.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.7" y="1038.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.7" y="1011.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.7" y="1022.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.7" y="995.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.7" y="1006.0"></text>
</g>
<g>
<title>InflaterInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="348.7" y="979.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.7" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.03%)</title><rect x="348.7" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="351.7" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="348.7" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="351.7" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="348.7" y="931.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="351.7" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="348.7" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="351.7" y="926.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="348.7" y="899.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="351.7" y="910.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="348.7" y="883.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="351.7" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="349.2" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="352.2" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="349.2" y="1027.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="352.2" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="349.2" y="1011.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="352.2" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="349.2" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="352.2" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="349.2" y="979.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="352.2" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="349.2" y="963.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="352.2" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="349.2" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="352.2" y="958.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="349.2" y="931.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="352.2" y="942.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="349.2" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="352.2" y="926.0"></text>
</g>
<g>
<title>OopMapValue::read_from(CompressedReadStream*) (1 samples, 0.03%)</title><rect x="349.2" y="899.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="352.2" y="910.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.03%)</title><rect x="349.2" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="352.2" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConverter (1 samples, 0.03%)</title><rect x="349.6" y="1075.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="352.6" y="1086.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="349.6" y="1059.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.6" y="1070.0"></text>
</g>
<g>
<title>392781299.apply (1 samples, 0.03%)</title><rect x="349.6" y="1043.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="352.6" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfig.lambda$getConverter$3 (1 samples, 0.03%)</title><rect x="349.6" y="1027.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="352.6" y="1038.0"></text>
</g>
<g>
<title>ImplicitConverters.getConverter (1 samples, 0.03%)</title><rect x="349.6" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.6" y="1022.0"></text>
</g>
<g>
<title>ImplicitConverters.getConverterFromStaticMethod (1 samples, 0.03%)</title><rect x="349.6" y="995.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.6" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="349.6" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.6" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="349.6" y="963.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="352.6" y="974.0"></text>
</g>
<g>
<title>ConstantPoolCacheEntry::set_direct_or_vtable_call(Bytecodes::Code, methodHandle const&amp;, int, bool) (1 samples, 0.03%)</title><rect x="349.6" y="947.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="352.6" y="958.0"></text>
</g>
<g>
<title>Method::result_type() const (1 samples, 0.03%)</title><rect x="349.6" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="352.6" y="942.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="349.6" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="352.6" y="926.0"></text>
</g>
<g>
<title>SignatureIterator::parse_type() (1 samples, 0.03%)</title><rect x="349.6" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="352.6" y="910.0"></text>
</g>
<g>
<title>SignatureInfo::do_bool() (1 samples, 0.03%)</title><rect x="349.6" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="352.6" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfig.getPropertyNames (5 samples, 0.14%)</title><rect x="350.1" y="1075.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.1" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (5 samples, 0.14%)</title><rect x="350.1" y="1059.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.1" y="1070.0"></text>
</g>
<g>
<title>ConfigSourceInterceptor.iterateNames (5 samples, 0.14%)</title><rect x="350.1" y="1043.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.1" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (5 samples, 0.14%)</title><rect x="350.1" y="1027.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.1" y="1038.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.iterateNames (5 samples, 0.14%)</title><rect x="350.1" y="1011.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.1" y="1022.0"></text>
</g>
<g>
<title>Iterator.forEachRemaining (1 samples, 0.03%)</title><rect x="350.1" y="995.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.1" y="1006.0"></text>
</g>
<g>
<title>1975546571.accept (1 samples, 0.03%)</title><rect x="350.1" y="979.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="353.1" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (4 samples, 0.11%)</title><rect x="350.5" y="995.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.5" y="1006.0"></text>
</g>
<g>
<title>ConfigSourceInterceptor.iterateNames (4 samples, 0.11%)</title><rect x="350.5" y="979.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.5" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (4 samples, 0.11%)</title><rect x="350.5" y="963.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.5" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (4 samples, 0.11%)</title><rect x="350.5" y="947.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.5" y="958.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getPropertyNames (3 samples, 0.08%)</title><rect x="350.5" y="931.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.5" y="942.0"></text>
</g>
<g>
<title>ConfigSource.getPropertyNames (3 samples, 0.08%)</title><rect x="350.5" y="915.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.5" y="926.0"></text>
</g>
<g>
<title>SysPropConfigSource.getProperties (3 samples, 0.08%)</title><rect x="350.5" y="899.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.5" y="910.0"></text>
</g>
<g>
<title>ConfigSourceUtil.propertiesToMap (3 samples, 0.08%)</title><rect x="350.5" y="883.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.5" y="894.0"></text>
</g>
<g>
<title>Collectors.toMap (2 samples, 0.06%)</title><rect x="350.5" y="867.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.5" y="878.0"></text>
</g>
<g>
<title>Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="350.5" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.5" y="862.0"></text>
</g>
<g>
<title>Collectors.castingIdentity (1 samples, 0.03%)</title><rect x="350.5" y="835.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.5" y="846.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="350.5" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.5" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="350.5" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.5" y="814.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="350.5" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.5" y="798.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="350.5" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.5" y="782.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="350.5" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.5" y="766.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="350.5" y="739.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.5" y="750.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="350.5" y="723.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.5" y="734.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="350.5" y="707.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.5" y="718.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="350.5" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.5" y="702.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="350.5" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.5" y="686.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="350.5" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.5" y="670.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="350.5" y="643.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="353.5" y="654.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="350.5" y="627.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="353.5" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="350.5" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="353.5" y="622.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="350.5" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="353.5" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="350.5" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="353.5" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="350.5" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="353.5" y="574.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="350.5" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.5" y="558.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="350.5" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="353.5" y="542.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="350.5" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.5" y="526.0"></text>
</g>
<g>
<title>StatefulMethodFamily::StatefulMethodFamily() (1 samples, 0.03%)</title><rect x="350.5" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="353.5" y="510.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="350.5" y="483.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="353.5" y="494.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="350.9" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.9" y="862.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="350.9" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.9" y="846.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="350.9" y="819.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.9" y="830.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectConstructorNoSecurityManager (1 samples, 0.03%)</title><rect x="350.9" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.9" y="814.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectConstructorCommon (1 samples, 0.03%)</title><rect x="350.9" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.9" y="798.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="350.9" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.9" y="782.0"></text>
</g>
<g>
<title>DirectMethodHandle.makeAllocator (1 samples, 0.03%)</title><rect x="350.9" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.9" y="766.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="350.9" y="739.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.9" y="750.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="350.9" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.9" y="734.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="350.9" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.9" y="718.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="350.9" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.9" y="702.0"></text>
</g>
<g>
<title>MethodType.changeReturnType (1 samples, 0.03%)</title><rect x="350.9" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.9" y="686.0"></text>
</g>
<g>
<title>MethodType.makeImpl (1 samples, 0.03%)</title><rect x="350.9" y="659.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.9" y="670.0"></text>
</g>
<g>
<title>MethodTypeForm.findForm (1 samples, 0.03%)</title><rect x="350.9" y="643.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.9" y="654.0"></text>
</g>
<g>
<title>MethodTypeForm.canonicalize (1 samples, 0.03%)</title><rect x="350.9" y="627.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.9" y="638.0"></text>
</g>
<g>
<title>MethodTypeForm.canonicalizeAll (1 samples, 0.03%)</title><rect x="350.9" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.9" y="622.0"></text>
</g>
<g>
<title>Object.clone (1 samples, 0.03%)</title><rect x="350.9" y="595.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="353.9" y="606.0"></text>
</g>
<g>
<title>JVM_Clone (1 samples, 0.03%)</title><rect x="350.9" y="579.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="353.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="350.9" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="353.9" y="574.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="351.4" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.4" y="878.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="351.4" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.4" y="862.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.canBeCached (1 samples, 0.03%)</title><rect x="351.4" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.4" y="846.0"></text>
</g>
<g>
<title>Class.getModifiers (1 samples, 0.03%)</title><rect x="351.4" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.4" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="351.4" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="354.4" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="351.4" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="354.4" y="798.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="351.4" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="354.4" y="782.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="351.4" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="354.4" y="766.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="351.4" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="354.4" y="750.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="351.4" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="354.4" y="734.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="351.4" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="354.4" y="718.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.03%)</title><rect x="351.4" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="354.4" y="702.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::compiled_method_load_event(nmethod*) (1 samples, 0.03%)</title><rect x="351.4" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="354.4" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_aot() const (1 samples, 0.03%)</title><rect x="351.4" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="354.4" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="931.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.8" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="915.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.8" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.8" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.8" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.8" y="878.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="851.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.8" y="862.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="835.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.8" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.8" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.8" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.8" y="798.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="771.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.8" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.8" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="739.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.8" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.8" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="707.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.8" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.8" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.8" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="659.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.8" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.8" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.iterateNames (1 samples, 0.03%)</title><rect x="351.8" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.8" y="638.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="351.8" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.8" y="622.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="351.8" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.8" y="606.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.resolveOrFail (1 samples, 0.03%)</title><rect x="351.8" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.8" y="590.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="351.8" y="563.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.8" y="574.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="351.8" y="547.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.8" y="558.0"></text>
</g>
<g>
<title>I2C/C2I adapters(0xbb000000)@0x000000011272fa00 (1 samples, 0.03%)</title><rect x="351.8" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="354.8" y="542.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.build (26 samples, 0.73%)</title><rect x="352.3" y="1075.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="355.3" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfig.&lt;init&gt; (26 samples, 0.73%)</title><rect x="352.3" y="1059.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.3" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="352.3" y="1043.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.3" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="352.3" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.3" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="352.3" y="1011.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.3" y="1022.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="352.3" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.3" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="352.3" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.3" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="352.3" y="963.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.3" y="974.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="352.3" y="947.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.3" y="958.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="352.3" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.3" y="942.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="352.3" y="915.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.3" y="926.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="352.3" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.3" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="352.3" y="883.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="355.3" y="894.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="352.3" y="867.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="355.3" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="355.3" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="355.3" y="846.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="355.3" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="355.3" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="355.3" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="355.3" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="355.3" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="352.3" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="355.3" y="750.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="352.3" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="355.3" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfig$ConfigSources.&lt;init&gt; (3 samples, 0.08%)</title><rect x="352.7" y="1043.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.7" y="1054.0"></text>
</g>
<g>
<title>Comparator.comparingInt (1 samples, 0.03%)</title><rect x="352.7" y="1027.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.7" y="1038.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="352.7" y="1011.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.7" y="1022.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="352.7" y="995.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.7" y="1006.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="352.7" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.7" y="990.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.03%)</title><rect x="352.7" y="963.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.7" y="974.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="352.7" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.7" y="958.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="352.7" y="931.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.7" y="942.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="352.7" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.7" y="926.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="352.7" y="899.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.7" y="910.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="352.7" y="883.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.7" y="894.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="352.7" y="867.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.7" y="878.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="352.7" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.7" y="862.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="352.7" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.7" y="846.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.returnType (1 samples, 0.03%)</title><rect x="352.7" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.7" y="830.0"></text>
</g>
<g>
<title>LambdaForm$BasicType.basicType (1 samples, 0.03%)</title><rect x="352.7" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.7" y="814.0"></text>
</g>
<g>
<title>LambdaForm$BasicType.basicType (1 samples, 0.03%)</title><rect x="352.7" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.7" y="798.0"></text>
</g>
<g>
<title>resolve_static_call (1 samples, 0.03%)</title><rect x="352.7" y="771.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="355.7" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder$InterceptorWithPriority.getInterceptor (1 samples, 0.03%)</title><rect x="353.2" y="1027.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="356.2" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder$1.getInterceptor (1 samples, 0.03%)</title><rect x="353.2" y="1011.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.2" y="1022.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="353.2" y="995.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.2" y="1006.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="353.2" y="979.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.2" y="990.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="353.2" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.2" y="974.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="353.2" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.2" y="958.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="353.2" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.2" y="942.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="353.2" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.2" y="926.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="353.2" y="899.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.2" y="910.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="353.2" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="894.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="353.2" y="867.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.2" y="878.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="353.2" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.2" y="862.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.generateConstructor (1 samples, 0.03%)</title><rect x="353.2" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.2" y="846.0"></text>
</g>
<g>
<title>MethodWriter.visitMethodInsn (1 samples, 0.03%)</title><rect x="353.2" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.2" y="830.0"></text>
</g>
<g>
<title>ClassWriter.newMethodItem (1 samples, 0.03%)</title><rect x="353.2" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.configSourceInterceptor (1 samples, 0.03%)</title><rect x="353.6" y="1027.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.6" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.&lt;init&gt; (1 samples, 0.03%)</title><rect x="353.6" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.6" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="353.6" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.6" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="353.6" y="979.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="356.6" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="353.6" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.6" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="353.6" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.6" y="958.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="353.6" y="931.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="356.6" y="942.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="353.6" y="915.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="356.6" y="926.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="899.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="356.6" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="356.6" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="356.6" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.6" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="356.6" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="356.6" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="353.6" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="356.6" y="814.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="353.6" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="356.6" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="353.6" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="356.6" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfig.buildConfigSources (4 samples, 0.11%)</title><rect x="354.0" y="1043.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.0" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.discoverSources (3 samples, 0.08%)</title><rect x="354.0" y="1027.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.0" y="1038.0"></text>
</g>
<g>
<title>Iterable.forEach (2 samples, 0.06%)</title><rect x="354.0" y="1011.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.0" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (2 samples, 0.06%)</title><rect x="354.0" y="995.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.0" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (2 samples, 0.06%)</title><rect x="354.0" y="979.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.0" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (2 samples, 0.06%)</title><rect x="354.0" y="963.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="357.0" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (2 samples, 0.06%)</title><rect x="354.0" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.0" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (2 samples, 0.06%)</title><rect x="354.0" y="931.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.0" y="942.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="354.0" y="915.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.0" y="926.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="354.0" y="899.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="357.0" y="910.0"></text>
</g>
<g>
<title>ClassLoader.getResources (1 samples, 0.03%)</title><rect x="354.0" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.0" y="894.0"></text>
</g>
<g>
<title>BootLoader.findResources (1 samples, 0.03%)</title><rect x="354.0" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.0" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResources (1 samples, 0.03%)</title><rect x="354.0" y="851.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.0" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findResourcesOnClassPath (1 samples, 0.03%)</title><rect x="354.0" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.0" y="846.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="354.5" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.5" y="926.0"></text>
</g>
<g>
<title>BufferedReader.close (1 samples, 0.03%)</title><rect x="354.5" y="899.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.5" y="910.0"></text>
</g>
<g>
<title>InputStreamReader.close (1 samples, 0.03%)</title><rect x="354.5" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.5" y="894.0"></text>
</g>
<g>
<title>StreamDecoder.close (1 samples, 0.03%)</title><rect x="354.5" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.5" y="878.0"></text>
</g>
<g>
<title>StreamDecoder.implClose (1 samples, 0.03%)</title><rect x="354.5" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.5" y="862.0"></text>
</g>
<g>
<title>JarURLConnection$JarURLInputStream.close (1 samples, 0.03%)</title><rect x="354.5" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.5" y="846.0"></text>
</g>
<g>
<title>URLJarFile.close (1 samples, 0.03%)</title><rect x="354.5" y="819.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.5" y="830.0"></text>
</g>
<g>
<title>JarFileFactory.close (1 samples, 0.03%)</title><rect x="354.5" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="357.5" y="814.0"></text>
</g>
<g>
<title>HashMap.remove (1 samples, 0.03%)</title><rect x="354.5" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.5" y="798.0"></text>
</g>
<g>
<title>HashMap.hash (1 samples, 0.03%)</title><rect x="354.5" y="771.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.5" y="782.0"></text>
</g>
<g>
<title>Object.hashCode (1 samples, 0.03%)</title><rect x="354.5" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.5" y="766.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="354.5" y="739.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="357.5" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="354.5" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="357.5" y="734.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="354.5" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="357.5" y="718.0"></text>
</g>
<g>
<title>revoke_bias(oopDesc*, bool, bool, JavaThread*, JavaThread**) (1 samples, 0.03%)</title><rect x="354.5" y="691.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="357.5" y="702.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (1 samples, 0.03%)</title><rect x="354.5" y="675.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="357.5" y="686.0"></text>
</g>
<g>
<title>vframe::java_sender() const (1 samples, 0.03%)</title><rect x="354.5" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="357.5" y="670.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.03%)</title><rect x="354.5" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="357.5" y="654.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.03%)</title><rect x="354.5" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="357.5" y="638.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(RegisterMap const*) (1 samples, 0.03%)</title><rect x="354.5" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="357.5" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="354.9" y="1011.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.9" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="354.9" y="995.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.9" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="354.9" y="979.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.9" y="990.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="354.9" y="963.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.9" y="974.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="354.9" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="357.9" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.getDefaultSources (1 samples, 0.03%)</title><rect x="355.4" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.4" y="1038.0"></text>
</g>
<g>
<title>PropertiesConfigSourceProvider.&lt;init&gt; (1 samples, 0.03%)</title><rect x="355.4" y="1011.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.4" y="1022.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="355.4" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.4" y="1006.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="355.4" y="979.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="990.0"></text>
</g>
<g>
<title>CompoundEnumeration.hasMoreElements (1 samples, 0.03%)</title><rect x="355.4" y="963.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="974.0"></text>
</g>
<g>
<title>CompoundEnumeration.next (1 samples, 0.03%)</title><rect x="355.4" y="947.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.4" y="958.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasMoreElements (1 samples, 0.03%)</title><rect x="355.4" y="931.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.4" y="942.0"></text>
</g>
<g>
<title>BuiltinClassLoader$1.hasNext (1 samples, 0.03%)</title><rect x="355.4" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.4" y="926.0"></text>
</g>
<g>
<title>URLClassPath$1.hasMoreElements (1 samples, 0.03%)</title><rect x="355.4" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.4" y="910.0"></text>
</g>
<g>
<title>URLClassPath$1.next (1 samples, 0.03%)</title><rect x="355.4" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="894.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="355.4" y="867.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="358.4" y="878.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="355.4" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.4" y="862.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="355.4" y="835.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="846.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="355.4" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.4" y="830.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="355.4" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="358.4" y="814.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$3.run (1 samples, 0.03%)</title><rect x="355.4" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="358.4" y="798.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="355.4" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.4" y="782.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.ensureOpen (1 samples, 0.03%)</title><rect x="355.4" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="766.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="355.4" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.4" y="750.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="355.4" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.4" y="734.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$1.run (1 samples, 0.03%)</title><rect x="355.4" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.4" y="718.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getJarFile (1 samples, 0.03%)</title><rect x="355.4" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.4" y="702.0"></text>
</g>
<g>
<title>FileURLMapper.exists (1 samples, 0.03%)</title><rect x="355.4" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.4" y="686.0"></text>
</g>
<g>
<title>File.exists (1 samples, 0.03%)</title><rect x="355.4" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.4" y="670.0"></text>
</g>
<g>
<title>UnixFileSystem.getBooleanAttributes (1 samples, 0.03%)</title><rect x="355.4" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.4" y="654.0"></text>
</g>
<g>
<title>UnixFileSystem.getBooleanAttributes0 (1 samples, 0.03%)</title><rect x="355.4" y="627.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.4" y="638.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="355.4" y="611.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="358.4" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfig.buildConverters (10 samples, 0.28%)</title><rect x="355.8" y="1043.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.8" y="1054.0"></text>
</g>
<g>
<title>Converters.&lt;clinit&gt; (4 samples, 0.11%)</title><rect x="355.8" y="1027.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.8" y="1038.0"></text>
</g>
<g>
<title>Converters.newEmptyValueConverter (1 samples, 0.03%)</title><rect x="355.8" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.8" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="355.8" y="995.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="358.8" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="355.8" y="979.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.8" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="355.8" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.8" y="974.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="355.8" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.8" y="958.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="355.8" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.8" y="942.0"></text>
</g>
<g>
<title>Converters.newOptionalDoubleConverter (1 samples, 0.03%)</title><rect x="356.2" y="1011.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="359.2" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="356.2" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.2" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="356.2" y="979.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.2" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="356.2" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.2" y="974.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="356.2" y="947.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="359.2" y="958.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="356.2" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.2" y="942.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="356.2" y="915.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.2" y="926.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="356.2" y="899.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.2" y="910.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="356.2" y="883.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.2" y="894.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="356.2" y="867.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="359.2" y="878.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="356.2" y="851.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.2" y="862.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="356.2" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.2" y="846.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="356.2" y="819.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="359.2" y="830.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="356.2" y="803.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="359.2" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (2 samples, 0.06%)</title><rect x="356.7" y="1011.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.7" y="1022.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (2 samples, 0.06%)</title><rect x="356.7" y="995.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.7" y="1006.0"></text>
</g>
<g>
<title>CallSite.makeSite (2 samples, 0.06%)</title><rect x="356.7" y="979.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.7" y="990.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (2 samples, 0.06%)</title><rect x="356.7" y="963.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.7" y="974.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (2 samples, 0.06%)</title><rect x="356.7" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="359.7" y="958.0"></text>
</g>
<g>
<title>DelegatingMethodHandle$Holder.delegate (2 samples, 0.06%)</title><rect x="356.7" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.7" y="942.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (2 samples, 0.06%)</title><rect x="356.7" y="915.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.7" y="926.0"></text>
</g>
<g>
<title>LambdaMetafactory.altMetafactory (2 samples, 0.06%)</title><rect x="356.7" y="899.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.7" y="910.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (2 samples, 0.06%)</title><rect x="356.7" y="883.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.7" y="894.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (2 samples, 0.06%)</title><rect x="356.7" y="867.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.7" y="878.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.generateConstructor (1 samples, 0.03%)</title><rect x="356.7" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.7" y="862.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="357.1" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.1" y="862.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="357.1" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="846.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="357.1" y="819.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="360.1" y="830.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="803.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="360.1" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="360.1" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="360.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="360.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="360.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="360.1" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="357.1" y="707.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="360.1" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="357.1" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="360.1" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="357.1" y="675.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="360.1" y="686.0"></text>
</g>
<g>
<title>Converters.getConverterType (1 samples, 0.03%)</title><rect x="357.6" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.6" y="1038.0"></text>
</g>
<g>
<title>Class.getGenericInterfaces (1 samples, 0.03%)</title><rect x="357.6" y="1011.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.6" y="1022.0"></text>
</g>
<g>
<title>ClassRepository.getSuperInterfaces (1 samples, 0.03%)</title><rect x="357.6" y="995.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.6" y="1006.0"></text>
</g>
<g>
<title>ClassRepository.computeSuperInterfaces (1 samples, 0.03%)</title><rect x="357.6" y="979.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.6" y="990.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="357.6" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.6" y="974.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="357.6" y="947.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.6" y="958.0"></text>
</g>
<g>
<title>Reifier.reifyTypeArguments (1 samples, 0.03%)</title><rect x="357.6" y="931.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.6" y="942.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="357.6" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.6" y="926.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="357.6" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.6" y="910.0"></text>
</g>
<g>
<title>CoreReflectionFactory.makeNamedType (1 samples, 0.03%)</title><rect x="357.6" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="360.6" y="894.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="357.6" y="867.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="360.6" y="878.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="357.6" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.6" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="357.6" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.6" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="357.6" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.6" y="830.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.addConverter (1 samples, 0.03%)</title><rect x="358.0" y="1027.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.0" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.addConverter (1 samples, 0.03%)</title><rect x="358.0" y="1011.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.0" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="358.0" y="995.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="361.0" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="358.0" y="979.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.0" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="358.0" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="361.0" y="974.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="358.0" y="947.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.0" y="958.0"></text>
</g>
<g>
<title>ZipFile.getEntry (1 samples, 0.03%)</title><rect x="358.0" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.0" y="942.0"></text>
</g>
<g>
<title>ZipFile.getZipEntry (1 samples, 0.03%)</title><rect x="358.0" y="915.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="361.0" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.discoverConverters (4 samples, 0.11%)</title><rect x="358.5" y="1027.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.5" y="1038.0"></text>
</g>
<g>
<title>Iterable.forEach (4 samples, 0.11%)</title><rect x="358.5" y="1011.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.5" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (4 samples, 0.11%)</title><rect x="358.5" y="995.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.5" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (4 samples, 0.11%)</title><rect x="358.5" y="979.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="361.5" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (4 samples, 0.11%)</title><rect x="358.5" y="963.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.5" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (4 samples, 0.11%)</title><rect x="358.5" y="947.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.5" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (2 samples, 0.06%)</title><rect x="358.5" y="931.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.5" y="942.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="358.5" y="915.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.5" y="926.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="358.5" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="358.5" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="361.5" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="358.5" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.5" y="878.0"></text>
</g>
<g>
<title>String.replace (1 samples, 0.03%)</title><rect x="358.5" y="851.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.5" y="862.0"></text>
</g>
<g>
<title>I2C/C2I adapters(0xbba00000)@0x0000000112737f00 (1 samples, 0.03%)</title><rect x="358.5" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.5" y="846.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="358.9" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.9" y="926.0"></text>
</g>
<g>
<title>JarURLConnection.getInputStream (1 samples, 0.03%)</title><rect x="358.9" y="899.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.9" y="910.0"></text>
</g>
<g>
<title>JarURLConnection.connect (1 samples, 0.03%)</title><rect x="358.9" y="883.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.9" y="894.0"></text>
</g>
<g>
<title>JarFileFactory.get (1 samples, 0.03%)</title><rect x="358.9" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.9" y="878.0"></text>
</g>
<g>
<title>URLJarFile.getJarFile (1 samples, 0.03%)</title><rect x="358.9" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.9" y="862.0"></text>
</g>
<g>
<title>URLJarFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="361.9" y="846.0"></text>
</g>
<g>
<title>JarFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.9" y="830.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="803.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.9" y="814.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.9" y="798.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.get (1 samples, 0.03%)</title><rect x="358.9" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.9" y="782.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource$FinalizableResource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.9" y="766.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.9" y="750.0"></text>
</g>
<g>
<title>ZipFile$Source.get (1 samples, 0.03%)</title><rect x="358.9" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.9" y="734.0"></text>
</g>
<g>
<title>File.toPath (1 samples, 0.03%)</title><rect x="358.9" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.9" y="718.0"></text>
</g>
<g>
<title>UnixFileSystem.getPath (1 samples, 0.03%)</title><rect x="358.9" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.9" y="702.0"></text>
</g>
<g>
<title>UnixPath.&lt;init&gt; (1 samples, 0.03%)</title><rect x="358.9" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.9" y="686.0"></text>
</g>
<g>
<title>UnixPath.encode (1 samples, 0.03%)</title><rect x="358.9" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.9" y="670.0"></text>
</g>
<g>
<title>CharsetEncoder.encode (1 samples, 0.03%)</title><rect x="358.9" y="643.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.9" y="654.0"></text>
</g>
<g>
<title>ServiceLoader.getConstructor (2 samples, 0.06%)</title><rect x="359.3" y="931.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.3" y="942.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="359.3" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.3" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (2 samples, 0.06%)</title><rect x="359.3" y="899.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.3" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$1.run (2 samples, 0.06%)</title><rect x="359.3" y="883.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="362.3" y="894.0"></text>
</g>
<g>
<title>Class.getConstructor (2 samples, 0.06%)</title><rect x="359.3" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.3" y="878.0"></text>
</g>
<g>
<title>Class.getConstructor0 (2 samples, 0.06%)</title><rect x="359.3" y="851.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="362.3" y="862.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (2 samples, 0.06%)</title><rect x="359.3" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.3" y="846.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (2 samples, 0.06%)</title><rect x="359.3" y="819.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.3" y="830.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (2 samples, 0.06%)</title><rect x="359.3" y="803.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="362.3" y="814.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (2 samples, 0.06%)</title><rect x="359.3" y="787.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="362.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (2 samples, 0.06%)</title><rect x="359.3" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="362.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="359.3" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="362.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="359.3" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="362.3" y="750.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="359.3" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="362.3" y="734.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="359.3" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="362.3" y="718.0"></text>
</g>
<g>
<title>Rewriter::make_constant_pool_cache(Thread*) (1 samples, 0.03%)</title><rect x="359.3" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="362.3" y="702.0"></text>
</g>
<g>
<title>ConstantPoolCache::allocate(ClassLoaderData*, GrowableArray&lt;int&gt; const&amp;, GrowableArray&lt;int&gt; const&amp;, GrowableArray&lt;int&gt; const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="359.3" y="675.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.3" y="686.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="359.3" y="659.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="362.3" y="670.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="359.3" y="643.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="362.3" y="654.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="359.8" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="362.8" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="359.8" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="362.8" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="359.8" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.8" y="718.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="359.8" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.8" y="702.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="359.8" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="362.8" y="686.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="359.8" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.8" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfig.buildInterceptors (8 samples, 0.22%)</title><rect x="360.2" y="1043.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.2" y="1054.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.discoverInterceptors (1 samples, 0.03%)</title><rect x="360.2" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.2" y="1038.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="360.2" y="1011.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.2" y="1022.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="360.2" y="995.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.2" y="1006.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="360.2" y="979.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.2" y="990.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="360.2" y="963.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.2" y="974.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="360.2" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.2" y="958.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="360.2" y="931.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.2" y="942.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="360.2" y="915.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="363.2" y="926.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="360.2" y="899.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="363.2" y="910.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="360.2" y="883.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.2" y="894.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.generateFactory (1 samples, 0.03%)</title><rect x="360.2" y="867.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.2" y="878.0"></text>
</g>
<g>
<title>MethodWriter.visitMethodInsn (1 samples, 0.03%)</title><rect x="360.2" y="851.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="363.2" y="862.0"></text>
</g>
<g>
<title>ClassWriter.newMethodItem (1 samples, 0.03%)</title><rect x="360.2" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.2" y="846.0"></text>
</g>
<g>
<title>ClassWriter.newNameType (1 samples, 0.03%)</title><rect x="360.2" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.2" y="830.0"></text>
</g>
<g>
<title>ClassWriter.newNameTypeItem (1 samples, 0.03%)</title><rect x="360.2" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.2" y="814.0"></text>
</g>
<g>
<title>ClassWriter.newUTF8 (1 samples, 0.03%)</title><rect x="360.2" y="787.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.2" y="798.0"></text>
</g>
<g>
<title>ClassWriter.get (1 samples, 0.03%)</title><rect x="360.2" y="771.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.2" y="782.0"></text>
</g>
<g>
<title>Item.isEqualTo (1 samples, 0.03%)</title><rect x="360.2" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.2" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder.getDefaultInterceptors (7 samples, 0.20%)</title><rect x="360.7" y="1027.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.7" y="1038.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder$InterceptorWithPriority.&lt;init&gt; (7 samples, 0.20%)</title><rect x="360.7" y="1011.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.7" y="1022.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder$InterceptorWithPriority.&lt;init&gt; (7 samples, 0.20%)</title><rect x="360.7" y="995.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.7" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="360.7" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.7" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="360.7" y="963.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.7" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="360.7" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.7" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="360.7" y="931.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.7" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="360.7" y="915.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="363.7" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="360.7" y="899.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="363.7" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="883.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="363.7" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="363.7" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="363.7" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="363.7" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="363.7" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="363.7" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="360.7" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="363.7" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="360.7" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="363.7" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="360.7" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="363.7" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder$InterceptorWithPriority.&lt;init&gt; (6 samples, 0.17%)</title><rect x="361.1" y="979.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.1" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigBuilder$InterceptorWithPriority$1.getPriority (6 samples, 0.17%)</title><rect x="361.1" y="963.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.1" y="974.0"></text>
</g>
<g>
<title>Class.getAnnotation (6 samples, 0.17%)</title><rect x="361.1" y="947.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.1" y="958.0"></text>
</g>
<g>
<title>Class.annotationData (6 samples, 0.17%)</title><rect x="361.1" y="931.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.1" y="942.0"></text>
</g>
<g>
<title>Class.createAnnotationData (6 samples, 0.17%)</title><rect x="361.1" y="915.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.1" y="926.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (6 samples, 0.17%)</title><rect x="361.1" y="899.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.1" y="910.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (6 samples, 0.17%)</title><rect x="361.1" y="883.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.1" y="894.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (6 samples, 0.17%)</title><rect x="361.1" y="867.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.1" y="878.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="361.1" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.1" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="361.1" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.1" y="846.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="361.1" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.1" y="830.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="361.1" y="803.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.1" y="814.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="361.1" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.1" y="798.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="361.1" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="364.1" y="782.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="361.1" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.1" y="766.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="361.1" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.1" y="750.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="361.1" y="723.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="364.1" y="734.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="361.1" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="364.1" y="718.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="361.1" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.1" y="702.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="361.1" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.1" y="686.0"></text>
</g>
<g>
<title>Unsafe.defineClass (1 samples, 0.03%)</title><rect x="361.1" y="659.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.1" y="670.0"></text>
</g>
<g>
<title>Unsafe.defineClass0 (1 samples, 0.03%)</title><rect x="361.1" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.1" y="654.0"></text>
</g>
<g>
<title>Unsafe_DefineClass0(JNIEnv_*, _jobject*, _jstring*, _jbyteArray*, int, int, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="361.1" y="627.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="364.1" y="638.0"></text>
</g>
<g>
<title>Unsafe_DefineClass_impl(JNIEnv_*, _jstring*, _jbyteArray*, int, int, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="361.1" y="611.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="364.1" y="622.0"></text>
</g>
<g>
<title>JVM_DefineClass (1 samples, 0.03%)</title><rect x="361.1" y="595.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="364.1" y="606.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="361.1" y="579.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="364.1" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="361.1" y="563.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.1" y="574.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="361.1" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="364.1" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="361.1" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.1" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="361.1" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.1" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="361.1" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.1" y="510.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="361.1" y="483.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="364.1" y="494.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="361.1" y="467.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="364.1" y="478.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="361.1" y="451.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.1" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="361.1" y="435.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="364.1" y="446.0"></text>
</g>
<g>
<title>AnnotationParser.parseSig (1 samples, 0.03%)</title><rect x="361.6" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.6" y="862.0"></text>
</g>
<g>
<title>SignatureParser.parseTypeSig (1 samples, 0.03%)</title><rect x="361.6" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.6" y="846.0"></text>
</g>
<g>
<title>SignatureParser.parseTypeSignature (1 samples, 0.03%)</title><rect x="361.6" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.6" y="830.0"></text>
</g>
<g>
<title>SignatureParser.parseFieldTypeSignature (1 samples, 0.03%)</title><rect x="361.6" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.6" y="814.0"></text>
</g>
<g>
<title>SignatureParser.parseFieldTypeSignature (1 samples, 0.03%)</title><rect x="361.6" y="787.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.6" y="798.0"></text>
</g>
<g>
<title>SignatureParser.parseClassTypeSignature (1 samples, 0.03%)</title><rect x="361.6" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.6" y="782.0"></text>
</g>
<g>
<title>SignatureParser.parsePackageNameAndSimpleClassTypeSignature (1 samples, 0.03%)</title><rect x="361.6" y="755.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.6" y="766.0"></text>
</g>
<g>
<title>SignatureParser.skipIdentifier (1 samples, 0.03%)</title><rect x="361.6" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.6" y="750.0"></text>
</g>
<g>
<title>SignatureParser.current (1 samples, 0.03%)</title><rect x="361.6" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.6" y="734.0"></text>
</g>
<g>
<title>AnnotationType.getInstance (4 samples, 0.11%)</title><rect x="362.0" y="851.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.0" y="862.0"></text>
</g>
<g>
<title>AnnotationType.&lt;init&gt; (4 samples, 0.11%)</title><rect x="362.0" y="835.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.0" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.parseSelectAnnotations (3 samples, 0.08%)</title><rect x="362.0" y="819.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.0" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (3 samples, 0.08%)</title><rect x="362.0" y="803.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.0" y="814.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (3 samples, 0.08%)</title><rect x="362.0" y="787.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.0" y="798.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (3 samples, 0.08%)</title><rect x="362.0" y="771.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.0" y="782.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (3 samples, 0.08%)</title><rect x="362.0" y="755.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.0" y="766.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (3 samples, 0.08%)</title><rect x="362.0" y="739.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.0" y="750.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (3 samples, 0.08%)</title><rect x="362.0" y="723.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.0" y="734.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (3 samples, 0.08%)</title><rect x="362.0" y="707.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.0" y="718.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (3 samples, 0.08%)</title><rect x="362.0" y="691.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.0" y="702.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (2 samples, 0.06%)</title><rect x="362.0" y="675.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.0" y="686.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (2 samples, 0.06%)</title><rect x="362.0" y="659.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.0" y="670.0"></text>
</g>
<g>
<title>1615056168.apply (2 samples, 0.06%)</title><rect x="362.0" y="643.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="365.0" y="654.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (2 samples, 0.06%)</title><rect x="362.0" y="627.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.0" y="638.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (2 samples, 0.06%)</title><rect x="362.0" y="611.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.0" y="622.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (2 samples, 0.06%)</title><rect x="362.0" y="595.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.0" y="606.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (2 samples, 0.06%)</title><rect x="362.0" y="579.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.0" y="590.0"></text>
</g>
<g>
<title>ProxyGenerator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="362.0" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.0" y="574.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="362.0" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="365.0" y="558.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="531.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="365.0" y="542.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="515.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="365.0" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="365.0" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="365.0" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="365.0" y="478.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="365.0" y="462.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="435.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="365.0" y="446.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="365.0" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="403.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="365.0" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="362.0" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="365.0" y="398.0"></text>
</g>
<g>
<title>Copy::conjoint_swap(void const*, void*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="362.0" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="365.0" y="382.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="362.4" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.4" y="574.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getClass (1 samples, 0.03%)</title><rect x="362.4" y="547.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.4" y="558.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getIndirect (1 samples, 0.03%)</title><rect x="362.4" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.4" y="542.0"></text>
</g>
<g>
<title>Integer.shortValue (1 samples, 0.03%)</title><rect x="362.4" y="515.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.4" y="526.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="362.9" y="675.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.9" y="686.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="362.9" y="659.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.9" y="670.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="362.9" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.9" y="654.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="362.9" y="627.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.9" y="638.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="362.9" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.9" y="622.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="362.9" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.9" y="606.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="362.9" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.9" y="590.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="362.9" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.9" y="574.0"></text>
</g>
<g>
<title>MethodHandles.constant (1 samples, 0.03%)</title><rect x="362.9" y="547.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.9" y="558.0"></text>
</g>
<g>
<title>MethodHandles.identity (1 samples, 0.03%)</title><rect x="362.9" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.9" y="542.0"></text>
</g>
<g>
<title>MethodHandles.makeIdentity (1 samples, 0.03%)</title><rect x="362.9" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.9" y="526.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="363.3" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="366.3" y="830.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="366.3" y="814.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="366.3" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="366.3" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="366.3" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="739.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="366.3" y="750.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="366.3" y="734.0"></text>
</g>
<g>
<title>ClassPathImageEntry::open_stream(char const*, Thread*) (1 samples, 0.03%)</title><rect x="363.3" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="366.3" y="718.0"></text>
</g>
<g>
<title>JIMAGE_FindResource (1 samples, 0.03%)</title><rect x="363.3" y="691.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="366.3" y="702.0"></text>
</g>
<g>
<title>_platform_strlen (1 samples, 0.03%)</title><rect x="363.3" y="675.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="366.3" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigProviderResolver.getConfig (1 samples, 0.03%)</title><rect x="363.8" y="1075.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.8" y="1086.0"></text>
</g>
<g>
<title>SmallRyeConfigProviderResolver.getConfig (1 samples, 0.03%)</title><rect x="363.8" y="1059.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.8" y="1070.0"></text>
</g>
<g>
<title>SmallRyeConfigProviderResolver.getFactoryFor (1 samples, 0.03%)</title><rect x="363.8" y="1043.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.8" y="1054.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="363.8" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.8" y="1038.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="363.8" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="366.8" y="1022.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="363.8" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.8" y="1006.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="363.8" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.8" y="990.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="363.8" y="963.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.8" y="974.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="363.8" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="366.8" y="958.0"></text>
</g>
<g>
<title>JarURLConnection.getInputStream (1 samples, 0.03%)</title><rect x="363.8" y="931.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.8" y="942.0"></text>
</g>
<g>
<title>JarURLConnection.connect (1 samples, 0.03%)</title><rect x="363.8" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.8" y="926.0"></text>
</g>
<g>
<title>URLJarFile.getEntry (1 samples, 0.03%)</title><rect x="363.8" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.8" y="910.0"></text>
</g>
<g>
<title>JarFile.getEntry (1 samples, 0.03%)</title><rect x="363.8" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.8" y="894.0"></text>
</g>
<g>
<title>JarFile.isMultiRelease (1 samples, 0.03%)</title><rect x="363.8" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.8" y="878.0"></text>
</g>
<g>
<title>JarFile.checkForSpecialAttributes (1 samples, 0.03%)</title><rect x="363.8" y="851.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.8" y="862.0"></text>
</g>
<g>
<title>JarFile.getBytes (1 samples, 0.03%)</title><rect x="363.8" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.8" y="846.0"></text>
</g>
<g>
<title>InputStream.readNBytes (1 samples, 0.03%)</title><rect x="363.8" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="366.8" y="830.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="363.8" y="803.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.8" y="814.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="363.8" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.8" y="798.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="363.8" y="771.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.8" y="782.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="363.8" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.8" y="766.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="363.8" y="739.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.8" y="750.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="363.8" y="723.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.8" y="734.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="363.8" y="707.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="366.8" y="718.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="363.8" y="691.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="366.8" y="702.0"></text>
</g>
<g>
<title>HibernateOrmProcessor$build-25387913.deploy (3 samples, 0.08%)</title><rect x="364.2" y="1091.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.2" y="1102.0"></text>
</g>
<g>
<title>HibernateOrmProcessor$build-25387913.deploy_0 (3 samples, 0.08%)</title><rect x="364.2" y="1075.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.2" y="1086.0"></text>
</g>
<g>
<title>HibernateOrmRecorder.callHibernateFeatureInit (1 samples, 0.03%)</title><rect x="364.2" y="1059.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.2" y="1070.0"></text>
</g>
<g>
<title>Hibernate.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="364.2" y="1043.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.2" y="1054.0"></text>
</g>
<g>
<title>PersistenceProviderSetup.registerPersistenceProvider (1 samples, 0.03%)</title><rect x="364.2" y="1027.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.2" y="1038.0"></text>
</g>
<g>
<title>FastBootHibernatePersistenceProviderResolver.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="364.2" y="1011.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.2" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="364.2" y="995.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="367.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="979.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="367.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="963.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="367.2" y="974.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="947.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.2" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="367.2" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="367.2" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="367.2" y="910.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="367.2" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="364.2" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="367.2" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="364.6" y="1059.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.6" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="364.6" y="1043.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="364.6" y="1027.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.6" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="364.6" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.6" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="364.6" y="995.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="367.6" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="364.6" y="979.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="367.6" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="963.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="367.6" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="947.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="367.6" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="367.6" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="367.6" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="367.6" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="367.6" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="367.6" y="878.0"></text>
</g>
<g>
<title>PlaceholderTable::find_and_add(int, unsigned int, Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="364.6" y="851.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="367.6" y="862.0"></text>
</g>
<g>
<title>PlaceholderEntry::add_seen_thread(Thread*, PlaceholderTable::classloadAction) (1 samples, 0.03%)</title><rect x="364.6" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="367.6" y="846.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="364.6" y="819.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="367.6" y="830.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="364.6" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="367.6" y="814.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="364.6" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="367.6" y="798.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="364.6" y="771.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="367.6" y="782.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="364.6" y="755.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="367.6" y="766.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="364.6" y="739.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="367.6" y="750.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="364.6" y="723.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="367.6" y="734.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="364.6" y="707.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="367.6" y="718.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="364.6" y="691.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="367.6" y="702.0"></text>
</g>
<g>
<title>SharedCacheMode.valueOf (1 samples, 0.03%)</title><rect x="365.1" y="1059.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="365.1" y="1043.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="368.1" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="365.1" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="368.1" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="1011.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="368.1" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="995.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="368.1" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="979.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="368.1" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="963.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="368.1" y="974.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="368.1" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="368.1" y="942.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="915.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="368.1" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="365.1" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="368.1" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="365.1" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="368.1" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="365.1" y="867.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="368.1" y="878.0"></text>
</g>
<g>
<title>HibernateOrmProcessor$build-744158669.deploy (8 samples, 0.22%)</title><rect x="365.5" y="1091.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.5" y="1102.0"></text>
</g>
<g>
<title>HibernateOrmProcessor$build-744158669.deploy_0 (8 samples, 0.22%)</title><rect x="365.5" y="1075.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.5" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="365.5" y="1059.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="368.5" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="365.5" y="1043.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="368.5" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="368.5" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="1011.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="368.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="368.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="368.5" y="990.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="963.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="368.5" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="368.5" y="958.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="365.5" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="368.5" y="942.0"></text>
</g>
<g>
<title>MultiTenancyStrategy.&lt;clinit&gt; (7 samples, 0.20%)</title><rect x="366.0" y="1059.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.0" y="1070.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (6 samples, 0.17%)</title><rect x="366.0" y="1043.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.0" y="1054.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (6 samples, 0.17%)</title><rect x="366.0" y="1027.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.0" y="1038.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (6 samples, 0.17%)</title><rect x="366.0" y="1011.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="369.0" y="1022.0"></text>
</g>
<g>
<title>Logger$1.run (6 samples, 0.17%)</title><rect x="366.0" y="995.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.0" y="1006.0"></text>
</g>
<g>
<title>Class.forName (6 samples, 0.17%)</title><rect x="366.0" y="979.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.0" y="990.0"></text>
</g>
<g>
<title>Class.forName0 (6 samples, 0.17%)</title><rect x="366.0" y="963.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.0" y="974.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (2 samples, 0.06%)</title><rect x="366.0" y="947.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="369.0" y="958.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (2 samples, 0.06%)</title><rect x="366.0" y="931.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="369.0" y="942.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (2 samples, 0.06%)</title><rect x="366.0" y="915.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="369.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="366.0" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="369.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="366.0" y="883.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="369.0" y="894.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="366.0" y="867.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="369.0" y="878.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="366.0" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="369.0" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="366.0" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="369.0" y="846.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::append(Symbol* const&amp;) (1 samples, 0.03%)</title><rect x="366.0" y="819.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.0" y="830.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="366.4" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="369.4" y="878.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="366.4" y="851.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="369.4" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="366.9" y="947.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.9" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="366.9" y="931.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.9" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="366.9" y="915.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.9" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="366.9" y="899.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.9" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="366.9" y="883.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="369.9" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="366.9" y="867.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="369.9" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="851.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="369.9" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.9" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="369.9" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="369.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="369.9" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="369.9" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="366.9" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.9" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.3" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.3" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.3" y="878.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.3" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.3" y="862.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.3" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.3" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.3" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.3" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="367.3" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.3" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="367.3" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="370.3" y="798.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="367.3" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.3" y="782.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="367.3" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.3" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="367.3" y="739.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.3" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="367.3" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.3" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="367.3" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="370.3" y="718.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="367.3" y="691.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="370.3" y="702.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="367.3" y="675.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="370.3" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="367.3" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="370.3" y="670.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="367.3" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="370.3" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="367.3" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="370.3" y="638.0"></text>
</g>
<g>
<title>Method::sort_methods(Array&lt;Method*&gt;*, bool, bool) (1 samples, 0.03%)</title><rect x="367.3" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="370.3" y="622.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="370.3" y="606.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="370.3" y="590.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="563.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="370.3" y="574.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="370.3" y="558.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="370.3" y="542.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;false, Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="515.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="370.3" y="526.0"></text>
</g>
<g>
<title>unsigned long QuickSort::find_pivot&lt;Method*, int (*)(Method*, Method*)&gt;(Method**, unsigned long, int (*)(Method*, Method*)) (1 samples, 0.03%)</title><rect x="367.3" y="499.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="370.3" y="510.0"></text>
</g>
<g>
<title>method_comparator(Method*, Method*) (1 samples, 0.03%)</title><rect x="367.3" y="483.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="370.3" y="494.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.7" y="915.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.7" y="926.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.7" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.7" y="910.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="367.7" y="883.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.7" y="894.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="367.7" y="867.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.7" y="878.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="367.7" y="851.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="370.7" y="862.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="367.7" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="370.7" y="846.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.03%)</title><rect x="367.7" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="370.7" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="367.7" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.7" y="814.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="367.7" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.7" y="798.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="367.7" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.7" y="782.0"></text>
</g>
<g>
<title>ClassLoader.defineClass2 (1 samples, 0.03%)</title><rect x="367.7" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.7" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass2 (1 samples, 0.03%)</title><rect x="367.7" y="739.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="370.7" y="750.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="367.7" y="723.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="370.7" y="734.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="707.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="370.7" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="370.7" y="702.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="370.7" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="370.7" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="643.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="370.7" y="654.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="627.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="370.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::class_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="367.7" y="611.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="370.7" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="367.7" y="595.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="370.7" y="606.0"></text>
</g>
<g>
<title>ClassAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="367.7" y="579.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="370.7" y="590.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="367.7" y="563.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="370.7" y="574.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="368.2" y="915.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.2" y="926.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="368.2" y="899.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.2" y="910.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="368.2" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.2" y="894.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="368.2" y="867.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.2" y="878.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="368.2" y="851.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="371.2" y="862.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="368.2" y="835.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="371.2" y="846.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="368.2" y="819.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="371.2" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="368.6" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.6" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="368.6" y="1027.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.6" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="368.6" y="1011.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.6" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="368.6" y="995.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.6" y="1006.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="368.6" y="979.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="371.6" y="990.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="368.6" y="963.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="371.6" y="974.0"></text>
</g>
<g>
<title>medium_size (1 samples, 0.03%)</title><rect x="368.6" y="947.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="371.6" y="958.0"></text>
</g>
<g>
<title>HibernateValidatorProcessor$build-642046765.deploy (3 samples, 0.08%)</title><rect x="369.1" y="1091.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="372.1" y="1102.0"></text>
</g>
<g>
<title>HibernateValidatorProcessor$build-642046765.deploy_0 (3 samples, 0.08%)</title><rect x="369.1" y="1075.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.1" y="1086.0"></text>
</g>
<g>
<title>Class.forName (2 samples, 0.06%)</title><rect x="369.1" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.1" y="1070.0"></text>
</g>
<g>
<title>Class.forName0 (2 samples, 0.06%)</title><rect x="369.1" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.1" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="369.1" y="1027.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="372.1" y="1038.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="369.1" y="1011.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="372.1" y="1022.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="995.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="372.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="979.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="372.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="963.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="372.1" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="372.1" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="372.1" y="942.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="915.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="372.1" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="372.1" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="372.1" y="894.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="372.1" y="878.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="372.1" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="372.1" y="846.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(int, unsigned char*, int, unsigned int, bool, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="372.1" y="830.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="369.1" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="372.1" y="814.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="369.1" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="372.1" y="798.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="369.1" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="372.1" y="782.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="369.1" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="372.1" y="766.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="369.1" y="739.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="372.1" y="750.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="369.1" y="723.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="372.1" y="734.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="369.1" y="707.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="372.1" y="718.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="369.1" y="691.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="372.1" y="702.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="369.1" y="675.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="372.1" y="686.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="369.1" y="659.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="372.1" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="369.5" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.5" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="369.5" y="1011.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.5" y="1022.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="369.5" y="995.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="372.5" y="1006.0"></text>
</g>
<g>
<title>JarResource.file (1 samples, 0.03%)</title><rect x="369.5" y="979.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.5" y="990.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="963.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="372.5" y="974.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="947.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.5" y="958.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="931.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.5" y="942.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.get (1 samples, 0.03%)</title><rect x="369.5" y="915.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.5" y="926.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.5" y="910.0"></text>
</g>
<g>
<title>ZipFile$Source.get (1 samples, 0.03%)</title><rect x="369.5" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.5" y="894.0"></text>
</g>
<g>
<title>ZipFile$Source.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.5" y="878.0"></text>
</g>
<g>
<title>RandomAccessFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.5" y="862.0"></text>
</g>
<g>
<title>RandomAccessFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="369.5" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.5" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.open (1 samples, 0.03%)</title><rect x="369.5" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="372.5" y="830.0"></text>
</g>
<g>
<title>RandomAccessFile.open0 (1 samples, 0.03%)</title><rect x="369.5" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.5" y="814.0"></text>
</g>
<g>
<title>fileOpen (1 samples, 0.03%)</title><rect x="369.5" y="787.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="372.5" y="798.0"></text>
</g>
<g>
<title>module_mutex (1 samples, 0.03%)</title><rect x="369.5" y="771.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="372.5" y="782.0"></text>
</g>
<g>
<title>HibernateValidatorRecorder.initializeValidatorFactory (1 samples, 0.03%)</title><rect x="370.0" y="1059.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="373.0" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (5 samples, 0.14%)</title><rect x="370.4" y="1091.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="373.4" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (5 samples, 0.14%)</title><rect x="370.4" y="1075.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.4" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="1059.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.4" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="1043.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="373.4" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="1027.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="373.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="1011.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="373.4" y="1022.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="995.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="373.4" y="1006.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="979.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="373.4" y="990.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (5 samples, 0.14%)</title><rect x="370.4" y="963.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="373.4" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (3 samples, 0.08%)</title><rect x="370.4" y="947.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.4" y="958.0"></text>
</g>
<g>
<title>StackMapFrame::frame_in_exception_handler(unsigned char) (1 samples, 0.03%)</title><rect x="370.8" y="931.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.8" y="942.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="370.8" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="373.8" y="926.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="371.3" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="374.3" y="942.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="371.3" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="374.3" y="926.0"></text>
</g>
<g>
<title>StackMapFrame::is_assignable_to(StackMapFrame const*, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="371.3" y="899.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="374.3" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (2 samples, 0.06%)</title><rect x="371.7" y="947.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="374.7" y="958.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="371.7" y="931.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="374.7" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="371.7" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="374.7" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="371.7" y="899.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="374.7" y="910.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="371.7" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="374.7" y="894.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="372.2" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="375.2" y="942.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="372.2" y="915.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.2" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="372.2" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="375.2" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="372.2" y="883.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="375.2" y="894.0"></text>
</g>
<g>
<title>LoggingResourceProcessor$setupLoggingStaticInit-1235809433.deploy (3 samples, 0.08%)</title><rect x="372.6" y="1091.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.6" y="1102.0"></text>
</g>
<g>
<title>LoggingResourceProcessor$setupLoggingStaticInit-1235809433.deploy_0 (3 samples, 0.08%)</title><rect x="372.6" y="1075.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.6" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="372.6" y="1059.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.6" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="372.6" y="1043.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (2 samples, 0.06%)</title><rect x="372.6" y="1027.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.6" y="1038.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (2 samples, 0.06%)</title><rect x="372.6" y="1011.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.6" y="1022.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (2 samples, 0.06%)</title><rect x="372.6" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="375.6" y="1006.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (2 samples, 0.06%)</title><rect x="372.6" y="979.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="375.6" y="990.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.06%)</title><rect x="372.6" y="963.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.6" y="974.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (2 samples, 0.06%)</title><rect x="372.6" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.6" y="958.0"></text>
</g>
<g>
<title>Resource.getBytes (1 samples, 0.03%)</title><rect x="372.6" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="375.6" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="372.6" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="375.6" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="372.6" y="899.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="375.6" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="372.6" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="375.6" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="372.6" y="867.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="375.6" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="372.6" y="851.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="375.6" y="862.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="372.6" y="835.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="375.6" y="846.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="373.1" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.1" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="373.1" y="915.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.1" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="373.1" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.1" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="373.1" y="883.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="376.1" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="373.1" y="867.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="376.1" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="373.1" y="851.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="376.1" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="373.1" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="376.1" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="373.1" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="376.1" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="373.1" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="376.1" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="373.1" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="376.1" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="373.1" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="376.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="373.1" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="376.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="373.1" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="376.1" y="750.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="373.5" y="1027.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.5" y="1038.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="373.5" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.5" y="1022.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="373.5" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.5" y="1006.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="373.5" y="979.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="376.5" y="990.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="373.5" y="963.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="376.5" y="974.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="373.5" y="947.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="376.5" y="958.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="373.5" y="931.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="376.5" y="942.0"></text>
</g>
<g>
<title>PanacheJpaCommonResourceProcessor$buildNamedQueryMap-919791242.deploy (1 samples, 0.03%)</title><rect x="373.9" y="1091.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.9" y="1102.0"></text>
</g>
<g>
<title>PanacheJpaCommonResourceProcessor$buildNamedQueryMap-919791242.deploy_0 (1 samples, 0.03%)</title><rect x="373.9" y="1075.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.9" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="373.9" y="1059.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.9" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="373.9" y="1043.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.9" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="373.9" y="1027.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.9" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="373.9" y="1011.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="376.9" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="373.9" y="995.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="376.9" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="373.9" y="979.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="376.9" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="963.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="376.9" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="376.9" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="376.9" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="376.9" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="376.9" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="883.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="376.9" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="867.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="376.9" y="878.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="376.9" y="862.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="376.9" y="846.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="373.9" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="376.9" y="830.0"></text>
</g>
<g>
<title>Symbol::Symbol(unsigned char const*, int, int) (1 samples, 0.03%)</title><rect x="373.9" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="376.9" y="814.0"></text>
</g>
<g>
<title>ResteasyCommonProcessor$setupResteasyInjection-1799175235.deploy (1 samples, 0.03%)</title><rect x="374.4" y="1091.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.4" y="1102.0"></text>
</g>
<g>
<title>ResteasyCommonProcessor$setupResteasyInjection-1799175235.deploy_0 (1 samples, 0.03%)</title><rect x="374.4" y="1075.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.4" y="1086.0"></text>
</g>
<g>
<title>ResteasyInjectorFactoryRecorder.setup (1 samples, 0.03%)</title><rect x="374.4" y="1059.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.4" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="374.4" y="1043.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.4" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="374.4" y="1027.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.4" y="1038.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="374.4" y="1011.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.4" y="1022.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="374.4" y="995.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.4" y="1006.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="374.4" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="377.4" y="990.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="374.4" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.4" y="974.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="374.4" y="947.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="377.4" y="958.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="374.4" y="931.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="377.4" y="942.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="374.4" y="915.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="377.4" y="926.0"></text>
</g>
<g>
<title>ResteasyStandaloneBuildStep$staticInit-210558872.deploy (92 samples, 2.57%)</title><rect x="374.8" y="1091.0" width="40.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.8" y="1102.0">Res..</text>
</g>
<g>
<title>ResteasyStandaloneBuildStep$staticInit-210558872.deploy_0 (92 samples, 2.57%)</title><rect x="374.8" y="1075.0" width="40.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="377.8" y="1086.0">Res..</text>
</g>
<g>
<title>ResteasyStandaloneRecorder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="374.8" y="1059.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.8" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="374.8" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.8" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="374.8" y="1027.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.8" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="374.8" y="1011.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.8" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="374.8" y="995.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.8" y="1006.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="374.8" y="979.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="377.8" y="990.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="374.8" y="963.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="377.8" y="974.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="947.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="377.8" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="931.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="377.8" y="942.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.8" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="377.8" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="377.8" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.8" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="374.8" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="377.8" y="862.0"></text>
</g>
<g>
<title>ResteasyStandaloneRecorder.staticInit (88 samples, 2.46%)</title><rect x="375.3" y="1059.0" width="38.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.3" y="1070.0">Res..</text>
</g>
<g>
<title>ResteasyDeploymentImpl.start (88 samples, 2.46%)</title><rect x="375.3" y="1043.0" width="38.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.3" y="1054.0">Res..</text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="375.3" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="378.3" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="375.3" y="1011.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="378.3" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="375.3" y="995.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="378.3" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="375.3" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="378.3" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="375.3" y="963.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="378.3" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="375.3" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="378.3" y="958.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="375.3" y="931.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="378.3" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="375.3" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="378.3" y="926.0"></text>
</g>
<g>
<title>ResteasyDeploymentImpl.startInternal (87 samples, 2.43%)</title><rect x="375.7" y="1027.0" width="38.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.7" y="1038.0">Res..</text>
</g>
<g>
<title>RegisterBuiltin.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="375.7" y="1011.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.7" y="1022.0"></text>
</g>
<g>
<title>RegisterBuiltin.isGZipEnabled (1 samples, 0.03%)</title><rect x="375.7" y="995.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="1006.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="375.7" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.7" y="990.0"></text>
</g>
<g>
<title>RegisterBuiltin$5.run (1 samples, 0.03%)</title><rect x="375.7" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="974.0"></text>
</g>
<g>
<title>RegisterBuiltin$5.run (1 samples, 0.03%)</title><rect x="375.7" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.7" y="958.0"></text>
</g>
<g>
<title>SmallRyeConfig.getOptionalValue (1 samples, 0.03%)</title><rect x="375.7" y="931.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="378.7" y="942.0"></text>
</g>
<g>
<title>SmallRyeConfig.getValue (1 samples, 0.03%)</title><rect x="375.7" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="926.0"></text>
</g>
<g>
<title>SmallRyeConfig.getRawValue (1 samples, 0.03%)</title><rect x="375.7" y="899.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.7" y="910.0"></text>
</g>
<g>
<title>SmallRyeConfig.getConfigValue (1 samples, 0.03%)</title><rect x="375.7" y="883.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.7" y="894.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.7" y="878.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.7" y="862.0"></text>
</g>
<g>
<title>ExpressionConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.7" y="846.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="819.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.7" y="830.0"></text>
</g>
<g>
<title>ProfileConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.7" y="814.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="798.0"></text>
</g>
<g>
<title>SecretKeysConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.7" y="782.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.7" y="766.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="378.7" y="750.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.7" y="734.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.7" y="718.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="378.7" y="702.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="675.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="686.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.7" y="670.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="643.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.7" y="654.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.7" y="638.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="611.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.7" y="622.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.7" y="606.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.7" y="590.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.7" y="574.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.7" y="558.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.7" y="542.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.7" y="526.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="499.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.7" y="510.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.7" y="494.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.7" y="478.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.7" y="462.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptorContext.proceed (1 samples, 0.03%)</title><rect x="375.7" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.7" y="446.0"></text>
</g>
<g>
<title>SmallRyeConfigSourceInterceptor.getValue (1 samples, 0.03%)</title><rect x="375.7" y="419.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.7" y="430.0"></text>
</g>
<g>
<title>ConfigValueConfigSourceWrapper.getConfigValue (1 samples, 0.03%)</title><rect x="375.7" y="403.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.7" y="414.0"></text>
</g>
<g>
<title>AbstractRawDefaultConfigSource.getValue (1 samples, 0.03%)</title><rect x="375.7" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.7" y="398.0"></text>
</g>
<g>
<title>BuildTimeRunTimeDefaultValuesConfigSource.getValue (1 samples, 0.03%)</title><rect x="375.7" y="371.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.7" y="382.0"></text>
</g>
<g>
<title>NameIterator.previousSegmentEquals (1 samples, 0.03%)</title><rect x="375.7" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.7" y="366.0"></text>
</g>
<g>
<title>RegisterBuiltin.register (41 samples, 1.15%)</title><rect x="376.1" y="1011.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.1" y="1022.0"></text>
</g>
<g>
<title>RegisterBuiltin.registerProviders (41 samples, 1.15%)</title><rect x="376.1" y="995.0" width="18.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.1" y="1006.0"></text>
</g>
<g>
<title>RegisterBuiltin.scanBuiltins (1 samples, 0.03%)</title><rect x="376.1" y="979.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.1" y="990.0"></text>
</g>
<g>
<title>URL.openStream (1 samples, 0.03%)</title><rect x="376.1" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.1" y="974.0"></text>
</g>
<g>
<title>JarURLConnection.getInputStream (1 samples, 0.03%)</title><rect x="376.1" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.1" y="958.0"></text>
</g>
<g>
<title>JarURLConnection.connect (1 samples, 0.03%)</title><rect x="376.1" y="931.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.1" y="942.0"></text>
</g>
<g>
<title>JarFileFactory.getConnection (1 samples, 0.03%)</title><rect x="376.1" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.1" y="926.0"></text>
</g>
<g>
<title>URL.openConnection (1 samples, 0.03%)</title><rect x="376.1" y="899.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.1" y="910.0"></text>
</g>
<g>
<title>Handler.openConnection (1 samples, 0.03%)</title><rect x="376.1" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.1" y="894.0"></text>
</g>
<g>
<title>Handler.openConnection (1 samples, 0.03%)</title><rect x="376.1" y="867.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.1" y="878.0"></text>
</g>
<g>
<title>File.&lt;init&gt; (1 samples, 0.03%)</title><rect x="376.1" y="851.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.1" y="862.0"></text>
</g>
<g>
<title>UnixFileSystem.normalize (1 samples, 0.03%)</title><rect x="376.1" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.1" y="846.0"></text>
</g>
<g>
<title>String.charAt (1 samples, 0.03%)</title><rect x="376.1" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.1" y="830.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.registerProvider (37 samples, 1.04%)</title><rect x="376.6" y="979.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.6" y="990.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.registerProvider (37 samples, 1.04%)</title><rect x="376.6" y="963.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.6" y="974.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.processProviderContracts (37 samples, 1.04%)</title><rect x="376.6" y="947.0" width="16.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.6" y="958.0"></text>
</g>
<g>
<title>ClientHelper.processProviderContracts (31 samples, 0.87%)</title><rect x="376.6" y="931.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="379.6" y="942.0"></text>
</g>
<g>
<title>Class.getAnnotation (6 samples, 0.17%)</title><rect x="376.6" y="915.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.6" y="926.0"></text>
</g>
<g>
<title>Class.annotationData (6 samples, 0.17%)</title><rect x="376.6" y="899.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.6" y="910.0"></text>
</g>
<g>
<title>Class.createAnnotationData (6 samples, 0.17%)</title><rect x="376.6" y="883.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.6" y="894.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (6 samples, 0.17%)</title><rect x="376.6" y="867.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.6" y="878.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (6 samples, 0.17%)</title><rect x="376.6" y="851.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.6" y="862.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (6 samples, 0.17%)</title><rect x="376.6" y="835.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.6" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (5 samples, 0.14%)</title><rect x="376.6" y="819.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.6" y="830.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (5 samples, 0.14%)</title><rect x="376.6" y="803.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.6" y="814.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (5 samples, 0.14%)</title><rect x="376.6" y="787.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="379.6" y="798.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (5 samples, 0.14%)</title><rect x="376.6" y="771.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.6" y="782.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (5 samples, 0.14%)</title><rect x="376.6" y="755.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.6" y="766.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (3 samples, 0.08%)</title><rect x="376.6" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="379.6" y="750.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (3 samples, 0.08%)</title><rect x="376.6" y="723.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.6" y="734.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (3 samples, 0.08%)</title><rect x="376.6" y="707.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.6" y="718.0"></text>
</g>
<g>
<title>1615056168.apply (3 samples, 0.08%)</title><rect x="376.6" y="691.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="379.6" y="702.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (3 samples, 0.08%)</title><rect x="376.6" y="675.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.6" y="686.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (3 samples, 0.08%)</title><rect x="376.6" y="659.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.6" y="670.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="376.6" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.6" y="654.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="376.6" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.6" y="638.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="376.6" y="611.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.6" y="622.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="376.6" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.6" y="606.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="376.6" y="579.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="379.6" y="590.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="376.6" y="563.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="379.6" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="376.6" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="379.6" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="376.6" y="531.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="379.6" y="542.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="376.6" y="515.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="379.6" y="526.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="376.6" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="379.6" y="510.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="376.6" y="483.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="379.6" y="494.0"></text>
</g>
<g>
<title>verify_method (1 samples, 0.03%)</title><rect x="376.6" y="467.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="379.6" y="478.0"></text>
</g>
<g>
<title>JVM_GetCPMethodSignatureUTF (1 samples, 0.03%)</title><rect x="376.6" y="451.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="379.6" y="462.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.03%)</title><rect x="376.6" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="379.6" y="446.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="376.6" y="419.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="379.6" y="430.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (2 samples, 0.06%)</title><rect x="377.0" y="643.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.0" y="654.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (2 samples, 0.06%)</title><rect x="377.0" y="627.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.0" y="638.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (2 samples, 0.06%)</title><rect x="377.0" y="611.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.0" y="622.0"></text>
</g>
<g>
<title>ProxyGenerator.generateConstructor (1 samples, 0.03%)</title><rect x="377.0" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.0" y="606.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getMethodRef (1 samples, 0.03%)</title><rect x="377.0" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="380.0" y="590.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getClass (1 samples, 0.03%)</title><rect x="377.0" y="563.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.0" y="574.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getUtf8 (1 samples, 0.03%)</title><rect x="377.0" y="547.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.0" y="558.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getValue (1 samples, 0.03%)</title><rect x="377.0" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.0" y="542.0"></text>
</g>
<g>
<title>HashMap.get (1 samples, 0.03%)</title><rect x="377.0" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.0" y="526.0"></text>
</g>
<g>
<title>HashMap.getNode (1 samples, 0.03%)</title><rect x="377.0" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.0" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="377.0" y="483.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="380.0" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="377.0" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="380.0" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="377.0" y="451.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="380.0" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="377.0" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="380.0" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="377.0" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="380.0" y="430.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="377.0" y="403.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="380.0" y="414.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="377.0" y="387.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="380.0" y="398.0"></text>
</g>
<g>
<title>ProxyGenerator.generateStaticInitializer (1 samples, 0.03%)</title><rect x="377.5" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.5" y="606.0"></text>
</g>
<g>
<title>DataOutputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="377.5" y="579.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="380.5" y="590.0"></text>
</g>
<g>
<title>FilterOutputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="377.5" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.5" y="574.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="377.5" y="547.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="380.5" y="558.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="377.5" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="380.5" y="542.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="377.5" y="515.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="380.5" y="526.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="377.5" y="499.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="380.5" y="510.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="377.5" y="483.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="380.5" y="494.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::common(bool (SimpleThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.03%)</title><rect x="377.5" y="467.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="380.5" y="478.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::common(bool (SimpleThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.03%)</title><rect x="377.5" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="380.5" y="462.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (2 samples, 0.06%)</title><rect x="377.9" y="739.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.9" y="750.0"></text>
</g>
<g>
<title>Constructor.newInstance (2 samples, 0.06%)</title><rect x="377.9" y="723.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.9" y="734.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.06%)</title><rect x="377.9" y="707.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.9" y="718.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (2 samples, 0.06%)</title><rect x="377.9" y="691.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.9" y="702.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generateConstructor (2 samples, 0.06%)</title><rect x="377.9" y="675.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.9" y="686.0"></text>
</g>
<g>
<title>MethodAccessorGenerator.generate (2 samples, 0.06%)</title><rect x="377.9" y="659.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="380.9" y="670.0"></text>
</g>
<g>
<title>ClassFileAssembler.emitConstantPoolUTF8 (2 samples, 0.06%)</title><rect x="377.9" y="643.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.9" y="654.0"></text>
</g>
<g>
<title>UTF8.encode (2 samples, 0.06%)</title><rect x="377.9" y="627.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="380.9" y="638.0"></text>
</g>
<g>
<title>String.charAt (2 samples, 0.06%)</title><rect x="377.9" y="611.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.9" y="622.0"></text>
</g>
<g>
<title>String.isLatin1 (1 samples, 0.03%)</title><rect x="377.9" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.9" y="606.0"></text>
</g>
<g>
<title>StringLatin1.charAt (1 samples, 0.03%)</title><rect x="378.4" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.4" y="606.0"></text>
</g>
<g>
<title>AnnotationParser.parseSig (1 samples, 0.03%)</title><rect x="378.8" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.8" y="830.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="378.8" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.8" y="814.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="378.8" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.8" y="798.0"></text>
</g>
<g>
<title>CoreReflectionFactory.makeNamedType (1 samples, 0.03%)</title><rect x="378.8" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.8" y="782.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="378.8" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.8" y="766.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="378.8" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.8" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="378.8" y="723.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="381.8" y="734.0"></text>
</g>
<g>
<title>jni_GetStringUTFRegion (1 samples, 0.03%)</title><rect x="378.8" y="707.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="381.8" y="718.0"></text>
</g>
<g>
<title>CommonProviders.processProviderContracts (25 samples, 0.70%)</title><rect x="379.2" y="915.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.2" y="926.0"></text>
</g>
<g>
<title>CommonProviders.addDynamicFeature (1 samples, 0.03%)</title><rect x="380.1" y="899.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.1" y="910.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.injectedInstance (1 samples, 0.03%)</title><rect x="380.1" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.1" y="894.0"></text>
</g>
<g>
<title>PickConstructor.pickSingletonConstructor (1 samples, 0.03%)</title><rect x="380.1" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.1" y="878.0"></text>
</g>
<g>
<title>Class.getConstructors (1 samples, 0.03%)</title><rect x="380.1" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.1" y="862.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="380.1" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.1" y="846.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="380.1" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.1" y="830.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="380.1" y="803.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="383.1" y="814.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="787.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="383.1" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="383.1" y="766.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.1" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="383.1" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="707.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="383.1" y="718.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="380.1" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="383.1" y="702.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="380.1" y="675.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.1" y="686.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="380.1" y="659.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="383.1" y="670.0"></text>
</g>
<g>
<title>CommonProviders.addMessageBodyReader (10 samples, 0.28%)</title><rect x="380.6" y="899.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="383.6" y="910.0"></text>
</g>
<g>
<title>MediaTypeMap.add (2 samples, 0.06%)</title><rect x="380.6" y="883.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="383.6" y="894.0"></text>
</g>
<g>
<title>MediaTypeHeaderDelegate.parse (1 samples, 0.03%)</title><rect x="380.6" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="383.6" y="878.0"></text>
</g>
<g>
<title>ConcurrentHashMap.put (1 samples, 0.03%)</title><rect x="380.6" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.6" y="862.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putVal (1 samples, 0.03%)</title><rect x="380.6" y="835.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.6" y="846.0"></text>
</g>
<g>
<title>MediaType.hashCode (1 samples, 0.03%)</title><rect x="380.6" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.6" y="830.0"></text>
</g>
<g>
<title>Collections$UnmodifiableMap.hashCode (1 samples, 0.03%)</title><rect x="380.6" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.6" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="380.6" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="383.6" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="380.6" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="383.6" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="380.6" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="383.6" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="380.6" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.6" y="750.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="380.6" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="383.6" y="734.0"></text>
</g>
<g>
<title>CallInfo::set_virtual(Klass*, Klass*, methodHandle const&amp;, methodHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="380.6" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="383.6" y="718.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="380.6" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.6" y="702.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="380.6" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="383.6" y="686.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="380.6" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="383.6" y="670.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.03%)</title><rect x="380.6" y="643.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.6" y="654.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="381.0" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="381.0" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.0" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="381.0" y="835.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="381.0" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.0" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="381.0" y="803.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="384.0" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="381.0" y="787.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="384.0" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="771.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="384.0" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="384.0" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="739.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.0" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="384.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="384.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="384.0" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="384.0" y="686.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="659.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="384.0" y="670.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="643.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="384.0" y="654.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="381.0" y="627.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.0" y="638.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="381.0" y="611.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="384.0" y="622.0"></text>
</g>
<g>
<title>SortedKey.&lt;init&gt; (3 samples, 0.08%)</title><rect x="381.5" y="883.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.5" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="381.5" y="867.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.5" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="381.5" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.5" y="862.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="381.5" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.5" y="846.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="381.5" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.5" y="830.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="381.5" y="803.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="384.5" y="814.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="381.5" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.5" y="798.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="381.5" y="771.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="384.5" y="782.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="381.5" y="755.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="384.5" y="766.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="381.5" y="739.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="384.5" y="750.0"></text>
</g>
<g>
<title>Types.getTemplateParameterOfInterface (2 samples, 0.06%)</title><rect x="381.9" y="867.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.9" y="878.0"></text>
</g>
<g>
<title>Types.searchForInterfaceTemplateParameter (2 samples, 0.06%)</title><rect x="381.9" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.9" y="862.0"></text>
</g>
<g>
<title>Class.getGenericInterfaces (2 samples, 0.06%)</title><rect x="381.9" y="835.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.9" y="846.0"></text>
</g>
<g>
<title>Class.getGenericInfo (1 samples, 0.03%)</title><rect x="381.9" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.9" y="830.0"></text>
</g>
<g>
<title>ClassRepository.make (1 samples, 0.03%)</title><rect x="381.9" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.9" y="814.0"></text>
</g>
<g>
<title>ClassRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="381.9" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.9" y="798.0"></text>
</g>
<g>
<title>GenericDeclRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="381.9" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.9" y="782.0"></text>
</g>
<g>
<title>AbstractRepository.&lt;init&gt; (1 samples, 0.03%)</title><rect x="381.9" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.9" y="766.0"></text>
</g>
<g>
<title>ClassRepository.parse (1 samples, 0.03%)</title><rect x="381.9" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="384.9" y="750.0"></text>
</g>
<g>
<title>ClassRepository.parse (1 samples, 0.03%)</title><rect x="381.9" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.9" y="734.0"></text>
</g>
<g>
<title>SignatureParser.parseClassSig (1 samples, 0.03%)</title><rect x="381.9" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.9" y="718.0"></text>
</g>
<g>
<title>SignatureParser.parseClassSignature (1 samples, 0.03%)</title><rect x="381.9" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.9" y="702.0"></text>
</g>
<g>
<title>SignatureParser.parseSuperInterfaces (1 samples, 0.03%)</title><rect x="381.9" y="675.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.9" y="686.0"></text>
</g>
<g>
<title>SignatureParser.parseClassTypeSignature (1 samples, 0.03%)</title><rect x="381.9" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.9" y="670.0"></text>
</g>
<g>
<title>SignatureParser.parsePackageNameAndSimpleClassTypeSignature (1 samples, 0.03%)</title><rect x="381.9" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.9" y="654.0"></text>
</g>
<g>
<title>SignatureParser.parseTypeArguments (1 samples, 0.03%)</title><rect x="381.9" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.9" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="381.9" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="384.9" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="381.9" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="384.9" y="606.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="381.9" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.9" y="590.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="381.9" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="384.9" y="574.0"></text>
</g>
<g>
<title>ClassRepository.getSuperInterfaces (1 samples, 0.03%)</title><rect x="382.3" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.3" y="830.0"></text>
</g>
<g>
<title>ClassRepository.computeSuperInterfaces (1 samples, 0.03%)</title><rect x="382.3" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.3" y="814.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="382.3" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.3" y="798.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="382.3" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.3" y="782.0"></text>
</g>
<g>
<title>Reifier.reifyTypeArguments (1 samples, 0.03%)</title><rect x="382.3" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.3" y="766.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="382.3" y="739.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.3" y="750.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="382.3" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="385.3" y="734.0"></text>
</g>
<g>
<title>CoreReflectionFactory.makeNamedType (1 samples, 0.03%)</title><rect x="382.3" y="707.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="718.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="382.3" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.3" y="702.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="382.3" y="675.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.3" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="382.3" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.3" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="382.3" y="643.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.3" y="654.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="382.3" y="627.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.3" y="638.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="382.3" y="611.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.3" y="622.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="382.3" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.3" y="606.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="382.3" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.3" y="590.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="382.3" y="563.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.3" y="574.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="382.3" y="547.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.3" y="558.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="382.3" y="531.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.3" y="542.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="382.3" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.3" y="526.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="382.3" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.3" y="510.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="382.3" y="483.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="385.3" y="494.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="382.3" y="467.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="385.3" y="478.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="382.3" y="451.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="385.3" y="462.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="382.3" y="435.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="385.3" y="446.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="382.3" y="419.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="385.3" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="382.3" y="403.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="385.3" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="382.3" y="387.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="385.3" y="398.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="382.3" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="385.3" y="382.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="382.3" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="385.3" y="366.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="382.3" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="385.3" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_method(Symbol const*, Symbol const*) const (1 samples, 0.03%)</title><rect x="382.3" y="323.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="385.3" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="382.3" y="307.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="385.3" y="318.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="382.3" y="291.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="385.3" y="302.0"></text>
</g>
<g>
<title>Utils.injectProperties (5 samples, 0.14%)</title><rect x="382.8" y="883.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.8" y="894.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory$UnwrappingPropertyInjector.inject (2 samples, 0.06%)</title><rect x="382.8" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.8" y="878.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.inject (2 samples, 0.06%)</title><rect x="382.8" y="851.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.8" y="862.0"></text>
</g>
<g>
<title>HashMap$EntrySet.iterator (1 samples, 0.03%)</title><rect x="382.8" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.8" y="846.0"></text>
</g>
<g>
<title>HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="382.8" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.8" y="830.0"></text>
</g>
<g>
<title>HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="382.8" y="803.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.8" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="383.2" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="386.2" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="383.2" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="386.2" y="830.0"></text>
</g>
<g>
<title>ConstantPoolCacheEntry::set_direct_or_vtable_call(Bytecodes::Code, methodHandle const&amp;, int, bool) (1 samples, 0.03%)</title><rect x="383.2" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="386.2" y="814.0"></text>
</g>
<g>
<title>Method::result_type() const (1 samples, 0.03%)</title><rect x="383.2" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="386.2" y="798.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="383.2" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="386.2" y="782.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory.createPropertyInjector (3 samples, 0.08%)</title><rect x="383.7" y="867.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="386.7" y="878.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createPropertyInjector (3 samples, 0.08%)</title><rect x="383.7" y="851.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="386.7" y="862.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.&lt;init&gt; (3 samples, 0.08%)</title><rect x="383.7" y="835.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.7" y="846.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.populateMap (3 samples, 0.08%)</title><rect x="383.7" y="819.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.7" y="830.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.getDeclaredFields (1 samples, 0.03%)</title><rect x="383.7" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.7" y="814.0"></text>
</g>
<g>
<title>Class.getDeclaredFields (1 samples, 0.03%)</title><rect x="383.7" y="787.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.7" y="798.0"></text>
</g>
<g>
<title>Class.copyFields (1 samples, 0.03%)</title><rect x="383.7" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.7" y="782.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.getDeclaredMethods (1 samples, 0.03%)</title><rect x="384.1" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.1" y="814.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods (1 samples, 0.03%)</title><rect x="384.1" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.1" y="798.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="384.1" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.1" y="782.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="384.1" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.1" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.1" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.1" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.1" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.1" y="734.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.1" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="387.1" y="718.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.1" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.1" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.1" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.1" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="384.1" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.1" y="670.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="384.1" y="643.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.1" y="654.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="384.1" y="627.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.1" y="638.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="384.1" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.1" y="622.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="384.1" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.1" y="606.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="384.1" y="579.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="387.1" y="590.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="384.1" y="563.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="387.1" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="387.1" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="387.1" y="542.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="515.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="387.1" y="526.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="387.1" y="510.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="387.1" y="494.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="467.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="387.1" y="478.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="387.1" y="462.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="387.1" y="446.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="419.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="387.1" y="430.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="384.1" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="387.1" y="414.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.populateMap (1 samples, 0.03%)</title><rect x="384.5" y="803.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.5" y="814.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.getParameterExtractor (1 samples, 0.03%)</title><rect x="384.5" y="787.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.5" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.5" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.5" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="384.5" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.5" y="766.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="384.5" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.5" y="750.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="384.5" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.5" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="384.5" y="707.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="387.5" y="718.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="384.5" y="691.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="387.5" y="702.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="675.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="387.5" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="387.5" y="670.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="387.5" y="654.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="387.5" y="638.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="387.5" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="595.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="387.5" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="384.5" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="387.5" y="590.0"></text>
</g>
<g>
<title>CommonProviders.addMessageBodyWriter (1 samples, 0.03%)</title><rect x="385.0" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.0" y="910.0"></text>
</g>
<g>
<title>Utils.injectProperties (1 samples, 0.03%)</title><rect x="385.0" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.0" y="894.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory.createPropertyInjector (1 samples, 0.03%)</title><rect x="385.0" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="388.0" y="878.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createPropertyInjector (1 samples, 0.03%)</title><rect x="385.0" y="851.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.0" y="862.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="385.0" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.0" y="846.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.populateMap (1 samples, 0.03%)</title><rect x="385.0" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.0" y="830.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.getDeclaredMethods (1 samples, 0.03%)</title><rect x="385.0" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.0" y="814.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods (1 samples, 0.03%)</title><rect x="385.0" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.0" y="798.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="385.0" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.0" y="782.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="385.0" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.0" y="766.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredMethods (1 samples, 0.03%)</title><rect x="385.0" y="739.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="388.0" y="750.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="385.0" y="723.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="388.0" y="734.0"></text>
</g>
<g>
<title>Reflection::new_method(methodHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="385.0" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="388.0" y="718.0"></text>
</g>
<g>
<title>get_parameter_types(methodHandle const&amp;, int, oopDesc**, Thread*) (1 samples, 0.03%)</title><rect x="385.0" y="691.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="388.0" y="702.0"></text>
</g>
<g>
<title>get_mirror_from_signature(methodHandle const&amp;, SignatureStream*, Thread*) (1 samples, 0.03%)</title><rect x="385.0" y="675.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="388.0" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="385.0" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="388.0" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="385.0" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="388.0" y="654.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="385.0" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="388.0" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1187956ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1187956ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="385.0" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="388.0" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="385.4" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.4" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="385.4" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="385.4" y="867.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.4" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="385.4" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.4" y="862.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="385.4" y="835.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="388.4" y="846.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="385.4" y="819.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="388.4" y="830.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="385.4" y="803.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="388.4" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="385.4" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="388.4" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="385.4" y="771.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="388.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="385.4" y="755.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="388.4" y="766.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="385.4" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="388.4" y="750.0"></text>
</g>
<g>
<title>klassVtable::needs_new_vtable_entry(methodHandle const&amp;, Klass const*, Handle, Symbol*, AccessFlags, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="385.4" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="388.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="385.4" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.4" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="385.4" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="388.4" y="702.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="385.4" y="675.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="388.4" y="686.0"></text>
</g>
<g>
<title>Utils.createProviderInstance (10 samples, 0.28%)</title><rect x="385.9" y="899.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.9" y="910.0"></text>
</g>
<g>
<title>QuarkusConstructorInjector.construct (6 samples, 0.17%)</title><rect x="385.9" y="883.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.9" y="894.0"></text>
</g>
<g>
<title>ArcRecorder$DefaultInstanceFactory.create (6 samples, 0.17%)</title><rect x="385.9" y="867.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.9" y="878.0"></text>
</g>
<g>
<title>Class.newInstance (6 samples, 0.17%)</title><rect x="385.9" y="851.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.9" y="862.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="385.9" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="388.9" y="846.0"></text>
</g>
<g>
<title>Class$1.run (1 samples, 0.03%)</title><rect x="385.9" y="819.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.9" y="830.0"></text>
</g>
<g>
<title>Class$1.run (1 samples, 0.03%)</title><rect x="385.9" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.9" y="814.0"></text>
</g>
<g>
<title>Constructor.setAccessible (1 samples, 0.03%)</title><rect x="385.9" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.9" y="798.0"></text>
</g>
<g>
<title>AccessibleObject.checkPermission (1 samples, 0.03%)</title><rect x="385.9" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.9" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="385.9" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="388.9" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="385.9" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="388.9" y="750.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="385.9" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="388.9" y="734.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="385.9" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="388.9" y="718.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="385.9" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="388.9" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="385.9" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="388.9" y="686.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="385.9" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="388.9" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="385.9" y="643.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="388.9" y="654.0"></text>
</g>
<g>
<title>Constructor.newInstance (4 samples, 0.11%)</title><rect x="386.3" y="835.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.3" y="846.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.11%)</title><rect x="386.3" y="819.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.3" y="830.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (4 samples, 0.11%)</title><rect x="386.3" y="803.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.3" y="814.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (4 samples, 0.11%)</title><rect x="386.3" y="787.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.3" y="798.0"></text>
</g>
<g>
<title>AbstractJsonpProvider.&lt;clinit&gt; (4 samples, 0.11%)</title><rect x="386.3" y="771.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.3" y="782.0"></text>
</g>
<g>
<title>Json.createReaderFactory (2 samples, 0.06%)</title><rect x="386.3" y="755.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.3" y="766.0"></text>
</g>
<g>
<title>JsonProvider.provider (2 samples, 0.06%)</title><rect x="386.3" y="739.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.3" y="750.0"></text>
</g>
<g>
<title>Class.forName (2 samples, 0.06%)</title><rect x="386.3" y="723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.3" y="734.0"></text>
</g>
<g>
<title>Class.forName0 (2 samples, 0.06%)</title><rect x="386.3" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.3" y="718.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (2 samples, 0.06%)</title><rect x="386.3" y="691.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.3" y="702.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (2 samples, 0.06%)</title><rect x="386.3" y="675.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.3" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (2 samples, 0.06%)</title><rect x="386.3" y="659.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.3" y="670.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (2 samples, 0.06%)</title><rect x="386.3" y="643.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.3" y="654.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.06%)</title><rect x="386.3" y="627.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.3" y="638.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (2 samples, 0.06%)</title><rect x="386.3" y="611.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.3" y="622.0"></text>
</g>
<g>
<title>Resource.getBytes (1 samples, 0.03%)</title><rect x="386.3" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.3" y="606.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="386.8" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.8" y="606.0"></text>
</g>
<g>
<title>SecureClassLoader.getProtectionDomain (1 samples, 0.03%)</title><rect x="386.8" y="579.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.8" y="590.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="386.8" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.8" y="574.0"></text>
</g>
<g>
<title>SecureClassLoader$CodeSourceKey.equals (1 samples, 0.03%)</title><rect x="386.8" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.8" y="558.0"></text>
</g>
<g>
<title>CodeSource.matchCerts (1 samples, 0.03%)</title><rect x="386.8" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.8" y="542.0"></text>
</g>
<g>
<title>Json.createWriterFactory (1 samples, 0.03%)</title><rect x="387.2" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.2" y="766.0"></text>
</g>
<g>
<title>JsonProviderImpl.createWriterFactory (1 samples, 0.03%)</title><rect x="387.2" y="739.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.2" y="750.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.2" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.2" y="734.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.2" y="707.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.2" y="718.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.2" y="691.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.2" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="387.2" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.2" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="387.2" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.2" y="670.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="387.2" y="643.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.2" y="654.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="387.2" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.2" y="638.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.checkResource (1 samples, 0.03%)</title><rect x="387.2" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.2" y="622.0"></text>
</g>
<g>
<title>ParseUtil.encodePath (1 samples, 0.03%)</title><rect x="387.2" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.2" y="606.0"></text>
</g>
<g>
<title>ParseUtil.firstEncodeIndex (1 samples, 0.03%)</title><rect x="387.2" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.2" y="590.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.6" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.6" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.6" y="739.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.6" y="750.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.6" y="723.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.6" y="734.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.6" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.6" y="718.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="387.6" y="691.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.6" y="702.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="387.6" y="675.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.6" y="686.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="387.6" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.6" y="670.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="387.6" y="643.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.6" y="654.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader$2.getManifest (1 samples, 0.03%)</title><rect x="387.6" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.6" y="638.0"></text>
</g>
<g>
<title>JarFile.getManifest (1 samples, 0.03%)</title><rect x="387.6" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.6" y="622.0"></text>
</g>
<g>
<title>JarFile.getManifestFromReference (1 samples, 0.03%)</title><rect x="387.6" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="390.6" y="606.0"></text>
</g>
<g>
<title>Manifest.&lt;init&gt; (1 samples, 0.03%)</title><rect x="387.6" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.6" y="590.0"></text>
</g>
<g>
<title>Manifest.&lt;init&gt; (1 samples, 0.03%)</title><rect x="387.6" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.6" y="574.0"></text>
</g>
<g>
<title>Manifest.read (1 samples, 0.03%)</title><rect x="387.6" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.6" y="558.0"></text>
</g>
<g>
<title>Attributes.read (1 samples, 0.03%)</title><rect x="387.6" y="531.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.6" y="542.0"></text>
</g>
<g>
<title>Attributes.putValue (1 samples, 0.03%)</title><rect x="387.6" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.6" y="526.0"></text>
</g>
<g>
<title>Attributes.put (1 samples, 0.03%)</title><rect x="387.6" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.6" y="510.0"></text>
</g>
<g>
<title>HashMap.put (1 samples, 0.03%)</title><rect x="387.6" y="483.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.6" y="494.0"></text>
</g>
<g>
<title>HashMap.putVal (1 samples, 0.03%)</title><rect x="387.6" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.6" y="478.0"></text>
</g>
<g>
<title>LinkedHashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="387.6" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.6" y="462.0"></text>
</g>
<g>
<title>Reflection.getCallerClass (1 samples, 0.03%)</title><rect x="388.1" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.1" y="846.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.03%)</title><rect x="388.1" y="819.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="391.1" y="830.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="388.1" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="391.1" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="388.1" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="391.1" y="798.0"></text>
</g>
<g>
<title>Utils.createConstructorInjector (4 samples, 0.11%)</title><rect x="388.5" y="883.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.5" y="894.0"></text>
</g>
<g>
<title>PickConstructor.pickSingletonConstructor (2 samples, 0.06%)</title><rect x="388.5" y="867.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.5" y="878.0"></text>
</g>
<g>
<title>Class.getConstructors (2 samples, 0.06%)</title><rect x="388.5" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.5" y="862.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (2 samples, 0.06%)</title><rect x="388.5" y="835.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.5" y="846.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (2 samples, 0.06%)</title><rect x="388.5" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.5" y="830.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (2 samples, 0.06%)</title><rect x="388.5" y="803.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="391.5" y="814.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (2 samples, 0.06%)</title><rect x="388.5" y="787.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="391.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (2 samples, 0.06%)</title><rect x="388.5" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="391.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="388.5" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="391.5" y="766.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="388.5" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="391.5" y="750.0"></text>
</g>
<g>
<title>VM::loadMethodIDs(_jvmtiEnv*, JNIEnv_*, _jclass*) (1 samples, 0.03%)</title><rect x="388.5" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="391.5" y="734.0"></text>
</g>
<g>
<title>jvmti_Deallocate(_jvmtiEnv*, unsigned char*) (1 samples, 0.03%)</title><rect x="388.5" y="707.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="391.5" y="718.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="388.5" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="391.5" y="702.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="388.5" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="391.5" y="686.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="389.0" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="392.0" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="389.0" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="392.0" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="389.0" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="392.0" y="718.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="389.0" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="392.0" y="702.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="389.0" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="392.0" y="686.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory.createConstructor (2 samples, 0.06%)</title><rect x="389.4" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.4" y="878.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createConstructor (1 samples, 0.03%)</title><rect x="389.4" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="392.4" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="389.4" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.4" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="389.4" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="392.4" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="389.4" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="392.4" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="389.4" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="392.4" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="389.4" y="771.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="392.4" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="389.4" y="755.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="392.4" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="739.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="392.4" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.4" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="392.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="392.4" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.4" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="392.4" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="389.4" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="392.4" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="389.4" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="392.4" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="389.4" y="611.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="392.4" y="622.0"></text>
</g>
<g>
<title>Logger.debugf (1 samples, 0.03%)</title><rect x="389.9" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.9" y="862.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.doLogf (1 samples, 0.03%)</title><rect x="389.9" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.9" y="846.0"></text>
</g>
<g>
<title>Logger.log (1 samples, 0.03%)</title><rect x="389.9" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="392.9" y="830.0"></text>
</g>
<g>
<title>Logger.logRaw (1 samples, 0.03%)</title><rect x="389.9" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.9" y="814.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="389.9" y="787.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="392.9" y="798.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="389.9" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="392.9" y="782.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="389.9" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.9" y="766.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="389.9" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.9" y="750.0"></text>
</g>
<g>
<title>LoggerNode.publish (1 samples, 0.03%)</title><rect x="389.9" y="723.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="392.9" y="734.0"></text>
</g>
<g>
<title>ExtHandler.publish (1 samples, 0.03%)</title><rect x="389.9" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="392.9" y="718.0"></text>
</g>
<g>
<title>DelayedHandler.doPublish (1 samples, 0.03%)</title><rect x="389.9" y="691.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.9" y="702.0"></text>
</g>
<g>
<title>ExtLogRecord.copyMdc (1 samples, 0.03%)</title><rect x="389.9" y="675.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.9" y="686.0"></text>
</g>
<g>
<title>MDC.fastCopyObject (1 samples, 0.03%)</title><rect x="389.9" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="392.9" y="670.0"></text>
</g>
<g>
<title>I2C/C2I adapters(0xb0000000)@0x000000011272fc00 (1 samples, 0.03%)</title><rect x="389.9" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="392.9" y="654.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.addParameterConverterProvider (1 samples, 0.03%)</title><rect x="390.3" y="931.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.3" y="942.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.injectedInstance (1 samples, 0.03%)</title><rect x="390.3" y="915.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.3" y="926.0"></text>
</g>
<g>
<title>QuarkusConstructorInjector.construct (1 samples, 0.03%)</title><rect x="390.3" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.3" y="910.0"></text>
</g>
<g>
<title>ArcRecorder$DefaultInstanceFactory.create (1 samples, 0.03%)</title><rect x="390.3" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.3" y="894.0"></text>
</g>
<g>
<title>Class.newInstance (1 samples, 0.03%)</title><rect x="390.3" y="867.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.3" y="878.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="390.3" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.3" y="862.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="390.3" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.3" y="846.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="390.3" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.3" y="830.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (1 samples, 0.03%)</title><rect x="390.3" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.3" y="814.0"></text>
</g>
<g>
<title>MultiValuedParamConverterProvider.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="390.3" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.3" y="798.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="390.3" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.3" y="782.0"></text>
</g>
<g>
<title>Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="390.3" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.3" y="766.0"></text>
</g>
<g>
<title>Pattern.compile (1 samples, 0.03%)</title><rect x="390.3" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.3" y="750.0"></text>
</g>
<g>
<title>Pattern.expr (1 samples, 0.03%)</title><rect x="390.3" y="723.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.3" y="734.0"></text>
</g>
<g>
<title>Pattern.sequence (1 samples, 0.03%)</title><rect x="390.3" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.3" y="718.0"></text>
</g>
<g>
<title>Pattern.family (1 samples, 0.03%)</title><rect x="390.3" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.3" y="702.0"></text>
</g>
<g>
<title>Pattern.read (1 samples, 0.03%)</title><rect x="390.3" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.3" y="686.0"></text>
</g>
<g>
<title>ServerHelper.processProviderContracts (5 samples, 0.14%)</title><rect x="390.7" y="931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.7" y="942.0"></text>
</g>
<g>
<title>CommonProviders.processProviderContracts (4 samples, 0.11%)</title><rect x="390.7" y="915.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.7" y="926.0"></text>
</g>
<g>
<title>CommonProviders.addMessageBodyReader (1 samples, 0.03%)</title><rect x="390.7" y="899.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.7" y="910.0"></text>
</g>
<g>
<title>Utils.injectProperties (1 samples, 0.03%)</title><rect x="390.7" y="883.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.7" y="894.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory.createPropertyInjector (1 samples, 0.03%)</title><rect x="390.7" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.7" y="878.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createPropertyInjector (1 samples, 0.03%)</title><rect x="390.7" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.7" y="862.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="390.7" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.7" y="846.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.populateMap (1 samples, 0.03%)</title><rect x="390.7" y="819.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.7" y="830.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.getDeclaredMethods (1 samples, 0.03%)</title><rect x="390.7" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.7" y="814.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods (1 samples, 0.03%)</title><rect x="390.7" y="787.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.7" y="798.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="390.7" y="771.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.7" y="782.0"></text>
</g>
<g>
<title>Class.reflectionData (1 samples, 0.03%)</title><rect x="390.7" y="755.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.7" y="766.0"></text>
</g>
<g>
<title>SoftReference.get (1 samples, 0.03%)</title><rect x="390.7" y="739.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.7" y="750.0"></text>
</g>
<g>
<title>CommonProviders.addMessageBodyWriter (1 samples, 0.03%)</title><rect x="391.2" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.2" y="910.0"></text>
</g>
<g>
<title>MediaTypeMap.add (1 samples, 0.03%)</title><rect x="391.2" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.2" y="894.0"></text>
</g>
<g>
<title>MediaTypeMap.add (1 samples, 0.03%)</title><rect x="391.2" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.2" y="878.0"></text>
</g>
<g>
<title>MediaTypeMap.mergeEverything (1 samples, 0.03%)</title><rect x="391.2" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.2" y="862.0"></text>
</g>
<g>
<title>Collections.sort (1 samples, 0.03%)</title><rect x="391.2" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.2" y="846.0"></text>
</g>
<g>
<title>ArrayList.sort (1 samples, 0.03%)</title><rect x="391.2" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.2" y="830.0"></text>
</g>
<g>
<title>Arrays.sort (1 samples, 0.03%)</title><rect x="391.2" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="394.2" y="814.0"></text>
</g>
<g>
<title>Arrays.sort (1 samples, 0.03%)</title><rect x="391.2" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.2" y="798.0"></text>
</g>
<g>
<title>ComparableTimSort.sort (1 samples, 0.03%)</title><rect x="391.2" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.2" y="782.0"></text>
</g>
<g>
<title>ComparableTimSort.countRunAndMakeAscending (1 samples, 0.03%)</title><rect x="391.2" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.2" y="766.0"></text>
</g>
<g>
<title>MediaTypeMap$Entry.compareTo (1 samples, 0.03%)</title><rect x="391.2" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.2" y="750.0"></text>
</g>
<g>
<title>MediaTypeMap$Entry.compareTo (1 samples, 0.03%)</title><rect x="391.2" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.2" y="734.0"></text>
</g>
<g>
<title>MediaTypeHelper.compareWeight (1 samples, 0.03%)</title><rect x="391.2" y="707.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="394.2" y="718.0"></text>
</g>
<g>
<title>MediaTypeHelper$MediaTypeComparator.compare (1 samples, 0.03%)</title><rect x="391.2" y="691.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.2" y="702.0"></text>
</g>
<g>
<title>Collections$UnmodifiableMap.size (1 samples, 0.03%)</title><rect x="391.2" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.2" y="686.0"></text>
</g>
<g>
<title>Utils.createProviderInstance (2 samples, 0.06%)</title><rect x="391.6" y="899.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.6" y="910.0"></text>
</g>
<g>
<title>QuarkusConstructorInjector.construct (1 samples, 0.03%)</title><rect x="391.6" y="883.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.6" y="894.0"></text>
</g>
<g>
<title>ArcRecorder$2.instanceFactory (1 samples, 0.03%)</title><rect x="391.6" y="867.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.6" y="878.0"></text>
</g>
<g>
<title>ArcContainerImpl.instanceSupplier (1 samples, 0.03%)</title><rect x="391.6" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.6" y="862.0"></text>
</g>
<g>
<title>ArcContainerImpl$Resolvable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="391.6" y="835.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.6" y="846.0"></text>
</g>
<g>
<title>Utils.createConstructorInjector (1 samples, 0.03%)</title><rect x="392.1" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.1" y="894.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory.createConstructor (1 samples, 0.03%)</title><rect x="392.1" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.1" y="878.0"></text>
</g>
<g>
<title>Logger.debugf (1 samples, 0.03%)</title><rect x="392.1" y="851.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.1" y="862.0"></text>
</g>
<g>
<title>JBossLogManagerLogger.doLogf (1 samples, 0.03%)</title><rect x="392.1" y="835.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.1" y="846.0"></text>
</g>
<g>
<title>Logger.log (1 samples, 0.03%)</title><rect x="392.1" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.1" y="830.0"></text>
</g>
<g>
<title>ExtLogRecord.&lt;init&gt; (1 samples, 0.03%)</title><rect x="392.1" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.1" y="814.0"></text>
</g>
<g>
<title>LogRecord.&lt;init&gt; (1 samples, 0.03%)</title><rect x="392.1" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.1" y="798.0"></text>
</g>
<g>
<title>Instant.now (1 samples, 0.03%)</title><rect x="392.1" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.1" y="782.0"></text>
</g>
<g>
<title>Clock$SystemClock.instant (1 samples, 0.03%)</title><rect x="392.1" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.1" y="766.0"></text>
</g>
<g>
<title>VM.getNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="392.1" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.1" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="392.1" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="395.1" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="392.1" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="395.1" y="718.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="392.1" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="395.1" y="702.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="392.1" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="395.1" y="686.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="392.1" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="395.1" y="670.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="392.1" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="395.1" y="654.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="392.1" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="395.1" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.03%)</title><rect x="392.1" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="395.1" y="622.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.03%)</title><rect x="392.1" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="395.1" y="606.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="392.1" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="395.1" y="590.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.03%)</title><rect x="392.1" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="395.1" y="574.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.03%)</title><rect x="392.1" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="395.1" y="558.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="392.1" y="531.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="395.1" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="392.1" y="515.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="395.1" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="392.1" y="499.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="395.1" y="510.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="392.1" y="483.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="395.1" y="494.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="392.1" y="467.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="395.1" y="478.0"></text>
</g>
<g>
<title>ServerHelper.addExceptionMapper (1 samples, 0.03%)</title><rect x="392.5" y="915.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.5" y="926.0"></text>
</g>
<g>
<title>ServerHelper.addExceptionMapper (1 samples, 0.03%)</title><rect x="392.5" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.5" y="910.0"></text>
</g>
<g>
<title>Utils.injectProperties (1 samples, 0.03%)</title><rect x="392.5" y="883.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.5" y="894.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory.createPropertyInjector (1 samples, 0.03%)</title><rect x="392.5" y="867.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.5" y="878.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createPropertyInjector (1 samples, 0.03%)</title><rect x="392.5" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.5" y="862.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="392.5" y="835.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.5" y="846.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.populateMap (1 samples, 0.03%)</title><rect x="392.5" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.5" y="830.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.getDeclaredMethods (1 samples, 0.03%)</title><rect x="392.5" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.5" y="814.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods (1 samples, 0.03%)</title><rect x="392.5" y="787.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.5" y="798.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredMethods (1 samples, 0.03%)</title><rect x="392.5" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.5" y="782.0"></text>
</g>
<g>
<title>Class.getDeclaredMethods0 (1 samples, 0.03%)</title><rect x="392.5" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="395.5" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="392.5" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.5" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="392.5" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.5" y="734.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="392.5" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.5" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="392.5" y="691.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.5" y="702.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="392.5" y="675.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="395.5" y="686.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="392.5" y="659.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="395.5" y="670.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="643.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="395.5" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="395.5" y="638.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="395.5" y="622.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="395.5" y="606.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="395.5" y="590.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="563.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="395.5" y="574.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="392.5" y="547.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="395.5" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="392.5" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="395.5" y="542.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="392.5" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="395.5" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="392.9" y="979.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.9" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="392.9" y="963.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.9" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (3 samples, 0.08%)</title><rect x="392.9" y="947.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.9" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (3 samples, 0.08%)</title><rect x="392.9" y="931.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.9" y="942.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="392.9" y="915.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="395.9" y="926.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="392.9" y="899.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="395.9" y="910.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="392.9" y="883.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="395.9" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="392.9" y="867.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="395.9" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="392.9" y="851.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="395.9" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="392.9" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="395.9" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="392.9" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="395.9" y="830.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="392.9" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="395.9" y="814.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="392.9" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="395.9" y="798.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="392.9" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="395.9" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="392.9" y="755.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="395.9" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="393.4" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="396.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="393.4" y="819.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="396.4" y="830.0"></text>
</g>
<g>
<title>DefaultMethods::generate_default_methods(InstanceKlass*, GrowableArray&lt;Method*&gt; const*, Thread*) (1 samples, 0.03%)</title><rect x="393.4" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="396.4" y="814.0"></text>
</g>
<g>
<title>HierarchyVisitor&lt;FindMethodsByErasedSig&gt;::run(InstanceKlass*) (1 samples, 0.03%)</title><rect x="393.4" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="396.4" y="798.0"></text>
</g>
<g>
<title>FindMethodsByErasedSig::visit() (1 samples, 0.03%)</title><rect x="393.4" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="396.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_method(Symbol const*, Symbol const*) const (1 samples, 0.03%)</title><rect x="393.4" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="396.4" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="393.8" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.8" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="393.8" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="396.8" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="393.8" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.8" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="393.8" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.8" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="393.8" y="851.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="396.8" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="393.8" y="835.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="396.8" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="819.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="396.8" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="396.8" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="787.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="396.8" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="396.8" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="396.8" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="396.8" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="393.8" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="396.8" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="393.8" y="707.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="396.8" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="393.8" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="396.8" y="702.0"></text>
</g>
<g>
<title>ResteasyDeploymentImpl.initializeDispatcher (6 samples, 0.17%)</title><rect x="394.3" y="1011.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.3" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="394.3" y="995.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="397.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="394.3" y="979.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="397.3" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="394.3" y="963.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="397.3" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="394.3" y="947.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="397.3" y="958.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="394.3" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="397.3" y="942.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="394.3" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="397.3" y="926.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="394.3" y="899.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="397.3" y="910.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="394.3" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="397.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="394.7" y="995.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="397.7" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="394.7" y="979.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.7" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="394.7" y="963.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.7" y="974.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="394.7" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.7" y="958.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="394.7" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.7" y="942.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="394.7" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.7" y="926.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="394.7" y="899.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="397.7" y="910.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="394.7" y="883.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="397.7" y="894.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="394.7" y="867.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="397.7" y="878.0"></text>
</g>
<g>
<title>SynchronousDispatcher.&lt;init&gt; (4 samples, 0.11%)</title><rect x="395.2" y="995.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.2" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="395.2" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="963.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="398.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="947.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="398.2" y="958.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="398.2" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="915.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="398.2" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="398.2" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_table(unsigned int, char*, int&amp;, int&amp;, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="883.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="398.2" y="894.0"></text>
</g>
<g>
<title>VerificationType::is_reference_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="395.2" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="398.2" y="878.0"></text>
</g>
<g>
<title>VerificationType::resolve_and_check_assignability(InstanceKlass*, Symbol*, Symbol*, bool, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="398.2" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="398.2" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="395.2" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="398.2" y="830.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="395.2" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="398.2" y="814.0"></text>
</g>
<g>
<title>DictionaryEntry::contains_protection_domain(oopDesc*) const (1 samples, 0.03%)</title><rect x="395.2" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="398.2" y="798.0"></text>
</g>
<g>
<title>ProtectionDomainEntry::object_no_keepalive() (1 samples, 0.03%)</title><rect x="395.2" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="398.2" y="782.0"></text>
</g>
<g>
<title>LogMessages.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="395.6" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.6" y="990.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="395.6" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.6" y="974.0"></text>
</g>
<g>
<title>Logger.getMessageLogger (1 samples, 0.03%)</title><rect x="395.6" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="398.6" y="958.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="395.6" y="931.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.6" y="942.0"></text>
</g>
<g>
<title>Logger$1.run (1 samples, 0.03%)</title><rect x="395.6" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.6" y="926.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="395.6" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.6" y="910.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="395.6" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.6" y="894.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="395.6" y="867.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.6" y="878.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="395.6" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.6" y="862.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="395.6" y="835.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="398.6" y="846.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="395.6" y="819.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="398.6" y="830.0"></text>
</g>
<g>
<title>Method::is_initializer() const (1 samples, 0.03%)</title><rect x="395.6" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="398.6" y="814.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.&lt;init&gt; (1 samples, 0.03%)</title><rect x="396.0" y="979.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.0" y="990.0"></text>
</g>
<g>
<title>RootNode.&lt;init&gt; (1 samples, 0.03%)</title><rect x="396.0" y="963.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.0" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="396.0" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.0" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="396.0" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.0" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="396.0" y="915.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.0" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="396.0" y="899.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.0" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="396.0" y="883.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="399.0" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="396.0" y="867.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="399.0" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="851.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="399.0" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="399.0" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="399.0" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="803.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="399.0" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="399.0" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="399.0" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="396.0" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="399.0" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="396.0" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="399.0" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="396.0" y="723.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="399.0" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="396.5" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.5" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="396.5" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.5" y="974.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="396.5" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.5" y="958.0"></text>
</g>
<g>
<title>ResteasyDeploymentImpl.initializeFactory (7 samples, 0.20%)</title><rect x="396.9" y="1011.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.9" y="1022.0"></text>
</g>
<g>
<title>ResteasyConfigProvider.getConfig (1 samples, 0.03%)</title><rect x="396.9" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.9" y="1006.0"></text>
</g>
<g>
<title>ConfigProvider.getConfig (1 samples, 0.03%)</title><rect x="396.9" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="399.9" y="990.0"></text>
</g>
<g>
<title>SmallRyeConfigProviderResolver.getConfig (1 samples, 0.03%)</title><rect x="396.9" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.9" y="974.0"></text>
</g>
<g>
<title>SmallRyeConfigProviderResolver.getFactoryFor (1 samples, 0.03%)</title><rect x="396.9" y="947.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.9" y="958.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="396.9" y="931.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.9" y="942.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="396.9" y="915.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.9" y="926.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="396.9" y="899.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.9" y="910.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="396.9" y="883.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.9" y="894.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="396.9" y="867.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.9" y="878.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="396.9" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.9" y="862.0"></text>
</g>
<g>
<title>BufferedReader.close (1 samples, 0.03%)</title><rect x="396.9" y="835.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.9" y="846.0"></text>
</g>
<g>
<title>InputStreamReader.close (1 samples, 0.03%)</title><rect x="396.9" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.9" y="830.0"></text>
</g>
<g>
<title>StreamDecoder.close (1 samples, 0.03%)</title><rect x="396.9" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.9" y="814.0"></text>
</g>
<g>
<title>StreamDecoder.implClose (1 samples, 0.03%)</title><rect x="396.9" y="787.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="399.9" y="798.0"></text>
</g>
<g>
<title>JarURLConnection$JarURLInputStream.close (1 samples, 0.03%)</title><rect x="396.9" y="771.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.9" y="782.0"></text>
</g>
<g>
<title>URLJarFile.close (1 samples, 0.03%)</title><rect x="396.9" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="399.9" y="766.0"></text>
</g>
<g>
<title>ZipFile.close (1 samples, 0.03%)</title><rect x="396.9" y="739.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.9" y="750.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource$FinalizableResource.clean (1 samples, 0.03%)</title><rect x="396.9" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.9" y="734.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.run (1 samples, 0.03%)</title><rect x="396.9" y="707.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.9" y="718.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.&lt;init&gt; (5 samples, 0.14%)</title><rect x="397.4" y="995.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.4" y="1006.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.initialize (5 samples, 0.14%)</title><rect x="397.4" y="979.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="400.4" y="990.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.initializeCommon (3 samples, 0.08%)</title><rect x="397.4" y="963.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.4" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (2 samples, 0.06%)</title><rect x="397.4" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="400.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="397.4" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="400.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="397.4" y="915.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="400.4" y="926.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="397.4" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="400.4" y="910.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="397.4" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="400.4" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="397.4" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="400.4" y="878.0"></text>
</g>
<g>
<title>StackMapTable::check_jump_target(StackMapFrame*, int, Thread*) const (1 samples, 0.03%)</title><rect x="397.4" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="400.4" y="862.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="397.4" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="400.4" y="846.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="397.4" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="400.4" y="830.0"></text>
</g>
<g>
<title>StackMapFrame::is_assignable_to(StackMapFrame const*, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="397.4" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="400.4" y="814.0"></text>
</g>
<g>
<title>VerificationType::is_assignable_from(VerificationType const&amp;, ClassVerifier*, bool, Thread*) const (1 samples, 0.03%)</title><rect x="397.4" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="400.4" y="798.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="397.8" y="899.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="400.8" y="910.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="397.8" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="400.8" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="397.8" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="400.8" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="397.8" y="851.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="400.8" y="862.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="397.8" y="835.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="400.8" y="846.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="397.8" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="400.8" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="398.3" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="401.3" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="398.3" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.3" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="398.3" y="915.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="401.3" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="398.3" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.3" y="910.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="398.3" y="883.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="401.3" y="894.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="398.3" y="867.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="401.3" y="878.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="851.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="401.3" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="401.3" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="819.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="401.3" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="401.3" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="401.3" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="401.3" y="782.0"></text>
</g>
<g>
<title>Array&lt;unsigned short&gt;* MetadataFactory::new_array&lt;unsigned short&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="401.3" y="766.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="398.3" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="401.3" y="750.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="398.3" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="401.3" y="734.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate_work(unsigned long) (1 samples, 0.03%)</title><rect x="398.3" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="401.3" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="398.7" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.7" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="398.7" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.7" y="958.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="398.7" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.7" y="942.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="398.7" y="915.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.7" y="926.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="398.7" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.7" y="910.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="398.7" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.7" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="398.7" y="867.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="401.7" y="878.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="398.7" y="851.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="401.7" y="862.0"></text>
</g>
<g>
<title>ServerHelper.&lt;init&gt; (1 samples, 0.03%)</title><rect x="399.1" y="963.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.1" y="974.0"></text>
</g>
<g>
<title>ContainerResponseFilterRegistryImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="399.1" y="947.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="402.1" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="399.1" y="931.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.1" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="399.1" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.1" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="399.1" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.1" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="399.1" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.1" y="894.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="399.1" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.1" y="878.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="399.1" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.1" y="862.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="399.1" y="835.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="402.1" y="846.0"></text>
</g>
<g>
<title>jni_ReleasePrimitiveArrayCritical (1 samples, 0.03%)</title><rect x="399.1" y="819.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="402.1" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="399.6" y="995.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="402.6" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="399.6" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.6" y="990.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="399.6" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="402.6" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="399.6" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.6" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="399.6" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="402.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="399.6" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.6" y="926.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="399.6" y="899.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.6" y="910.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="399.6" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.6" y="894.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="399.6" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.6" y="878.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="399.6" y="851.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.6" y="862.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="399.6" y="835.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="402.6" y="846.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="399.6" y="819.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="402.6" y="830.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="399.6" y="803.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="402.6" y="814.0"></text>
</g>
<g>
<title>ResteasyDeploymentImpl.registration (30 samples, 0.84%)</title><rect x="400.0" y="1011.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="403.0" y="1022.0"></text>
</g>
<g>
<title>ResteasyDeploymentImpl.registerProvider (14 samples, 0.39%)</title><rect x="400.0" y="995.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.0" y="1006.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.registerProvider (14 samples, 0.39%)</title><rect x="400.0" y="979.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.0" y="990.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.registerProvider (14 samples, 0.39%)</title><rect x="400.0" y="963.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.0" y="974.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.registerProvider (14 samples, 0.39%)</title><rect x="400.0" y="947.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.0" y="958.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.processProviderContracts (14 samples, 0.39%)</title><rect x="400.0" y="931.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.0" y="942.0"></text>
</g>
<g>
<title>ClientHelper.processProviderContracts (1 samples, 0.03%)</title><rect x="400.0" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.0" y="926.0"></text>
</g>
<g>
<title>Class.getAnnotation (1 samples, 0.03%)</title><rect x="400.0" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.0" y="910.0"></text>
</g>
<g>
<title>Class.annotationData (1 samples, 0.03%)</title><rect x="400.0" y="883.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.0" y="894.0"></text>
</g>
<g>
<title>Class.createAnnotationData (1 samples, 0.03%)</title><rect x="400.0" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.0" y="878.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="400.0" y="851.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.0" y="862.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="400.0" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.0" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="400.0" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="403.0" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="400.0" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.0" y="814.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="400.0" y="787.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.0" y="798.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.03%)</title><rect x="400.0" y="771.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="403.0" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="400.0" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="403.0" y="766.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="400.0" y="739.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="403.0" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="400.0" y="723.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.0" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="400.0" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="403.0" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="400.0" y="691.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="403.0" y="702.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="400.0" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="403.0" y="686.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="400.0" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="403.0" y="670.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="400.0" y="643.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="403.0" y="654.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.addContextResolver (12 samples, 0.34%)</title><rect x="400.5" y="915.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.5" y="926.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.addContextResolver (11 samples, 0.31%)</title><rect x="400.5" y="899.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.5" y="910.0"></text>
</g>
<g>
<title>Utils.injectProperties (11 samples, 0.31%)</title><rect x="400.5" y="883.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.5" y="894.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory$UnwrappingPropertyInjector.inject (11 samples, 0.31%)</title><rect x="400.5" y="867.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.5" y="878.0"></text>
</g>
<g>
<title>ResteasyInjectorFactoryRecorder$1.apply (11 samples, 0.31%)</title><rect x="400.5" y="851.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.5" y="862.0"></text>
</g>
<g>
<title>ClientProxyUnwrapper.apply (11 samples, 0.31%)</title><rect x="400.5" y="835.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.5" y="846.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_ClientProxy.arc_contextualInstance (11 samples, 0.31%)</title><rect x="400.5" y="819.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="403.5" y="830.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_ClientProxy.arc$delegate (11 samples, 0.31%)</title><rect x="400.5" y="803.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.5" y="814.0"></text>
</g>
<g>
<title>AbstractSharedContext.get (11 samples, 0.31%)</title><rect x="400.5" y="787.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.5" y="798.0"></text>
</g>
<g>
<title>ComputingCache.getValue (11 samples, 0.31%)</title><rect x="400.5" y="771.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.5" y="782.0"></text>
</g>
<g>
<title>LazyValue.get (11 samples, 0.31%)</title><rect x="400.5" y="755.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.5" y="766.0"></text>
</g>
<g>
<title>931480286.get (11 samples, 0.31%)</title><rect x="400.5" y="739.0" width="4.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="403.5" y="750.0"></text>
</g>
<g>
<title>ComputingCache$CacheFunction.lambda$apply$0 (11 samples, 0.31%)</title><rect x="400.5" y="723.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.5" y="734.0"></text>
</g>
<g>
<title>1525919705.apply (11 samples, 0.31%)</title><rect x="400.5" y="707.0" width="4.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="403.5" y="718.0"></text>
</g>
<g>
<title>AbstractSharedContext.createInstanceHandle (11 samples, 0.31%)</title><rect x="400.5" y="691.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.5" y="702.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_Bean.create (11 samples, 0.31%)</title><rect x="400.5" y="675.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.5" y="686.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_Bean.create (11 samples, 0.31%)</title><rect x="400.5" y="659.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.5" y="670.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonb_6145214bda7188823ccf0399aafd9d4c8249722d_Bean.get (11 samples, 0.31%)</title><rect x="400.5" y="643.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.5" y="654.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonb_6145214bda7188823ccf0399aafd9d4c8249722d_Bean.get (11 samples, 0.31%)</title><rect x="400.5" y="627.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.5" y="638.0"></text>
</g>
<g>
<title>AbstractSharedContext.get (11 samples, 0.31%)</title><rect x="400.5" y="611.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.5" y="622.0"></text>
</g>
<g>
<title>ComputingCache.getValue (11 samples, 0.31%)</title><rect x="400.5" y="595.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.5" y="606.0"></text>
</g>
<g>
<title>LazyValue.get (11 samples, 0.31%)</title><rect x="400.5" y="579.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.5" y="590.0"></text>
</g>
<g>
<title>931480286.get (11 samples, 0.31%)</title><rect x="400.5" y="563.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="403.5" y="574.0"></text>
</g>
<g>
<title>ComputingCache$CacheFunction.lambda$apply$0 (11 samples, 0.31%)</title><rect x="400.5" y="547.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.5" y="558.0"></text>
</g>
<g>
<title>1525919705.apply (11 samples, 0.31%)</title><rect x="400.5" y="531.0" width="4.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="403.5" y="542.0"></text>
</g>
<g>
<title>AbstractSharedContext.createInstanceHandle (11 samples, 0.31%)</title><rect x="400.5" y="515.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.5" y="526.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonb_6145214bda7188823ccf0399aafd9d4c8249722d_Bean.create (11 samples, 0.31%)</title><rect x="400.5" y="499.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.5" y="510.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonb_6145214bda7188823ccf0399aafd9d4c8249722d_Bean.create (11 samples, 0.31%)</title><rect x="400.5" y="483.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.5" y="494.0"></text>
</g>
<g>
<title>JsonbProducer.jsonb (10 samples, 0.28%)</title><rect x="400.5" y="467.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.5" y="478.0"></text>
</g>
<g>
<title>JsonbBuilder.create (10 samples, 0.28%)</title><rect x="400.5" y="451.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.5" y="462.0"></text>
</g>
<g>
<title>JsonBindingBuilder.build (9 samples, 0.25%)</title><rect x="400.5" y="435.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="403.5" y="446.0"></text>
</g>
<g>
<title>JsonBinding.&lt;init&gt; (9 samples, 0.25%)</title><rect x="400.5" y="419.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.5" y="430.0"></text>
</g>
<g>
<title>JsonbContext.&lt;init&gt; (8 samples, 0.22%)</title><rect x="400.5" y="403.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.5" y="414.0"></text>
</g>
<g>
<title>AnnotationIntrospector.&lt;init&gt; (1 samples, 0.03%)</title><rect x="400.5" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.5" y="398.0"></text>
</g>
<g>
<title>ConstructorPropertiesAnnotationIntrospector.forContext (1 samples, 0.03%)</title><rect x="400.5" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.5" y="382.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="400.5" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="403.5" y="366.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="400.5" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="403.5" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="403.5" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="307.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="403.5" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="291.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="403.5" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="403.5" y="286.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="403.5" y="270.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="243.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="403.5" y="254.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="403.5" y="238.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="403.5" y="222.0"></text>
</g>
<g>
<title>ClassVerifier::verify_cp_type(unsigned short, int, constantPoolHandle const&amp;, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="400.5" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="403.5" y="206.0"></text>
</g>
<g>
<title>ComponentMatcher.&lt;init&gt; (1 samples, 0.03%)</title><rect x="400.9" y="387.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="403.9" y="398.0"></text>
</g>
<g>
<title>ComponentMatcher.init (1 samples, 0.03%)</title><rect x="400.9" y="371.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.9" y="382.0"></text>
</g>
<g>
<title>ComponentMatcher.introspectSerializerBinding (1 samples, 0.03%)</title><rect x="400.9" y="355.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.9" y="366.0"></text>
</g>
<g>
<title>ComponentMatcher.getBindingInfo (1 samples, 0.03%)</title><rect x="400.9" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.9" y="350.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="400.9" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.9" y="334.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="400.9" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="403.9" y="318.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="400.9" y="291.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.9" y="302.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="400.9" y="275.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.9" y="286.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="400.9" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.9" y="270.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="400.9" y="243.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="403.9" y="254.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="400.9" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.9" y="238.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="400.9" y="211.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.9" y="222.0"></text>
</g>
<g>
<title>MethodHandles.constant (1 samples, 0.03%)</title><rect x="400.9" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.9" y="206.0"></text>
</g>
<g>
<title>MethodHandle.bindTo (1 samples, 0.03%)</title><rect x="400.9" y="179.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.9" y="190.0"></text>
</g>
<g>
<title>MethodHandle.bindArgumentL (1 samples, 0.03%)</title><rect x="400.9" y="163.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.9" y="174.0"></text>
</g>
<g>
<title>BoundMethodHandle.bindArgumentL (1 samples, 0.03%)</title><rect x="400.9" y="147.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.9" y="158.0"></text>
</g>
<g>
<title>BoundMethodHandle.editor (1 samples, 0.03%)</title><rect x="400.9" y="131.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.9" y="142.0"></text>
</g>
<g>
<title>InstanceCreator.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="401.4" y="387.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.4" y="398.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="401.4" y="371.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.4" y="382.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="401.4" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.4" y="366.0"></text>
</g>
<g>
<title>MemberName.&lt;init&gt; (1 samples, 0.03%)</title><rect x="401.4" y="339.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.4" y="350.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="401.4" y="323.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="404.4" y="334.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="401.4" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="404.4" y="318.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="401.4" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="404.4" y="302.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="401.4" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="404.4" y="286.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="401.4" y="259.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="404.4" y="270.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="401.4" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="404.4" y="254.0"></text>
</g>
<g>
<title>CompileBroker::compilation_is_complete(methodHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="401.4" y="227.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="404.4" y="238.0"></text>
</g>
<g>
<title>JsonbConfigProperties.&lt;init&gt; (2 samples, 0.06%)</title><rect x="401.8" y="387.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.8" y="398.0"></text>
</g>
<g>
<title>JsonbConfigProperties.initDateFormatter (1 samples, 0.03%)</title><rect x="401.8" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.8" y="382.0"></text>
</g>
<g>
<title>JsonbConfigProperties.getGlobalConfigJsonbDateFormat (1 samples, 0.03%)</title><rect x="401.8" y="355.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.8" y="366.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="401.8" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.8" y="350.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="401.8" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.8" y="334.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="401.8" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.8" y="318.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="401.8" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.8" y="302.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="401.8" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.8" y="286.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="401.8" y="259.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="404.8" y="270.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="401.8" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.8" y="254.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="401.8" y="227.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="404.8" y="238.0"></text>
</g>
<g>
<title>ClassWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="401.8" y="211.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.8" y="222.0"></text>
</g>
<g>
<title>ByteVector.&lt;init&gt; (1 samples, 0.03%)</title><rect x="401.8" y="195.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="404.8" y="206.0"></text>
</g>
<g>
<title>JsonbConfigProperties.initPropertyNamingStrategy (1 samples, 0.03%)</title><rect x="402.2" y="371.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="405.2" y="382.0"></text>
</g>
<g>
<title>StrategiesProvider.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="402.2" y="355.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.2" y="366.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="402.2" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="405.2" y="350.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="402.2" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.2" y="334.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.canBeCached (1 samples, 0.03%)</title><rect x="402.2" y="307.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.2" y="318.0"></text>
</g>
<g>
<title>JsonbContext.initComponentInstanceCreator (1 samples, 0.03%)</title><rect x="402.7" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.7" y="398.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="402.7" y="371.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="405.7" y="382.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="402.7" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.7" y="366.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="402.7" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.7" y="350.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="402.7" y="323.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="405.7" y="334.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="402.7" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="405.7" y="318.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="402.7" y="291.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.7" y="302.0"></text>
</g>
<g>
<title>JarURLConnection.getInputStream (1 samples, 0.03%)</title><rect x="402.7" y="275.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.7" y="286.0"></text>
</g>
<g>
<title>JarURLConnection.connect (1 samples, 0.03%)</title><rect x="402.7" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="405.7" y="270.0"></text>
</g>
<g>
<title>JarFileFactory.get (1 samples, 0.03%)</title><rect x="402.7" y="243.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.7" y="254.0"></text>
</g>
<g>
<title>URLJarFile.getJarFile (1 samples, 0.03%)</title><rect x="402.7" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.7" y="238.0"></text>
</g>
<g>
<title>URLJarFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="211.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.7" y="222.0"></text>
</g>
<g>
<title>JarFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="195.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.7" y="206.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="179.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="405.7" y="190.0"></text>
</g>
<g>
<title>ZipFile.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="163.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="405.7" y="174.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.get (1 samples, 0.03%)</title><rect x="402.7" y="147.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.7" y="158.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource$FinalizableResource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="131.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="405.7" y="142.0"></text>
</g>
<g>
<title>ZipFile$CleanableResource.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="115.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.7" y="126.0"></text>
</g>
<g>
<title>WeakHashMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="99.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.7" y="110.0"></text>
</g>
<g>
<title>WeakHashMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="402.7" y="83.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.7" y="94.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="403.1" y="387.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.1" y="398.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="403.1" y="371.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.1" y="382.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="403.1" y="355.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="406.1" y="366.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="403.1" y="339.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.1" y="350.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="403.1" y="323.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="406.1" y="334.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="403.1" y="307.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="406.1" y="318.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="403.1" y="291.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="406.1" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="403.1" y="275.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="406.1" y="286.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="403.1" y="259.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="406.1" y="270.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="403.1" y="243.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="406.1" y="254.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="403.1" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="406.1" y="238.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="403.1" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="406.1" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="403.6" y="307.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="406.6" y="318.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="403.6" y="291.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="406.6" y="302.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="404.0" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.0" y="414.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="404.0" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.0" y="398.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="404.0" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.0" y="382.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="404.0" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.0" y="366.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="404.0" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.0" y="350.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="404.0" y="323.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="407.0" y="334.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="404.0" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.0" y="318.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="404.0" y="291.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.0" y="302.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="404.0" y="275.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.0" y="286.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory$1.run (1 samples, 0.03%)</title><rect x="404.0" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.0" y="270.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory$1.run (1 samples, 0.03%)</title><rect x="404.0" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.0" y="254.0"></text>
</g>
<g>
<title>Constructor.setAccessible (1 samples, 0.03%)</title><rect x="404.0" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="407.0" y="238.0"></text>
</g>
<g>
<title>Reflection.getCallerClass (1 samples, 0.03%)</title><rect x="404.0" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.0" y="222.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.03%)</title><rect x="404.0" y="195.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="407.0" y="206.0"></text>
</g>
<g>
<title>JsonbProvider.provider (1 samples, 0.03%)</title><rect x="404.4" y="435.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.4" y="446.0"></text>
</g>
<g>
<title>ServiceLoader$3.hasNext (1 samples, 0.03%)</title><rect x="404.4" y="419.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.4" y="430.0"></text>
</g>
<g>
<title>ServiceLoader$2.hasNext (1 samples, 0.03%)</title><rect x="404.4" y="403.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.4" y="414.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.03%)</title><rect x="404.4" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.4" y="398.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.03%)</title><rect x="404.4" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.4" y="382.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.03%)</title><rect x="404.4" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.4" y="366.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parse (1 samples, 0.03%)</title><rect x="404.4" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.4" y="350.0"></text>
</g>
<g>
<title>ServiceLoader$LazyClassPathLookupIterator.parseLine (1 samples, 0.03%)</title><rect x="404.4" y="323.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.4" y="334.0"></text>
</g>
<g>
<title>BufferedReader.readLine (1 samples, 0.03%)</title><rect x="404.4" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.4" y="318.0"></text>
</g>
<g>
<title>BufferedReader.readLine (1 samples, 0.03%)</title><rect x="404.4" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.4" y="302.0"></text>
</g>
<g>
<title>BufferedReader.fill (1 samples, 0.03%)</title><rect x="404.4" y="275.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.4" y="286.0"></text>
</g>
<g>
<title>InputStreamReader.read (1 samples, 0.03%)</title><rect x="404.4" y="259.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.4" y="270.0"></text>
</g>
<g>
<title>StreamDecoder.read (1 samples, 0.03%)</title><rect x="404.4" y="243.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.4" y="254.0"></text>
</g>
<g>
<title>StreamDecoder.implRead (1 samples, 0.03%)</title><rect x="404.4" y="227.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.4" y="238.0"></text>
</g>
<g>
<title>CharBuffer.wrap (1 samples, 0.03%)</title><rect x="404.4" y="211.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.4" y="222.0"></text>
</g>
<g>
<title>HeapCharBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="404.4" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.4" y="206.0"></text>
</g>
<g>
<title>CharBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="404.4" y="179.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="407.4" y="190.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="404.4" y="163.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="407.4" y="174.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="404.4" y="147.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="407.4" y="158.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="404.4" y="131.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="407.4" y="142.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="404.4" y="115.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="407.4" y="126.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="404.4" y="99.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="407.4" y="110.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonbConfig_1c79043e425bda1d4532b032b7700718f0f73683_Bean.get (1 samples, 0.03%)</title><rect x="404.9" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.9" y="478.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonbConfig_1c79043e425bda1d4532b032b7700718f0f73683_Bean.get (1 samples, 0.03%)</title><rect x="404.9" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.9" y="462.0"></text>
</g>
<g>
<title>JsonbProducer_ProducerMethod_jsonbConfig_1c79043e425bda1d4532b032b7700718f0f73683_Bean.create (1 samples, 0.03%)</title><rect x="404.9" y="435.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.9" y="446.0"></text>
</g>
<g>
<title>JsonbProducer.jsonbConfig (1 samples, 0.03%)</title><rect x="404.9" y="419.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.9" y="430.0"></text>
</g>
<g>
<title>RegisterSerializersAndDeserializersCustomizer.customize (1 samples, 0.03%)</title><rect x="404.9" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.9" y="414.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="404.9" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="407.9" y="398.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="404.9" y="371.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.9" y="382.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="404.9" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.9" y="366.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="404.9" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.9" y="350.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="404.9" y="323.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="407.9" y="334.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="404.9" y="307.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="407.9" y="318.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="291.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="407.9" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="275.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="407.9" y="286.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="407.9" y="270.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="243.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="407.9" y="254.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="407.9" y="238.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="407.9" y="222.0"></text>
</g>
<g>
<title>SystemDictionary::validate_protection_domain(InstanceKlass*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="404.9" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="407.9" y="206.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.createProviderInstance (1 samples, 0.03%)</title><rect x="405.3" y="899.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.3" y="910.0"></text>
</g>
<g>
<title>Utils.createProviderInstance (1 samples, 0.03%)</title><rect x="405.3" y="883.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.3" y="894.0"></text>
</g>
<g>
<title>QuarkusConstructorInjector.construct (1 samples, 0.03%)</title><rect x="405.3" y="867.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.3" y="878.0"></text>
</g>
<g>
<title>ArcRecorder$2$1.create (1 samples, 0.03%)</title><rect x="405.3" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.3" y="862.0"></text>
</g>
<g>
<title>ArcContainerImpl$1.get (1 samples, 0.03%)</title><rect x="405.3" y="835.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.3" y="846.0"></text>
</g>
<g>
<title>ArcContainerImpl$1.get (1 samples, 0.03%)</title><rect x="405.3" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.3" y="830.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanInstanceHandle (1 samples, 0.03%)</title><rect x="405.3" y="803.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="408.3" y="814.0"></text>
</g>
<g>
<title>ArcContainerImpl.beanInstanceHandle (1 samples, 0.03%)</title><rect x="405.3" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.3" y="798.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_Bean.get (1 samples, 0.03%)</title><rect x="405.3" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.3" y="782.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_Bean.get (1 samples, 0.03%)</title><rect x="405.3" y="755.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.3" y="766.0"></text>
</g>
<g>
<title>QuarkusJsonbContextResolver_Bean.proxy (1 samples, 0.03%)</title><rect x="405.3" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.3" y="750.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="405.3" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.3" y="734.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="405.3" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.3" y="718.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="405.3" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.3" y="702.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="405.3" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.3" y="686.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="405.3" y="659.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="408.3" y="670.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="405.3" y="643.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="408.3" y="654.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="405.3" y="627.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="408.3" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="405.3" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.3" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::find_or_define_instance_class(Symbol*, Handle, InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="405.3" y="595.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="408.3" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::define_instance_class(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="405.3" y="579.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="408.3" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::update_dictionary(unsigned int, int, unsigned int, InstanceKlass*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="405.3" y="563.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="408.3" y="574.0"></text>
</g>
<g>
<title>Dictionary::add_klass(unsigned int, Symbol*, InstanceKlass*) (1 samples, 0.03%)</title><rect x="405.3" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="408.3" y="558.0"></text>
</g>
<g>
<title>Dictionary::new_entry(unsigned int, InstanceKlass*) (1 samples, 0.03%)</title><rect x="405.3" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.3" y="542.0"></text>
</g>
<g>
<title>Hashtable&lt;InstanceKlass*, (MemoryType)1&gt;::allocate_new_entry(unsigned int, InstanceKlass*) (1 samples, 0.03%)</title><rect x="405.3" y="515.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="408.3" y="526.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="405.3" y="499.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="408.3" y="510.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="405.3" y="483.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="408.3" y="494.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="405.3" y="467.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.3" y="478.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="405.3" y="451.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="408.3" y="462.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="405.3" y="435.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="408.3" y="446.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="405.3" y="419.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="408.3" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="405.3" y="403.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="408.3" y="414.0"></text>
</g>
<g>
<title>ServerHelper.processProviderContracts (1 samples, 0.03%)</title><rect x="405.8" y="915.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="408.8" y="926.0"></text>
</g>
<g>
<title>ServerHelper.addExceptionMapper (1 samples, 0.03%)</title><rect x="405.8" y="899.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.8" y="910.0"></text>
</g>
<g>
<title>ServerHelper.addExceptionMapper (1 samples, 0.03%)</title><rect x="405.8" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.8" y="894.0"></text>
</g>
<g>
<title>Types.getActualTypeArgumentsOfAnInterface (1 samples, 0.03%)</title><rect x="405.8" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.8" y="878.0"></text>
</g>
<g>
<title>Types.findParameterizedTypes (1 samples, 0.03%)</title><rect x="405.8" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.8" y="862.0"></text>
</g>
<g>
<title>Types.findInterfaceParameterizedTypes (1 samples, 0.03%)</title><rect x="405.8" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.8" y="846.0"></text>
</g>
<g>
<title>Class.getGenericInterfaces (1 samples, 0.03%)</title><rect x="405.8" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.8" y="830.0"></text>
</g>
<g>
<title>ClassRepository.getSuperInterfaces (1 samples, 0.03%)</title><rect x="405.8" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="408.8" y="814.0"></text>
</g>
<g>
<title>ClassRepository.computeSuperInterfaces (1 samples, 0.03%)</title><rect x="405.8" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.8" y="798.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="405.8" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.8" y="782.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="405.8" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.8" y="766.0"></text>
</g>
<g>
<title>Reifier.reifyTypeArguments (1 samples, 0.03%)</title><rect x="405.8" y="739.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.8" y="750.0"></text>
</g>
<g>
<title>ClassTypeSignature.accept (1 samples, 0.03%)</title><rect x="405.8" y="723.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.8" y="734.0"></text>
</g>
<g>
<title>Reifier.visitClassTypeSignature (1 samples, 0.03%)</title><rect x="405.8" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.8" y="718.0"></text>
</g>
<g>
<title>CoreReflectionFactory.makeNamedType (1 samples, 0.03%)</title><rect x="405.8" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.8" y="702.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="405.8" y="675.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.8" y="686.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="405.8" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.8" y="670.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="405.8" y="643.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="408.8" y="654.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="405.8" y="627.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="408.8" y="638.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="405.8" y="611.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="408.8" y="622.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="405.8" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="408.8" y="606.0"></text>
</g>
<g>
<title>PlaceholderTable::get_entry(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.03%)</title><rect x="405.8" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.8" y="590.0"></text>
</g>
<g>
<title>ResteasyDeploymentImpl.registerResources (16 samples, 0.45%)</title><rect x="406.2" y="995.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="1006.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.addPerRequestResource (16 samples, 0.45%)</title><rect x="406.2" y="979.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.2" y="990.0"></text>
</g>
<g>
<title>POJOResourceFactory.&lt;init&gt; (8 samples, 0.22%)</title><rect x="406.2" y="963.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.2" y="974.0"></text>
</g>
<g>
<title>ResourceBuilder.getRootResourceFromAnnotations (8 samples, 0.22%)</title><rect x="406.2" y="947.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.2" y="958.0"></text>
</g>
<g>
<title>ResourceBuilder.fromAnnotations (8 samples, 0.22%)</title><rect x="406.2" y="931.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.2" y="942.0"></text>
</g>
<g>
<title>ResourceBuilder.createResourceClassBuilder (1 samples, 0.03%)</title><rect x="406.2" y="915.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.2" y="926.0"></text>
</g>
<g>
<title>Class.getAnnotation (1 samples, 0.03%)</title><rect x="406.2" y="899.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.2" y="910.0"></text>
</g>
<g>
<title>Class.annotationData (1 samples, 0.03%)</title><rect x="406.2" y="883.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.2" y="894.0"></text>
</g>
<g>
<title>Class.createAnnotationData (1 samples, 0.03%)</title><rect x="406.2" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.2" y="878.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="406.2" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.2" y="862.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="406.2" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.2" y="846.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="406.2" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.2" y="830.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="406.2" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.2" y="814.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="406.2" y="787.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="798.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="406.2" y="771.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.2" y="782.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="406.2" y="755.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.2" y="766.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="406.2" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.2" y="750.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="406.2" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.2" y="734.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="406.2" y="707.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="409.2" y="718.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="406.2" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.2" y="702.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="406.2" y="675.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="409.2" y="686.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="406.2" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.2" y="670.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="406.2" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.2" y="654.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="406.2" y="627.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="638.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="406.2" y="611.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="622.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="406.2" y="595.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.2" y="606.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="406.2" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="590.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="406.2" y="563.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="409.2" y="574.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="406.2" y="547.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="409.2" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="406.2" y="531.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="409.2" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="406.2" y="515.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="409.2" y="526.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="406.2" y="499.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="409.2" y="510.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="406.2" y="483.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="409.2" y="494.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="406.2" y="467.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="409.2" y="478.0"></text>
</g>
<g>
<title>verify_method (1 samples, 0.03%)</title><rect x="406.2" y="451.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="409.2" y="462.0"></text>
</g>
<g>
<title>JVM_GetCPMethodSignatureUTF (1 samples, 0.03%)</title><rect x="406.2" y="435.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="409.2" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="406.2" y="419.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="409.2" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="406.2" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="409.2" y="414.0"></text>
</g>
<g>
<title>ResourceBuilder.processMethod (7 samples, 0.20%)</title><rect x="406.7" y="915.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="409.7" y="926.0"></text>
</g>
<g>
<title>ResourceBuilder$ResourceClassBuilder.method (1 samples, 0.03%)</title><rect x="406.7" y="899.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.7" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="406.7" y="883.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.7" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="406.7" y="867.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.7" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="406.7" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.7" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="406.7" y="835.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.7" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="406.7" y="819.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="409.7" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="406.7" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.7" y="814.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="406.7" y="787.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.7" y="798.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="406.7" y="771.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.7" y="782.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="406.7" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.7" y="766.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="406.7" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.7" y="750.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="406.7" y="723.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="409.7" y="734.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="406.7" y="707.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="409.7" y="718.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="406.7" y="691.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="409.7" y="702.0"></text>
</g>
<g>
<title>ResourceBuilder$ResourceMethodBuilder.buildMethod (2 samples, 0.06%)</title><rect x="407.1" y="899.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.1" y="910.0"></text>
</g>
<g>
<title>ResteasyUriBuilderImpl.path (2 samples, 0.06%)</title><rect x="407.1" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.1" y="894.0"></text>
</g>
<g>
<title>ResteasyUriBuilderImpl.paths (2 samples, 0.06%)</title><rect x="407.1" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.1" y="878.0"></text>
</g>
<g>
<title>Encode.encodePath (1 samples, 0.03%)</title><rect x="407.1" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.1" y="862.0"></text>
</g>
<g>
<title>Encode.encodeValue (1 samples, 0.03%)</title><rect x="407.1" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.1" y="846.0"></text>
</g>
<g>
<title>Encode.savePathParams (1 samples, 0.03%)</title><rect x="407.1" y="819.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.1" y="830.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="407.1" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="410.1" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="407.1" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="410.1" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="407.1" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="410.1" y="782.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="407.1" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="410.1" y="766.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="407.1" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="410.1" y="750.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="407.1" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="410.1" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="407.1" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="410.1" y="718.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="407.1" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="410.1" y="702.0"></text>
</g>
<g>
<title>PlaceholderTable::get_entry(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.03%)</title><rect x="407.1" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="410.1" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="407.5" y="851.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="410.5" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="407.5" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="410.5" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="410.5" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="410.5" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="787.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="410.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="771.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="410.5" y="782.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="410.5" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="410.5" y="750.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="410.5" y="734.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="707.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="410.5" y="718.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="410.5" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="407.5" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="410.5" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="407.5" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="410.5" y="670.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="407.5" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="410.5" y="654.0"></text>
</g>
<g>
<title>ResourceBuilder$ResourceMethodBuilder.param (1 samples, 0.03%)</title><rect x="408.0" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.0" y="910.0"></text>
</g>
<g>
<title>ResourceBuilder$ResourceMethodBuilder.param (1 samples, 0.03%)</title><rect x="408.0" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.0" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="408.0" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="411.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="411.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="411.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="411.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="411.0" y="814.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="787.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="411.0" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="411.0" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="411.0" y="766.0"></text>
</g>
<g>
<title>ClassVerifier::verify_field_instructions(RawBytecodeStream*, StackMapFrame*, constantPoolHandle const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="408.0" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="411.0" y="750.0"></text>
</g>
<g>
<title>SignatureStream::~SignatureStream() (1 samples, 0.03%)</title><rect x="408.0" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="411.0" y="734.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="408.0" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="411.0" y="718.0"></text>
</g>
<g>
<title>ResourceBuilder.getAnnotatedMethod (3 samples, 0.08%)</title><rect x="408.4" y="899.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.4" y="910.0"></text>
</g>
<g>
<title>AccessibleObject.isAnnotationPresent (3 samples, 0.08%)</title><rect x="408.4" y="883.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.4" y="894.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (3 samples, 0.08%)</title><rect x="408.4" y="867.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.4" y="878.0"></text>
</g>
<g>
<title>Method.getAnnotation (3 samples, 0.08%)</title><rect x="408.4" y="851.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.4" y="862.0"></text>
</g>
<g>
<title>Executable.getAnnotation (3 samples, 0.08%)</title><rect x="408.4" y="835.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.4" y="846.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (3 samples, 0.08%)</title><rect x="408.4" y="819.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.4" y="830.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (2 samples, 0.06%)</title><rect x="408.4" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.4" y="814.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (2 samples, 0.06%)</title><rect x="408.4" y="787.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="411.4" y="798.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (2 samples, 0.06%)</title><rect x="408.4" y="771.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.4" y="782.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (2 samples, 0.06%)</title><rect x="408.4" y="755.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.4" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (2 samples, 0.06%)</title><rect x="408.4" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="411.4" y="750.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="408.4" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.4" y="734.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (2 samples, 0.06%)</title><rect x="408.4" y="707.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.4" y="718.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (2 samples, 0.06%)</title><rect x="408.4" y="691.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="411.4" y="702.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (2 samples, 0.06%)</title><rect x="408.4" y="675.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.4" y="686.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (2 samples, 0.06%)</title><rect x="408.4" y="659.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.4" y="670.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (2 samples, 0.06%)</title><rect x="408.4" y="643.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.4" y="654.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (2 samples, 0.06%)</title><rect x="408.4" y="627.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.4" y="638.0"></text>
</g>
<g>
<title>1615056168.apply (2 samples, 0.06%)</title><rect x="408.4" y="611.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="411.4" y="622.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (2 samples, 0.06%)</title><rect x="408.4" y="595.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.4" y="606.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (2 samples, 0.06%)</title><rect x="408.4" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.4" y="590.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="408.4" y="563.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.4" y="574.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="408.4" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.4" y="558.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="408.4" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.4" y="542.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="408.4" y="515.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.4" y="526.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="408.4" y="499.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="411.4" y="510.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="408.4" y="483.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="411.4" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="408.4" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="411.4" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="408.4" y="451.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="411.4" y="462.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="408.4" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="411.4" y="446.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="408.4" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="411.4" y="430.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="408.4" y="403.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="411.4" y="414.0"></text>
</g>
<g>
<title>verify_method (1 samples, 0.03%)</title><rect x="408.4" y="387.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="411.4" y="398.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="408.4" y="371.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="411.4" y="382.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="408.4" y="355.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="411.4" y="366.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="408.4" y="339.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="411.4" y="350.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="408.9" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.9" y="574.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="408.9" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.9" y="558.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="408.9" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.9" y="542.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.write (1 samples, 0.03%)</title><rect x="408.9" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.9" y="526.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool$ValueEntry.write (1 samples, 0.03%)</title><rect x="408.9" y="499.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.9" y="510.0"></text>
</g>
<g>
<title>DataOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="408.9" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.9" y="494.0"></text>
</g>
<g>
<title>DataOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="408.9" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.9" y="478.0"></text>
</g>
<g>
<title>DataOutputStream.write (1 samples, 0.03%)</title><rect x="408.9" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.9" y="462.0"></text>
</g>
<g>
<title>DataOutputStream.write (1 samples, 0.03%)</title><rect x="408.9" y="435.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.9" y="446.0"></text>
</g>
<g>
<title>ByteArrayOutputStream.write (1 samples, 0.03%)</title><rect x="408.9" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.9" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="408.9" y="403.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="411.9" y="414.0"></text>
</g>
<g>
<title>Method.getRoot (1 samples, 0.03%)</title><rect x="409.3" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.3" y="814.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.addResourceFactory (8 samples, 0.22%)</title><rect x="409.8" y="963.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.8" y="974.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.addResourceFactory (8 samples, 0.22%)</title><rect x="409.8" y="947.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.8" y="958.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.addResourceFactory (8 samples, 0.22%)</title><rect x="409.8" y="931.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.8" y="942.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.addResourceFactory (8 samples, 0.22%)</title><rect x="409.8" y="915.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.8" y="926.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.addResourceFactory (8 samples, 0.22%)</title><rect x="409.8" y="899.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.8" y="910.0"></text>
</g>
<g>
<title>ResourceBuilder.getAnnotatedMethod (1 samples, 0.03%)</title><rect x="409.8" y="883.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="412.8" y="894.0"></text>
</g>
<g>
<title>Types.findOverriddenMethod (1 samples, 0.03%)</title><rect x="409.8" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.8" y="878.0"></text>
</g>
<g>
<title>Class.getDeclaredMethod (1 samples, 0.03%)</title><rect x="409.8" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.8" y="862.0"></text>
</g>
<g>
<title>NoSuchMethodException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="409.8" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.8" y="846.0"></text>
</g>
<g>
<title>ReflectiveOperationException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="409.8" y="819.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.8" y="830.0"></text>
</g>
<g>
<title>Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="409.8" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.8" y="814.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="409.8" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.8" y="798.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="409.8" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.8" y="782.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="409.8" y="755.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.8" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="409.8" y="739.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="412.8" y="750.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="409.8" y="723.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="412.8" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="409.8" y="707.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="412.8" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="409.8" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="412.8" y="702.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.03%)</title><rect x="409.8" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="412.8" y="686.0"></text>
</g>
<g>
<title>ResourceBuilder.getRootResourceFromAnnotations (1 samples, 0.03%)</title><rect x="410.2" y="883.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.2" y="894.0"></text>
</g>
<g>
<title>ResourceBuilder.fromAnnotations (1 samples, 0.03%)</title><rect x="410.2" y="867.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.2" y="878.0"></text>
</g>
<g>
<title>ResourceBuilder.processMethod (1 samples, 0.03%)</title><rect x="410.2" y="851.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.2" y="862.0"></text>
</g>
<g>
<title>ResourceBuilder$ResourceMethodBuilder.buildMethod (1 samples, 0.03%)</title><rect x="410.2" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.2" y="846.0"></text>
</g>
<g>
<title>ResteasyUriBuilderImpl.path (1 samples, 0.03%)</title><rect x="410.2" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.2" y="830.0"></text>
</g>
<g>
<title>ResteasyUriBuilderImpl.paths (1 samples, 0.03%)</title><rect x="410.2" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.2" y="814.0"></text>
</g>
<g>
<title>Encode.encodePath (1 samples, 0.03%)</title><rect x="410.2" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.2" y="798.0"></text>
</g>
<g>
<title>Encode.encodeValue (1 samples, 0.03%)</title><rect x="410.2" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.2" y="782.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.register (6 samples, 0.17%)</title><rect x="410.6" y="883.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="413.6" y="894.0"></text>
</g>
<g>
<title>ResourceMethodRegistry.processMethod (6 samples, 0.17%)</title><rect x="410.6" y="867.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.6" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="410.6" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="413.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="410.6" y="835.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="413.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="410.6" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="413.6" y="830.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="410.6" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="413.6" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="410.6" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="413.6" y="798.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="410.6" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="413.6" y="782.0"></text>
</g>
<g>
<title>ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*) (1 samples, 0.03%)</title><rect x="410.6" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="413.6" y="766.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="410.6" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="413.6" y="750.0"></text>
</g>
<g>
<title>ResourceMethodInvoker.&lt;init&gt; (4 samples, 0.11%)</title><rect x="411.1" y="851.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.1" y="862.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createMethodInjector (3 samples, 0.08%)</title><rect x="411.1" y="835.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="414.1" y="846.0"></text>
</g>
<g>
<title>MethodInjectorImpl.&lt;init&gt; (3 samples, 0.08%)</title><rect x="411.1" y="819.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.1" y="830.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createParameterExtractor (3 samples, 0.08%)</title><rect x="411.1" y="803.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="414.1" y="814.0"></text>
</g>
<g>
<title>InjectorFactoryImpl$OptionalInjections.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="411.1" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.1" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="411.1" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="414.1" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="411.1" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="414.1" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="411.1" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="414.1" y="750.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at(int, Thread*) (1 samples, 0.03%)</title><rect x="411.1" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="414.1" y="734.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at_impl(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="411.1" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="414.1" y="718.0"></text>
</g>
<g>
<title>ConstantPool::resolve_possibly_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="411.1" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="414.1" y="702.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="411.1" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="414.1" y="686.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="411.5" y="771.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.5" y="782.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="411.5" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.5" y="766.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="411.5" y="739.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.5" y="750.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="411.5" y="723.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.5" y="734.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="411.5" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.5" y="718.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="411.5" y="691.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="414.5" y="702.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="411.5" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.5" y="686.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="411.5" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.5" y="670.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="411.5" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.5" y="654.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="411.5" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.5" y="638.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="411.5" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.5" y="622.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="411.5" y="595.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="414.5" y="606.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="579.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="414.5" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="563.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="414.5" y="574.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="414.5" y="558.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="531.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="414.5" y="542.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="515.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="414.5" y="526.0"></text>
</g>
<g>
<title>java_lang_Class::create_mirror(Klass*, Handle, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="499.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="414.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::class_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="411.5" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="414.5" y="494.0"></text>
</g>
<g>
<title>ClassAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="411.5" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="414.5" y="478.0"></text>
</g>
<g>
<title>InjectorFactoryImpl$OptionalInjections.wrap (1 samples, 0.03%)</title><rect x="412.0" y="787.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.0" y="798.0"></text>
</g>
<g>
<title>Optional.orElseGet (1 samples, 0.03%)</title><rect x="412.0" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.0" y="782.0"></text>
</g>
<g>
<title>2062132026.get (1 samples, 0.03%)</title><rect x="412.0" y="755.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="415.0" y="766.0"></text>
</g>
<g>
<title>InjectorFactoryImpl$OptionalInjections.lambda$wrap$8 (1 samples, 0.03%)</title><rect x="412.0" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.0" y="750.0"></text>
</g>
<g>
<title>1468192631.apply (1 samples, 0.03%)</title><rect x="412.0" y="723.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="415.0" y="734.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.lambda$createParameterExtractor$0 (1 samples, 0.03%)</title><rect x="412.0" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.0" y="718.0"></text>
</g>
<g>
<title>InjectorFactoryImpl.createParameterExtractor0 (1 samples, 0.03%)</title><rect x="412.0" y="691.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.0" y="702.0"></text>
</g>
<g>
<title>InjectorFactoryImpl$1.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="412.0" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.0" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="412.0" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="415.0" y="670.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="412.0" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="415.0" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="412.0" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="415.0" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="412.0" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="415.0" y="622.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="412.0" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="415.0" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="412.0" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="415.0" y="590.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="412.0" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="415.0" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="412.0" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="415.0" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="412.0" y="531.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="415.0" y="542.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="412.0" y="515.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="415.0" y="526.0"></text>
</g>
<g>
<title>ServerContentEncodingAnnotationFeature.configure (1 samples, 0.03%)</title><rect x="412.4" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.4" y="846.0"></text>
</g>
<g>
<title>ServerContentEncodingAnnotationFeature.getEncodings (1 samples, 0.03%)</title><rect x="412.4" y="819.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="415.4" y="830.0"></text>
</g>
<g>
<title>Class.isAnnotationPresent (1 samples, 0.03%)</title><rect x="412.4" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.4" y="814.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (1 samples, 0.03%)</title><rect x="412.4" y="787.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.4" y="798.0"></text>
</g>
<g>
<title>Class.getAnnotation (1 samples, 0.03%)</title><rect x="412.4" y="771.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.4" y="782.0"></text>
</g>
<g>
<title>Class.annotationData (1 samples, 0.03%)</title><rect x="412.4" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="415.4" y="766.0"></text>
</g>
<g>
<title>Class.createAnnotationData (1 samples, 0.03%)</title><rect x="412.4" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.4" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="412.4" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.4" y="734.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="412.4" y="707.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.4" y="718.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="412.4" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.4" y="702.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="412.4" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.4" y="686.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="412.4" y="659.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.4" y="670.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="412.4" y="643.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.4" y="654.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="412.4" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="415.4" y="638.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="412.4" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.4" y="622.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="412.4" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.4" y="606.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="412.4" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.4" y="590.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="412.4" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.4" y="574.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="412.4" y="547.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="415.4" y="558.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="412.4" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.4" y="542.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="412.4" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.4" y="526.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="412.4" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.4" y="510.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="412.4" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.4" y="494.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="412.4" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.4" y="478.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="412.4" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.4" y="462.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="412.4" y="435.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="415.4" y="446.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="412.4" y="419.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="415.4" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="412.4" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="415.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="412.4" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="415.4" y="398.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="412.4" y="371.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="415.4" y="382.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="412.4" y="355.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="415.4" y="366.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="412.4" y="339.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="415.4" y="350.0"></text>
</g>
<g>
<title>verify_method (1 samples, 0.03%)</title><rect x="412.4" y="323.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="415.4" y="334.0"></text>
</g>
<g>
<title>merge_into_one_successor (1 samples, 0.03%)</title><rect x="412.4" y="307.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="415.4" y="318.0"></text>
</g>
<g>
<title>merge_stack (1 samples, 0.03%)</title><rect x="412.4" y="291.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="415.4" y="302.0"></text>
</g>
<g>
<title>merge_fullinfo_types (1 samples, 0.03%)</title><rect x="412.4" y="275.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="415.4" y="286.0"></text>
</g>
<g>
<title>jni_GetSuperclass (1 samples, 0.03%)</title><rect x="412.4" y="259.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="415.4" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="412.4" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="415.4" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="412.4" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="415.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="412.4" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="415.4" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="412.4" y="195.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="415.4" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="412.4" y="179.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="415.4" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="412.4" y="163.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="415.4" y="174.0"></text>
</g>
<g>
<title>RootClassNode.addInvoker (1 samples, 0.03%)</title><rect x="412.8" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.8" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="412.8" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="415.8" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="412.8" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.8" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="412.8" y="803.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.8" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="412.8" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="415.8" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="412.8" y="771.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="415.8" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="412.8" y="755.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="415.8" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="739.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="415.8" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="723.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="415.8" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="415.8" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="415.8" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="415.8" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="415.8" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="412.8" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="415.8" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="412.8" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="415.8" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="412.8" y="611.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="415.8" y="622.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.registerProviderInstance (2 samples, 0.06%)</title><rect x="413.3" y="1011.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.3" y="1022.0"></text>
</g>
<g>
<title>ResteasyProviderFactoryImpl.processProviderInstanceContracts (2 samples, 0.06%)</title><rect x="413.3" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="416.3" y="1006.0"></text>
</g>
<g>
<title>ServerHelper.processProviderInstanceContracts (2 samples, 0.06%)</title><rect x="413.3" y="979.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="416.3" y="990.0"></text>
</g>
<g>
<title>CommonProviders.processProviderInstanceContracts (2 samples, 0.06%)</title><rect x="413.3" y="963.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.3" y="974.0"></text>
</g>
<g>
<title>CommonProviders.addMessageBodyReader (2 samples, 0.06%)</title><rect x="413.3" y="947.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="416.3" y="958.0"></text>
</g>
<g>
<title>Utils.injectProperties (2 samples, 0.06%)</title><rect x="413.3" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.3" y="942.0"></text>
</g>
<g>
<title>QuarkusInjectorFactory$UnwrappingPropertyInjector.inject (2 samples, 0.06%)</title><rect x="413.3" y="915.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.3" y="926.0"></text>
</g>
<g>
<title>PropertyInjectorImpl.inject (2 samples, 0.06%)</title><rect x="413.3" y="899.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="416.3" y="910.0"></text>
</g>
<g>
<title>ContextParameterInjector.inject (2 samples, 0.06%)</title><rect x="413.3" y="883.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.3" y="894.0"></text>
</g>
<g>
<title>ContextParameterInjector.createProxy (2 samples, 0.06%)</title><rect x="413.3" y="867.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.3" y="878.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (2 samples, 0.06%)</title><rect x="413.3" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.3" y="862.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="413.3" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.3" y="846.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="413.3" y="819.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="416.3" y="830.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="413.3" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.3" y="814.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="413.3" y="787.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="416.3" y="798.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="413.3" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.3" y="782.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="413.3" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.3" y="766.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.defineProxyClass (1 samples, 0.03%)</title><rect x="413.3" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.3" y="750.0"></text>
</g>
<g>
<title>ProxyGenerator.generateProxyClass (1 samples, 0.03%)</title><rect x="413.3" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.3" y="734.0"></text>
</g>
<g>
<title>ProxyGenerator.generateClassFile (1 samples, 0.03%)</title><rect x="413.3" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.3" y="718.0"></text>
</g>
<g>
<title>ProxyGenerator$ProxyMethod.generateMethod (1 samples, 0.03%)</title><rect x="413.3" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.3" y="702.0"></text>
</g>
<g>
<title>ProxyGenerator$ProxyMethod.codeUnwrapReturnValue (1 samples, 0.03%)</title><rect x="413.3" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.3" y="686.0"></text>
</g>
<g>
<title>ProxyGenerator$ConstantPool.getMethodRef (1 samples, 0.03%)</title><rect x="413.3" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.3" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="413.3" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="416.3" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="413.3" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="416.3" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="413.3" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="416.3" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="413.3" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="416.3" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="413.3" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="416.3" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="413.3" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="416.3" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="413.3" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="416.3" y="558.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="413.3" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.3" y="542.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="413.3" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="416.3" y="526.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="413.7" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.7" y="846.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="413.7" y="819.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.7" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="413.7" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="416.7" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="413.7" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="416.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="413.7" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.7" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="413.7" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="416.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="413.7" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="416.7" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="413.7" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="416.7" y="734.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="413.7" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="416.7" y="718.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="413.7" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="416.7" y="702.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.03%)</title><rect x="413.7" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="416.7" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="414.2" y="1059.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.2" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="414.2" y="1043.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.2" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="414.2" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="417.2" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="414.2" y="1011.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.2" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="414.2" y="995.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="417.2" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="414.2" y="979.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="417.2" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="414.2" y="963.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="417.2" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="414.2" y="947.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="417.2" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="414.2" y="931.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="417.2" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="414.2" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="417.2" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="414.2" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="417.2" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="414.2" y="883.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="417.2" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="414.2" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="417.2" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="414.2" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="417.2" y="862.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="414.2" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="417.2" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="414.6" y="995.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.6" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="414.6" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.6" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="414.6" y="963.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.6" y="974.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="414.6" y="947.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.6" y="958.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="414.6" y="931.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.6" y="942.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="414.6" y="915.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.6" y="926.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="414.6" y="899.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="417.6" y="910.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="414.6" y="883.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="417.6" y="894.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="414.6" y="867.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="417.6" y="878.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="415.1" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.1" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="415.1" y="1011.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.1" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader$1.apply (1 samples, 0.03%)</title><rect x="415.1" y="995.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.1" y="1006.0"></text>
</g>
<g>
<title>JarResource.getProtectionDomain (1 samples, 0.03%)</title><rect x="415.1" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.1" y="990.0"></text>
</g>
<g>
<title>URI.toURL (1 samples, 0.03%)</title><rect x="415.1" y="963.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.1" y="974.0"></text>
</g>
<g>
<title>URL.fromURI (1 samples, 0.03%)</title><rect x="415.1" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.1" y="958.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="415.1" y="931.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.1" y="942.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="415.1" y="915.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.1" y="926.0"></text>
</g>
<g>
<title>Handler.parseAbsoluteSpec (1 samples, 0.03%)</title><rect x="415.1" y="899.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.1" y="910.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="415.1" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.1" y="894.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="415.1" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.1" y="878.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="415.1" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.1" y="862.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="415.1" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="418.1" y="846.0"></text>
</g>
<g>
<title>URLStreamHandler.parseURL (1 samples, 0.03%)</title><rect x="415.1" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.1" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="415.5" y="1091.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.5" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="415.5" y="1075.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="415.5" y="1059.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.5" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="415.5" y="1043.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.5" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="415.5" y="1027.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="418.5" y="1038.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="415.5" y="1011.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="418.5" y="1022.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="415.5" y="995.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="418.5" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="415.5" y="979.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="418.5" y="990.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="415.5" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.5" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="415.5" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="418.5" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="415.5" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="418.5" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="415.5" y="915.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="418.5" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="415.5" y="899.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="418.5" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.03%)</title><rect x="415.5" y="883.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="418.5" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="415.9" y="1059.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.9" y="1070.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="415.9" y="1043.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.9" y="1054.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="415.9" y="1027.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.9" y="1038.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="415.9" y="1011.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.9" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="416.4" y="1059.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.4" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="416.4" y="1043.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.4" y="1054.0"></text>
</g>
<g>
<title>SmallRyeContextPropagationProcessor$buildStatic-850855720.deploy (4 samples, 0.11%)</title><rect x="416.8" y="1091.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.8" y="1102.0"></text>
</g>
<g>
<title>SmallRyeContextPropagationProcessor$buildStatic-850855720.deploy_0 (4 samples, 0.11%)</title><rect x="416.8" y="1075.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.8" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="416.8" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="419.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="416.8" y="1043.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="419.8" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="416.8" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="419.8" y="1038.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="416.8" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="419.8" y="1022.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="416.8" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="419.8" y="1006.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="416.8" y="979.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="419.8" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="417.3" y="1059.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="420.3" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="417.3" y="1043.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="420.3" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="417.3" y="1027.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.3" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="417.3" y="1011.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.3" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="417.3" y="995.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="420.3" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="417.3" y="979.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="420.3" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="417.3" y="963.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="420.3" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="417.3" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="420.3" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="417.3" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="420.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="417.3" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="420.3" y="926.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="417.3" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="420.3" y="910.0"></text>
</g>
<g>
<title>klassVtable::needs_new_vtable_entry(methodHandle const&amp;, Klass const*, Handle, Symbol*, AccessFlags, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="417.3" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="420.3" y="894.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="417.7" y="1027.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="420.7" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.03%)</title><rect x="417.7" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="420.7" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="417.7" y="995.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="420.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="417.7" y="979.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="420.7" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="417.7" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="420.7" y="974.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="417.7" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="420.7" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="417.7" y="931.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="420.7" y="942.0"></text>
</g>
<g>
<title>SmallRyeContextPropagationRecorder.configureStaticInit (1 samples, 0.03%)</title><rect x="418.2" y="1059.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.2" y="1070.0"></text>
</g>
<g>
<title>ContextManagerProvider.register (1 samples, 0.03%)</title><rect x="418.2" y="1043.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.2" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="418.2" y="1027.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.2" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="418.2" y="1011.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.2" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="418.2" y="995.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.2" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="418.2" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.2" y="990.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="418.2" y="963.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="421.2" y="974.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="418.2" y="947.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="421.2" y="958.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="418.2" y="931.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="421.2" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="418.2" y="915.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="421.2" y="926.0"></text>
</g>
<g>
<title>StartupContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="418.6" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.6" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="418.6" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.6" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="418.6" y="1059.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.6" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="418.6" y="1043.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="418.6" y="1027.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.6" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="418.6" y="1011.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="421.6" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="418.6" y="995.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="421.6" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="418.6" y="979.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="421.6" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="418.6" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="421.6" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="418.6" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="421.6" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="418.6" y="931.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="421.6" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="418.6" y="915.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="421.6" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="418.6" y="899.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="421.6" y="910.0"></text>
</g>
<g>
<title>VertxCoreProcessor$ioThreadDetector-1463825589.deploy (2 samples, 0.06%)</title><rect x="419.0" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.0" y="1102.0"></text>
</g>
<g>
<title>VertxCoreProcessor$ioThreadDetector-1463825589.deploy_0 (2 samples, 0.06%)</title><rect x="419.0" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.0" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="419.0" y="1059.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.0" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="419.0" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.0" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="419.0" y="1027.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="419.0" y="1011.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="422.0" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="419.0" y="995.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="422.0" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="419.0" y="979.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="422.0" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="963.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="422.0" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="422.0" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="422.0" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="915.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="422.0" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.0" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="883.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="422.0" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="867.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="422.0" y="878.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="422.0" y="862.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="422.0" y="846.0"></text>
</g>
<g>
<title>SymbolTable::allocate_symbol(unsigned char const*, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="419.0" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="422.0" y="830.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="419.0" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="422.0" y="814.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="419.0" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="422.0" y="798.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="419.0" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="422.0" y="782.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="419.0" y="755.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="422.0" y="766.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="419.0" y="739.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="422.0" y="750.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="419.0" y="723.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="422.0" y="734.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="419.0" y="707.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="422.0" y="718.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="419.5" y="1027.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.5" y="1038.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="419.5" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.5" y="1022.0"></text>
</g>
<g>
<title>Collections$SetFromMap.add (1 samples, 0.03%)</title><rect x="419.5" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.5" y="1006.0"></text>
</g>
<g>
<title>WeakHashMap.put (1 samples, 0.03%)</title><rect x="419.5" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.5" y="990.0"></text>
</g>
<g>
<title>WeakHashMap.hash (1 samples, 0.03%)</title><rect x="419.5" y="963.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.5" y="974.0"></text>
</g>
<g>
<title>Object.hashCode (1 samples, 0.03%)</title><rect x="419.5" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.5" y="958.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="419.5" y="931.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="422.5" y="942.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="419.5" y="915.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.5" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="419.9" y="1235.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="422.9" y="1246.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="419.9" y="1219.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.9" y="1230.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="419.9" y="1203.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.9" y="1214.0"></text>
</g>
<g>
<title>ClassLoader.preDefineClass (1 samples, 0.03%)</title><rect x="419.9" y="1187.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.9" y="1198.0"></text>
</g>
<g>
<title>ClassLoader.checkCerts (1 samples, 0.03%)</title><rect x="419.9" y="1171.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="422.9" y="1182.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="419.9" y="1155.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.9" y="1166.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putVal (1 samples, 0.03%)</title><rect x="419.9" y="1139.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.9" y="1150.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (10 samples, 0.28%)</title><rect x="420.4" y="1315.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.4" y="1326.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (10 samples, 0.28%)</title><rect x="420.4" y="1299.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.4" y="1310.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="420.4" y="1283.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.4" y="1294.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="420.4" y="1267.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.4" y="1278.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="420.4" y="1251.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="423.4" y="1262.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="420.4" y="1235.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.4" y="1246.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="420.4" y="1219.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.4" y="1230.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="420.4" y="1203.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.4" y="1214.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="420.4" y="1187.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="423.4" y="1198.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.checkResource (1 samples, 0.03%)</title><rect x="420.4" y="1171.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="423.4" y="1182.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="420.4" y="1155.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.4" y="1166.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="420.4" y="1139.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.4" y="1150.0"></text>
</g>
<g>
<title>String.regionMatches (1 samples, 0.03%)</title><rect x="420.4" y="1123.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.4" y="1134.0"></text>
</g>
<g>
<title>JarResource.getResourceData (9 samples, 0.25%)</title><rect x="420.8" y="1283.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.8" y="1294.0"></text>
</g>
<g>
<title>ZipFile.getEntry (9 samples, 0.25%)</title><rect x="420.8" y="1267.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="423.8" y="1278.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (6 samples, 0.17%)</title><rect x="420.8" y="1251.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="423.8" y="1262.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (6 samples, 0.17%)</title><rect x="420.8" y="1235.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="423.8" y="1246.0"></text>
</g>
<g>
<title>CallSite.makeSite (6 samples, 0.17%)</title><rect x="420.8" y="1219.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.8" y="1230.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (6 samples, 0.17%)</title><rect x="420.8" y="1203.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="423.8" y="1214.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (5 samples, 0.14%)</title><rect x="420.8" y="1187.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.8" y="1198.0"></text>
</g>
<g>
<title>DirectMethodHandle$Holder.invokeStatic (5 samples, 0.14%)</title><rect x="420.8" y="1171.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.8" y="1182.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (5 samples, 0.14%)</title><rect x="420.8" y="1155.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.8" y="1166.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.&lt;init&gt; (1 samples, 0.03%)</title><rect x="420.8" y="1139.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.8" y="1150.0"></text>
</g>
<g>
<title>MethodType.toMethodDescriptorString (1 samples, 0.03%)</title><rect x="420.8" y="1123.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.8" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="420.8" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="423.8" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="420.8" y="1091.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="423.8" y="1102.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (4 samples, 0.11%)</title><rect x="421.3" y="1139.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.3" y="1150.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="421.3" y="1123.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="424.3" y="1134.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.generateConstructor (1 samples, 0.03%)</title><rect x="421.3" y="1107.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.3" y="1118.0"></text>
</g>
<g>
<title>ClassWriter.visitMethod (1 samples, 0.03%)</title><rect x="421.3" y="1091.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="424.3" y="1102.0"></text>
</g>
<g>
<title>MethodWriter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="421.3" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.3" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="421.3" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="424.3" y="1070.0"></text>
</g>
<g>
<title>constantTag::basic_type() const (1 samples, 0.03%)</title><rect x="421.3" y="1043.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="424.3" y="1054.0"></text>
</g>
<g>
<title>MethodHandles.constant (3 samples, 0.08%)</title><rect x="421.7" y="1123.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="424.7" y="1134.0"></text>
</g>
<g>
<title>MethodHandle.bindTo (1 samples, 0.03%)</title><rect x="421.7" y="1107.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.7" y="1118.0"></text>
</g>
<g>
<title>MethodHandle.bindArgumentL (1 samples, 0.03%)</title><rect x="421.7" y="1091.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="424.7" y="1102.0"></text>
</g>
<g>
<title>BoundMethodHandle.bindArgumentL (1 samples, 0.03%)</title><rect x="421.7" y="1075.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.7" y="1086.0"></text>
</g>
<g>
<title>BoundMethodHandle.editor (1 samples, 0.03%)</title><rect x="421.7" y="1059.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.7" y="1070.0"></text>
</g>
<g>
<title>LambdaForm.editor (1 samples, 0.03%)</title><rect x="421.7" y="1043.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.7" y="1054.0"></text>
</g>
<g>
<title>LambdaFormEditor.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="421.7" y="1027.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.7" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="421.7" y="1011.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="424.7" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="421.7" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="424.7" y="1006.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="421.7" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="424.7" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="421.7" y="963.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="424.7" y="974.0"></text>
</g>
<g>
<title>MethodHandles.identity (2 samples, 0.06%)</title><rect x="422.1" y="1107.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="425.1" y="1118.0"></text>
</g>
<g>
<title>MethodHandles.makeIdentity (2 samples, 0.06%)</title><rect x="422.1" y="1091.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.1" y="1102.0"></text>
</g>
<g>
<title>LambdaForm.identityForm (2 samples, 0.06%)</title><rect x="422.1" y="1075.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.1" y="1086.0"></text>
</g>
<g>
<title>LambdaForm.createFormsFor (2 samples, 0.06%)</title><rect x="422.1" y="1059.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="425.1" y="1070.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized (2 samples, 0.06%)</title><rect x="422.1" y="1043.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.1" y="1054.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized0 (2 samples, 0.06%)</title><rect x="422.1" y="1027.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.1" y="1038.0"></text>
</g>
<g>
<title>BoundMethodHandle.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="422.1" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.1" y="1022.0"></text>
</g>
<g>
<title>BoundMethodHandle$Specializer.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="422.1" y="995.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.1" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="422.1" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="425.1" y="990.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="425.1" y="974.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="947.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="425.1" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="931.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="425.1" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="425.1" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="425.1" y="910.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="425.1" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="867.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="425.1" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="851.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="425.1" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="425.1" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="425.1" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="425.1" y="814.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="425.1" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="425.1" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="425.1" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="739.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="425.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="425.1" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="422.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="425.1" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="422.1" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="425.1" y="702.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="422.1" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="425.1" y="686.0"></text>
</g>
<g>
<title>ClassSpecializer.findSpecies (1 samples, 0.03%)</title><rect x="422.6" y="995.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="425.6" y="1006.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.loadSpecies (1 samples, 0.03%)</title><rect x="422.6" y="979.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.6" y="990.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.linkSpeciesDataToCode (1 samples, 0.03%)</title><rect x="422.6" y="963.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.6" y="974.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findGetters (1 samples, 0.03%)</title><rect x="422.6" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.6" y="958.0"></text>
</g>
<g>
<title>ClassSpecializer$Factory.findGetter (1 samples, 0.03%)</title><rect x="422.6" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.6" y="942.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findGetter (1 samples, 0.03%)</title><rect x="422.6" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.6" y="926.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectField (1 samples, 0.03%)</title><rect x="422.6" y="899.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.6" y="910.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectFieldCommon (1 samples, 0.03%)</title><rect x="422.6" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.6" y="894.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="422.6" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.6" y="878.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="422.6" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.6" y="862.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedFieldLambdaForm (1 samples, 0.03%)</title><rect x="422.6" y="835.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.6" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="422.6" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="425.6" y="830.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="422.6" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="425.6" y="814.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethod (1 samples, 0.03%)</title><rect x="423.0" y="1187.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.0" y="1198.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodImpl (1 samples, 0.03%)</title><rect x="423.0" y="1171.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.0" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="423.0" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="426.0" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="423.0" y="1139.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="426.0" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1123.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="426.0" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1107.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="426.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1059.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="426.0" y="1070.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1043.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="426.0" y="1054.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1027.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="1038.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="423.0" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="426.0" y="1022.0"></text>
</g>
<g>
<title>Rewriter::compute_index_maps() (1 samples, 0.03%)</title><rect x="423.0" y="995.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="426.0" y="1006.0"></text>
</g>
<g>
<title>Rewriter::init_maps(int) (1 samples, 0.03%)</title><rect x="423.0" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="426.0" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.03%)</title><rect x="423.0" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="426.0" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (1 samples, 0.03%)</title><rect x="423.0" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="426.0" y="958.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (3 samples, 0.08%)</title><rect x="423.5" y="1251.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.5" y="1262.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (3 samples, 0.08%)</title><rect x="423.5" y="1235.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.5" y="1246.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (3 samples, 0.08%)</title><rect x="423.5" y="1219.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.5" y="1230.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (3 samples, 0.08%)</title><rect x="423.5" y="1203.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.5" y="1214.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (3 samples, 0.08%)</title><rect x="423.5" y="1187.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="426.5" y="1198.0"></text>
</g>
<g>
<title>DirectMethodHandle.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="423.5" y="1171.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.5" y="1182.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized (1 samples, 0.03%)</title><rect x="423.5" y="1155.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.5" y="1166.0"></text>
</g>
<g>
<title>Unsafe.ensureClassInitialized0 (1 samples, 0.03%)</title><rect x="423.5" y="1139.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.5" y="1150.0"></text>
</g>
<g>
<title>Unsafe_EnsureClassInitialized0(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="423.5" y="1123.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="426.5" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="423.5" y="1107.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="426.5" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="423.5" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="426.5" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="423.5" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="426.5" y="1086.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="423.5" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="426.5" y="1070.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="423.5" y="1043.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="426.5" y="1054.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="423.5" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="426.5" y="1038.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="423.5" y="1011.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.5" y="1022.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (2 samples, 0.06%)</title><rect x="423.9" y="1171.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.9" y="1182.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="423.9" y="1155.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.9" y="1166.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="423.9" y="1139.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="426.9" y="1150.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="423.9" y="1123.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.9" y="1134.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="423.9" y="1107.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.9" y="1118.0"></text>
</g>
<g>
<title>DirectMethodHandle.getFunction (1 samples, 0.03%)</title><rect x="423.9" y="1091.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.9" y="1102.0"></text>
</g>
<g>
<title>DirectMethodHandle.createFunction (1 samples, 0.03%)</title><rect x="423.9" y="1075.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.9" y="1086.0"></text>
</g>
<g>
<title>DirectMethodHandle.getNamedFunction (1 samples, 0.03%)</title><rect x="423.9" y="1059.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.9" y="1070.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="423.9" y="1043.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="426.9" y="1054.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="423.9" y="1027.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.9" y="1038.0"></text>
</g>
<g>
<title>MethodHandleImpl$Intrinsic.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="423.9" y="1011.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.9" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="423.9" y="995.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="426.9" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="423.9" y="979.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="426.9" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="423.9" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="426.9" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="423.9" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="426.9" y="958.0"></text>
</g>
<g>
<title>DirectMethodHandle.shouldBeInitialized (1 samples, 0.03%)</title><rect x="424.3" y="1123.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.3" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="424.3" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="427.3" y="1118.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="1091.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="427.3" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="1075.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="427.3" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="427.3" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="427.3" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="1027.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="427.3" y="1038.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="427.3" y="1022.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="427.3" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="427.3" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="963.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="427.3" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="427.3" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::copy_method_annotations(ConstMethod*, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, unsigned char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="427.3" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::assemble_annotations(unsigned char const*, int, unsigned char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="427.3" y="910.0"></text>
</g>
<g>
<title>Array&lt;unsigned char&gt;* MetadataFactory::new_array&lt;unsigned char&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="883.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.3" y="894.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="424.3" y="867.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="427.3" y="878.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="424.3" y="851.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="427.3" y="862.0"></text>
</g>
<g>
<title>SerializedApplication.read (16 samples, 0.45%)</title><rect x="424.8" y="1315.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.8" y="1326.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="424.8" y="1299.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.8" y="1310.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="424.8" y="1283.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.8" y="1294.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="424.8" y="1267.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.8" y="1278.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="424.8" y="1251.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.8" y="1262.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.03%)</title><rect x="424.8" y="1235.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.8" y="1246.0"></text>
</g>
<g>
<title>URLClassPath.getResource (1 samples, 0.03%)</title><rect x="424.8" y="1219.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.8" y="1230.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="424.8" y="1203.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.8" y="1214.0"></text>
</g>
<g>
<title>URLClassPath$JarLoader.checkResource (1 samples, 0.03%)</title><rect x="424.8" y="1187.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="427.8" y="1198.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="424.8" y="1171.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.8" y="1182.0"></text>
</g>
<g>
<title>URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="424.8" y="1155.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.8" y="1166.0"></text>
</g>
<g>
<title>Handler.parseURL (1 samples, 0.03%)</title><rect x="424.8" y="1139.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.8" y="1150.0"></text>
</g>
<g>
<title>String.substring (1 samples, 0.03%)</title><rect x="424.8" y="1123.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.8" y="1134.0"></text>
</g>
<g>
<title>DataInputStream.readBoolean (1 samples, 0.03%)</title><rect x="425.2" y="1299.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="428.2" y="1310.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="425.2" y="1283.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.2" y="1294.0"></text>
</g>
<g>
<title>InputStream.read (1 samples, 0.03%)</title><rect x="425.2" y="1267.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.2" y="1278.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="425.2" y="1251.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.2" y="1262.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="425.2" y="1235.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.2" y="1246.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="425.2" y="1219.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.2" y="1230.0"></text>
</g>
<g>
<title>FileChannelImpl.read (1 samples, 0.03%)</title><rect x="425.2" y="1203.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.2" y="1214.0"></text>
</g>
<g>
<title>NativeThreadSet.add (1 samples, 0.03%)</title><rect x="425.2" y="1187.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="428.2" y="1198.0"></text>
</g>
<g>
<title>NativeThread.current (1 samples, 0.03%)</title><rect x="425.2" y="1171.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.2" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="425.2" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="428.2" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="425.2" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="428.2" y="1150.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="425.2" y="1123.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="428.2" y="1134.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="425.2" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="428.2" y="1118.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="425.2" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="428.2" y="1102.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="425.2" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="428.2" y="1086.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="425.2" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="428.2" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.03%)</title><rect x="425.2" y="1043.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="428.2" y="1054.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.03%)</title><rect x="425.2" y="1027.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="428.2" y="1038.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="425.2" y="1011.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="428.2" y="1022.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.03%)</title><rect x="425.2" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="428.2" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="425.2" y="979.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="428.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="425.2" y="963.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="428.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="425.2" y="947.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="428.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="425.2" y="931.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="428.2" y="942.0"></text>
</g>
<g>
<title>DataInputStream.readUTF (7 samples, 0.20%)</title><rect x="425.7" y="1299.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.7" y="1310.0"></text>
</g>
<g>
<title>DataInputStream.readUTF (7 samples, 0.20%)</title><rect x="425.7" y="1283.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.7" y="1294.0"></text>
</g>
<g>
<title>DataInputStream.readFully (2 samples, 0.06%)</title><rect x="425.7" y="1267.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.7" y="1278.0"></text>
</g>
<g>
<title>ChannelInputStream.read (2 samples, 0.06%)</title><rect x="425.7" y="1251.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.7" y="1262.0"></text>
</g>
<g>
<title>ChannelInputStream.read (2 samples, 0.06%)</title><rect x="425.7" y="1235.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.7" y="1246.0"></text>
</g>
<g>
<title>ChannelInputStream.read (2 samples, 0.06%)</title><rect x="425.7" y="1219.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.7" y="1230.0"></text>
</g>
<g>
<title>FileChannelImpl.read (2 samples, 0.06%)</title><rect x="425.7" y="1203.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.7" y="1214.0"></text>
</g>
<g>
<title>IOUtil.read (2 samples, 0.06%)</title><rect x="425.7" y="1187.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.7" y="1198.0"></text>
</g>
<g>
<title>IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="425.7" y="1171.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.7" y="1182.0"></text>
</g>
<g>
<title>FileDispatcherImpl.read (2 samples, 0.06%)</title><rect x="425.7" y="1155.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.7" y="1166.0"></text>
</g>
<g>
<title>FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="425.7" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.7" y="1150.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="425.7" y="1123.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="428.7" y="1134.0"></text>
</g>
<g>
<title>DataInputStream.readUnsignedShort (5 samples, 0.14%)</title><rect x="426.6" y="1267.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.6" y="1278.0"></text>
</g>
<g>
<title>ChannelInputStream.read (5 samples, 0.14%)</title><rect x="426.6" y="1251.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.6" y="1262.0"></text>
</g>
<g>
<title>InputStream.read (5 samples, 0.14%)</title><rect x="426.6" y="1235.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.6" y="1246.0"></text>
</g>
<g>
<title>ChannelInputStream.read (5 samples, 0.14%)</title><rect x="426.6" y="1219.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="429.6" y="1230.0"></text>
</g>
<g>
<title>ChannelInputStream.read (5 samples, 0.14%)</title><rect x="426.6" y="1203.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="429.6" y="1214.0"></text>
</g>
<g>
<title>ChannelInputStream.read (5 samples, 0.14%)</title><rect x="426.6" y="1187.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.6" y="1198.0"></text>
</g>
<g>
<title>FileChannelImpl.read (5 samples, 0.14%)</title><rect x="426.6" y="1171.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.6" y="1182.0"></text>
</g>
<g>
<title>IOUtil.read (4 samples, 0.11%)</title><rect x="427.0" y="1155.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.0" y="1166.0"></text>
</g>
<g>
<title>IOUtil.readIntoNativeBuffer (3 samples, 0.08%)</title><rect x="427.0" y="1139.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.0" y="1150.0"></text>
</g>
<g>
<title>FileDispatcherImpl.read (3 samples, 0.08%)</title><rect x="427.0" y="1123.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.0" y="1134.0"></text>
</g>
<g>
<title>FileDispatcherImpl.read0 (3 samples, 0.08%)</title><rect x="427.0" y="1107.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.0" y="1118.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.08%)</title><rect x="427.0" y="1091.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="430.0" y="1102.0"></text>
</g>
<g>
<title>Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="428.3" y="1139.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.3" y="1150.0"></text>
</g>
<g>
<title>Util$BufferCache.offerFirst (1 samples, 0.03%)</title><rect x="428.3" y="1123.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="431.3" y="1134.0"></text>
</g>
<g>
<title>ManifestInfo.&lt;init&gt; (1 samples, 0.03%)</title><rect x="428.8" y="1299.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="431.8" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="428.8" y="1283.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="431.8" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="428.8" y="1267.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="431.8" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="428.8" y="1251.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="431.8" y="1262.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="428.8" y="1235.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="431.8" y="1246.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="428.8" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="431.8" y="1230.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="428.8" y="1203.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="431.8" y="1214.0"></text>
</g>
<g>
<title>Path.resolve (2 samples, 0.06%)</title><rect x="429.2" y="1299.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.2" y="1310.0"></text>
</g>
<g>
<title>UnixFileSystem.getPath (2 samples, 0.06%)</title><rect x="429.2" y="1283.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="432.2" y="1294.0"></text>
</g>
<g>
<title>UnixPath.&lt;init&gt; (2 samples, 0.06%)</title><rect x="429.2" y="1267.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="432.2" y="1278.0"></text>
</g>
<g>
<title>UnixPath.encode (2 samples, 0.06%)</title><rect x="429.2" y="1251.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.2" y="1262.0"></text>
</g>
<g>
<title>ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="429.2" y="1235.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.2" y="1246.0"></text>
</g>
<g>
<title>CharsetEncoder.encode (1 samples, 0.03%)</title><rect x="429.7" y="1235.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="432.7" y="1246.0"></text>
</g>
<g>
<title>UTF_8$Encoder.encodeLoop (1 samples, 0.03%)</title><rect x="429.7" y="1219.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="432.7" y="1230.0"></text>
</g>
<g>
<title>UTF_8$Encoder.encodeArrayLoop (1 samples, 0.03%)</title><rect x="429.7" y="1203.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.7" y="1214.0"></text>
</g>
<g>
<title>UTF_8.updatePositions (1 samples, 0.03%)</title><rect x="429.7" y="1187.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.7" y="1198.0"></text>
</g>
<g>
<title>RunnerClassLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="430.1" y="1299.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.1" y="1310.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="430.1" y="1283.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.1" y="1294.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="430.1" y="1267.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.1" y="1278.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="430.1" y="1251.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.1" y="1262.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="430.1" y="1235.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.1" y="1246.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="430.1" y="1219.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.1" y="1230.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="430.1" y="1203.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.1" y="1214.0"></text>
</g>
<g>
<title>JVM_FindLoadedClass (1 samples, 0.03%)</title><rect x="430.1" y="1187.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="433.1" y="1198.0"></text>
</g>
<g>
<title>java_lang_String::as_utf8_string(oopDesc*) (1 samples, 0.03%)</title><rect x="430.1" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="433.1" y="1182.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="430.1" y="1155.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="433.1" y="1166.0"></text>
</g>
<g>
<title>SerializedApplication.readNullableString (2 samples, 0.06%)</title><rect x="430.5" y="1299.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="433.5" y="1310.0"></text>
</g>
<g>
<title>DataInputStream.readUTF (2 samples, 0.06%)</title><rect x="430.5" y="1283.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="433.5" y="1294.0"></text>
</g>
<g>
<title>DataInputStream.readUTF (2 samples, 0.06%)</title><rect x="430.5" y="1267.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.5" y="1278.0"></text>
</g>
<g>
<title>DataInputStream.readFully (1 samples, 0.03%)</title><rect x="430.5" y="1251.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.5" y="1262.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="430.5" y="1235.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.5" y="1246.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="430.5" y="1219.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.5" y="1230.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="430.5" y="1203.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.5" y="1214.0"></text>
</g>
<g>
<title>FileChannelImpl.read (1 samples, 0.03%)</title><rect x="430.5" y="1187.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.5" y="1198.0"></text>
</g>
<g>
<title>IOUtil.read (1 samples, 0.03%)</title><rect x="430.5" y="1171.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.5" y="1182.0"></text>
</g>
<g>
<title>HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="430.5" y="1155.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.5" y="1166.0"></text>
</g>
<g>
<title>DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="430.5" y="1139.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.5" y="1150.0"></text>
</g>
<g>
<title>Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="430.5" y="1123.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.5" y="1134.0"></text>
</g>
<g>
<title>Unsafe.copyMemory0 (1 samples, 0.03%)</title><rect x="430.5" y="1107.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.5" y="1118.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (1 samples, 0.03%)</title><rect x="430.5" y="1091.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="433.5" y="1102.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="430.5" y="1075.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="433.5" y="1086.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="430.5" y="1059.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="433.5" y="1070.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="430.5" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="433.5" y="1054.0"></text>
</g>
<g>
<title>DataInputStream.readUnsignedShort (1 samples, 0.03%)</title><rect x="431.0" y="1251.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="434.0" y="1262.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="431.0" y="1235.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.0" y="1246.0"></text>
</g>
<g>
<title>InputStream.read (1 samples, 0.03%)</title><rect x="431.0" y="1219.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.0" y="1230.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="431.0" y="1203.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.0" y="1214.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="431.0" y="1187.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.0" y="1198.0"></text>
</g>
<g>
<title>ChannelInputStream.read (1 samples, 0.03%)</title><rect x="431.0" y="1171.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.0" y="1182.0"></text>
</g>
<g>
<title>FileChannelImpl.read (1 samples, 0.03%)</title><rect x="431.0" y="1155.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.0" y="1166.0"></text>
</g>
<g>
<title>IOUtil.read (1 samples, 0.03%)</title><rect x="431.0" y="1139.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.0" y="1150.0"></text>
</g>
<g>
<title>IOUtil.readIntoNativeBuffer (1 samples, 0.03%)</title><rect x="431.0" y="1123.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="434.0" y="1134.0"></text>
</g>
<g>
<title>FileDispatcherImpl.read (1 samples, 0.03%)</title><rect x="431.0" y="1107.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.0" y="1118.0"></text>
</g>
<g>
<title>FileDispatcherImpl.read0 (1 samples, 0.03%)</title><rect x="431.0" y="1091.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.0" y="1102.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="431.0" y="1075.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="434.0" y="1086.0"></text>
</g>
<g>
<title>System.arraycopy (1 samples, 0.03%)</title><rect x="431.4" y="1299.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.4" y="1310.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (1 samples, 0.03%)</title><rect x="431.4" y="1283.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="434.4" y="1294.0"></text>
</g>
<g>
<title>ObjArrayKlass::do_copy(arrayOopDesc*, unsigned long, arrayOopDesc*, unsigned long, int, Thread*) (1 samples, 0.03%)</title><rect x="431.4" y="1267.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="434.4" y="1278.0"></text>
</g>
<g>
<title>bool ModRefBarrierSet::AccessBarrier&lt;36225142ull, G1BarrierSet&gt;::oop_arraycopy_in_heap&lt;unsigned int&gt;(arrayOopDesc*, unsigned long, unsigned int*, arrayOopDesc*, unsigned long, unsigned int*, unsigned long) (1 samples, 0.03%)</title><rect x="431.4" y="1251.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="434.4" y="1262.0"></text>
</g>
<g>
<title>URLDecoder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="431.9" y="1315.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.9" y="1326.0"></text>
</g>
<g>
<title>URLEncoder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="431.9" y="1299.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.9" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="431.9" y="1283.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="434.9" y="1294.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1267.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="434.9" y="1278.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1251.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="434.9" y="1262.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1235.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="434.9" y="1246.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1219.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="434.9" y="1230.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1203.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="434.9" y="1214.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1187.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="434.9" y="1198.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1171.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="434.9" y="1182.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1155.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.9" y="1166.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1139.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.9" y="1150.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="434.9" y="1134.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="431.9" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="434.9" y="1118.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="431.9" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="434.9" y="1102.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (3 samples, 0.08%)</title><rect x="432.3" y="1347.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="435.3" y="1358.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (3 samples, 0.08%)</title><rect x="432.3" y="1331.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="435.3" y="1342.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.06%)</title><rect x="432.3" y="1315.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="435.3" y="1326.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (2 samples, 0.06%)</title><rect x="432.3" y="1299.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="435.3" y="1310.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::common(bool (SimpleThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (2 samples, 0.06%)</title><rect x="432.3" y="1283.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="435.3" y="1294.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::loop_predicate(int, int, CompLevel, Method*) (1 samples, 0.03%)</title><rect x="432.3" y="1267.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="435.3" y="1278.0"></text>
</g>
<g>
<title>bool SimpleThresholdPolicy::call_predicate_helper&lt;(CompLevel)3&gt;(int, int, double, Method*) (1 samples, 0.03%)</title><rect x="432.7" y="1267.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="435.7" y="1278.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="433.2" y="1315.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="436.2" y="1326.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="433.2" y="1299.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="436.2" y="1310.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="433.2" y="1283.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="436.2" y="1294.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.03%)</title><rect x="433.2" y="1267.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="436.2" y="1278.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="433.2" y="1251.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="436.2" y="1262.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (6 samples, 0.17%)</title><rect x="433.6" y="1347.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.6" y="1358.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="433.6" y="1331.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="436.6" y="1342.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="433.6" y="1315.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="436.6" y="1326.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="433.6" y="1299.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="436.6" y="1310.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="433.6" y="1283.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="436.6" y="1294.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.14%)</title><rect x="434.1" y="1331.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="437.1" y="1342.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (5 samples, 0.14%)</title><rect x="434.1" y="1315.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="437.1" y="1326.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (5 samples, 0.14%)</title><rect x="434.1" y="1299.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="437.1" y="1310.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.06%)</title><rect x="434.1" y="1283.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.1" y="1294.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.06%)</title><rect x="434.1" y="1267.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="437.1" y="1278.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.06%)</title><rect x="434.1" y="1251.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="437.1" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="434.1" y="1235.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="437.1" y="1246.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="435.0" y="1283.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="438.0" y="1294.0"></text>
</g>
<g>
<title>Thread.exit (1 samples, 0.03%)</title><rect x="436.3" y="1347.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.3" y="1358.0"></text>
</g>
<g>
<title>TerminatingThreadLocal.threadTerminated (1 samples, 0.03%)</title><rect x="436.3" y="1331.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="439.3" y="1342.0"></text>
</g>
<g>
<title>Collections$SetFromMap.iterator (1 samples, 0.03%)</title><rect x="436.3" y="1315.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.3" y="1326.0"></text>
</g>
<g>
<title>IdentityHashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="436.3" y="1299.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.3" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="436.3" y="1283.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="439.3" y="1294.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1267.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="439.3" y="1278.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1251.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="439.3" y="1262.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1235.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="439.3" y="1246.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1219.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.3" y="1230.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1203.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.3" y="1214.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="439.3" y="1198.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1171.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="439.3" y="1182.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1155.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="439.3" y="1166.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="436.3" y="1139.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="439.3" y="1150.0"></text>
</g>
<g>
<title>Thread.run (171 samples, 4.79%)</title><rect x="436.7" y="1347.0" width="75.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.7" y="1358.0">Thread.run</text>
</g>
<g>
<title>440815523.run (2 samples, 0.06%)</title><rect x="437.6" y="1331.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="440.6" y="1342.0"></text>
</g>
<g>
<title>FileResolver.lambda$setupCacheDir$3 (2 samples, 0.06%)</title><rect x="437.6" y="1315.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.6" y="1326.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="437.6" y="1299.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.6" y="1310.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="437.6" y="1283.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.6" y="1294.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="437.6" y="1267.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.6" y="1278.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="437.6" y="1251.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.6" y="1262.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="437.6" y="1235.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.6" y="1246.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="437.6" y="1219.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="440.6" y="1230.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="437.6" y="1203.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.6" y="1214.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="437.6" y="1187.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.6" y="1198.0"></text>
</g>
<g>
<title>ConstantCallSite.&lt;init&gt; (1 samples, 0.03%)</title><rect x="437.6" y="1171.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="440.6" y="1182.0"></text>
</g>
<g>
<title>CallSite.&lt;init&gt; (1 samples, 0.03%)</title><rect x="437.6" y="1155.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="440.6" y="1166.0"></text>
</g>
<g>
<title>Cleaner.register (1 samples, 0.03%)</title><rect x="437.6" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.6" y="1150.0"></text>
</g>
<g>
<title>Thread.run (1 samples, 0.03%)</title><rect x="438.1" y="1299.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.1" y="1310.0"></text>
</g>
<g>
<title>351660147.run (1 samples, 0.03%)</title><rect x="438.1" y="1283.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="441.1" y="1294.0"></text>
</g>
<g>
<title>FileResolver.lambda$null$2 (1 samples, 0.03%)</title><rect x="438.1" y="1267.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.1" y="1278.0"></text>
</g>
<g>
<title>FileResolver.deleteCacheDir (1 samples, 0.03%)</title><rect x="438.1" y="1251.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.1" y="1262.0"></text>
</g>
<g>
<title>FileSystemImpl.delete (1 samples, 0.03%)</title><rect x="438.1" y="1235.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.1" y="1246.0"></text>
</g>
<g>
<title>Files.walkFileTree (1 samples, 0.03%)</title><rect x="438.1" y="1219.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.1" y="1230.0"></text>
</g>
<g>
<title>Files.walkFileTree (1 samples, 0.03%)</title><rect x="438.1" y="1203.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.1" y="1214.0"></text>
</g>
<g>
<title>FileTreeWalker.walk (1 samples, 0.03%)</title><rect x="438.1" y="1187.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="441.1" y="1198.0"></text>
</g>
<g>
<title>FileTreeWalker.visit (1 samples, 0.03%)</title><rect x="438.1" y="1171.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.1" y="1182.0"></text>
</g>
<g>
<title>Files.newDirectoryStream (1 samples, 0.03%)</title><rect x="438.1" y="1155.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.1" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="438.1" y="1139.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="441.1" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="438.1" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="441.1" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="438.1" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="441.1" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="438.1" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="441.1" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="438.1" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="441.1" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="438.1" y="1059.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="441.1" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="438.1" y="1043.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="441.1" y="1054.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="438.1" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="441.1" y="1038.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="438.1" y="1011.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="441.1" y="1022.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="438.1" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="441.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="438.1" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="441.1" y="990.0"></text>
</g>
<g>
<title>FastThreadLocalRunnable.run (121 samples, 3.39%)</title><rect x="438.5" y="1331.0" width="53.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.5" y="1342.0">FastT..</text>
</g>
<g>
<title>ThreadExecutorMap$2.run (120 samples, 3.36%)</title><rect x="438.5" y="1315.0" width="53.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.5" y="1326.0">Threa..</text>
</g>
<g>
<title>GlobalEventExecutor$TaskRunner.run (1 samples, 0.03%)</title><rect x="438.5" y="1299.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.5" y="1310.0"></text>
</g>
<g>
<title>DefaultPromise$1.run (1 samples, 0.03%)</title><rect x="438.5" y="1283.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.5" y="1294.0"></text>
</g>
<g>
<title>DefaultPromise.access$200 (1 samples, 0.03%)</title><rect x="438.5" y="1267.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.5" y="1278.0"></text>
</g>
<g>
<title>DefaultPromise.notifyListenersNow (1 samples, 0.03%)</title><rect x="438.5" y="1251.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.5" y="1262.0"></text>
</g>
<g>
<title>DefaultPromise.notifyListener0 (1 samples, 0.03%)</title><rect x="438.5" y="1235.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.5" y="1246.0"></text>
</g>
<g>
<title>984404042.operationComplete (1 samples, 0.03%)</title><rect x="438.5" y="1219.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="441.5" y="1230.0"></text>
</g>
<g>
<title>HttpServerImpl.lambda$actualClose$10 (1 samples, 0.03%)</title><rect x="438.5" y="1203.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.5" y="1214.0"></text>
</g>
<g>
<title>HttpServerImpl.executeCloseDone (1 samples, 0.03%)</title><rect x="438.5" y="1187.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.5" y="1198.0"></text>
</g>
<g>
<title>EventLoopContext.runOnContext (1 samples, 0.03%)</title><rect x="438.5" y="1171.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.5" y="1182.0"></text>
</g>
<g>
<title>ContextImpl.runOnContext (1 samples, 0.03%)</title><rect x="438.5" y="1155.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="441.5" y="1166.0"></text>
</g>
<g>
<title>EventLoopContext.executeAsync (1 samples, 0.03%)</title><rect x="438.5" y="1139.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="441.5" y="1150.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.execute (1 samples, 0.03%)</title><rect x="438.5" y="1123.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.5" y="1134.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor$4.run (119 samples, 3.33%)</title><rect x="438.9" y="1299.0" width="52.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.9" y="1310.0">Singl..</text>
</g>
<g>
<title>NioEventLoop.run (119 samples, 3.33%)</title><rect x="438.9" y="1283.0" width="52.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.9" y="1294.0">NioEv..</text>
</g>
<g>
<title>DefaultSelectStrategy.calculateStrategy (1 samples, 0.03%)</title><rect x="439.4" y="1267.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.4" y="1278.0"></text>
</g>
<g>
<title>NioEventLoop$1.get (1 samples, 0.03%)</title><rect x="439.4" y="1251.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.4" y="1262.0"></text>
</g>
<g>
<title>NioEventLoop.selectNow (1 samples, 0.03%)</title><rect x="439.4" y="1235.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.4" y="1246.0"></text>
</g>
<g>
<title>SelectedSelectionKeySetSelector.selectNow (1 samples, 0.03%)</title><rect x="439.4" y="1219.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.4" y="1230.0"></text>
</g>
<g>
<title>SelectorImpl.selectNow (1 samples, 0.03%)</title><rect x="439.4" y="1203.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.4" y="1214.0"></text>
</g>
<g>
<title>SelectorImpl.lockAndDoSelect (1 samples, 0.03%)</title><rect x="439.4" y="1187.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.4" y="1198.0"></text>
</g>
<g>
<title>KQueueSelectorImpl.doSelect (1 samples, 0.03%)</title><rect x="439.4" y="1171.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.4" y="1182.0"></text>
</g>
<g>
<title>KQueue.poll (1 samples, 0.03%)</title><rect x="439.4" y="1155.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.4" y="1166.0"></text>
</g>
<g>
<title>kevent (1 samples, 0.03%)</title><rect x="439.4" y="1139.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="442.4" y="1150.0"></text>
</g>
<g>
<title>NioEventLoop.processSelectedKeys (36 samples, 1.01%)</title><rect x="439.8" y="1267.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.8" y="1278.0"></text>
</g>
<g>
<title>NioEventLoop.processSelectedKeysOptimized (36 samples, 1.01%)</title><rect x="439.8" y="1251.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.8" y="1262.0"></text>
</g>
<g>
<title>NioEventLoop.processSelectedKey (36 samples, 1.01%)</title><rect x="439.8" y="1235.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.8" y="1246.0"></text>
</g>
<g>
<title>AbstractNioByteChannel$NioByteUnsafe.read (33 samples, 0.92%)</title><rect x="439.8" y="1219.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.8" y="1230.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.fireChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1203.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.8" y="1214.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1187.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="442.8" y="1198.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1171.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.8" y="1182.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$HeadContext.channelRead (28 samples, 0.78%)</title><rect x="439.8" y="1155.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.8" y="1166.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1139.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.8" y="1150.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1123.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.8" y="1134.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1107.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.8" y="1118.0"></text>
</g>
<g>
<title>IdleStateHandler.channelRead (28 samples, 0.78%)</title><rect x="439.8" y="1091.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.8" y="1102.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1075.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.8" y="1086.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1059.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.8" y="1070.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (28 samples, 0.78%)</title><rect x="439.8" y="1043.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.8" y="1054.0"></text>
</g>
<g>
<title>Http1xOrH2CHandler.channelRead (28 samples, 0.78%)</title><rect x="439.8" y="1027.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.8" y="1038.0"></text>
</g>
<g>
<title>AbstractByteBuf.getByte (1 samples, 0.03%)</title><rect x="439.8" y="1011.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.8" y="1022.0"></text>
</g>
<g>
<title>PooledUnsafeDirectByteBuf._getByte (1 samples, 0.03%)</title><rect x="439.8" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.8" y="1006.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="439.8" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="442.8" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="439.8" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="442.8" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="947.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="442.8" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="442.8" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="442.8" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="442.8" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="883.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="442.8" y="894.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="867.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="442.8" y="878.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="442.8" y="862.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="439.8" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="442.8" y="846.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="439.8" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="442.8" y="830.0"></text>
</g>
<g>
<title>Http1xOrH2CHandler.end (27 samples, 0.76%)</title><rect x="440.3" y="1011.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.3" y="1022.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (20 samples, 0.56%)</title><rect x="440.3" y="995.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.3" y="1006.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (20 samples, 0.56%)</title><rect x="440.3" y="979.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.3" y="990.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (20 samples, 0.56%)</title><rect x="440.3" y="963.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.3" y="974.0"></text>
</g>
<g>
<title>ByteToMessageDecoder.channelRead (20 samples, 0.56%)</title><rect x="440.3" y="947.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.3" y="958.0"></text>
</g>
<g>
<title>ByteToMessageDecoder.callDecode (6 samples, 0.17%)</title><rect x="440.3" y="931.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.3" y="942.0"></text>
</g>
<g>
<title>ByteToMessageDecoder.decodeRemovalReentryProtection (6 samples, 0.17%)</title><rect x="440.3" y="915.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.3" y="926.0"></text>
</g>
<g>
<title>HttpObjectDecoder.decode (6 samples, 0.17%)</title><rect x="440.3" y="899.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.3" y="910.0"></text>
</g>
<g>
<title>HttpObjectDecoder.readHeaders (4 samples, 0.11%)</title><rect x="440.3" y="883.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="443.3" y="894.0"></text>
</g>
<g>
<title>HttpObjectDecoder$HeaderParser.parse (1 samples, 0.03%)</title><rect x="440.3" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.3" y="878.0"></text>
</g>
<g>
<title>AbstractByteBuf.readerIndex (1 samples, 0.03%)</title><rect x="440.3" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="440.7" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="443.7" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="440.7" y="851.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.7" y="862.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="440.7" y="835.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.7" y="846.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="440.7" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="443.7" y="830.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="440.7" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.7" y="814.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="440.7" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.7" y="798.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="440.7" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.7" y="782.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="440.7" y="755.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.7" y="766.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="440.7" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.7" y="750.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="440.7" y="723.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.7" y="734.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="440.7" y="707.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="443.7" y="718.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="440.7" y="691.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="443.7" y="702.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="440.7" y="675.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="443.7" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="440.7" y="659.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="443.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::package_from_name(Symbol const*, Thread*) (1 samples, 0.03%)</title><rect x="440.7" y="643.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="443.7" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.03%)</title><rect x="440.7" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="443.7" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="440.7" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="443.7" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="440.7" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="443.7" y="606.0"></text>
</g>
<g>
<title>VertxHttpHeaders.add (2 samples, 0.06%)</title><rect x="441.2" y="867.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="444.2" y="878.0"></text>
</g>
<g>
<title>VertxHttpHeaders.add (2 samples, 0.06%)</title><rect x="441.2" y="851.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.2" y="862.0"></text>
</g>
<g>
<title>VertxHttpHeaders.add (2 samples, 0.06%)</title><rect x="441.2" y="835.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.2" y="846.0"></text>
</g>
<g>
<title>VertxHttpHeaders.add0 (2 samples, 0.06%)</title><rect x="441.2" y="819.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.2" y="830.0"></text>
</g>
<g>
<title>HttpUtils.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="441.2" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.2" y="814.0"></text>
</g>
<g>
<title>HttpContentEncoder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="441.2" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.2" y="798.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="441.2" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="444.2" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="441.2" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="444.2" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="739.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="444.2" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="723.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="444.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="444.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="444.2" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="444.2" y="686.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="444.2" y="670.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="444.2" y="654.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="441.2" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="444.2" y="638.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="441.2" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="444.2" y="622.0"></text>
</g>
<g>
<title>Rewriter::maybe_rewrite_ldc(unsigned char*, int, bool, bool) (1 samples, 0.03%)</title><rect x="441.2" y="595.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="444.2" y="606.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="441.6" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="444.6" y="814.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="441.6" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="444.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="444.6" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="444.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="444.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="444.6" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="444.6" y="718.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="444.6" y="702.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="441.6" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="444.6" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="441.6" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.6" y="670.0"></text>
</g>
<g>
<title>VertxHttpRequestDecoder.createMessage (2 samples, 0.06%)</title><rect x="442.0" y="883.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.0" y="894.0"></text>
</g>
<g>
<title>HttpMethod.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="442.0" y="867.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="445.0" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="442.0" y="851.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="445.0" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="442.0" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.0" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="442.0" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.0" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="442.0" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.0" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="442.0" y="787.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="445.0" y="798.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="442.0" y="771.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="445.0" y="782.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="442.0" y="755.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="445.0" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="442.0" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="445.0" y="750.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="442.0" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.0" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="442.0" y="707.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="445.0" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="442.0" y="691.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="445.0" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="442.0" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="445.0" y="686.0"></text>
</g>
<g>
<title>ConstantPool::release_tag_at_put(int, signed char) (1 samples, 0.03%)</title><rect x="442.0" y="659.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="445.0" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="442.5" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.5" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="442.5" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.5" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="442.5" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.5" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="442.5" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.5" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="442.5" y="803.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="445.5" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="442.5" y="787.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="445.5" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="771.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="445.5" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="445.5" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="445.5" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="445.5" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="445.5" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="445.5" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="442.5" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="445.5" y="686.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="442.5" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="445.5" y="670.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="442.5" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="445.5" y="654.0"></text>
</g>
<g>
<title>ByteToMessageDecoder.fireChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="931.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.9" y="942.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="915.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.9" y="926.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="899.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.9" y="910.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="883.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="445.9" y="894.0"></text>
</g>
<g>
<title>IdleStateHandler.channelRead (14 samples, 0.39%)</title><rect x="442.9" y="867.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.9" y="878.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="851.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.9" y="862.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="835.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.9" y="846.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (14 samples, 0.39%)</title><rect x="442.9" y="819.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.9" y="830.0"></text>
</g>
<g>
<title>Http1xUpgradeToH2CHandler.channelRead (14 samples, 0.39%)</title><rect x="442.9" y="803.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="445.9" y="814.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (7 samples, 0.20%)</title><rect x="442.9" y="787.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.9" y="798.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (7 samples, 0.20%)</title><rect x="442.9" y="771.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.9" y="782.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (7 samples, 0.20%)</title><rect x="442.9" y="755.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="445.9" y="766.0"></text>
</g>
<g>
<title>WebSocketServerExtensionHandler.channelRead (7 samples, 0.20%)</title><rect x="442.9" y="739.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.9" y="750.0"></text>
</g>
<g>
<title>ChannelInboundHandlerAdapter.channelRead (7 samples, 0.20%)</title><rect x="442.9" y="723.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.9" y="734.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (7 samples, 0.20%)</title><rect x="442.9" y="707.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.9" y="718.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (7 samples, 0.20%)</title><rect x="442.9" y="691.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.9" y="702.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (7 samples, 0.20%)</title><rect x="442.9" y="675.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.9" y="686.0"></text>
</g>
<g>
<title>VertxHandler.channelRead (7 samples, 0.20%)</title><rect x="442.9" y="659.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.9" y="670.0"></text>
</g>
<g>
<title>ContextImpl.executeFromIO (7 samples, 0.20%)</title><rect x="442.9" y="643.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.9" y="654.0"></text>
</g>
<g>
<title>EventLoopContext.execute (7 samples, 0.20%)</title><rect x="442.9" y="627.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.9" y="638.0"></text>
</g>
<g>
<title>ContextImpl.executeTask (7 samples, 0.20%)</title><rect x="442.9" y="611.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="622.0"></text>
</g>
<g>
<title>1292625676.handle (7 samples, 0.20%)</title><rect x="442.9" y="595.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="445.9" y="606.0"></text>
</g>
<g>
<title>Http1xServerConnection.handleMessage (7 samples, 0.20%)</title><rect x="442.9" y="579.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.9" y="590.0"></text>
</g>
<g>
<title>HttpServerRequestImpl.handleBegin (2 samples, 0.06%)</title><rect x="442.9" y="563.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="574.0"></text>
</g>
<g>
<title>HttpServerResponseImpl.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="442.9" y="547.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.9" y="558.0"></text>
</g>
<g>
<title>Buffer.buffer (1 samples, 0.03%)</title><rect x="442.9" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.9" y="542.0"></text>
</g>
<g>
<title>BufferFactoryImpl.buffer (1 samples, 0.03%)</title><rect x="442.9" y="515.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.9" y="526.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="442.9" y="499.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="510.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="442.9" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.9" y="494.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="442.9" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.9" y="478.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="442.9" y="451.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.9" y="462.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="442.9" y="435.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="445.9" y="446.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="442.9" y="419.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="445.9" y="430.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="403.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="445.9" y="414.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="387.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="445.9" y="398.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="445.9" y="382.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="445.9" y="366.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="339.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="445.9" y="350.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="323.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="445.9" y="334.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="307.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="445.9" y="318.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="291.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="445.9" y="302.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="275.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="445.9" y="286.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="442.9" y="259.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="445.9" y="270.0"></text>
</g>
<g>
<title>ClassLoaderMetaspace::allocate(unsigned long, Metaspace::MetadataType) (1 samples, 0.03%)</title><rect x="442.9" y="243.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="445.9" y="254.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="443.4" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.4" y="542.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="443.4" y="515.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="446.4" y="526.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="443.4" y="499.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.4" y="510.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="443.4" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.4" y="494.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="443.4" y="467.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="446.4" y="478.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="443.4" y="451.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="446.4" y="462.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="443.4" y="435.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="446.4" y="446.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="443.4" y="419.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="446.4" y="430.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="443.4" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="446.4" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="443.4" y="387.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="446.4" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::layout_fields(ConstantPool*, ClassFileParser::FieldAllocationCount const*, ClassFileParser::ClassAnnotationCollector const*, ClassFileParser::FieldLayoutInfo*, Thread*) (1 samples, 0.03%)</title><rect x="443.4" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="446.4" y="382.0"></text>
</g>
<g>
<title>AccessFlags::set_flags(int) (1 samples, 0.03%)</title><rect x="443.4" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="446.4" y="366.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="443.8" y="563.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="446.8" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="443.8" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="446.8" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="443.8" y="531.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="446.8" y="542.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="443.8" y="515.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="446.8" y="526.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="443.8" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="446.8" y="510.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="443.8" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="446.8" y="494.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="443.8" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="446.8" y="478.0"></text>
</g>
<g>
<title>StackMapFrame::frame_in_exception_handler(unsigned char) (1 samples, 0.03%)</title><rect x="443.8" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="446.8" y="462.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="443.8" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="446.8" y="446.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="443.8" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="446.8" y="430.0"></text>
</g>
<g>
<title>WebSocketRequestHandler.handle (4 samples, 0.11%)</title><rect x="444.2" y="563.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.2" y="574.0"></text>
</g>
<g>
<title>WebSocketRequestHandler.handle (4 samples, 0.11%)</title><rect x="444.2" y="547.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.2" y="558.0"></text>
</g>
<g>
<title>VertxHttpRecorder$1.handle (4 samples, 0.11%)</title><rect x="444.2" y="531.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="447.2" y="542.0"></text>
</g>
<g>
<title>VertxHttpRecorder$1.handle (4 samples, 0.11%)</title><rect x="444.2" y="515.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.2" y="526.0"></text>
</g>
<g>
<title>VertxHttpRecorder$9.handle (4 samples, 0.11%)</title><rect x="444.2" y="499.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.2" y="510.0"></text>
</g>
<g>
<title>VertxHttpRecorder$9.handle (4 samples, 0.11%)</title><rect x="444.2" y="483.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.2" y="494.0"></text>
</g>
<g>
<title>RouterImpl.handle (4 samples, 0.11%)</title><rect x="444.2" y="467.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.2" y="478.0"></text>
</g>
<g>
<title>RouterImpl.handle (4 samples, 0.11%)</title><rect x="444.2" y="451.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="447.2" y="462.0"></text>
</g>
<g>
<title>RoutingContextImpl.&lt;init&gt; (2 samples, 0.06%)</title><rect x="444.2" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.2" y="446.0"></text>
</g>
<g>
<title>RoutingContextImpl.fillParsedHeaders (2 samples, 0.06%)</title><rect x="444.2" y="419.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="447.2" y="430.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="444.2" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.2" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="444.2" y="387.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="447.2" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="444.2" y="371.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="447.2" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="444.2" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="447.2" y="366.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="444.2" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="447.2" y="350.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="444.2" y="323.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="447.2" y="334.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="444.2" y="307.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="447.2" y="318.0"></text>
</g>
<g>
<title>AdapterHandlerTable::lookup(int, BasicType*) (1 samples, 0.03%)</title><rect x="444.2" y="291.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="447.2" y="302.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="444.7" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="447.7" y="414.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="444.7" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.7" y="398.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="444.7" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.7" y="382.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="444.7" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.7" y="366.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="444.7" y="339.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="447.7" y="350.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="444.7" y="323.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="447.7" y="334.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="307.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="447.7" y="318.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="447.7" y="302.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="447.7" y="286.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="447.7" y="270.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="447.7" y="254.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="227.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="447.7" y="238.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="444.7" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="447.7" y="222.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="444.7" y="195.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="447.7" y="206.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="444.7" y="179.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="447.7" y="190.0"></text>
</g>
<g>
<title>RoutingContextImpl.next (1 samples, 0.03%)</title><rect x="445.1" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.1" y="446.0"></text>
</g>
<g>
<title>RoutingContextImplBase.iterateNext (1 samples, 0.03%)</title><rect x="445.1" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.1" y="430.0"></text>
</g>
<g>
<title>RouteState.handleContext (1 samples, 0.03%)</title><rect x="445.1" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="448.1" y="414.0"></text>
</g>
<g>
<title>VertxHttpRecorder$4.handle (1 samples, 0.03%)</title><rect x="445.1" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.1" y="398.0"></text>
</g>
<g>
<title>VertxHttpRecorder$4.handle (1 samples, 0.03%)</title><rect x="445.1" y="371.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.1" y="382.0"></text>
</g>
<g>
<title>RoutingContextImpl.next (1 samples, 0.03%)</title><rect x="445.1" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.1" y="366.0"></text>
</g>
<g>
<title>RoutingContextImplBase.iterateNext (1 samples, 0.03%)</title><rect x="445.1" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.1" y="350.0"></text>
</g>
<g>
<title>RouteState.handleContext (1 samples, 0.03%)</title><rect x="445.1" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.1" y="334.0"></text>
</g>
<g>
<title>VertxRequestHandler.handle (1 samples, 0.03%)</title><rect x="445.1" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.1" y="318.0"></text>
</g>
<g>
<title>VertxRequestHandler.handle (1 samples, 0.03%)</title><rect x="445.1" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.1" y="302.0"></text>
</g>
<g>
<title>VertxInputStream.&lt;init&gt; (1 samples, 0.03%)</title><rect x="445.1" y="275.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.1" y="286.0"></text>
</g>
<g>
<title>VertxInputStream$VertxBlockingInput.&lt;init&gt; (1 samples, 0.03%)</title><rect x="445.1" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.1" y="270.0"></text>
</g>
<g>
<title>VertxInputStream$VertxBlockingInput$2.&lt;init&gt; (1 samples, 0.03%)</title><rect x="445.1" y="243.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.1" y="254.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="445.1" y="227.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="448.1" y="238.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="445.1" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="448.1" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="445.1" y="195.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="448.1" y="206.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="445.1" y="179.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="448.1" y="190.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="445.1" y="163.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="448.1" y="174.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="445.1" y="147.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="448.1" y="158.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="445.6" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.6" y="446.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="445.6" y="419.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.6" y="430.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="445.6" y="403.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.6" y="414.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="445.6" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.6" y="398.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="445.6" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.6" y="382.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="445.6" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.6" y="366.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="445.6" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="448.6" y="350.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="445.6" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.6" y="334.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="445.6" y="307.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="448.6" y="318.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="445.6" y="291.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="448.6" y="302.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="275.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="448.6" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="448.6" y="270.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="448.6" y="254.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="448.6" y="238.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.6" y="222.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.6" y="206.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="179.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="448.6" y="190.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="445.6" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.6" y="174.0"></text>
</g>
<g>
<title>Hashtable&lt;Symbol*, (MemoryType)9&gt;::new_entry(unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="445.6" y="147.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="448.6" y="158.0"></text>
</g>
<g>
<title>Http2CodecUtil.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="446.0" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.0" y="798.0"></text>
</g>
<g>
<title>UnreleasableByteBuf.asReadOnly (1 samples, 0.03%)</title><rect x="446.0" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.0" y="782.0"></text>
</g>
<g>
<title>AbstractByteBuf.asReadOnly (1 samples, 0.03%)</title><rect x="446.0" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.0" y="766.0"></text>
</g>
<g>
<title>Unpooled.unmodifiableBuffer (1 samples, 0.03%)</title><rect x="446.0" y="739.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.0" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="446.0" y="723.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="449.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="446.0" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="449.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="446.0" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="449.0" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="446.0" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="449.0" y="686.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="446.0" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="449.0" y="670.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="446.0" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="449.0" y="654.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="446.0" y="627.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.0" y="638.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="446.0" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="449.0" y="622.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.configureHttp1 (6 samples, 0.17%)</title><rect x="446.5" y="787.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.5" y="798.0"></text>
</g>
<g>
<title>ContextImpl.executeFromIO (2 samples, 0.06%)</title><rect x="446.5" y="771.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.5" y="782.0"></text>
</g>
<g>
<title>EventLoopContext.execute (2 samples, 0.06%)</title><rect x="446.5" y="755.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.5" y="766.0"></text>
</g>
<g>
<title>ContextImpl.executeTask (2 samples, 0.06%)</title><rect x="446.5" y="739.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.5" y="750.0"></text>
</g>
<g>
<title>HttpHandlers.handle (2 samples, 0.06%)</title><rect x="446.5" y="723.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.5" y="734.0"></text>
</g>
<g>
<title>HttpHandlers.handle (2 samples, 0.06%)</title><rect x="446.5" y="707.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.5" y="718.0"></text>
</g>
<g>
<title>HttpHandlers.initializeWebsocketExtensions (2 samples, 0.06%)</title><rect x="446.5" y="691.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.5" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="446.5" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="449.5" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="446.5" y="659.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="449.5" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="446.5" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="449.5" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="446.5" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="449.5" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="446.5" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="449.5" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="446.5" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="449.5" y="606.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="446.5" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="449.5" y="590.0"></text>
</g>
<g>
<title>jvmti_GetClassMethods(_jvmtiEnv*, _jclass*, int*, _jmethodID***) (1 samples, 0.03%)</title><rect x="446.5" y="563.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="449.5" y="574.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="446.9" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.9" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="446.9" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.9" y="670.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="446.9" y="643.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.9" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="446.9" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.9" y="638.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="446.9" y="611.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.9" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="446.9" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.9" y="606.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="446.9" y="579.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.9" y="590.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="446.9" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.9" y="574.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="446.9" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.9" y="558.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="446.9" y="531.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.9" y="542.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="446.9" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.9" y="526.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="446.9" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.9" y="510.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="446.9" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.9" y="494.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="446.9" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.9" y="478.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="446.9" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.9" y="462.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="446.9" y="435.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="449.9" y="446.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (3 samples, 0.08%)</title><rect x="447.3" y="771.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.3" y="782.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (3 samples, 0.08%)</title><rect x="447.3" y="755.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.3" y="766.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.callHandlerAdded0 (3 samples, 0.08%)</title><rect x="447.3" y="739.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.3" y="750.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.callHandlerAdded (3 samples, 0.08%)</title><rect x="447.3" y="723.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.3" y="734.0"></text>
</g>
<g>
<title>VertxHandler.handlerAdded (3 samples, 0.08%)</title><rect x="447.3" y="707.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="450.3" y="718.0"></text>
</g>
<g>
<title>691883688.apply (3 samples, 0.08%)</title><rect x="447.3" y="691.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="450.3" y="702.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.lambda$configureHttp1$3 (3 samples, 0.08%)</title><rect x="447.3" y="675.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.3" y="686.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="447.3" y="659.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="450.3" y="670.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="447.3" y="643.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.3" y="654.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="447.3" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.3" y="638.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="447.3" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="450.3" y="622.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="447.3" y="595.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.3" y="606.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="447.3" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.3" y="590.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="447.3" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.3" y="574.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="447.3" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="450.3" y="558.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="447.3" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.3" y="542.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="447.3" y="515.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.3" y="526.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="447.3" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.3" y="510.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="447.3" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.3" y="494.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="447.3" y="467.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.3" y="478.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="447.3" y="451.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.3" y="462.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="447.3" y="435.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="450.3" y="446.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="447.3" y="419.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="450.3" y="430.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="447.3" y="403.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="450.3" y="414.0"></text>
</g>
<g>
<title>ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="447.8" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.8" y="638.0"></text>
</g>
<g>
<title>ConcurrentHashMap.tabAt (1 samples, 0.03%)</title><rect x="447.8" y="611.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.8" y="622.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="448.2" y="627.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.2" y="638.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="448.2" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="451.2" y="622.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="448.2" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.2" y="606.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="448.2" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="451.2" y="590.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="448.2" y="563.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="451.2" y="574.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="448.2" y="547.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="451.2" y="558.0"></text>
</g>
<g>
<title>inflateCodesUsed (1 samples, 0.03%)</title><rect x="448.2" y="531.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="451.2" y="542.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="448.7" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.7" y="782.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="448.7" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.7" y="766.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="448.7" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="451.7" y="750.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.03%)</title><rect x="448.7" y="723.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.7" y="734.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="448.7" y="707.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.7" y="718.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.checkMethod (1 samples, 0.03%)</title><rect x="448.7" y="691.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.7" y="702.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.checkAccess (1 samples, 0.03%)</title><rect x="448.7" y="675.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.7" y="686.0"></text>
</g>
<g>
<title>Modifier.isProtected (1 samples, 0.03%)</title><rect x="448.7" y="659.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.7" y="670.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer$1.configure (7 samples, 0.20%)</title><rect x="449.1" y="995.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.1" y="1006.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.access$100 (7 samples, 0.20%)</title><rect x="449.1" y="979.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.1" y="990.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.handleHttp1 (7 samples, 0.20%)</title><rect x="449.1" y="963.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="452.1" y="974.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.configureHttp1OrH2C (7 samples, 0.20%)</title><rect x="449.1" y="947.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.1" y="958.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="449.1" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.1" y="942.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="449.1" y="915.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.1" y="926.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.callHandlerAdded0 (1 samples, 0.03%)</title><rect x="449.1" y="899.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.1" y="910.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.callHandlerAdded (1 samples, 0.03%)</title><rect x="449.1" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.1" y="894.0"></text>
</g>
<g>
<title>VertxHttpResponseEncoder.handlerAdded (1 samples, 0.03%)</title><rect x="449.1" y="867.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.1" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="449.1" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="452.1" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="449.1" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="452.1" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="449.1" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="452.1" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="449.1" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="452.1" y="814.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="449.1" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="452.1" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="449.1" y="771.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="452.1" y="782.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="449.1" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="452.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="449.1" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="452.1" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="449.1" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="452.1" y="734.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="449.1" y="707.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="452.1" y="718.0"></text>
</g>
<g>
<title>HttpObjectEncoder.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="449.6" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.6" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="449.6" y="915.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.6" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="449.6" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.6" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="449.6" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.6" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="449.6" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.6" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="449.6" y="851.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="452.6" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="449.6" y="835.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="452.6" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="819.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="452.6" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="452.6" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="452.6" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="452.6" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="452.6" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="452.6" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="449.6" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="452.6" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="449.6" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="452.6" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="449.6" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="452.6" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="450.0" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="915.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="453.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="899.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="453.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="883.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="453.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="867.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="453.0" y="878.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="453.0" y="862.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="453.0" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.0" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_stackmap_table(unsigned short, unsigned short, StackMapFrame*, StackMapTable*, bool, Thread*) (1 samples, 0.03%)</title><rect x="450.0" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="453.0" y="814.0"></text>
</g>
<g>
<title>StackMapTable::match_stackmap(StackMapFrame*, int, int, bool, bool, ErrorContext*, Thread*) const (1 samples, 0.03%)</title><rect x="450.0" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="453.0" y="798.0"></text>
</g>
<g>
<title>StackMapFrame::copy_locals(StackMapFrame const*) (1 samples, 0.03%)</title><rect x="450.0" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="453.0" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="450.4" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.4" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="450.4" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.4" y="926.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="450.4" y="899.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="453.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="450.4" y="883.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.4" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="450.4" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.4" y="878.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="450.4" y="851.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="453.4" y="862.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="450.4" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.4" y="846.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="450.4" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.4" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="450.4" y="803.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="453.4" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="450.4" y="787.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="453.4" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="771.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="453.4" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.4" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="453.4" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="453.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="453.4" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="691.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="453.4" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="453.4" y="686.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="453.4" y="670.0"></text>
</g>
<g>
<title>ConstMethod::allocate(ClassLoaderData*, int, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="453.4" y="654.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="450.4" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="453.4" y="638.0"></text>
</g>
<g>
<title>metaspace::SmallBlocks::total_size() const (1 samples, 0.03%)</title><rect x="450.4" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="453.4" y="622.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="450.9" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.9" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.close (1 samples, 0.03%)</title><rect x="450.9" y="883.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.9" y="894.0"></text>
</g>
<g>
<title>PhantomCleanable.clean (1 samples, 0.03%)</title><rect x="450.9" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.9" y="878.0"></text>
</g>
<g>
<title>PhantomCleanable.remove (1 samples, 0.03%)</title><rect x="450.9" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.9" y="862.0"></text>
</g>
<g>
<title>VertxHttpRequestDecoder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="451.3" y="931.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.3" y="942.0"></text>
</g>
<g>
<title>HttpRequestDecoder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="451.3" y="915.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.3" y="926.0"></text>
</g>
<g>
<title>HttpObjectDecoder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="451.3" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="454.3" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="451.3" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.3" y="894.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="451.3" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.3" y="878.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="451.3" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="454.3" y="862.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="451.3" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.3" y="846.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="451.3" y="819.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="454.3" y="830.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="451.3" y="803.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.3" y="814.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="451.3" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.3" y="798.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="451.3" y="771.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.3" y="782.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="451.3" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.3" y="766.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="451.3" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.3" y="750.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="451.3" y="723.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.3" y="734.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="451.3" y="707.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="454.3" y="718.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="451.3" y="691.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="454.3" y="702.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="451.8" y="915.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.8" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="451.8" y="899.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.8" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="451.8" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.8" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="451.8" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.8" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="451.8" y="851.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="454.8" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="451.8" y="835.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="454.8" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="819.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="454.8" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="454.8" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="454.8" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="771.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="454.8" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="454.8" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.8" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="451.8" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="454.8" y="734.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="451.8" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="454.8" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="451.8" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="454.8" y="702.0"></text>
</g>
<g>
<title>DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (5 samples, 0.14%)</title><rect x="452.2" y="1203.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.2" y="1214.0"></text>
</g>
<g>
<title>PartialPooledByteBufAllocator.ioBuffer (5 samples, 0.14%)</title><rect x="452.2" y="1187.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.2" y="1198.0"></text>
</g>
<g>
<title>AbstractByteBufAllocator.directBuffer (5 samples, 0.14%)</title><rect x="452.2" y="1171.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.2" y="1182.0"></text>
</g>
<g>
<title>AbstractByteBufAllocator.directBuffer (5 samples, 0.14%)</title><rect x="452.2" y="1155.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.2" y="1166.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.newDirectBuffer (5 samples, 0.14%)</title><rect x="452.2" y="1139.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.2" y="1150.0"></text>
</g>
<g>
<title>FastThreadLocal.get (2 samples, 0.06%)</title><rect x="452.2" y="1123.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.2" y="1134.0"></text>
</g>
<g>
<title>FastThreadLocal.initialize (2 samples, 0.06%)</title><rect x="452.2" y="1107.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.2" y="1118.0"></text>
</g>
<g>
<title>PooledByteBufAllocator$PoolThreadLocalCache.initialValue (2 samples, 0.06%)</title><rect x="452.2" y="1091.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.2" y="1102.0"></text>
</g>
<g>
<title>PooledByteBufAllocator$PoolThreadLocalCache.initialValue (2 samples, 0.06%)</title><rect x="452.2" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.2" y="1086.0"></text>
</g>
<g>
<title>PoolThreadCache.&lt;init&gt; (2 samples, 0.06%)</title><rect x="452.2" y="1059.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.2" y="1070.0"></text>
</g>
<g>
<title>PoolThreadCache.createSubPageCaches (2 samples, 0.06%)</title><rect x="452.2" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.2" y="1054.0"></text>
</g>
<g>
<title>PoolThreadCache$SubPageMemoryRegionCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="1027.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.2" y="1038.0"></text>
</g>
<g>
<title>PoolThreadCache$MemoryRegionCache.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="1011.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.2" y="1022.0"></text>
</g>
<g>
<title>PlatformDependent.newFixedMpscQueue (1 samples, 0.03%)</title><rect x="452.2" y="995.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.2" y="1006.0"></text>
</g>
<g>
<title>MpscArrayQueue.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="979.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.2" y="990.0"></text>
</g>
<g>
<title>MpscArrayQueueL3Pad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.2" y="974.0"></text>
</g>
<g>
<title>MpscArrayQueueConsumerIndexField.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="455.2" y="958.0"></text>
</g>
<g>
<title>MpscArrayQueueL2Pad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="931.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.2" y="942.0"></text>
</g>
<g>
<title>MpscArrayQueueProducerLimitField.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="915.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.2" y="926.0"></text>
</g>
<g>
<title>MpscArrayQueueMidPad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="899.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.2" y="910.0"></text>
</g>
<g>
<title>MpscArrayQueueProducerIndexField.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.2" y="894.0"></text>
</g>
<g>
<title>MpscArrayQueueL1Pad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.2" y="878.0"></text>
</g>
<g>
<title>ConcurrentCircularArrayQueue.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="851.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.2" y="862.0"></text>
</g>
<g>
<title>ConcurrentCircularArrayQueueL0Pad.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.2" y="846.0"></text>
</g>
<g>
<title>AbstractQueue.&lt;init&gt; (1 samples, 0.03%)</title><rect x="452.2" y="819.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.2" y="830.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="452.6" y="1027.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.6" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="452.6" y="1011.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.6" y="1022.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="452.6" y="995.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.6" y="1006.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="452.6" y="979.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="455.6" y="990.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="452.6" y="963.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.6" y="974.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="452.6" y="947.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.6" y="958.0"></text>
</g>
<g>
<title>ZipFile$Source.readAt (1 samples, 0.03%)</title><rect x="452.6" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="455.6" y="942.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="452.6" y="915.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.6" y="926.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="452.6" y="899.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.6" y="910.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="452.6" y="883.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="455.6" y="894.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="452.6" y="867.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="455.6" y="878.0"></text>
</g>
<g>
<title>PoolArena.allocate (3 samples, 0.08%)</title><rect x="453.1" y="1123.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="456.1" y="1134.0"></text>
</g>
<g>
<title>PoolArena$DirectArena.newByteBuf (2 samples, 0.06%)</title><rect x="453.1" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="456.1" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="453.1" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="456.1" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="453.1" y="1075.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="456.1" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="1059.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="456.1" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="1043.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="456.1" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="456.1" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="1011.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="456.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="995.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="456.1" y="1006.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="979.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="456.1" y="990.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="456.1" y="974.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="453.1" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="456.1" y="958.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_method_signature(Symbol*) (1 samples, 0.03%)</title><rect x="453.1" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="456.1" y="942.0"></text>
</g>
<g>
<title>SignatureVerifier::is_valid_type(char const*, long) (1 samples, 0.03%)</title><rect x="453.1" y="915.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="456.1" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="453.5" y="1091.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.5" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="453.5" y="1075.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="456.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="453.5" y="1059.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.5" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="453.5" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="456.5" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="453.5" y="1027.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="456.5" y="1038.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="453.5" y="1011.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="456.5" y="1022.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="995.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="456.5" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="456.5" y="990.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="456.5" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="456.5" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="456.5" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="456.5" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="453.5" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="456.5" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="453.5" y="883.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="456.5" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="453.5" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="456.5" y="878.0"></text>
</g>
<g>
<title>PoolArena.allocate (1 samples, 0.03%)</title><rect x="454.0" y="1107.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.0" y="1118.0"></text>
</g>
<g>
<title>PoolArena.normalizeCapacity (1 samples, 0.03%)</title><rect x="454.0" y="1091.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.0" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="454.0" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="457.0" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="454.0" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="457.0" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="454.0" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="457.0" y="1054.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="454.0" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="457.0" y="1038.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.03%)</title><rect x="454.0" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="457.0" y="1022.0"></text>
</g>
<g>
<title>AbstractNioMessageChannel$NioMessageUnsafe.read (3 samples, 0.08%)</title><rect x="454.4" y="1219.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.4" y="1230.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.fireChannelRead (1 samples, 0.03%)</title><rect x="454.4" y="1203.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.4" y="1214.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.03%)</title><rect x="454.4" y="1187.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.4" y="1198.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.03%)</title><rect x="454.4" y="1171.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.4" y="1182.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$HeadContext.channelRead (1 samples, 0.03%)</title><rect x="454.4" y="1155.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.4" y="1166.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelRead (1 samples, 0.03%)</title><rect x="454.4" y="1139.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.4" y="1150.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.03%)</title><rect x="454.4" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.4" y="1134.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.03%)</title><rect x="454.4" y="1107.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.4" y="1118.0"></text>
</g>
<g>
<title>ServerBootstrap$ServerBootstrapAcceptor.channelRead (1 samples, 0.03%)</title><rect x="454.4" y="1091.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.4" y="1102.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="454.4" y="1075.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.4" y="1086.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="454.4" y="1059.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.4" y="1070.0"></text>
</g>
<g>
<title>NioServerSocketChannel.doReadMessages (2 samples, 0.06%)</title><rect x="454.9" y="1203.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.9" y="1214.0"></text>
</g>
<g>
<title>NioSocketChannel.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1187.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.9" y="1198.0"></text>
</g>
<g>
<title>AbstractNioByteChannel.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1171.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="457.9" y="1182.0"></text>
</g>
<g>
<title>AbstractNioChannel.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1155.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.9" y="1166.0"></text>
</g>
<g>
<title>AbstractChannel.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1139.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.9" y="1150.0"></text>
</g>
<g>
<title>AbstractChannel.newChannelPipeline (1 samples, 0.03%)</title><rect x="454.9" y="1123.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.9" y="1134.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1107.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.9" y="1118.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$TailContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1091.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.9" y="1102.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="454.9" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.9" y="1086.0"></text>
</g>
<g>
<title>ChannelHandlerMask.mask (1 samples, 0.03%)</title><rect x="454.9" y="1059.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.9" y="1070.0"></text>
</g>
<g>
<title>ChannelHandlerMask.mask0 (1 samples, 0.03%)</title><rect x="454.9" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.9" y="1054.0"></text>
</g>
<g>
<title>ChannelHandlerMask.isSkippable (1 samples, 0.03%)</title><rect x="454.9" y="1027.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.9" y="1038.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="454.9" y="1011.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.9" y="1022.0"></text>
</g>
<g>
<title>ChannelHandlerMask$2.run (1 samples, 0.03%)</title><rect x="454.9" y="995.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.9" y="1006.0"></text>
</g>
<g>
<title>ChannelHandlerMask$2.run (1 samples, 0.03%)</title><rect x="454.9" y="979.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.9" y="990.0"></text>
</g>
<g>
<title>Class.getMethod (1 samples, 0.03%)</title><rect x="454.9" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="457.9" y="974.0"></text>
</g>
<g>
<title>SocketUtils.accept (1 samples, 0.03%)</title><rect x="455.3" y="1187.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.3" y="1198.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="455.3" y="1171.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.3" y="1182.0"></text>
</g>
<g>
<title>SocketUtils$5.run (1 samples, 0.03%)</title><rect x="455.3" y="1155.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.3" y="1166.0"></text>
</g>
<g>
<title>SocketUtils$5.run (1 samples, 0.03%)</title><rect x="455.3" y="1139.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="458.3" y="1150.0"></text>
</g>
<g>
<title>ServerSocketChannelImpl.accept (1 samples, 0.03%)</title><rect x="455.3" y="1123.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.3" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="455.3" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="458.3" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="455.3" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="458.3" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="455.3" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="458.3" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="455.3" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.3" y="1070.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="455.3" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.3" y="1054.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="455.3" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="458.3" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*) (1 samples, 0.03%)</title><rect x="455.3" y="1011.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="458.3" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="455.3" y="995.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="458.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="455.3" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="458.3" y="990.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="455.3" y="963.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="458.3" y="974.0"></text>
</g>
<g>
<title>NioEventLoop.select (4 samples, 0.11%)</title><rect x="455.7" y="1267.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="458.7" y="1278.0"></text>
</g>
<g>
<title>SelectedSelectionKeySetSelector.select (4 samples, 0.11%)</title><rect x="455.7" y="1251.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.7" y="1262.0"></text>
</g>
<g>
<title>SelectorImpl.select (4 samples, 0.11%)</title><rect x="455.7" y="1235.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.7" y="1246.0"></text>
</g>
<g>
<title>SelectorImpl.lockAndDoSelect (4 samples, 0.11%)</title><rect x="455.7" y="1219.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.7" y="1230.0"></text>
</g>
<g>
<title>KQueueSelectorImpl.doSelect (4 samples, 0.11%)</title><rect x="455.7" y="1203.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.7" y="1214.0"></text>
</g>
<g>
<title>KQueue.poll (1 samples, 0.03%)</title><rect x="455.7" y="1187.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.7" y="1198.0"></text>
</g>
<g>
<title>KQueueSelectorImpl.processEvents (3 samples, 0.08%)</title><rect x="456.2" y="1187.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.2" y="1198.0"></text>
</g>
<g>
<title>KQueueSelectorImpl.clearInterrupt (3 samples, 0.08%)</title><rect x="456.2" y="1171.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.2" y="1182.0"></text>
</g>
<g>
<title>IOUtil.drain (3 samples, 0.08%)</title><rect x="456.2" y="1155.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="459.2" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.findNative (1 samples, 0.03%)</title><rect x="456.2" y="1139.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.2" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (2 samples, 0.06%)</title><rect x="456.6" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="459.6" y="1150.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.06%)</title><rect x="456.6" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="459.6" y="1134.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.06%)</title><rect x="456.6" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="459.6" y="1118.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.06%)</title><rect x="456.6" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="459.6" y="1102.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (2 samples, 0.06%)</title><rect x="456.6" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="459.6" y="1086.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="456.6" y="1059.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="459.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="456.6" y="1043.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="459.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="456.6" y="1027.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="459.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="456.6" y="1011.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="459.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="456.6" y="995.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="459.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="456.6" y="979.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="459.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="456.6" y="963.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="459.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="457.1" y="947.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="460.1" y="958.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.runAllTasks (76 samples, 2.13%)</title><rect x="457.5" y="1267.0" width="33.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.5" y="1278.0">Si..</text>
</g>
<g>
<title>AbstractEventExecutor.safeExecute (73 samples, 2.04%)</title><rect x="457.5" y="1251.0" width="32.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.5" y="1262.0">Ab..</text>
</g>
<g>
<title>1106510750.run (69 samples, 1.93%)</title><rect x="457.5" y="1235.0" width="30.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="460.5" y="1246.0">11..</text>
</g>
<g>
<title>EventLoopContext.lambda$executeAsync$0 (69 samples, 1.93%)</title><rect x="457.5" y="1219.0" width="30.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.5" y="1230.0">Ev..</text>
</g>
<g>
<title>ContextImpl.executeTask (69 samples, 1.93%)</title><rect x="457.5" y="1203.0" width="30.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.5" y="1214.0">Co..</text>
</g>
<g>
<title>1190857779.handle (33 samples, 0.92%)</title><rect x="457.5" y="1187.0" width="14.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="460.5" y="1198.0"></text>
</g>
<g>
<title>DeploymentManager.lambda$doDeploy$9 (33 samples, 0.92%)</title><rect x="457.5" y="1171.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.5" y="1182.0"></text>
</g>
<g>
<title>Verticle.start (33 samples, 0.92%)</title><rect x="457.5" y="1155.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.5" y="1166.0"></text>
</g>
<g>
<title>VertxHttpRecorder$WebDeploymentVerticle.start (33 samples, 0.92%)</title><rect x="457.5" y="1139.0" width="14.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.5" y="1150.0"></text>
</g>
<g>
<title>VertxHttpRecorder$WebDeploymentVerticle.setupTcpHttpServer (26 samples, 0.73%)</title><rect x="457.5" y="1123.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.5" y="1134.0"></text>
</g>
<g>
<title>HttpServerImpl.listen (21 samples, 0.59%)</title><rect x="457.5" y="1107.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="460.5" y="1118.0"></text>
</g>
<g>
<title>HttpServerImpl.listen (21 samples, 0.59%)</title><rect x="457.5" y="1091.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.5" y="1102.0"></text>
</g>
<g>
<title>AsyncResolveConnectHelper.doBind (5 samples, 0.14%)</title><rect x="457.5" y="1075.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.5" y="1086.0"></text>
</g>
<g>
<title>Transport.serverChannelFactory (3 samples, 0.08%)</title><rect x="457.5" y="1059.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.5" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="457.5" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="460.5" y="1054.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="457.5" y="1027.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="460.5" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="1011.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="460.5" y="1022.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at(int, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="460.5" y="1006.0"></text>
</g>
<g>
<title>ConstantPool::resolve_bootstrap_specifier_at_impl(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="460.5" y="990.0"></text>
</g>
<g>
<title>ConstantPool::copy_bootstrap_arguments_at_impl(constantPoolHandle const&amp;, int, int, int, objArrayHandle, int, bool, Handle, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="460.5" y="974.0"></text>
</g>
<g>
<title>ConstantPool::resolve_possibly_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="460.5" y="958.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="931.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="460.5" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::link_method_handle_constant(Klass*, int, Klass*, Symbol*, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="460.5" y="926.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="899.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="460.5" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="460.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="460.5" y="878.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="457.5" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="460.5" y="862.0"></text>
</g>
<g>
<title>klassVtable::fill_in_mirandas(int) (1 samples, 0.03%)</title><rect x="457.5" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="460.5" y="846.0"></text>
</g>
<g>
<title>klassVtable::get_mirandas(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Klass*&gt;*, bool) (1 samples, 0.03%)</title><rect x="457.5" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="460.5" y="830.0"></text>
</g>
<g>
<title>klassVtable::add_new_mirandas_to_lists(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="457.5" y="803.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="460.5" y="814.0"></text>
</g>
<g>
<title>klassVtable::is_miranda(Method*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Klass const*, bool) (1 samples, 0.03%)</title><rect x="457.5" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="460.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="457.5" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="460.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="457.5" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="460.5" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="458.0" y="1043.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="461.0" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="458.0" y="1027.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="458.0" y="1011.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.0" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="458.0" y="995.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.0" y="1006.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="458.0" y="979.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="461.0" y="990.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="458.0" y="963.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="461.0" y="974.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="947.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="461.0" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="931.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="461.0" y="942.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="915.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.0" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="461.0" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.0" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="461.0" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="461.0" y="862.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="835.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.0" y="846.0"></text>
</g>
<g>
<title>SymbolTable::basic_add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.03%)</title><rect x="458.0" y="819.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="461.0" y="830.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="458.0" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.0" y="814.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="458.0" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="461.0" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="458.4" y="979.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.4" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="458.4" y="963.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.4" y="974.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="458.4" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.4" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="458.4" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="461.4" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="458.4" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.4" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="458.4" y="899.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="458.4" y="883.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="458.4" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="461.4" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="458.4" y="851.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="461.4" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="458.4" y="835.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="461.4" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="458.4" y="819.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="461.4" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="458.4" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="461.4" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="458.4" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="461.4" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="458.4" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="461.4" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="458.4" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="461.4" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="458.4" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="461.4" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="458.4" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="461.4" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="458.4" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="461.4" y="718.0"></text>
</g>
<g>
<title>VertxImpl.resolveAddress (2 samples, 0.06%)</title><rect x="458.8" y="1059.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.8" y="1070.0"></text>
</g>
<g>
<title>AddressResolver.resolveHostname (2 samples, 0.06%)</title><rect x="458.8" y="1043.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="461.8" y="1054.0"></text>
</g>
<g>
<title>AbstractAddressResolver.resolve (1 samples, 0.03%)</title><rect x="458.8" y="1027.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.8" y="1038.0"></text>
</g>
<g>
<title>InetSocketAddressResolver.doResolve (1 samples, 0.03%)</title><rect x="458.8" y="1011.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.8" y="1022.0"></text>
</g>
<g>
<title>InetSocketAddressResolver.doResolve (1 samples, 0.03%)</title><rect x="458.8" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.8" y="1006.0"></text>
</g>
<g>
<title>SimpleNameResolver.resolve (1 samples, 0.03%)</title><rect x="458.8" y="979.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="461.8" y="990.0"></text>
</g>
<g>
<title>SimpleNameResolver.resolve (1 samples, 0.03%)</title><rect x="458.8" y="963.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="461.8" y="974.0"></text>
</g>
<g>
<title>DefaultNameResolver.doResolve (1 samples, 0.03%)</title><rect x="458.8" y="947.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.8" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="458.8" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="461.8" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="458.8" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="461.8" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="461.8" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="461.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="461.8" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="461.8" y="862.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="461.8" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="461.8" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="461.8" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="461.8" y="798.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="461.8" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="458.8" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="461.8" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="458.8" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="461.8" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="458.8" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.8" y="734.0"></text>
</g>
<g>
<title>AddressResolverGroup.getResolver (1 samples, 0.03%)</title><rect x="459.3" y="1027.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.3" y="1038.0"></text>
</g>
<g>
<title>DefaultAddressResolverGroup.newResolver (1 samples, 0.03%)</title><rect x="459.3" y="1011.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.3" y="1022.0"></text>
</g>
<g>
<title>InetNameResolver.asAddressResolver (1 samples, 0.03%)</title><rect x="459.3" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.3" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="459.3" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.3" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="459.3" y="963.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.3" y="974.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="459.3" y="947.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.3" y="958.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="459.3" y="931.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.3" y="942.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="459.3" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.3" y="926.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="459.3" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.3" y="910.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="459.3" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.3" y="894.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="459.3" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.3" y="878.0"></text>
</g>
<g>
<title>RandomAccessFile.readFully (1 samples, 0.03%)</title><rect x="459.3" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.3" y="862.0"></text>
</g>
<g>
<title>RandomAccessFile.read (1 samples, 0.03%)</title><rect x="459.3" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.3" y="846.0"></text>
</g>
<g>
<title>RandomAccessFile.readBytes (1 samples, 0.03%)</title><rect x="459.3" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.3" y="830.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.03%)</title><rect x="459.3" y="803.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="462.3" y="814.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="459.3" y="787.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="462.3" y="798.0"></text>
</g>
<g>
<title>HashMap.get (1 samples, 0.03%)</title><rect x="459.7" y="1075.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.7" y="1086.0"></text>
</g>
<g>
<title>HashMap.hash (1 samples, 0.03%)</title><rect x="459.7" y="1059.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.7" y="1070.0"></text>
</g>
<g>
<title>ServerID.hashCode (1 samples, 0.03%)</title><rect x="459.7" y="1043.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.7" y="1054.0"></text>
</g>
<g>
<title>HttpServerImpl.applyConnectionOptions (10 samples, 0.28%)</title><rect x="460.2" y="1075.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.2" y="1086.0"></text>
</g>
<g>
<title>Transport.configure (10 samples, 0.28%)</title><rect x="460.2" y="1059.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.2" y="1070.0"></text>
</g>
<g>
<title>PartialPooledByteBufAllocator.&lt;clinit&gt; (9 samples, 0.25%)</title><rect x="460.2" y="1043.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.2" y="1054.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.&lt;clinit&gt; (4 samples, 0.11%)</title><rect x="460.2" y="1027.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.2" y="1038.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="460.2" y="1011.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.2" y="1022.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="460.2" y="995.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="463.2" y="1006.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="460.2" y="979.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.2" y="990.0"></text>
</g>
<g>
<title>PooledByteBufAllocator.&lt;init&gt; (4 samples, 0.11%)</title><rect x="460.2" y="963.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.2" y="974.0"></text>
</g>
<g>
<title>AbstractByteBufAllocator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="460.2" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.2" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="460.2" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="463.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="460.2" y="915.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="463.2" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="460.2" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="463.2" y="910.0"></text>
</g>
<g>
<title>klassVtable::initialize_vtable(bool, Thread*) (1 samples, 0.03%)</title><rect x="460.2" y="883.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="463.2" y="894.0"></text>
</g>
<g>
<title>klassVtable::update_inherited_vtable(InstanceKlass*, methodHandle const&amp;, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="460.2" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.2" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="460.6" y="947.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="463.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="460.6" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="463.6" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="460.6" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="463.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="460.6" y="899.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="463.6" y="910.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="460.6" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="463.6" y="894.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="460.6" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="463.6" y="878.0"></text>
</g>
<g>
<title>PoolArena$DirectArena.&lt;init&gt; (1 samples, 0.03%)</title><rect x="461.0" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.0" y="958.0"></text>
</g>
<g>
<title>PoolArena.&lt;init&gt; (1 samples, 0.03%)</title><rect x="461.0" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.0" y="942.0"></text>
</g>
<g>
<title>PoolArena.newSubpagePoolArray (1 samples, 0.03%)</title><rect x="461.0" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.0" y="926.0"></text>
</g>
<g>
<title>PoolArena$HeapArena.&lt;init&gt; (1 samples, 0.03%)</title><rect x="461.5" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="464.5" y="958.0"></text>
</g>
<g>
<title>PoolArena.&lt;init&gt; (1 samples, 0.03%)</title><rect x="461.5" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.5" y="942.0"></text>
</g>
<g>
<title>PoolArena.newSubpagePoolHead (1 samples, 0.03%)</title><rect x="461.5" y="915.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.5" y="926.0"></text>
</g>
<g>
<title>PoolSubpage.&lt;init&gt; (1 samples, 0.03%)</title><rect x="461.5" y="899.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.5" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="461.9" y="1027.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.9" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (5 samples, 0.14%)</title><rect x="461.9" y="1011.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.9" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (5 samples, 0.14%)</title><rect x="461.9" y="995.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.9" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (5 samples, 0.14%)</title><rect x="461.9" y="979.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.9" y="990.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (4 samples, 0.11%)</title><rect x="461.9" y="963.0" width="1.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="464.9" y="974.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (4 samples, 0.11%)</title><rect x="461.9" y="947.0" width="1.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="464.9" y="958.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (4 samples, 0.11%)</title><rect x="461.9" y="931.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="464.9" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (4 samples, 0.11%)</title><rect x="461.9" y="915.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="464.9" y="926.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (4 samples, 0.11%)</title><rect x="461.9" y="899.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="464.9" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (3 samples, 0.08%)</title><rect x="461.9" y="883.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="464.9" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (3 samples, 0.08%)</title><rect x="461.9" y="867.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="464.9" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="461.9" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="464.9" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="461.9" y="835.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="464.9" y="846.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="461.9" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="464.9" y="830.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="461.9" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.9" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (2 samples, 0.06%)</title><rect x="462.4" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="465.4" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (2 samples, 0.06%)</title><rect x="462.4" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="465.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_name(Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="462.4" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="465.4" y="830.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="462.4" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="465.4" y="814.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="462.8" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="465.8" y="830.0"></text>
</g>
<g>
<title>SignatureIterator::parse_type() (1 samples, 0.03%)</title><rect x="462.8" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="465.8" y="814.0"></text>
</g>
<g>
<title>SignatureInfo::do_int() (1 samples, 0.03%)</title><rect x="462.8" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="465.8" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="463.3" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="466.3" y="894.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="463.3" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="466.3" y="878.0"></text>
</g>
<g>
<title>klassVtable::needs_new_vtable_entry(methodHandle const&amp;, Klass const*, Handle, Symbol*, AccessFlags, unsigned short, Thread*) (1 samples, 0.03%)</title><rect x="463.3" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="466.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="463.3" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="466.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="463.3" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="466.3" y="830.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="463.3" y="803.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="466.3" y="814.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="463.7" y="963.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="466.7" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="463.7" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.7" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="463.7" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.7" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="463.7" y="915.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.7" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="463.7" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.7" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="463.7" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.7" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="463.7" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="466.7" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="463.7" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.7" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="463.7" y="835.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.7" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="463.7" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="466.7" y="830.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="463.7" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.7" y="814.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="463.7" y="787.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="466.7" y="798.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="463.7" y="771.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="466.7" y="782.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="463.7" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.7" y="766.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="463.7" y="739.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="466.7" y="750.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="463.7" y="723.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="466.7" y="734.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="463.7" y="707.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="466.7" y="718.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="464.1" y="1043.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.1" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="464.1" y="1027.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="467.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="464.1" y="1011.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.1" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="464.1" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.1" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="464.1" y="979.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.1" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="464.1" y="963.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.1" y="974.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="464.1" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="467.1" y="958.0"></text>
</g>
<g>
<title>ZipFile.getInputStream (1 samples, 0.03%)</title><rect x="464.1" y="931.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.1" y="942.0"></text>
</g>
<g>
<title>Collections$SetFromMap.add (1 samples, 0.03%)</title><rect x="464.1" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.1" y="926.0"></text>
</g>
<g>
<title>WeakHashMap.put (1 samples, 0.03%)</title><rect x="464.1" y="899.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.1" y="910.0"></text>
</g>
<g>
<title>WeakHashMap.hash (1 samples, 0.03%)</title><rect x="464.1" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="467.1" y="894.0"></text>
</g>
<g>
<title>Object.hashCode (1 samples, 0.03%)</title><rect x="464.1" y="867.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.1" y="878.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="464.1" y="851.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="467.1" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="464.1" y="835.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.1" y="846.0"></text>
</g>
<g>
<title>HttpServerImpl.childHandler (2 samples, 0.06%)</title><rect x="464.6" y="1075.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.6" y="1086.0"></text>
</g>
<g>
<title>HttpServerImpl$1.&lt;init&gt; (1 samples, 0.03%)</title><rect x="464.6" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="467.6" y="1070.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="464.6" y="1043.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.6" y="1054.0"></text>
</g>
<g>
<title>ChannelInitializer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="464.6" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="467.6" y="1038.0"></text>
</g>
<g>
<title>Collections.newSetFromMap (1 samples, 0.03%)</title><rect x="464.6" y="1011.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.6" y="1022.0"></text>
</g>
<g>
<title>Collections$SetFromMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="464.6" y="995.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.6" y="1006.0"></text>
</g>
<g>
<title>ConcurrentHashMap.keySet (1 samples, 0.03%)</title><rect x="464.6" y="979.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.6" y="990.0"></text>
</g>
<g>
<title>ConcurrentHashMap.keySet (1 samples, 0.03%)</title><rect x="464.6" y="963.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.6" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="465.0" y="1059.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.0" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="465.0" y="1043.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="468.0" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="465.0" y="1027.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="468.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="465.0" y="1011.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.0" y="1022.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="465.0" y="995.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.0" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="465.0" y="979.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.0" y="990.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="465.0" y="963.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.0" y="974.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="465.0" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.0" y="958.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="465.0" y="931.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.0" y="942.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="465.0" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.0" y="926.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="465.0" y="899.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="468.0" y="910.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="465.0" y="883.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="468.0" y="894.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="465.0" y="867.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="468.0" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="465.5" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="468.5" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="465.5" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="468.5" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="465.5" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="468.5" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="465.5" y="1027.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="468.5" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="465.5" y="1011.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="468.5" y="1022.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="465.9" y="1075.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.9" y="1086.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.03%)</title><rect x="465.9" y="1059.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="468.9" y="1070.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.03%)</title><rect x="465.9" y="1043.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="468.9" y="1054.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.03%)</title><rect x="465.9" y="1027.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.9" y="1038.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="465.9" y="1011.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.9" y="1022.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="465.9" y="995.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.9" y="1006.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="465.9" y="979.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="468.9" y="990.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="465.9" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.9" y="974.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="465.9" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="468.9" y="958.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="465.9" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.9" y="942.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="465.9" y="915.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="468.9" y="926.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="465.9" y="899.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.9" y="910.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="465.9" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.9" y="894.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.isStaticallyInvocable (1 samples, 0.03%)</title><rect x="465.9" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.9" y="878.0"></text>
</g>
<g>
<title>MemberName.isPrivate (1 samples, 0.03%)</title><rect x="465.9" y="851.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="468.9" y="862.0"></text>
</g>
<g>
<title>Modifier.isPrivate (1 samples, 0.03%)</title><rect x="465.9" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.9" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="466.4" y="1075.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.4" y="1086.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="466.4" y="1059.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.4" y="1070.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="466.4" y="1043.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.4" y="1054.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="466.4" y="1027.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.4" y="1038.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="466.4" y="1011.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.4" y="1022.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="466.4" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.4" y="1006.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="466.4" y="979.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="469.4" y="990.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="466.4" y="963.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="469.4" y="974.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="466.4" y="947.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="469.4" y="958.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (3 samples, 0.08%)</title><rect x="466.8" y="1107.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.8" y="1118.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (3 samples, 0.08%)</title><rect x="466.8" y="1091.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.8" y="1102.0"></text>
</g>
<g>
<title>CallSite.makeSite (3 samples, 0.08%)</title><rect x="466.8" y="1075.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.8" y="1086.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (3 samples, 0.08%)</title><rect x="466.8" y="1059.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="469.8" y="1070.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (3 samples, 0.08%)</title><rect x="466.8" y="1043.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.8" y="1054.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (3 samples, 0.08%)</title><rect x="466.8" y="1027.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="469.8" y="1038.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (3 samples, 0.08%)</title><rect x="466.8" y="1011.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.8" y="1022.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (3 samples, 0.08%)</title><rect x="466.8" y="995.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.8" y="1006.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (2 samples, 0.06%)</title><rect x="466.8" y="979.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="469.8" y="990.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.generateFactory (2 samples, 0.06%)</title><rect x="466.8" y="963.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.8" y="974.0"></text>
</g>
<g>
<title>MethodWriter.visitMethodInsn (2 samples, 0.06%)</title><rect x="466.8" y="947.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.8" y="958.0"></text>
</g>
<g>
<title>Type.getArgumentsAndReturnSizes (2 samples, 0.06%)</title><rect x="466.8" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="469.8" y="942.0"></text>
</g>
<g>
<title>String.charAt (2 samples, 0.06%)</title><rect x="466.8" y="915.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.8" y="926.0"></text>
</g>
<g>
<title>StringLatin1.charAt (1 samples, 0.03%)</title><rect x="467.2" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.2" y="910.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.findStatic (1 samples, 0.03%)</title><rect x="467.7" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.7" y="990.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethod (1 samples, 0.03%)</title><rect x="467.7" y="963.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.7" y="974.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.03%)</title><rect x="467.7" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.7" y="958.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="467.7" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="470.7" y="942.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="467.7" y="915.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.7" y="926.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="467.7" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.7" y="910.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="467.7" y="883.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.7" y="894.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="467.7" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.7" y="878.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="467.7" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.7" y="862.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="467.7" y="835.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.7" y="846.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.lookupPregenerated (1 samples, 0.03%)</title><rect x="467.7" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.7" y="830.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.resolveFrom (1 samples, 0.03%)</title><rect x="467.7" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.7" y="814.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrNull (1 samples, 0.03%)</title><rect x="467.7" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.7" y="798.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="467.7" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.7" y="782.0"></text>
</g>
<g>
<title>MethodHandleNatives.resolve (1 samples, 0.03%)</title><rect x="467.7" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.7" y="766.0"></text>
</g>
<g>
<title>NoSuchMethodError.&lt;init&gt; (1 samples, 0.03%)</title><rect x="467.7" y="739.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.7" y="750.0"></text>
</g>
<g>
<title>IncompatibleClassChangeError.&lt;init&gt; (1 samples, 0.03%)</title><rect x="467.7" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.7" y="734.0"></text>
</g>
<g>
<title>LinkageError.&lt;init&gt; (1 samples, 0.03%)</title><rect x="467.7" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.7" y="718.0"></text>
</g>
<g>
<title>Error.&lt;init&gt; (1 samples, 0.03%)</title><rect x="467.7" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.7" y="702.0"></text>
</g>
<g>
<title>Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="467.7" y="675.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.7" y="686.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="467.7" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.7" y="670.0"></text>
</g>
<g>
<title>Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="467.7" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.7" y="654.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="467.7" y="627.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="470.7" y="638.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="467.7" y="611.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="470.7" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="467.7" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="470.7" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="467.7" y="579.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="470.7" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="467.7" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="470.7" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="467.7" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="470.7" y="558.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="467.7" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.7" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="467.7" y="515.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="470.7" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="467.7" y="499.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="470.7" y="510.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (2 samples, 0.06%)</title><rect x="468.1" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.1" y="1118.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (2 samples, 0.06%)</title><rect x="468.1" y="1091.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.1" y="1102.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (2 samples, 0.06%)</title><rect x="468.1" y="1075.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="471.1" y="1086.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (2 samples, 0.06%)</title><rect x="468.1" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.1" y="1070.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (2 samples, 0.06%)</title><rect x="468.1" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.1" y="1054.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (2 samples, 0.06%)</title><rect x="468.1" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.1" y="1038.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="468.1" y="1011.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.1" y="1022.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="468.1" y="995.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.1" y="1006.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (2 samples, 0.06%)</title><rect x="468.1" y="979.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.1" y="990.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="468.1" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.1" y="974.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="468.1" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.1" y="958.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="468.1" y="931.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.1" y="942.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="468.1" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.1" y="926.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="468.1" y="899.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.1" y="910.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="468.1" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.1" y="894.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="468.1" y="867.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="471.1" y="878.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="851.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="471.1" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="471.1" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="471.1" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="471.1" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="787.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="471.1" y="798.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="471.1" y="782.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="468.1" y="755.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="471.1" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="468.1" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="471.1" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="468.1" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="471.1" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="468.1" y="707.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.1" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="468.1" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.1" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="468.1" y="675.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="471.1" y="686.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="468.6" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.6" y="974.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="468.6" y="947.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.6" y="958.0"></text>
</g>
<g>
<title>MemberName.checkForTypeAlias (1 samples, 0.03%)</title><rect x="468.6" y="931.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.6" y="942.0"></text>
</g>
<g>
<title>VerifyAccess.isTypeVisible (1 samples, 0.03%)</title><rect x="468.6" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.6" y="926.0"></text>
</g>
<g>
<title>VerifyAccess.isTypeVisible (1 samples, 0.03%)</title><rect x="468.6" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="471.6" y="910.0"></text>
</g>
<g>
<title>Class.isArray (1 samples, 0.03%)</title><rect x="468.6" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.6" y="894.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.03%)</title><rect x="468.6" y="867.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="471.6" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="468.6" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="471.6" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="468.6" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="471.6" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="468.6" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="471.6" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="468.6" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="471.6" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="468.6" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="471.6" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="468.6" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="471.6" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="468.6" y="755.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="471.6" y="766.0"></text>
</g>
<g>
<title>VertxImpl.createHttpServer (7 samples, 0.20%)</title><rect x="469.0" y="1123.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="472.0" y="1134.0"></text>
</g>
<g>
<title>HttpServerImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="469.0" y="1107.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="472.0" y="1118.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="469.0" y="1091.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.0" y="1102.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="469.0" y="1075.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="472.0" y="1086.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="469.0" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="472.0" y="1070.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="469.0" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="472.0" y="1054.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="469.0" y="1027.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.0" y="1038.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="469.0" y="1011.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="472.0" y="1022.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="469.0" y="995.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.0" y="1006.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="469.0" y="979.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.0" y="990.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="469.0" y="963.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="472.0" y="974.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="469.0" y="947.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.0" y="958.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="469.0" y="931.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.0" y="942.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="469.0" y="915.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="472.0" y="926.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="899.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="472.0" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="472.0" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="867.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="472.0" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="472.0" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="472.0" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="472.0" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="469.0" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="472.0" y="814.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="469.0" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="472.0" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="469.0" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="472.0" y="782.0"></text>
</g>
<g>
<title>HttpServerImpl.&lt;init&gt; (5 samples, 0.14%)</title><rect x="469.5" y="1107.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="472.5" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="469.5" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="472.5" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="469.5" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="472.5" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="469.5" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="472.5" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="469.5" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="472.5" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="469.5" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="472.5" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="469.5" y="1011.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.5" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="469.5" y="995.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="472.5" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="469.5" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="472.5" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="469.5" y="963.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="472.5" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="469.9" y="1091.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.9" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="469.9" y="1075.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="472.9" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (3 samples, 0.08%)</title><rect x="469.9" y="1059.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.9" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (3 samples, 0.08%)</title><rect x="469.9" y="1043.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.9" y="1054.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (3 samples, 0.08%)</title><rect x="469.9" y="1027.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="472.9" y="1038.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (3 samples, 0.08%)</title><rect x="469.9" y="1011.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="472.9" y="1022.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (3 samples, 0.08%)</title><rect x="469.9" y="995.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="472.9" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (3 samples, 0.08%)</title><rect x="469.9" y="979.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="472.9" y="990.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (3 samples, 0.08%)</title><rect x="469.9" y="963.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="472.9" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (3 samples, 0.08%)</title><rect x="469.9" y="947.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="472.9" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (3 samples, 0.08%)</title><rect x="469.9" y="931.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="472.9" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (2 samples, 0.06%)</title><rect x="469.9" y="915.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="472.9" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="469.9" y="899.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="472.9" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="469.9" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="472.9" y="894.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="469.9" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="472.9" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="470.3" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="473.3" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="470.8" y="915.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="473.8" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="470.8" y="899.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="473.8" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_localvariable_table(ClassFileStream const*, unsigned int, unsigned short, unsigned int, unsigned short*, bool, Thread*) (1 samples, 0.03%)</title><rect x="470.8" y="883.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="473.8" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="470.8" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="473.8" y="878.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="470.8" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="473.8" y="862.0"></text>
</g>
<g>
<title>VertxEventLoopGroup.&lt;init&gt; (1 samples, 0.03%)</title><rect x="471.2" y="1091.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.2" y="1102.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="471.2" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="474.2" y="1086.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="471.2" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="474.2" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="471.2" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="474.2" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="471.2" y="1027.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="474.2" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="471.2" y="1011.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.2" y="1022.0"></text>
</g>
<g>
<title>PlaceholderTable::find_and_remove(int, unsigned int, Symbol*, ClassLoaderData*, PlaceholderTable::classloadAction, Thread*) (1 samples, 0.03%)</title><rect x="471.2" y="995.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="474.2" y="1006.0"></text>
</g>
<g>
<title>PlaceholderEntry::remove_seen_thread(Thread*, PlaceholderTable::classloadAction) (1 samples, 0.03%)</title><rect x="471.2" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="474.2" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="471.7" y="1107.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.7" y="1118.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="471.7" y="1091.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.7" y="1102.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="471.7" y="1075.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.7" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="471.7" y="1059.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.7" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="471.7" y="1043.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="474.7" y="1054.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="471.7" y="1027.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="474.7" y="1038.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="1011.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="474.7" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="995.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.7" y="1006.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="474.7" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="963.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="474.7" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.7" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="931.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.7" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="471.7" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="474.7" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="471.7" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="474.7" y="910.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.03%)</title><rect x="471.7" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="474.7" y="894.0"></text>
</g>
<g>
<title>1313657847.handle (1 samples, 0.03%)</title><rect x="472.1" y="1187.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="475.1" y="1198.0"></text>
</g>
<g>
<title>VertxImpl.lambda$closeClusterManager$13 (1 samples, 0.03%)</title><rect x="472.1" y="1171.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.1" y="1182.0"></text>
</g>
<g>
<title>1290982147.handle (1 samples, 0.03%)</title><rect x="472.1" y="1155.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="475.1" y="1166.0"></text>
</g>
<g>
<title>VertxImpl.lambda$null$16 (1 samples, 0.03%)</title><rect x="472.1" y="1139.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="475.1" y="1150.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="472.1" y="1123.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.1" y="1134.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="472.1" y="1107.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.1" y="1118.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="472.1" y="1091.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.1" y="1102.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="472.1" y="1075.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.1" y="1086.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="472.1" y="1059.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="475.1" y="1070.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="472.1" y="1043.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="475.1" y="1054.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="472.1" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.1" y="1038.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="472.1" y="1011.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.1" y="1022.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="472.1" y="995.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.1" y="1006.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="472.1" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.1" y="990.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="472.1" y="963.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.1" y="974.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="472.1" y="947.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="475.1" y="958.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="472.1" y="931.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="475.1" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="472.1" y="915.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="475.1" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="472.1" y="899.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="475.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="472.1" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="475.1" y="894.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="472.1" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="475.1" y="878.0"></text>
</g>
<g>
<title>Klass::external_name() const (1 samples, 0.03%)</title><rect x="472.1" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="475.1" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="472.1" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="475.1" y="846.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="472.1" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="475.1" y="830.0"></text>
</g>
<g>
<title>1644538503.handle (4 samples, 0.11%)</title><rect x="472.5" y="1187.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="475.5" y="1198.0"></text>
</g>
<g>
<title>HttpServerImpl.lambda$executeCloseDone$11 (4 samples, 0.11%)</title><rect x="472.5" y="1171.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.5" y="1182.0"></text>
</g>
<g>
<title>1602121094.handle (4 samples, 0.11%)</title><rect x="472.5" y="1155.0" width="1.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="475.5" y="1166.0"></text>
</g>
<g>
<title>VertxHttpRecorder$WebDeploymentVerticle.lambda$stop$2 (4 samples, 0.11%)</title><rect x="472.5" y="1139.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.5" y="1150.0"></text>
</g>
<g>
<title>FutureImpl.complete (4 samples, 0.11%)</title><rect x="472.5" y="1123.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.5" y="1134.0"></text>
</g>
<g>
<title>FutureImpl.tryComplete (4 samples, 0.11%)</title><rect x="472.5" y="1107.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.5" y="1118.0"></text>
</g>
<g>
<title>FutureImpl.tryComplete (4 samples, 0.11%)</title><rect x="472.5" y="1091.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.5" y="1102.0"></text>
</g>
<g>
<title>FutureImpl.dispatch (4 samples, 0.11%)</title><rect x="472.5" y="1075.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.5" y="1086.0"></text>
</g>
<g>
<title>345324148.handle (4 samples, 0.11%)</title><rect x="472.5" y="1059.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="475.5" y="1070.0"></text>
</g>
<g>
<title>DeploymentManager$DeploymentImpl.lambda$null$5 (4 samples, 0.11%)</title><rect x="472.5" y="1043.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.5" y="1054.0"></text>
</g>
<g>
<title>EventLoopContext.runCloseHooks (1 samples, 0.03%)</title><rect x="472.5" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.5" y="1038.0"></text>
</g>
<g>
<title>ContextImpl.runCloseHooks (1 samples, 0.03%)</title><rect x="472.5" y="1011.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.5" y="1022.0"></text>
</g>
<g>
<title>VertxThreadFactory.unsetContext (1 samples, 0.03%)</title><rect x="472.5" y="995.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.5" y="1006.0"></text>
</g>
<g>
<title>WeakHashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="472.5" y="979.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.5" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="472.5" y="963.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="475.5" y="974.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="472.5" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="475.5" y="958.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="472.5" y="931.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="475.5" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="472.5" y="915.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="475.5" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="472.5" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="475.5" y="910.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.03%)</title><rect x="472.5" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="475.5" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="473.0" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="476.0" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokedynamic(JavaThread*) (1 samples, 0.03%)</title><rect x="473.0" y="1011.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="476.0" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokedynamic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="473.0" y="995.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="476.0" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_dynamic_call(CallInfo&amp;, int, Handle, Symbol*, Symbol*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="473.0" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="476.0" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::find_dynamic_call_site_invoker(Klass*, int, Handle, Symbol*, Symbol*, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="473.0" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.0" y="974.0"></text>
</g>
<g>
<title>unpack_method_and_appendix(Handle, Klass*, objArrayHandle, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="473.0" y="947.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="476.0" y="958.0"></text>
</g>
<g>
<title>ClassLoaderData::record_dependency(Klass const*) (1 samples, 0.03%)</title><rect x="473.0" y="931.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.0" y="942.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="473.0" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.0" y="926.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (2 samples, 0.06%)</title><rect x="473.4" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.4" y="1038.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (2 samples, 0.06%)</title><rect x="473.4" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="476.4" y="1022.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="473.4" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.4" y="1006.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="473.4" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.4" y="990.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="473.4" y="963.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.4" y="974.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="473.4" y="947.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="476.4" y="958.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="473.4" y="931.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.4" y="942.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="473.4" y="915.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="476.4" y="926.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="473.4" y="899.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.4" y="910.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="473.4" y="883.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.4" y="894.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="473.4" y="867.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="476.4" y="878.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="473.4" y="851.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="476.4" y="862.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="835.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="476.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="476.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.4" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="476.4" y="782.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="476.4" y="766.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="476.4" y="750.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="473.4" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="476.4" y="734.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="473.4" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="476.4" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="473.4" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="476.4" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="473.4" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.4" y="686.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="473.4" y="659.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.4" y="670.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="473.4" y="643.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.4" y="654.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.03%)</title><rect x="473.4" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="476.4" y="638.0"></text>
</g>
<g>
<title>Invokers.linkToTargetMethod (1 samples, 0.03%)</title><rect x="473.9" y="995.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.9" y="1006.0"></text>
</g>
<g>
<title>Invokers.callSiteForm (1 samples, 0.03%)</title><rect x="473.9" y="979.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.9" y="990.0"></text>
</g>
<g>
<title>MethodTypeForm.setCachedLambdaForm (1 samples, 0.03%)</title><rect x="473.9" y="963.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.9" y="974.0"></text>
</g>
<g>
<title>509646698.handle (14 samples, 0.39%)</title><rect x="474.3" y="1187.0" width="6.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="477.3" y="1198.0"></text>
</g>
<g>
<title>AddressResolver.lambda$null$0 (14 samples, 0.39%)</title><rect x="474.3" y="1171.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.3" y="1182.0"></text>
</g>
<g>
<title>483425661.handle (14 samples, 0.39%)</title><rect x="474.3" y="1155.0" width="6.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="477.3" y="1166.0"></text>
</g>
<g>
<title>AsyncResolveConnectHelper.lambda$doBind$2 (14 samples, 0.39%)</title><rect x="474.3" y="1139.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.3" y="1150.0"></text>
</g>
<g>
<title>AbstractBootstrap.bind (14 samples, 0.39%)</title><rect x="474.3" y="1123.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.3" y="1134.0"></text>
</g>
<g>
<title>AbstractBootstrap.doBind (14 samples, 0.39%)</title><rect x="474.3" y="1107.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.3" y="1118.0"></text>
</g>
<g>
<title>AbstractBootstrap.initAndRegister (14 samples, 0.39%)</title><rect x="474.3" y="1091.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.3" y="1102.0"></text>
</g>
<g>
<title>1644040005.newChannel (11 samples, 0.31%)</title><rect x="474.3" y="1075.0" width="4.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="477.3" y="1086.0"></text>
</g>
<g>
<title>NioServerSocketChannel.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="474.3" y="1059.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.3" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="474.3" y="1043.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.3" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="474.3" y="1027.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.3" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="474.3" y="1011.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.3" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="474.3" y="995.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.3" y="1006.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="474.3" y="979.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="477.3" y="990.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="474.3" y="963.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="477.3" y="974.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="474.3" y="947.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="477.3" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="474.3" y="931.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="477.3" y="942.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="474.3" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="477.3" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="474.3" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="477.3" y="910.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="474.3" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="477.3" y="894.0"></text>
</g>
<g>
<title>NioServerSocketChannel.&lt;init&gt; (10 samples, 0.28%)</title><rect x="474.8" y="1059.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.8" y="1070.0"></text>
</g>
<g>
<title>NioServerSocketChannel.&lt;init&gt; (9 samples, 0.25%)</title><rect x="474.8" y="1043.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.8" y="1054.0"></text>
</g>
<g>
<title>AbstractNioMessageChannel.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.8" y="1027.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.8" y="1038.0"></text>
</g>
<g>
<title>AbstractNioChannel.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.8" y="1011.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.8" y="1022.0"></text>
</g>
<g>
<title>AbstractChannel.&lt;init&gt; (5 samples, 0.14%)</title><rect x="474.8" y="995.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.8" y="1006.0"></text>
</g>
<g>
<title>AbstractChannel.newChannelPipeline (3 samples, 0.08%)</title><rect x="474.8" y="979.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.8" y="990.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.&lt;init&gt; (1 samples, 0.03%)</title><rect x="474.8" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="477.8" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="474.8" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="477.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="474.8" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="477.8" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="474.8" y="915.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="477.8" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="474.8" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="477.8" y="910.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="474.8" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="477.8" y="894.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="474.8" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="477.8" y="878.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="474.8" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="477.8" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="475.2" y="963.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.2" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (2 samples, 0.06%)</title><rect x="475.2" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.2" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="475.2" y="931.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.2" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="475.2" y="915.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.2" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="475.2" y="899.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="478.2" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="475.2" y="883.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="478.2" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="475.2" y="867.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="478.2" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="475.2" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="478.2" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="475.2" y="835.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="478.2" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="475.2" y="819.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="478.2" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="475.2" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="478.2" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="475.2" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="478.2" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="475.2" y="771.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="478.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="475.2" y="755.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="478.2" y="766.0"></text>
</g>
<g>
<title>UTF8::is_legal_utf8(unsigned char const*, int, bool) (1 samples, 0.03%)</title><rect x="475.2" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="478.2" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="475.6" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="478.6" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="475.6" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="478.6" y="782.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="475.6" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="478.6" y="766.0"></text>
</g>
<g>
<title>SignatureInfo::do_object(int, int) (1 samples, 0.03%)</title><rect x="475.6" y="739.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="478.6" y="750.0"></text>
</g>
<g>
<title>AbstractNioMessageChannel.newUnsafe (1 samples, 0.03%)</title><rect x="476.1" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="479.1" y="990.0"></text>
</g>
<g>
<title>AbstractNioMessageChannel.newUnsafe (1 samples, 0.03%)</title><rect x="476.1" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.1" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="476.1" y="947.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.1" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="476.1" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.1" y="942.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="476.1" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="479.1" y="926.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="476.1" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.1" y="910.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="476.1" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.1" y="894.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="476.1" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.1" y="878.0"></text>
</g>
<g>
<title>ClassLoaders$BootClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="476.1" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.1" y="862.0"></text>
</g>
<g>
<title>System$2.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="476.1" y="835.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.1" y="846.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClassOrNull (1 samples, 0.03%)</title><rect x="476.1" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.1" y="830.0"></text>
</g>
<g>
<title>ClassLoader.findBootstrapClass (1 samples, 0.03%)</title><rect x="476.1" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.1" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_findBootstrapClass (1 samples, 0.03%)</title><rect x="476.1" y="787.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="479.1" y="798.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="476.1" y="771.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="479.1" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="479.1" y="766.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="479.1" y="750.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="479.1" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="479.1" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="479.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="479.1" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="479.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="476.1" y="643.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="479.1" y="654.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="476.1" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="479.1" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="476.1" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="479.1" y="622.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="476.5" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="479.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="476.5" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="479.5" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="476.5" y="947.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="479.5" y="958.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="476.5" y="931.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="479.5" y="942.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="476.5" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="479.5" y="926.0"></text>
</g>
<g>
<title>ClassVerifier::verify_aload(unsigned short, StackMapFrame*, Thread*) (1 samples, 0.03%)</title><rect x="476.5" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="479.5" y="910.0"></text>
</g>
<g>
<title>NioServerSocketChannel$NioServerSocketChannelConfig.&lt;init&gt; (3 samples, 0.08%)</title><rect x="477.0" y="1027.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.0" y="1038.0"></text>
</g>
<g>
<title>NioServerSocketChannel$NioServerSocketChannelConfig.&lt;init&gt; (3 samples, 0.08%)</title><rect x="477.0" y="1011.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.0" y="1022.0"></text>
</g>
<g>
<title>DefaultServerSocketChannelConfig.&lt;init&gt; (3 samples, 0.08%)</title><rect x="477.0" y="995.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.0" y="1006.0"></text>
</g>
<g>
<title>DefaultChannelConfig.&lt;init&gt; (2 samples, 0.06%)</title><rect x="477.0" y="979.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.0" y="990.0"></text>
</g>
<g>
<title>DefaultChannelConfig.&lt;init&gt; (1 samples, 0.03%)</title><rect x="477.0" y="963.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.0" y="974.0"></text>
</g>
<g>
<title>ByteBufAllocator.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="477.0" y="947.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.0" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="477.0" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="480.0" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="477.0" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="480.0" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="899.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="480.0" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="480.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="480.0" y="862.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="835.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.0" y="846.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="480.0" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="480.0" y="814.0"></text>
</g>
<g>
<title>StackMapFrame::set_locals_from_arg(methodHandle const&amp;, VerificationType, Thread*) (1 samples, 0.03%)</title><rect x="477.0" y="787.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="480.0" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="477.4" y="963.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.4" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="477.4" y="947.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.4" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="477.4" y="931.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.4" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="477.4" y="915.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.4" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="477.4" y="899.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="480.4" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="477.4" y="883.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="480.4" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="867.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="480.4" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="480.4" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="480.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="480.4" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="480.4" y="814.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="480.4" y="798.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="477.4" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="480.4" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="477.4" y="755.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="480.4" y="766.0"></text>
</g>
<g>
<title>NetUtil.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="477.9" y="979.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.9" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="477.9" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="480.9" y="974.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="477.9" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="480.9" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="477.9" y="931.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="480.9" y="942.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="478.3" y="1027.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.3" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="478.3" y="1011.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.3" y="1022.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="478.3" y="995.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.3" y="1006.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="478.3" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.3" y="990.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="478.3" y="963.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.3" y="974.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="478.3" y="947.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.3" y="958.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="478.3" y="931.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="481.3" y="942.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="478.3" y="915.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="481.3" y="926.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="478.3" y="899.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="481.3" y="910.0"></text>
</g>
<g>
<title>NioServerSocketChannel.newSocket (1 samples, 0.03%)</title><rect x="478.7" y="1043.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.7" y="1054.0"></text>
</g>
<g>
<title>SelectorProviderImpl.openServerSocketChannel (1 samples, 0.03%)</title><rect x="478.7" y="1027.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.7" y="1038.0"></text>
</g>
<g>
<title>ServerSocketChannelImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="478.7" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.7" y="1022.0"></text>
</g>
<g>
<title>Net.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="478.7" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.7" y="1006.0"></text>
</g>
<g>
<title>Net.initIDs (1 samples, 0.03%)</title><rect x="478.7" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.7" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="478.7" y="963.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="481.7" y="974.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="478.7" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="481.7" y="958.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="478.7" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="481.7" y="942.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="478.7" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="481.7" y="926.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="478.7" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="481.7" y="910.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="478.7" y="883.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="481.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="867.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="481.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="851.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="481.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="835.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="481.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="819.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="481.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="803.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="481.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="787.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="481.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="771.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="481.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="755.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="481.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="739.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="481.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="723.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="481.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="707.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="481.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="478.7" y="691.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="481.7" y="702.0"></text>
</g>
<g>
<title>ServerBootstrap.init (3 samples, 0.08%)</title><rect x="479.2" y="1075.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.2" y="1086.0"></text>
</g>
<g>
<title>AbstractBootstrap.setChannelOptions (1 samples, 0.03%)</title><rect x="479.2" y="1059.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.2" y="1070.0"></text>
</g>
<g>
<title>AbstractBootstrap.setChannelOption (1 samples, 0.03%)</title><rect x="479.2" y="1043.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.2" y="1054.0"></text>
</g>
<g>
<title>NioServerSocketChannel$NioServerSocketChannelConfig.setOption (1 samples, 0.03%)</title><rect x="479.2" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.2" y="1038.0"></text>
</g>
<g>
<title>DefaultServerSocketChannelConfig.setOption (1 samples, 0.03%)</title><rect x="479.2" y="1011.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.2" y="1022.0"></text>
</g>
<g>
<title>DefaultServerSocketChannelConfig.setReuseAddress (1 samples, 0.03%)</title><rect x="479.2" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.2" y="1006.0"></text>
</g>
<g>
<title>ServerSocketAdaptor.setReuseAddress (1 samples, 0.03%)</title><rect x="479.2" y="979.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.2" y="990.0"></text>
</g>
<g>
<title>ServerSocketChannelImpl.setOption (1 samples, 0.03%)</title><rect x="479.2" y="963.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.2" y="974.0"></text>
</g>
<g>
<title>ServerSocketChannelImpl.supportedOptions (1 samples, 0.03%)</title><rect x="479.2" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.2" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="479.2" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="482.2" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="479.2" y="915.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.2" y="910.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="482.2" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="867.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.2" y="878.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.2" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.2" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="819.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.2" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="482.2" y="814.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="798.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="482.2" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="482.2" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="482.2" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="482.2" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.2" y="718.0"></text>
</g>
<g>
<title>Method::compute_size_of_parameters(Thread*) (1 samples, 0.03%)</title><rect x="479.2" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="482.2" y="702.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_parameters() (1 samples, 0.03%)</title><rect x="479.2" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.2" y="686.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="479.6" y="1059.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.6" y="1070.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="479.6" y="1043.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="482.6" y="1054.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.addLast (1 samples, 0.03%)</title><rect x="479.6" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.6" y="1038.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.newContext (1 samples, 0.03%)</title><rect x="479.6" y="1011.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.6" y="1022.0"></text>
</g>
<g>
<title>DefaultChannelHandlerContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="479.6" y="995.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.6" y="1006.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.&lt;init&gt; (1 samples, 0.03%)</title><rect x="479.6" y="979.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.6" y="990.0"></text>
</g>
<g>
<title>ChannelHandlerMask.mask (1 samples, 0.03%)</title><rect x="479.6" y="963.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.6" y="974.0"></text>
</g>
<g>
<title>ChannelHandlerMask.mask0 (1 samples, 0.03%)</title><rect x="479.6" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.6" y="958.0"></text>
</g>
<g>
<title>ChannelHandlerMask.isSkippable (1 samples, 0.03%)</title><rect x="479.6" y="931.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.6" y="942.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="479.6" y="915.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.6" y="926.0"></text>
</g>
<g>
<title>ChannelHandlerMask$2.run (1 samples, 0.03%)</title><rect x="479.6" y="899.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.6" y="910.0"></text>
</g>
<g>
<title>ChannelHandlerMask$2.run (1 samples, 0.03%)</title><rect x="479.6" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.6" y="894.0"></text>
</g>
<g>
<title>AccessibleObject.isAnnotationPresent (1 samples, 0.03%)</title><rect x="479.6" y="867.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.6" y="878.0"></text>
</g>
<g>
<title>AnnotatedElement.isAnnotationPresent (1 samples, 0.03%)</title><rect x="479.6" y="851.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.6" y="862.0"></text>
</g>
<g>
<title>Method.getAnnotation (1 samples, 0.03%)</title><rect x="479.6" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.6" y="846.0"></text>
</g>
<g>
<title>Executable.getAnnotation (1 samples, 0.03%)</title><rect x="479.6" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.6" y="830.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (1 samples, 0.03%)</title><rect x="479.6" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.6" y="814.0"></text>
</g>
<g>
<title>Executable.declaredAnnotations (1 samples, 0.03%)</title><rect x="479.6" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.6" y="798.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations (1 samples, 0.03%)</title><rect x="479.6" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.6" y="782.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotations2 (1 samples, 0.03%)</title><rect x="479.6" y="755.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.6" y="766.0"></text>
</g>
<g>
<title>AnnotationParser.parseAnnotation2 (1 samples, 0.03%)</title><rect x="479.6" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.6" y="750.0"></text>
</g>
<g>
<title>AnnotationParser.annotationForMap (1 samples, 0.03%)</title><rect x="479.6" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.6" y="734.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="479.6" y="707.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.6" y="718.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="479.6" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.6" y="702.0"></text>
</g>
<g>
<title>AnnotationParser$1.run (1 samples, 0.03%)</title><rect x="479.6" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.6" y="686.0"></text>
</g>
<g>
<title>Proxy.newProxyInstance (1 samples, 0.03%)</title><rect x="479.6" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.6" y="670.0"></text>
</g>
<g>
<title>Proxy.getProxyConstructor (1 samples, 0.03%)</title><rect x="479.6" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.6" y="654.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue.computeIfAbsent (1 samples, 0.03%)</title><rect x="479.6" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.6" y="638.0"></text>
</g>
<g>
<title>AbstractClassLoaderValue$Memoizer.get (1 samples, 0.03%)</title><rect x="479.6" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.6" y="622.0"></text>
</g>
<g>
<title>1615056168.apply (1 samples, 0.03%)</title><rect x="479.6" y="595.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="482.6" y="606.0"></text>
</g>
<g>
<title>Proxy.lambda$getProxyConstructor$0 (1 samples, 0.03%)</title><rect x="479.6" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.6" y="590.0"></text>
</g>
<g>
<title>Proxy$ProxyBuilder.build (1 samples, 0.03%)</title><rect x="479.6" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.6" y="574.0"></text>
</g>
<g>
<title>Class.getConstructor (1 samples, 0.03%)</title><rect x="479.6" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="482.6" y="558.0"></text>
</g>
<g>
<title>Class.getConstructor0 (1 samples, 0.03%)</title><rect x="479.6" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.6" y="542.0"></text>
</g>
<g>
<title>Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="479.6" y="515.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.6" y="526.0"></text>
</g>
<g>
<title>Class.getDeclaredConstructors0 (1 samples, 0.03%)</title><rect x="479.6" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.6" y="510.0"></text>
</g>
<g>
<title>JVM_GetClassDeclaredConstructors (1 samples, 0.03%)</title><rect x="479.6" y="483.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="482.6" y="494.0"></text>
</g>
<g>
<title>get_class_declared_methods_helper(JNIEnv_*, _jclass*, unsigned char, bool, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="479.6" y="467.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="482.6" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="479.6" y="451.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.6" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="479.6" y="435.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="482.6" y="446.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="479.6" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="482.6" y="430.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="479.6" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="482.6" y="414.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="479.6" y="387.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="482.6" y="398.0"></text>
</g>
<g>
<title>verify_method (1 samples, 0.03%)</title><rect x="479.6" y="371.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="482.6" y="382.0"></text>
</g>
<g>
<title>merge_into_one_successor (1 samples, 0.03%)</title><rect x="479.6" y="355.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="482.6" y="366.0"></text>
</g>
<g>
<title>merge_stack (1 samples, 0.03%)</title><rect x="479.6" y="339.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="482.6" y="350.0"></text>
</g>
<g>
<title>merge_fullinfo_types (1 samples, 0.03%)</title><rect x="479.6" y="323.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="482.6" y="334.0"></text>
</g>
<g>
<title>JVM_IsInterface (1 samples, 0.03%)</title><rect x="479.6" y="307.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="482.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="479.6" y="291.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.6" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="479.6" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.6" y="286.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="479.6" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="482.6" y="270.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="480.1" y="1059.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.1" y="1070.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="480.1" y="1043.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.1" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="480.1" y="1027.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.1" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="480.1" y="1011.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.1" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="480.1" y="995.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="483.1" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="480.1" y="979.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="483.1" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="963.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="483.1" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="483.1" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="931.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="483.1" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="483.1" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="483.1" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="483.1" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="480.1" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="483.1" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="480.1" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="483.1" y="862.0"></text>
</g>
<g>
<title>925913781.handle (17 samples, 0.48%)</title><rect x="480.5" y="1187.0" width="7.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="483.5" y="1198.0"></text>
</g>
<g>
<title>DeploymentManager$DeploymentImpl.lambda$doUndeploy$6 (17 samples, 0.48%)</title><rect x="480.5" y="1171.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.5" y="1182.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (11 samples, 0.31%)</title><rect x="480.5" y="1155.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.5" y="1166.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (11 samples, 0.31%)</title><rect x="480.5" y="1139.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.5" y="1150.0"></text>
</g>
<g>
<title>CallSite.makeSite (7 samples, 0.20%)</title><rect x="480.5" y="1123.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.5" y="1134.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (7 samples, 0.20%)</title><rect x="480.5" y="1107.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.5" y="1118.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (7 samples, 0.20%)</title><rect x="480.5" y="1091.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.5" y="1102.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (7 samples, 0.20%)</title><rect x="480.5" y="1075.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="483.5" y="1086.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (7 samples, 0.20%)</title><rect x="480.5" y="1059.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="483.5" y="1070.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (7 samples, 0.20%)</title><rect x="480.5" y="1043.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="483.5" y="1054.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (7 samples, 0.20%)</title><rect x="480.5" y="1027.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.5" y="1038.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory$ForwardingMethodGenerator.generate (1 samples, 0.03%)</title><rect x="480.5" y="1011.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.5" y="1022.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.getReturnOpcode (1 samples, 0.03%)</title><rect x="480.5" y="995.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.5" y="1006.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (6 samples, 0.17%)</title><rect x="480.9" y="1011.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.9" y="1022.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (6 samples, 0.17%)</title><rect x="480.9" y="995.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.9" y="1006.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (6 samples, 0.17%)</title><rect x="480.9" y="979.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="483.9" y="990.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (6 samples, 0.17%)</title><rect x="480.9" y="963.0" width="2.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="483.9" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (6 samples, 0.17%)</title><rect x="480.9" y="947.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="483.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (2 samples, 0.06%)</title><rect x="480.9" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="483.9" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="480.9" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="483.9" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.03%)</title><rect x="480.9" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="483.9" y="910.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.03%)</title><rect x="480.9" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="483.9" y="894.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="480.9" y="867.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="483.9" y="878.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.03%)</title><rect x="480.9" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="483.9" y="862.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.03%)</title><rect x="480.9" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="483.9" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_class_prepare(JavaThread*, Klass*) (1 samples, 0.03%)</title><rect x="481.4" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="484.4" y="910.0"></text>
</g>
<g>
<title>JvmtiJavaThreadEventTransition::JvmtiJavaThreadEventTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="481.4" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="484.4" y="894.0"></text>
</g>
<g>
<title>ThreadToNativeFromVM::ThreadToNativeFromVM(JavaThread*) (1 samples, 0.03%)</title><rect x="481.4" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="484.4" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="481.4" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="484.4" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="481.4" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="484.4" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="481.4" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="484.4" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="481.4" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="484.4" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="481.4" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="484.4" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="481.4" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="484.4" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="481.4" y="755.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="484.4" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (4 samples, 0.11%)</title><rect x="481.8" y="931.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="484.8" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (3 samples, 0.08%)</title><rect x="481.8" y="915.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="484.8" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (3 samples, 0.08%)</title><rect x="481.8" y="899.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="484.8" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="481.8" y="883.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="484.8" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="481.8" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="484.8" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="482.3" y="883.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="485.3" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="482.3" y="867.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="485.3" y="878.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="482.3" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.3" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="482.7" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="485.7" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="482.7" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="485.7" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="482.7" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="485.7" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.03%)</title><rect x="482.7" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="485.7" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="483.2" y="915.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="486.2" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="483.2" y="899.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="486.2" y="910.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="483.2" y="883.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="486.2" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="483.2" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="486.2" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="483.2" y="851.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="486.2" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="483.2" y="835.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="486.2" y="846.0"></text>
</g>
<g>
<title>Invokers.linkToTargetMethod (4 samples, 0.11%)</title><rect x="483.6" y="1123.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.6" y="1134.0"></text>
</g>
<g>
<title>Invokers.callSiteForm (4 samples, 0.11%)</title><rect x="483.6" y="1107.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.6" y="1118.0"></text>
</g>
<g>
<title>LambdaForm$Name.&lt;init&gt; (2 samples, 0.06%)</title><rect x="483.6" y="1091.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.6" y="1102.0"></text>
</g>
<g>
<title>LambdaForm$NamedFunction.&lt;init&gt; (2 samples, 0.06%)</title><rect x="483.6" y="1075.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.6" y="1086.0"></text>
</g>
<g>
<title>Invokers.basicInvoker (2 samples, 0.06%)</title><rect x="483.6" y="1059.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.6" y="1070.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (2 samples, 0.06%)</title><rect x="483.6" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.6" y="1054.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (2 samples, 0.06%)</title><rect x="483.6" y="1027.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.6" y="1038.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (2 samples, 0.06%)</title><rect x="483.6" y="1011.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.6" y="1022.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="483.6" y="995.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="486.6" y="1006.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="483.6" y="979.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="486.6" y="990.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (2 samples, 0.06%)</title><rect x="483.6" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.6" y="974.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (2 samples, 0.06%)</title><rect x="483.6" y="947.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.6" y="958.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (2 samples, 0.06%)</title><rect x="483.6" y="931.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.6" y="942.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (2 samples, 0.06%)</title><rect x="483.6" y="915.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.6" y="926.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCodeBytes (1 samples, 0.03%)</title><rect x="483.6" y="899.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.6" y="910.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.addMethod (1 samples, 0.03%)</title><rect x="483.6" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.6" y="894.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.isStaticallyInvocable (1 samples, 0.03%)</title><rect x="483.6" y="867.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.6" y="878.0"></text>
</g>
<g>
<title>Class.isAssignableFrom (1 samples, 0.03%)</title><rect x="483.6" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.6" y="862.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (1 samples, 0.03%)</title><rect x="483.6" y="835.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="486.6" y="846.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="484.0" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.0" y="910.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="484.0" y="883.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.0" y="894.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="484.0" y="867.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.0" y="878.0"></text>
</g>
<g>
<title>Class.isArray (1 samples, 0.03%)</title><rect x="484.0" y="851.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="487.0" y="862.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.03%)</title><rect x="484.0" y="835.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="487.0" y="846.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="484.0" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="487.0" y="830.0"></text>
</g>
<g>
<title>LambdaForm.arguments (1 samples, 0.03%)</title><rect x="484.5" y="1091.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.5" y="1102.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="484.9" y="1091.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.9" y="1102.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="484.9" y="1075.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="487.9" y="1086.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (1 samples, 0.03%)</title><rect x="484.9" y="1059.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="487.9" y="1070.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (1 samples, 0.03%)</title><rect x="484.9" y="1043.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="487.9" y="1054.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="484.9" y="1027.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.9" y="1038.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="484.9" y="1011.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.9" y="1022.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="484.9" y="995.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="487.9" y="1006.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="484.9" y="979.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="487.9" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="484.9" y="963.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.9" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="484.9" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="487.9" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::layout_fields(ConstantPool*, ClassFileParser::FieldAllocationCount const*, ClassFileParser::ClassAnnotationCollector const*, ClassFileParser::FieldLayoutInfo*, Thread*) (1 samples, 0.03%)</title><rect x="484.9" y="931.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="487.9" y="942.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkMethodHandleConstant (4 samples, 0.11%)</title><rect x="485.4" y="1155.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.4" y="1166.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.linkMethodHandleConstant (4 samples, 0.11%)</title><rect x="485.4" y="1139.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="488.4" y="1150.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodForConstant (4 samples, 0.11%)</title><rect x="485.4" y="1123.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.4" y="1134.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodNoSecurityManager (4 samples, 0.11%)</title><rect x="485.4" y="1107.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.4" y="1118.0"></text>
</g>
<g>
<title>MethodHandles$Lookup.getDirectMethodCommon (4 samples, 0.11%)</title><rect x="485.4" y="1091.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.4" y="1102.0"></text>
</g>
<g>
<title>DirectMethodHandle.make (4 samples, 0.11%)</title><rect x="485.4" y="1075.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.4" y="1086.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (4 samples, 0.11%)</title><rect x="485.4" y="1059.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.4" y="1070.0"></text>
</g>
<g>
<title>DirectMethodHandle.preparedLambdaForm (4 samples, 0.11%)</title><rect x="485.4" y="1043.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.4" y="1054.0"></text>
</g>
<g>
<title>DirectMethodHandle.makePreparedLambdaForm (3 samples, 0.08%)</title><rect x="485.4" y="1027.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.4" y="1038.0"></text>
</g>
<g>
<title>LambdaForm.compileToBytecode (2 samples, 0.06%)</title><rect x="485.4" y="1011.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.4" y="1022.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.generateCustomizedCode (2 samples, 0.06%)</title><rect x="485.4" y="995.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.4" y="1006.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadMethod (2 samples, 0.06%)</title><rect x="485.4" y="979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.4" y="990.0"></text>
</g>
<g>
<title>InvokerBytecodeGenerator.loadAndInitializeInvokerClass (2 samples, 0.06%)</title><rect x="485.4" y="963.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="488.4" y="974.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (2 samples, 0.06%)</title><rect x="485.4" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.4" y="958.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (2 samples, 0.06%)</title><rect x="485.4" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.4" y="942.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (2 samples, 0.06%)</title><rect x="485.4" y="915.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="488.4" y="926.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (2 samples, 0.06%)</title><rect x="485.4" y="899.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="488.4" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="485.4" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="488.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::link_class(Thread*) (1 samples, 0.03%)</title><rect x="485.4" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="485.4" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="488.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.03%)</title><rect x="485.4" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.4" y="846.0"></text>
</g>
<g>
<title>AbstractInterpreter::method_kind(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="485.4" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="488.4" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="485.8" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="488.8" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="485.8" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="488.8" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="485.8" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="488.8" y="846.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="485.8" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.8" y="830.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="485.8" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="488.8" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="485.8" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="488.8" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="485.8" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="488.8" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="485.8" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.8" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="485.8" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="488.8" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="485.8" y="723.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="488.8" y="734.0"></text>
</g>
<g>
<title>MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="486.3" y="1011.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.3" y="1022.0"></text>
</g>
<g>
<title>MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="486.3" y="995.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.3" y="1006.0"></text>
</g>
<g>
<title>MemberName.checkForTypeAlias (1 samples, 0.03%)</title><rect x="486.3" y="979.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.3" y="990.0"></text>
</g>
<g>
<title>VerifyAccess.isTypeVisible (1 samples, 0.03%)</title><rect x="486.3" y="963.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.3" y="974.0"></text>
</g>
<g>
<title>VerifyAccess.isTypeVisible (1 samples, 0.03%)</title><rect x="486.3" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.3" y="958.0"></text>
</g>
<g>
<title>MethodTypeForm.setCachedLambdaForm (1 samples, 0.03%)</title><rect x="486.7" y="1027.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="489.7" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="486.7" y="1011.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="489.7" y="1022.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="486.7" y="995.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="489.7" y="1006.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="486.7" y="979.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="489.7" y="990.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.03%)</title><rect x="486.7" y="963.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.7" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="486.7" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="489.7" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="486.7" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="489.7" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="486.7" y="915.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="489.7" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="486.7" y="899.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="489.7" y="910.0"></text>
</g>
<g>
<title>Verticle.stop (2 samples, 0.06%)</title><rect x="487.1" y="1155.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.1" y="1166.0"></text>
</g>
<g>
<title>VertxHttpRecorder$WebDeploymentVerticle.stop (2 samples, 0.06%)</title><rect x="487.1" y="1139.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.1" y="1150.0"></text>
</g>
<g>
<title>HttpServerImpl.close (1 samples, 0.03%)</title><rect x="487.1" y="1123.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.1" y="1134.0"></text>
</g>
<g>
<title>HttpServerImpl.actualClose (1 samples, 0.03%)</title><rect x="487.1" y="1107.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="490.1" y="1118.0"></text>
</g>
<g>
<title>DefaultChannelGroup.close (1 samples, 0.03%)</title><rect x="487.1" y="1091.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.1" y="1102.0"></text>
</g>
<g>
<title>DefaultChannelGroup.close (1 samples, 0.03%)</title><rect x="487.1" y="1075.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="490.1" y="1086.0"></text>
</g>
<g>
<title>DefaultChannelGroupFuture.&lt;init&gt; (1 samples, 0.03%)</title><rect x="487.1" y="1059.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="490.1" y="1070.0"></text>
</g>
<g>
<title>DefaultChannelPromise.addListener (1 samples, 0.03%)</title><rect x="487.1" y="1043.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.1" y="1054.0"></text>
</g>
<g>
<title>DefaultChannelPromise.addListener (1 samples, 0.03%)</title><rect x="487.1" y="1027.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.1" y="1038.0"></text>
</g>
<g>
<title>DefaultPromise.addListener (1 samples, 0.03%)</title><rect x="487.1" y="1011.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.1" y="1022.0"></text>
</g>
<g>
<title>DefaultPromise.notifyListeners (1 samples, 0.03%)</title><rect x="487.1" y="995.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.1" y="1006.0"></text>
</g>
<g>
<title>DefaultPromise.safeExecute (1 samples, 0.03%)</title><rect x="487.1" y="979.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.1" y="990.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.execute (1 samples, 0.03%)</title><rect x="487.1" y="963.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.1" y="974.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.execute (1 samples, 0.03%)</title><rect x="487.1" y="947.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.1" y="958.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.addTask (1 samples, 0.03%)</title><rect x="487.1" y="931.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.1" y="942.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.offerTask (1 samples, 0.03%)</title><rect x="487.1" y="915.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.1" y="926.0"></text>
</g>
<g>
<title>MpscUnboundedArrayQueue.offer (1 samples, 0.03%)</title><rect x="487.1" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.1" y="910.0"></text>
</g>
<g>
<title>BaseMpscLinkedArrayQueue.offer (1 samples, 0.03%)</title><rect x="487.1" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.1" y="894.0"></text>
</g>
<g>
<title>BaseMpscLinkedArrayQueueProducerFields.casProducerIndex (1 samples, 0.03%)</title><rect x="487.1" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.1" y="878.0"></text>
</g>
<g>
<title>Unsafe.compareAndSwapLong (1 samples, 0.03%)</title><rect x="487.1" y="851.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.1" y="862.0"></text>
</g>
<g>
<title>Unsafe.compareAndSetLong (1 samples, 0.03%)</title><rect x="487.1" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.1" y="846.0"></text>
</g>
<g>
<title>long Access&lt;524288ull&gt;::atomic_cmpxchg_at&lt;long&gt;(long, oopDesc*, long, long) (1 samples, 0.03%)</title><rect x="487.1" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="490.1" y="830.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="487.6" y="1123.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.6" y="1134.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="487.6" y="1107.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.6" y="1118.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="487.6" y="1091.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.6" y="1102.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="487.6" y="1075.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.6" y="1086.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="487.6" y="1059.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.6" y="1070.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="487.6" y="1043.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="490.6" y="1054.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="487.6" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.6" y="1038.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="487.6" y="1011.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.6" y="1022.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="487.6" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.6" y="1006.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass (1 samples, 0.03%)</title><rect x="487.6" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.6" y="990.0"></text>
</g>
<g>
<title>Unsafe.defineAnonymousClass0 (1 samples, 0.03%)</title><rect x="487.6" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="490.6" y="974.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass0(JNIEnv_*, _jobject*, _jclass*, _jbyteArray*, _jobjectArray*) (1 samples, 0.03%)</title><rect x="487.6" y="947.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="490.6" y="958.0"></text>
</g>
<g>
<title>Unsafe_DefineAnonymousClass_impl(JNIEnv_*, _jclass*, _jbyteArray*, _jobjectArray*, unsigned char**, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="931.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="490.6" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::parse_stream(Symbol*, Handle, Handle, ClassFileStream*, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.6" y="926.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="490.6" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="490.6" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="490.6" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="490.6" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="487.6" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="490.6" y="846.0"></text>
</g>
<g>
<title>1706151225.run (2 samples, 0.06%)</title><rect x="488.0" y="1235.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="491.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionBase.lambda$queueForWrite$2 (2 samples, 0.06%)</title><rect x="488.0" y="1219.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionBase.write (2 samples, 0.06%)</title><rect x="488.0" y="1203.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.0" y="1214.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.06%)</title><rect x="488.0" y="1187.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.0" y="1198.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.write (2 samples, 0.06%)</title><rect x="488.0" y="1171.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.0" y="1182.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeWriteAndFlush (2 samples, 0.06%)</title><rect x="488.0" y="1155.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.0" y="1166.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.03%)</title><rect x="488.0" y="1139.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.0" y="1150.0"></text>
</g>
<g>
<title>ChannelDuplexHandler.flush (1 samples, 0.03%)</title><rect x="488.0" y="1123.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.0" y="1134.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.flush (1 samples, 0.03%)</title><rect x="488.0" y="1107.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.0" y="1118.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeFlush (1 samples, 0.03%)</title><rect x="488.0" y="1091.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.0" y="1102.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.03%)</title><rect x="488.0" y="1075.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.0" y="1086.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$HeadContext.flush (1 samples, 0.03%)</title><rect x="488.0" y="1059.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.0" y="1070.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe.flush (1 samples, 0.03%)</title><rect x="488.0" y="1043.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.0" y="1054.0"></text>
</g>
<g>
<title>AbstractNioChannel$AbstractNioUnsafe.flush0 (1 samples, 0.03%)</title><rect x="488.0" y="1027.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.0" y="1038.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe.flush0 (1 samples, 0.03%)</title><rect x="488.0" y="1011.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.0" y="1022.0"></text>
</g>
<g>
<title>NioSocketChannel.doWrite (1 samples, 0.03%)</title><rect x="488.0" y="995.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.0" y="1006.0"></text>
</g>
<g>
<title>SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="488.0" y="979.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.0" y="990.0"></text>
</g>
<g>
<title>IOUtil.write (1 samples, 0.03%)</title><rect x="488.0" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.0" y="974.0"></text>
</g>
<g>
<title>IOUtil.write (1 samples, 0.03%)</title><rect x="488.0" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.0" y="958.0"></text>
</g>
<g>
<title>IOUtil.writeFromNativeBuffer (1 samples, 0.03%)</title><rect x="488.0" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.0" y="942.0"></text>
</g>
<g>
<title>SocketDispatcher.write (1 samples, 0.03%)</title><rect x="488.0" y="915.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.0" y="926.0"></text>
</g>
<g>
<title>FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="488.0" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.0" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="488.0" y="883.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="491.0" y="894.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="488.0" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="491.0" y="878.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="488.0" y="851.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="491.0" y="862.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="488.0" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.0" y="846.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="488.0" y="819.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="491.0" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="488.0" y="803.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="491.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="787.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="491.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="771.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="491.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="755.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="491.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="739.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="491.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="723.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="491.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="707.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="491.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="488.0" y="691.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="491.0" y="702.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="488.5" y="1139.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.5" y="1150.0"></text>
</g>
<g>
<title>WebSocketServerExtensionHandler.write (1 samples, 0.03%)</title><rect x="488.5" y="1123.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.5" y="1134.0"></text>
</g>
<g>
<title>ChannelDuplexHandler.write (1 samples, 0.03%)</title><rect x="488.5" y="1107.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.5" y="1118.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="488.5" y="1091.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.5" y="1102.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="488.5" y="1075.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.5" y="1086.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeWrite (1 samples, 0.03%)</title><rect x="488.5" y="1059.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.5" y="1070.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="488.5" y="1043.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.5" y="1054.0"></text>
</g>
<g>
<title>IdleStateHandler.write (1 samples, 0.03%)</title><rect x="488.5" y="1027.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.5" y="1038.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="488.5" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.5" y="1022.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="488.5" y="995.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.5" y="1006.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeWrite (1 samples, 0.03%)</title><rect x="488.5" y="979.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.5" y="990.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="488.5" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.5" y="974.0"></text>
</g>
<g>
<title>MessageToMessageEncoder.write (1 samples, 0.03%)</title><rect x="488.5" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.5" y="958.0"></text>
</g>
<g>
<title>ReferenceCountUtil.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="488.5" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.5" y="942.0"></text>
</g>
<g>
<title>InternalLoggerFactory.getInstance (1 samples, 0.03%)</title><rect x="488.5" y="915.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.5" y="926.0"></text>
</g>
<g>
<title>InternalLoggerFactory.getInstance (1 samples, 0.03%)</title><rect x="488.5" y="899.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.5" y="910.0"></text>
</g>
<g>
<title>Slf4JLoggerFactory.newInstance (1 samples, 0.03%)</title><rect x="488.5" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.5" y="894.0"></text>
</g>
<g>
<title>LoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="488.5" y="867.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.5" y="878.0"></text>
</g>
<g>
<title>JBossLoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="488.5" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.5" y="862.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="488.5" y="835.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.5" y="846.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="488.5" y="819.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.5" y="830.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="488.5" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.5" y="814.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="488.5" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.5" y="798.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="488.5" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.5" y="782.0"></text>
</g>
<g>
<title>Reflection.getCallerClass (1 samples, 0.03%)</title><rect x="488.5" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.5" y="766.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.03%)</title><rect x="488.5" y="739.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="491.5" y="750.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="488.5" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="491.5" y="734.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe$1.run (1 samples, 0.03%)</title><rect x="488.9" y="1235.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.9" y="1246.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe.access$200 (1 samples, 0.03%)</title><rect x="488.9" y="1219.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.9" y="1230.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe.register0 (1 samples, 0.03%)</title><rect x="488.9" y="1203.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.9" y="1214.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.invokeHandlerAddedIfNeeded (1 samples, 0.03%)</title><rect x="488.9" y="1187.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.9" y="1198.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.callHandlerAddedForAllHandlers (1 samples, 0.03%)</title><rect x="488.9" y="1171.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="491.9" y="1182.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$PendingHandlerAddedTask.execute (1 samples, 0.03%)</title><rect x="488.9" y="1155.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.9" y="1166.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.access$100 (1 samples, 0.03%)</title><rect x="488.9" y="1139.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.9" y="1150.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.callHandlerAdded0 (1 samples, 0.03%)</title><rect x="488.9" y="1123.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.9" y="1134.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.callHandlerAdded (1 samples, 0.03%)</title><rect x="488.9" y="1107.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.9" y="1118.0"></text>
</g>
<g>
<title>ChannelInitializer.handlerAdded (1 samples, 0.03%)</title><rect x="488.9" y="1091.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.9" y="1102.0"></text>
</g>
<g>
<title>ChannelInitializer.initChannel (1 samples, 0.03%)</title><rect x="488.9" y="1075.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="491.9" y="1086.0"></text>
</g>
<g>
<title>HttpServerImpl$1.initChannel (1 samples, 0.03%)</title><rect x="488.9" y="1059.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.9" y="1070.0"></text>
</g>
<g>
<title>HttpServerChannelInitializer.initChannel (1 samples, 0.03%)</title><rect x="488.9" y="1043.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.9" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="488.9" y="1027.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="491.9" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="488.9" y="1011.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="491.9" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="488.9" y="995.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.9" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="488.9" y="979.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.9" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="488.9" y="963.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.9" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="488.9" y="947.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.9" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="488.9" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.9" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="488.9" y="915.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.9" y="926.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="488.9" y="899.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="491.9" y="910.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="488.9" y="883.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="491.9" y="894.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="488.9" y="867.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="491.9" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="488.9" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="491.9" y="862.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="488.9" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="491.9" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="488.9" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="491.9" y="830.0"></text>
</g>
<g>
<title>klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, AccessFlags, unsigned short, Handle, Symbol*, Array&lt;Klass*&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="488.9" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="491.9" y="814.0"></text>
</g>
<g>
<title>klassVtable::get_mirandas(GrowableArray&lt;Method*&gt;*, GrowableArray&lt;Method*&gt;*, Klass const*, Array&lt;Method*&gt;*, Array&lt;Method*&gt;*, Array&lt;Klass*&gt;*, bool) (1 samples, 0.03%)</title><rect x="488.9" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="491.9" y="798.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe$8.run (1 samples, 0.03%)</title><rect x="489.4" y="1235.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.4" y="1246.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.fireChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1219.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="492.4" y="1230.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1203.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="492.4" y="1214.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1187.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="492.4" y="1198.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$HeadContext.channelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1171.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.4" y="1182.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1155.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.4" y="1166.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1139.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.4" y="1150.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1123.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.4" y="1134.0"></text>
</g>
<g>
<title>ByteToMessageDecoder.channelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1107.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.4" y="1118.0"></text>
</g>
<g>
<title>ByteToMessageDecoder.channelInputClosed (1 samples, 0.03%)</title><rect x="489.4" y="1091.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.4" y="1102.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1075.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.4" y="1086.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.4" y="1070.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1043.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.4" y="1054.0"></text>
</g>
<g>
<title>IdleStateHandler.channelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.4" y="1038.0"></text>
</g>
<g>
<title>ChannelInboundHandlerAdapter.channelInactive (1 samples, 0.03%)</title><rect x="489.4" y="1011.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.4" y="1022.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.fireChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="995.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.4" y="1006.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="979.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.4" y="990.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeChannelInactive (1 samples, 0.03%)</title><rect x="489.4" y="963.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.4" y="974.0"></text>
</g>
<g>
<title>VertxHandler.channelInactive (1 samples, 0.03%)</title><rect x="489.4" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.4" y="958.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="489.4" y="931.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.4" y="942.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="489.4" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.4" y="926.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="489.4" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.4" y="910.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="489.4" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.4" y="894.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="489.4" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.4" y="878.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="489.4" y="851.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="492.4" y="862.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="489.4" y="835.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.4" y="846.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="489.4" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.4" y="830.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="489.4" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.4" y="814.0"></text>
</g>
<g>
<title>ClassWriter.toByteArray (1 samples, 0.03%)</title><rect x="489.4" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.4" y="798.0"></text>
</g>
<g>
<title>MethodWriter.put (1 samples, 0.03%)</title><rect x="489.4" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.4" y="782.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.pollTask (1 samples, 0.03%)</title><rect x="489.8" y="1251.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.8" y="1262.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.pollTaskFrom (1 samples, 0.03%)</title><rect x="489.8" y="1235.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.8" y="1246.0"></text>
</g>
<g>
<title>MpscUnboundedArrayQueue.poll (1 samples, 0.03%)</title><rect x="489.8" y="1219.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.8" y="1230.0"></text>
</g>
<g>
<title>BaseMpscLinkedArrayQueue.poll (1 samples, 0.03%)</title><rect x="489.8" y="1203.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.8" y="1214.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.runAllTasksFrom (2 samples, 0.06%)</title><rect x="490.2" y="1251.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="493.2" y="1262.0"></text>
</g>
<g>
<title>AbstractEventExecutor.safeExecute (2 samples, 0.06%)</title><rect x="490.2" y="1235.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.2" y="1246.0"></text>
</g>
<g>
<title>AbstractBootstrap$2.run (2 samples, 0.06%)</title><rect x="490.2" y="1219.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="493.2" y="1230.0"></text>
</g>
<g>
<title>AbstractChannel.bind (1 samples, 0.03%)</title><rect x="490.2" y="1203.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.2" y="1214.0"></text>
</g>
<g>
<title>DefaultChannelPipeline.bind (1 samples, 0.03%)</title><rect x="490.2" y="1187.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.2" y="1198.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.bind (1 samples, 0.03%)</title><rect x="490.2" y="1171.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.2" y="1182.0"></text>
</g>
<g>
<title>AbstractChannelHandlerContext.invokeBind (1 samples, 0.03%)</title><rect x="490.2" y="1155.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.2" y="1166.0"></text>
</g>
<g>
<title>DefaultChannelPipeline$HeadContext.bind (1 samples, 0.03%)</title><rect x="490.2" y="1139.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.2" y="1150.0"></text>
</g>
<g>
<title>AbstractChannel$AbstractUnsafe.bind (1 samples, 0.03%)</title><rect x="490.2" y="1123.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.2" y="1134.0"></text>
</g>
<g>
<title>NioServerSocketChannel.doBind (1 samples, 0.03%)</title><rect x="490.2" y="1107.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.2" y="1118.0"></text>
</g>
<g>
<title>ServerSocketChannelImpl.bind (1 samples, 0.03%)</title><rect x="490.2" y="1091.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.2" y="1102.0"></text>
</g>
<g>
<title>Net.localAddress (1 samples, 0.03%)</title><rect x="490.2" y="1075.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.2" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="490.2" y="1059.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.2" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="490.2" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="493.2" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="490.2" y="1027.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.2" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="490.2" y="1011.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="493.2" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="490.2" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="493.2" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="490.2" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="493.2" y="990.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="490.2" y="963.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="493.2" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="490.2" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="493.2" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="490.2" y="931.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="493.2" y="942.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="490.2" y="915.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="493.2" y="926.0"></text>
</g>
<g>
<title>ChannelFutureListener.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="490.7" y="1203.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.7" y="1214.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="490.7" y="1187.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.7" y="1198.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="490.7" y="1171.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.7" y="1182.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="490.7" y="1155.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.7" y="1166.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="490.7" y="1139.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.7" y="1150.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="490.7" y="1123.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.7" y="1134.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="490.7" y="1107.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="493.7" y="1118.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="490.7" y="1091.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.7" y="1102.0"></text>
</g>
<g>
<title>ZipFile$Source.readFullyAt (1 samples, 0.03%)</title><rect x="490.7" y="1075.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.7" y="1086.0"></text>
</g>
<g>
<title>RandomAccessFile.seek (1 samples, 0.03%)</title><rect x="490.7" y="1059.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.7" y="1070.0"></text>
</g>
<g>
<title>RandomAccessFile.seek0 (1 samples, 0.03%)</title><rect x="490.7" y="1043.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="493.7" y="1054.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="490.7" y="1027.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="493.7" y="1038.0"></text>
</g>
<g>
<title>SingleThreadEventLoop.hasTasks (1 samples, 0.03%)</title><rect x="491.1" y="1267.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.1" y="1278.0"></text>
</g>
<g>
<title>SingleThreadEventExecutor.hasTasks (1 samples, 0.03%)</title><rect x="491.1" y="1251.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="494.1" y="1262.0"></text>
</g>
<g>
<title>MpscUnboundedArrayQueue.isEmpty (1 samples, 0.03%)</title><rect x="491.1" y="1235.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.1" y="1246.0"></text>
</g>
<g>
<title>BaseMpscLinkedArrayQueue.isEmpty (1 samples, 0.03%)</title><rect x="491.1" y="1219.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.1" y="1230.0"></text>
</g>
<g>
<title>BaseMpscLinkedArrayQueueProducerFields.lvProducerIndex (1 samples, 0.03%)</title><rect x="491.1" y="1203.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="494.1" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="491.1" y="1187.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="494.1" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="491.1" y="1171.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="494.1" y="1182.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="491.1" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="494.1" y="1166.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="491.1" y="1139.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="494.1" y="1150.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="491.1" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.1" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.03%)</title><rect x="491.1" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="494.1" y="1118.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.03%)</title><rect x="491.1" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="494.1" y="1102.0"></text>
</g>
<g>
<title>ThreadPoolExecutor$Worker.run (1 samples, 0.03%)</title><rect x="491.6" y="1315.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="494.6" y="1326.0"></text>
</g>
<g>
<title>ThreadPoolExecutor.runWorker (1 samples, 0.03%)</title><rect x="491.6" y="1299.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.6" y="1310.0"></text>
</g>
<g>
<title>162320368.run (1 samples, 0.03%)</title><rect x="491.6" y="1283.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="494.6" y="1294.0"></text>
</g>
<g>
<title>TaskQueue.run (1 samples, 0.03%)</title><rect x="491.6" y="1267.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.6" y="1278.0"></text>
</g>
<g>
<title>1342259528.run (1 samples, 0.03%)</title><rect x="491.6" y="1251.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="494.6" y="1262.0"></text>
</g>
<g>
<title>ContextImpl.lambda$executeBlocking$2 (1 samples, 0.03%)</title><rect x="491.6" y="1235.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.6" y="1246.0"></text>
</g>
<g>
<title>1863931581.handle (1 samples, 0.03%)</title><rect x="491.6" y="1219.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="494.6" y="1230.0"></text>
</g>
<g>
<title>VertxImpl.lambda$deleteCacheDirAndShutdown$28 (1 samples, 0.03%)</title><rect x="491.6" y="1203.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.6" y="1214.0"></text>
</g>
<g>
<title>FileResolver.close (1 samples, 0.03%)</title><rect x="491.6" y="1187.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.6" y="1198.0"></text>
</g>
<g>
<title>Runtime.removeShutdownHook (1 samples, 0.03%)</title><rect x="491.6" y="1171.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.6" y="1182.0"></text>
</g>
<g>
<title>NettyRecorder$1.run (24 samples, 0.67%)</title><rect x="492.0" y="1331.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.0" y="1342.0"></text>
</g>
<g>
<title>DefaultChannelId.&lt;clinit&gt; (24 samples, 0.67%)</title><rect x="492.0" y="1315.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.0" y="1326.0"></text>
</g>
<g>
<title>DefaultChannelId.defaultProcessId (17 samples, 0.48%)</title><rect x="492.0" y="1299.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.0" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="492.0" y="1283.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="495.0" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="492.0" y="1267.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="495.0" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="492.0" y="1251.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="495.0" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="492.0" y="1235.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.0" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="492.0" y="1219.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="495.0" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="492.0" y="1203.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.0" y="1214.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="492.0" y="1187.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="495.0" y="1198.0"></text>
</g>
<g>
<title>ClassVerifier::~ClassVerifier() (1 samples, 0.03%)</title><rect x="492.0" y="1171.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="495.0" y="1182.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="492.0" y="1155.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="495.0" y="1166.0"></text>
</g>
<g>
<title>Method.invoke (1 samples, 0.03%)</title><rect x="492.4" y="1283.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="495.4" y="1294.0"></text>
</g>
<g>
<title>DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="492.4" y="1267.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.4" y="1278.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="492.4" y="1251.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="495.4" y="1262.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke0 (1 samples, 0.03%)</title><rect x="492.4" y="1235.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="495.4" y="1246.0"></text>
</g>
<g>
<title>RuntimeImpl.getName (1 samples, 0.03%)</title><rect x="492.4" y="1219.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.4" y="1230.0"></text>
</g>
<g>
<title>VMManagementImpl.getVmId (1 samples, 0.03%)</title><rect x="492.4" y="1203.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="495.4" y="1214.0"></text>
</g>
<g>
<title>VMManagementImpl.getProcessId (1 samples, 0.03%)</title><rect x="492.4" y="1187.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.4" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="492.4" y="1171.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="495.4" y="1182.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="492.4" y="1155.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.4" y="1166.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="492.4" y="1139.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.4" y="1150.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="492.4" y="1123.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="495.4" y="1134.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="492.4" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.4" y="1118.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="492.4" y="1091.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="495.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="492.4" y="1075.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="495.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="492.4" y="1059.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="495.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="492.4" y="1043.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="495.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="492.4" y="1027.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="495.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="492.4" y="1011.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="495.4" y="1022.0"></text>
</g>
<g>
<title>PlatformDependent.&lt;clinit&gt; (9 samples, 0.25%)</title><rect x="492.9" y="1283.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.9" y="1294.0"></text>
</g>
<g>
<title>PlatformDependent.isAndroid (2 samples, 0.06%)</title><rect x="492.9" y="1267.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="495.9" y="1278.0"></text>
</g>
<g>
<title>PlatformDependent0.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="492.9" y="1251.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="495.9" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="492.9" y="1235.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.9" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="492.9" y="1219.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.9" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="492.9" y="1203.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="495.9" y="1214.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="492.9" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.9" y="1198.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="492.9" y="1171.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="495.9" y="1182.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="492.9" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.9" y="1166.0"></text>
</g>
<g>
<title>ClassVerifier::verify_exception_handler_targets(unsigned short, bool, StackMapFrame*, StackMapTable*, Thread*) (1 samples, 0.03%)</title><rect x="492.9" y="1139.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="495.9" y="1150.0"></text>
</g>
<g>
<title>StackMapFrame::frame_in_exception_handler(unsigned char) (1 samples, 0.03%)</title><rect x="492.9" y="1123.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="495.9" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="492.9" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="495.9" y="1118.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="492.9" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.9" y="1102.0"></text>
</g>
<g>
<title>PlatformDependent0.javaVersion0 (1 samples, 0.03%)</title><rect x="493.3" y="1235.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.3" y="1246.0"></text>
</g>
<g>
<title>PlatformDependent0.isAndroid0 (1 samples, 0.03%)</title><rect x="493.3" y="1219.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.3" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="493.3" y="1203.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="496.3" y="1214.0"></text>
</g>
<g>
<title>ConstantPool::resolve_cached_constant_at(int, Thread*) (1 samples, 0.03%)</title><rect x="493.3" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="496.3" y="1198.0"></text>
</g>
<g>
<title>ConstantPool::resolve_constant_at_impl(constantPoolHandle const&amp;, int, int, bool*, Thread*) (1 samples, 0.03%)</title><rect x="493.3" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.3" y="1182.0"></text>
</g>
<g>
<title>ConstantPool::string_at_impl(constantPoolHandle const&amp;, int, int, Thread*) (1 samples, 0.03%)</title><rect x="493.3" y="1155.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="496.3" y="1166.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="493.3" y="1139.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="496.3" y="1150.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.03%)</title><rect x="493.3" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="496.3" y="1134.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.03%)</title><rect x="493.3" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="496.3" y="1118.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupJchar, StringTableGet&gt;(Thread*, StringTableLookupJchar&amp;, StringTableGet&amp;, bool*) (1 samples, 0.03%)</title><rect x="493.3" y="1091.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="496.3" y="1102.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)2&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupJchar&gt;(Thread*, StringTableLookupJchar&amp;, bool*) (1 samples, 0.03%)</title><rect x="493.3" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="496.3" y="1086.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupJchar&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupJchar&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="493.3" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="496.3" y="1070.0"></text>
</g>
<g>
<title>StringTableLookupJchar::equals(WeakHandle&lt;(WeakHandleType)2&gt;*, bool*) (1 samples, 0.03%)</title><rect x="493.3" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="496.3" y="1054.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, unsigned short*, int) (1 samples, 0.03%)</title><rect x="493.3" y="1027.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="496.3" y="1038.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 565366ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.03%)</title><rect x="493.3" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="496.3" y="1022.0"></text>
</g>
<g>
<title>PlatformDependent.maxDirectMemory0 (7 samples, 0.20%)</title><rect x="493.8" y="1267.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.8" y="1278.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="493.8" y="1251.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.8" y="1262.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="493.8" y="1235.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.8" y="1246.0"></text>
</g>
<g>
<title>ManagementFactory.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="493.8" y="1219.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.8" y="1230.0"></text>
</g>
<g>
<title>Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="493.8" y="1203.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.8" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="493.8" y="1187.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="496.8" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="493.8" y="1171.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="496.8" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="493.8" y="1155.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="496.8" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="493.8" y="1139.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="496.8" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="493.8" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="496.8" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokehandle(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="493.8" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="496.8" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_handle_call(CallInfo&amp;, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="493.8" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="496.8" y="1102.0"></text>
</g>
<g>
<title>MethodHandles::signature_polymorphic_name_id(Symbol*) (1 samples, 0.03%)</title><rect x="493.8" y="1075.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="496.8" y="1086.0"></text>
</g>
<g>
<title>Method.invoke (6 samples, 0.17%)</title><rect x="494.2" y="1251.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.2" y="1262.0"></text>
</g>
<g>
<title>DelegatingMethodAccessorImpl.invoke (6 samples, 0.17%)</title><rect x="494.2" y="1235.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="497.2" y="1246.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke (6 samples, 0.17%)</title><rect x="494.2" y="1219.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.2" y="1230.0"></text>
</g>
<g>
<title>NativeMethodAccessorImpl.invoke0 (6 samples, 0.17%)</title><rect x="494.2" y="1203.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.2" y="1214.0"></text>
</g>
<g>
<title>ManagementFactory.getRuntimeMXBean (5 samples, 0.14%)</title><rect x="494.2" y="1187.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.2" y="1198.0"></text>
</g>
<g>
<title>ManagementFactory.getPlatformMXBean (5 samples, 0.14%)</title><rect x="494.2" y="1171.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.2" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="494.2" y="1155.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.2" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="494.2" y="1139.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="497.2" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="497.2" y="1134.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1107.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="497.2" y="1118.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1091.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="497.2" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1075.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="497.2" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1059.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="497.2" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1043.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="497.2" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="497.2" y="1038.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="497.2" y="1022.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="497.2" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="979.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="497.2" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="963.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="497.2" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="497.2" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="494.2" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="497.2" y="942.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="494.2" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="497.2" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="494.2" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="497.2" y="910.0"></text>
</g>
<g>
<title>ManagementFactory$PlatformMBeanFinder.&lt;clinit&gt; (3 samples, 0.08%)</title><rect x="494.7" y="1155.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="497.7" y="1166.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="494.7" y="1139.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.7" y="1150.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="494.7" y="1123.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.7" y="1134.0"></text>
</g>
<g>
<title>245928744.run (2 samples, 0.06%)</title><rect x="494.7" y="1107.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="497.7" y="1118.0"></text>
</g>
<g>
<title>ManagementFactory$PlatformMBeanFinder.lambda$static$0 (2 samples, 0.06%)</title><rect x="494.7" y="1091.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.7" y="1102.0"></text>
</g>
<g>
<title>DefaultPlatformMBeanProvider.&lt;init&gt; (1 samples, 0.03%)</title><rect x="494.7" y="1075.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.7" y="1086.0"></text>
</g>
<g>
<title>DefaultPlatformMBeanProvider.init (1 samples, 0.03%)</title><rect x="494.7" y="1059.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.7" y="1070.0"></text>
</g>
<g>
<title>DefaultPlatformMBeanProvider$4.&lt;init&gt; (1 samples, 0.03%)</title><rect x="494.7" y="1043.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.7" y="1054.0"></text>
</g>
<g>
<title>Stream.of (1 samples, 0.03%)</title><rect x="494.7" y="1027.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="497.7" y="1038.0"></text>
</g>
<g>
<title>Iterable.forEach (1 samples, 0.03%)</title><rect x="495.1" y="1075.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.1" y="1086.0"></text>
</g>
<g>
<title>ServiceLoader$3.next (1 samples, 0.03%)</title><rect x="495.1" y="1059.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.1" y="1070.0"></text>
</g>
<g>
<title>ServiceLoader$ProviderImpl.get (1 samples, 0.03%)</title><rect x="495.1" y="1043.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.1" y="1054.0"></text>
</g>
<g>
<title>ServiceLoader$ProviderImpl.newInstance (1 samples, 0.03%)</title><rect x="495.1" y="1027.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.1" y="1038.0"></text>
</g>
<g>
<title>Constructor.newInstance (1 samples, 0.03%)</title><rect x="495.1" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="498.1" y="1022.0"></text>
</g>
<g>
<title>DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="495.1" y="995.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.1" y="1006.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="495.1" y="979.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="498.1" y="990.0"></text>
</g>
<g>
<title>NativeConstructorAccessorImpl.newInstance0 (1 samples, 0.03%)</title><rect x="495.1" y="963.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="498.1" y="974.0"></text>
</g>
<g>
<title>PlatformMBeanProviderImpl.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="495.1" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.1" y="958.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="495.1" y="931.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.1" y="942.0"></text>
</g>
<g>
<title>1211721882.run (1 samples, 0.03%)</title><rect x="495.1" y="915.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="498.1" y="926.0"></text>
</g>
<g>
<title>PlatformMBeanProviderImpl.lambda$static$0 (1 samples, 0.03%)</title><rect x="495.1" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.1" y="910.0"></text>
</g>
<g>
<title>System.loadLibrary (1 samples, 0.03%)</title><rect x="495.1" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.1" y="894.0"></text>
</g>
<g>
<title>Runtime.loadLibrary0 (1 samples, 0.03%)</title><rect x="495.1" y="867.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="498.1" y="878.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary (1 samples, 0.03%)</title><rect x="495.1" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.1" y="862.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary0 (1 samples, 0.03%)</title><rect x="495.1" y="835.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.1" y="846.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.loadLibrary (1 samples, 0.03%)</title><rect x="495.1" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.1" y="830.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load (1 samples, 0.03%)</title><rect x="495.1" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.1" y="814.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load0 (1 samples, 0.03%)</title><rect x="495.1" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="498.1" y="798.0"></text>
</g>
<g>
<title>Profiler::NativeLibraryLoadTrap(JNIEnv_*, _jobject*, _jstring*, unsigned char) (1 samples, 0.03%)</title><rect x="495.1" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="498.1" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_load0 (1 samples, 0.03%)</title><rect x="495.1" y="755.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="498.1" y="766.0"></text>
</g>
<g>
<title>JVM_LoadLibrary (1 samples, 0.03%)</title><rect x="495.1" y="739.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="498.1" y="750.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.03%)</title><rect x="495.1" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.1" y="734.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="495.1" y="707.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="498.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="691.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="498.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="675.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="498.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="659.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="498.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="643.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="498.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="627.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="498.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="611.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="498.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="495.1" y="595.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="498.1" y="606.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="495.5" y="1139.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.5" y="1150.0"></text>
</g>
<g>
<title>MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="495.5" y="1123.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.5" y="1134.0"></text>
</g>
<g>
<title>CallSite.makeSite (1 samples, 0.03%)</title><rect x="495.5" y="1107.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.5" y="1118.0"></text>
</g>
<g>
<title>BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="495.5" y="1091.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.5" y="1102.0"></text>
</g>
<g>
<title>Invokers$Holder.invokeExact_MT (1 samples, 0.03%)</title><rect x="495.5" y="1075.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.5" y="1086.0"></text>
</g>
<g>
<title>2008159348.invokeStatic (1 samples, 0.03%)</title><rect x="495.5" y="1059.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="498.5" y="1070.0"></text>
</g>
<g>
<title>LambdaMetafactory.metafactory (1 samples, 0.03%)</title><rect x="495.5" y="1043.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.5" y="1054.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="495.5" y="1027.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.5" y="1038.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory.spinInnerClass (1 samples, 0.03%)</title><rect x="495.5" y="1011.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.5" y="1022.0"></text>
</g>
<g>
<title>InnerClassLambdaMetafactory$ForwardingMethodGenerator.generate (1 samples, 0.03%)</title><rect x="495.5" y="995.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.5" y="1006.0"></text>
</g>
<g>
<title>MethodVisitor.visitMethodInsn (1 samples, 0.03%)</title><rect x="495.5" y="979.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.5" y="990.0"></text>
</g>
<g>
<title>MethodWriter.visitMethodInsn (1 samples, 0.03%)</title><rect x="495.5" y="963.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.5" y="974.0"></text>
</g>
<g>
<title>ClassWriter.newMethodItem (1 samples, 0.03%)</title><rect x="495.5" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.5" y="958.0"></text>
</g>
<g>
<title>Item.set (1 samples, 0.03%)</title><rect x="495.5" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.5" y="942.0"></text>
</g>
<g>
<title>String.hashCode (1 samples, 0.03%)</title><rect x="495.5" y="915.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.5" y="926.0"></text>
</g>
<g>
<title>StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="495.5" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.5" y="910.0"></text>
</g>
<g>
<title>PlatformMBeanProvider$PlatformComponent.getMBeans (1 samples, 0.03%)</title><rect x="496.0" y="1155.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.0" y="1166.0"></text>
</g>
<g>
<title>DefaultPlatformMBeanProvider$7.nameToMBeanMap (1 samples, 0.03%)</title><rect x="496.0" y="1139.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.0" y="1150.0"></text>
</g>
<g>
<title>ManagementFactoryHelper.getRuntimeMXBean (1 samples, 0.03%)</title><rect x="496.0" y="1123.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.0" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="496.0" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="499.0" y="1118.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="499.0" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="499.0" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="499.0" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="499.0" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="1027.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="1011.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="499.0" y="1022.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="995.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="499.0" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="979.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="499.0" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="499.0" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="496.0" y="947.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="499.0" y="958.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="496.0" y="931.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="499.0" y="942.0"></text>
</g>
<g>
<title>RuntimeImpl.getInputArguments (1 samples, 0.03%)</title><rect x="496.4" y="1187.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.4" y="1198.0"></text>
</g>
<g>
<title>VMManagementImpl.getVmArguments (1 samples, 0.03%)</title><rect x="496.4" y="1171.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.4" y="1182.0"></text>
</g>
<g>
<title>VMManagementImpl.getVmArguments0 (1 samples, 0.03%)</title><rect x="496.4" y="1155.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.4" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.findNative (1 samples, 0.03%)</title><rect x="496.4" y="1139.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.4" y="1150.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.findEntry (1 samples, 0.03%)</title><rect x="496.4" y="1123.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.4" y="1134.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.03%)</title><rect x="496.4" y="1107.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="499.4" y="1118.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="496.4" y="1091.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="499.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="1075.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="499.4" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="1059.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="499.4" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="1043.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="499.4" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="1027.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="499.4" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="1011.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="499.4" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="995.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="499.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="979.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="499.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="963.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="499.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="496.4" y="947.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="499.4" y="958.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (6 samples, 0.17%)</title><rect x="496.9" y="1283.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.9" y="1294.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (6 samples, 0.17%)</title><rect x="496.9" y="1267.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.9" y="1278.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (3 samples, 0.08%)</title><rect x="496.9" y="1251.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.9" y="1262.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (3 samples, 0.08%)</title><rect x="496.9" y="1235.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.9" y="1246.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="496.9" y="1219.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.9" y="1230.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (3 samples, 0.08%)</title><rect x="496.9" y="1203.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.9" y="1214.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="496.9" y="1187.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.9" y="1198.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="496.9" y="1171.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.9" y="1182.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="496.9" y="1155.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="499.9" y="1166.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="496.9" y="1139.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="499.9" y="1150.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1123.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="499.9" y="1134.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="499.9" y="1118.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="499.9" y="1102.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="499.9" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="499.9" y="1070.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1043.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="499.9" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="496.9" y="1027.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="499.9" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="1155.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.3" y="1166.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.3" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="497.3" y="1123.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.3" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="497.3" y="1107.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.3" y="1118.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="1091.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.3" y="1102.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="1075.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.3" y="1086.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="497.3" y="1059.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.3" y="1070.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="497.3" y="1043.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.3" y="1054.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.3" y="1038.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="1011.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.3" y="1022.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="497.3" y="995.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.3" y="1006.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="497.3" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.3" y="990.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.3" y="974.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.3" y="958.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="497.3" y="931.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.3" y="942.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="497.3" y="915.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.3" y="926.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="899.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.3" y="910.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="883.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.3" y="894.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="497.3" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.3" y="878.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="497.3" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.3" y="862.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.3" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="819.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.3" y="830.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="497.3" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.3" y="814.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="497.3" y="787.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.3" y="798.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.3" y="782.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="497.3" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.3" y="766.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="497.3" y="739.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.3" y="750.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="497.3" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.3" y="734.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="497.3" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.3" y="718.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="497.3" y="691.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.3" y="702.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="497.3" y="675.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="500.3" y="686.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="497.3" y="659.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="500.3" y="670.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="497.3" y="643.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="500.3" y="654.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="497.8" y="1187.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.8" y="1198.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="497.8" y="1171.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.8" y="1182.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.03%)</title><rect x="497.8" y="1155.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.8" y="1166.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.read (1 samples, 0.03%)</title><rect x="497.8" y="1139.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.8" y="1150.0"></text>
</g>
<g>
<title>ZipFile$ZipFileInputStream.initDataOffset (1 samples, 0.03%)</title><rect x="497.8" y="1123.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.8" y="1134.0"></text>
</g>
<g>
<title>ZipUtils.LOCSIG (1 samples, 0.03%)</title><rect x="497.8" y="1107.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.8" y="1118.0"></text>
</g>
<g>
<title>ZipUtils.LG (1 samples, 0.03%)</title><rect x="497.8" y="1091.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.8" y="1102.0"></text>
</g>
<g>
<title>ZipUtils.SH (1 samples, 0.03%)</title><rect x="497.8" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.8" y="1086.0"></text>
</g>
<g>
<title>JarResource.getResourceData (2 samples, 0.06%)</title><rect x="498.2" y="1251.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.2" y="1262.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="498.6" y="1235.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.6" y="1246.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="498.6" y="1219.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.6" y="1230.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="498.6" y="1203.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.6" y="1214.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.03%)</title><rect x="498.6" y="1187.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="501.6" y="1198.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="498.6" y="1171.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="501.6" y="1182.0"></text>
</g>
<g>
<title>zError (1 samples, 0.03%)</title><rect x="498.6" y="1155.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="501.6" y="1166.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="499.1" y="1251.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.1" y="1262.0"></text>
</g>
<g>
<title>ClassLoader.definePackage (1 samples, 0.03%)</title><rect x="499.1" y="1235.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.1" y="1246.0"></text>
</g>
<g>
<title>Package.&lt;init&gt; (1 samples, 0.03%)</title><rect x="499.1" y="1219.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="502.1" y="1230.0"></text>
</g>
<g>
<title>NamedPackage.&lt;init&gt; (1 samples, 0.03%)</title><rect x="499.1" y="1203.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.1" y="1214.0"></text>
</g>
<g>
<title>String.isEmpty (1 samples, 0.03%)</title><rect x="499.1" y="1187.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.1" y="1198.0"></text>
</g>
<g>
<title>InternalLoggerFactory.getInstance (5 samples, 0.14%)</title><rect x="499.5" y="1299.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.5" y="1310.0"></text>
</g>
<g>
<title>InternalLoggerFactory.getInstance (5 samples, 0.14%)</title><rect x="499.5" y="1283.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.5" y="1294.0"></text>
</g>
<g>
<title>InternalLoggerFactory.getDefaultFactory (5 samples, 0.14%)</title><rect x="499.5" y="1267.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.5" y="1278.0"></text>
</g>
<g>
<title>InternalLoggerFactory.newDefaultFactory (5 samples, 0.14%)</title><rect x="499.5" y="1251.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="502.5" y="1262.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="499.5" y="1235.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.5" y="1246.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="499.5" y="1219.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.5" y="1230.0"></text>
</g>
<g>
<title>ClassLoader.getClassLoadingLock (1 samples, 0.03%)</title><rect x="499.5" y="1203.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.5" y="1214.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="499.5" y="1187.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.5" y="1198.0"></text>
</g>
<g>
<title>ConcurrentHashMap.putVal (1 samples, 0.03%)</title><rect x="499.5" y="1171.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.5" y="1182.0"></text>
</g>
<g>
<title>Slf4JLoggerFactory.&lt;init&gt; (2 samples, 0.06%)</title><rect x="500.0" y="1235.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.0" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="500.0" y="1219.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.0" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="500.0" y="1203.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="503.0" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="500.0" y="1187.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="503.0" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="500.0" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="503.0" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="500.0" y="1155.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="503.0" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="500.0" y="1139.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="503.0" y="1150.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (1 samples, 0.03%)</title><rect x="500.0" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="503.0" y="1134.0"></text>
</g>
<g>
<title>Verifier::inference_verify(InstanceKlass*, char*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="500.0" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="503.0" y="1118.0"></text>
</g>
<g>
<title>VerifyClassForMajorVersion (1 samples, 0.03%)</title><rect x="500.0" y="1091.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="503.0" y="1102.0"></text>
</g>
<g>
<title>verify_method (1 samples, 0.03%)</title><rect x="500.0" y="1075.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="503.0" y="1086.0"></text>
</g>
<g>
<title>LoggerFactory.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="500.4" y="1219.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.4" y="1230.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="500.4" y="1203.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="503.4" y="1214.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="500.4" y="1187.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="503.4" y="1198.0"></text>
</g>
<g>
<title>JarResource.getResourceData (1 samples, 0.03%)</title><rect x="500.4" y="1171.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.4" y="1182.0"></text>
</g>
<g>
<title>InflaterInputStream.read (1 samples, 0.03%)</title><rect x="500.4" y="1155.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.4" y="1166.0"></text>
</g>
<g>
<title>Inflater.inflate (1 samples, 0.03%)</title><rect x="500.4" y="1139.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.4" y="1150.0"></text>
</g>
<g>
<title>Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="500.4" y="1123.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.4" y="1134.0"></text>
</g>
<g>
<title>jni_GetPrimitiveArrayCritical (1 samples, 0.03%)</title><rect x="500.4" y="1107.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="503.4" y="1118.0"></text>
</g>
<g>
<title>Slf4JLoggerFactory.newInstance (2 samples, 0.06%)</title><rect x="500.8" y="1235.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.8" y="1246.0"></text>
</g>
<g>
<title>LoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1219.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.8" y="1230.0"></text>
</g>
<g>
<title>JBossLoggerFactory.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1203.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.8" y="1214.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1187.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.8" y="1198.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1171.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.8" y="1182.0"></text>
</g>
<g>
<title>JBossLogManagerProvider.doGetLogger (1 samples, 0.03%)</title><rect x="500.8" y="1155.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.8" y="1166.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="503.8" y="1150.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1123.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.8" y="1134.0"></text>
</g>
<g>
<title>Logger.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1107.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.8" y="1118.0"></text>
</g>
<g>
<title>Logger.demandLogger (1 samples, 0.03%)</title><rect x="500.8" y="1091.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="503.8" y="1102.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="500.8" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="503.8" y="1086.0"></text>
</g>
<g>
<title>LogManager.demandLogger (1 samples, 0.03%)</title><rect x="500.8" y="1059.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.8" y="1070.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1043.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.8" y="1054.0"></text>
</g>
<g>
<title>LogManager.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1027.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.8" y="1038.0"></text>
</g>
<g>
<title>LogContext.getLogger (1 samples, 0.03%)</title><rect x="500.8" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="503.8" y="1022.0"></text>
</g>
<g>
<title>LoggerNode.createLogger (1 samples, 0.03%)</title><rect x="500.8" y="995.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="503.8" y="1006.0"></text>
</g>
<g>
<title>Logger.&lt;init&gt; (1 samples, 0.03%)</title><rect x="500.8" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="503.8" y="990.0"></text>
</g>
<g>
<title>Logger.setLevel (1 samples, 0.03%)</title><rect x="500.8" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.8" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="500.8" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="503.8" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="500.8" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.8" y="942.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="500.8" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="503.8" y="926.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.03%)</title><rect x="500.8" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="503.8" y="910.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="500.8" y="883.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="503.8" y="894.0"></text>
</g>
<g>
<title>Slf4JLoggerFactory.wrapLogger (1 samples, 0.03%)</title><rect x="501.3" y="1219.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="504.3" y="1230.0"></text>
</g>
<g>
<title>LocationAwareSlf4JLogger.&lt;init&gt; (1 samples, 0.03%)</title><rect x="501.3" y="1203.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.3" y="1214.0"></text>
</g>
<g>
<title>AbstractInternalLogger.&lt;init&gt; (1 samples, 0.03%)</title><rect x="501.3" y="1187.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.3" y="1198.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="501.3" y="1171.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="504.3" y="1182.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="501.3" y="1155.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.3" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="501.3" y="1139.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.3" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="501.3" y="1123.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.3" y="1134.0"></text>
</g>
<g>
<title>JVM_FindLoadedClass (1 samples, 0.03%)</title><rect x="501.3" y="1107.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="504.3" y="1118.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.03%)</title><rect x="501.3" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="504.3" y="1102.0"></text>
</g>
<g>
<title>MacAddressUtil.parseMAC (1 samples, 0.03%)</title><rect x="501.7" y="1299.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="504.7" y="1310.0"></text>
</g>
<g>
<title>StringUtil.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="501.7" y="1283.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="504.7" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="501.7" y="1267.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="504.7" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="501.7" y="1251.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="504.7" y="1262.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="501.7" y="1235.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="504.7" y="1246.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="501.7" y="1219.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="504.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="501.7" y="1203.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="504.7" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="501.7" y="1187.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.7" y="1198.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="501.7" y="1171.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="504.7" y="1182.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="501.7" y="1155.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.7" y="1166.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.03%)</title><rect x="501.7" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="504.7" y="1150.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="502.2" y="1299.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.2" y="1310.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="502.2" y="1283.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.2" y="1294.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="502.2" y="1267.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.2" y="1278.0"></text>
</g>
<g>
<title>ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="502.2" y="1251.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.2" y="1262.0"></text>
</g>
<g>
<title>JVM_FindLoadedClass (1 samples, 0.03%)</title><rect x="502.2" y="1235.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="505.2" y="1246.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="502.2" y="1219.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="505.2" y="1230.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="502.2" y="1203.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="505.2" y="1214.0"></text>
</g>
<g>
<title>Signal$1.run (1 samples, 0.03%)</title><rect x="502.6" y="1331.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.6" y="1342.0"></text>
</g>
<g>
<title>Terminator$1.handle (1 samples, 0.03%)</title><rect x="502.6" y="1315.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.6" y="1326.0"></text>
</g>
<g>
<title>Shutdown.exit (1 samples, 0.03%)</title><rect x="502.6" y="1299.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.6" y="1310.0"></text>
</g>
<g>
<title>Shutdown.halt (1 samples, 0.03%)</title><rect x="502.6" y="1283.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.6" y="1294.0"></text>
</g>
<g>
<title>Shutdown.halt0 (1 samples, 0.03%)</title><rect x="502.6" y="1267.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.6" y="1278.0"></text>
</g>
<g>
<title>JVM_Halt (1 samples, 0.03%)</title><rect x="502.6" y="1251.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="505.6" y="1262.0"></text>
</g>
<g>
<title>before_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="502.6" y="1235.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="505.6" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_vm_death() (1 samples, 0.03%)</title><rect x="502.6" y="1219.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="505.6" y="1230.0"></text>
</g>
<g>
<title>Profiler::shutdown(Arguments&amp;) (1 samples, 0.03%)</title><rect x="502.6" y="1203.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="505.6" y="1214.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.03%)</title><rect x="502.6" y="1187.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="505.6" y="1198.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="502.6" y="1171.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="505.6" y="1182.0"></text>
</g>
<g>
<title>ThreadPoolExecutor$Worker.run (21 samples, 0.59%)</title><rect x="503.1" y="1331.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.1" y="1342.0"></text>
</g>
<g>
<title>ThreadPoolExecutor.runWorker (21 samples, 0.59%)</title><rect x="503.1" y="1315.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="506.1" y="1326.0"></text>
</g>
<g>
<title>PriorityScheduledExecutor.beforeExecute (21 samples, 0.59%)</title><rect x="503.1" y="1299.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="506.1" y="1310.0"></text>
</g>
<g>
<title>FutureTask.run (21 samples, 0.59%)</title><rect x="503.1" y="1283.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionPool$CreateConnectionTask.call (20 samples, 0.56%)</title><rect x="503.1" y="1267.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionPool$CreateConnectionTask.call (20 samples, 0.56%)</title><rect x="503.1" y="1251.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="506.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionFactory.createConnection (20 samples, 0.56%)</title><rect x="503.1" y="1235.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="506.1" y="1246.0"></text>
</g>
<g>
<title>Driver.connect (20 samples, 0.56%)</title><rect x="503.1" y="1219.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="506.1" y="1230.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="503.1" y="1203.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="506.1" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1187.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="506.1" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1171.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="506.1" y="1182.0"></text>
</g>
<g>
<title>klassItable::initialize_itable(bool, Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1155.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="506.1" y="1166.0"></text>
</g>
<g>
<title>klassItable::initialize_itable_for_interface(int, Klass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.1" y="1150.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.1" y="1134.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1107.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.1" y="1118.0"></text>
</g>
<g>
<title>FieldType::get_array_info(Symbol*, FieldArrayInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="503.1" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="506.1" y="1102.0"></text>
</g>
<g>
<title>JdbcConnection.&lt;init&gt; (15 samples, 0.42%)</title><rect x="503.5" y="1203.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="506.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionInfo.&lt;init&gt; (2 samples, 0.06%)</title><rect x="503.5" y="1187.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionInfo.readSettingsFromURL (1 samples, 0.03%)</title><rect x="503.5" y="1171.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.5" y="1182.0"></text>
</g>
<g>
<title>DbSettings.getDefaultSettings (1 samples, 0.03%)</title><rect x="503.5" y="1155.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="506.5" y="1166.0"></text>
</g>
<g>
<title>DbSettings.&lt;init&gt; (1 samples, 0.03%)</title><rect x="503.5" y="1139.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="506.5" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="503.5" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.5" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="503.5" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.5" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="506.5" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="506.5" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="506.5" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="1043.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.5" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="1027.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="506.5" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="1011.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.5" y="1022.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="995.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.5" y="1006.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="503.5" y="979.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="506.5" y="990.0"></text>
</g>
<g>
<title>ConnectionInfo.remapURL (1 samples, 0.03%)</title><rect x="503.9" y="1171.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.9" y="1182.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="503.9" y="1155.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="506.9" y="1166.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="503.9" y="1139.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.9" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="503.9" y="1123.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.9" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="503.9" y="1107.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.9" y="1118.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="503.9" y="1091.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="506.9" y="1102.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="503.9" y="1075.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="506.9" y="1086.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="1059.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="506.9" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="1043.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.9" y="1054.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="1027.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.9" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="1011.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.9" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.9" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.9" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="503.9" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="506.9" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_utf8(unsigned char const*, int, Thread*) const (1 samples, 0.03%)</title><rect x="503.9" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.9" y="958.0"></text>
</g>
<g>
<title>UTF8::is_legal_utf8(unsigned char const*, int, bool) (1 samples, 0.03%)</title><rect x="503.9" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="506.9" y="942.0"></text>
</g>
<g>
<title>JdbcConnection.&lt;init&gt; (13 samples, 0.36%)</title><rect x="504.4" y="1187.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.4" y="1198.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="504.4" y="1171.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.4" y="1182.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="504.4" y="1155.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.4" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="504.4" y="1139.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.4" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="504.4" y="1123.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.4" y="1134.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="504.4" y="1107.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="507.4" y="1118.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="504.4" y="1091.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="507.4" y="1102.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="504.4" y="1075.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="507.4" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="504.4" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="507.4" y="1070.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="504.4" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="507.4" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="504.4" y="1027.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.4" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="504.4" y="1011.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="507.4" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="504.4" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.4" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.03%)</title><rect x="504.4" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="507.4" y="990.0"></text>
</g>
<g>
<title>Symbol::as_C_string_flexible_buffer(Thread*, char*, int) const (1 samples, 0.03%)</title><rect x="504.4" y="963.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="507.4" y="974.0"></text>
</g>
<g>
<title>SessionRemote.&lt;init&gt; (1 samples, 0.03%)</title><rect x="504.8" y="1171.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.8" y="1182.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="504.8" y="1155.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.8" y="1166.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="504.8" y="1139.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.8" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="504.8" y="1123.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.8" y="1134.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="504.8" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.8" y="1118.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="504.8" y="1091.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="507.8" y="1102.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="504.8" y="1075.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="507.8" y="1086.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="1059.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="507.8" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="1043.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="507.8" y="1054.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="1027.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="507.8" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="1011.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="507.8" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.8" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="507.8" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="504.8" y="963.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="507.8" y="974.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.03%)</title><rect x="504.8" y="947.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="507.8" y="958.0"></text>
</g>
<g>
<title>SessionRemote.connectEmbeddedOrServer (11 samples, 0.31%)</title><rect x="505.3" y="1171.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.3" y="1182.0"></text>
</g>
<g>
<title>SessionRemote.connectServer (11 samples, 0.31%)</title><rect x="505.3" y="1155.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.3" y="1166.0"></text>
</g>
<g>
<title>MathUtils.secureRandomBytes (1 samples, 0.03%)</title><rect x="505.3" y="1139.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.3" y="1150.0"></text>
</g>
<g>
<title>SecureRandom.nextBytes (1 samples, 0.03%)</title><rect x="505.3" y="1123.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.3" y="1134.0"></text>
</g>
<g>
<title>SecureRandom.engineNextBytes (1 samples, 0.03%)</title><rect x="505.3" y="1107.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.3" y="1118.0"></text>
</g>
<g>
<title>MessageDigest.digest (1 samples, 0.03%)</title><rect x="505.3" y="1091.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.3" y="1102.0"></text>
</g>
<g>
<title>MessageDigest$Delegate.engineDigest (1 samples, 0.03%)</title><rect x="505.3" y="1075.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.3" y="1086.0"></text>
</g>
<g>
<title>DigestBase.engineDigest (1 samples, 0.03%)</title><rect x="505.3" y="1059.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.3" y="1070.0"></text>
</g>
<g>
<title>DigestBase.engineDigest (1 samples, 0.03%)</title><rect x="505.3" y="1043.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.3" y="1054.0"></text>
</g>
<g>
<title>SHA.implDigest (1 samples, 0.03%)</title><rect x="505.3" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.3" y="1038.0"></text>
</g>
<g>
<title>SHA.implCompress (1 samples, 0.03%)</title><rect x="505.3" y="1011.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.3" y="1022.0"></text>
</g>
<g>
<title>SHA.implCompress0 (1 samples, 0.03%)</title><rect x="505.3" y="995.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.3" y="1006.0"></text>
</g>
<g>
<title>SessionRemote.initTransfer (10 samples, 0.28%)</title><rect x="505.7" y="1139.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.7" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (2 samples, 0.06%)</title><rect x="505.7" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="508.7" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (2 samples, 0.06%)</title><rect x="505.7" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="508.7" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(bool, Thread*) (2 samples, 0.06%)</title><rect x="505.7" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="508.7" y="1102.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, Verifier::Mode, bool, Thread*) (2 samples, 0.06%)</title><rect x="505.7" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="508.7" y="1086.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (2 samples, 0.06%)</title><rect x="505.7" y="1059.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="508.7" y="1070.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (2 samples, 0.06%)</title><rect x="505.7" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="508.7" y="1054.0"></text>
</g>
<g>
<title>ClassVerifier::verify_invoke_instructions(RawBytecodeStream*, unsigned int, StackMapFrame*, bool, bool*, VerificationType, constantPoolHandle const&amp;, StackMapTable*, Thread*) (2 samples, 0.06%)</title><rect x="505.7" y="1027.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="508.7" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="505.7" y="1011.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="508.7" y="1022.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="506.2" y="1011.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.2" y="1022.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.03%)</title><rect x="506.2" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.2" y="1006.0"></text>
</g>
<g>
<title>NetUtils.createSocket (6 samples, 0.17%)</title><rect x="506.6" y="1123.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.6" y="1134.0"></text>
</g>
<g>
<title>NetUtils.createSocket (6 samples, 0.17%)</title><rect x="506.6" y="1107.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.6" y="1118.0"></text>
</g>
<g>
<title>Socket.&lt;init&gt; (3 samples, 0.08%)</title><rect x="506.6" y="1091.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="509.6" y="1102.0"></text>
</g>
<g>
<title>Socket.setImpl (3 samples, 0.08%)</title><rect x="506.6" y="1075.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="509.6" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="506.6" y="1059.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="509.6" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="1043.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="509.6" y="1054.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="509.6" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="509.6" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="509.6" y="1006.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="979.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="509.6" y="990.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="509.6" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="947.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.6" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.6" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="509.6" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="509.6" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="509.6" y="894.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="509.6" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="509.6" y="862.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="509.6" y="846.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="509.6" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="509.6" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::layout_fields(ConstantPool*, ClassFileParser::FieldAllocationCount const*, ClassFileParser::ClassAnnotationCollector const*, ClassFileParser::FieldLayoutInfo*, Thread*) (1 samples, 0.03%)</title><rect x="506.6" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="509.6" y="798.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (1 samples, 0.03%)</title><rect x="506.6" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="509.6" y="782.0"></text>
</g>
<g>
<title>FieldInfo::access_flags() const (1 samples, 0.03%)</title><rect x="506.6" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="509.6" y="766.0"></text>
</g>
<g>
<title>PlainSocketImpl.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="507.0" y="1059.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.0" y="1070.0"></text>
</g>
<g>
<title>ExtendedSocketOptions.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="507.0" y="1043.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.0" y="1054.0"></text>
</g>
<g>
<title>Class.forName (2 samples, 0.06%)</title><rect x="507.0" y="1027.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.0" y="1038.0"></text>
</g>
<g>
<title>Class.forName0 (2 samples, 0.06%)</title><rect x="507.0" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.0" y="1022.0"></text>
</g>
<g>
<title>ExtendedSocketOptions.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="507.0" y="995.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.0" y="1006.0"></text>
</g>
<g>
<title>ExtendedSocketOptions$PlatformSocketOptions.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="507.0" y="979.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.0" y="990.0"></text>
</g>
<g>
<title>ExtendedSocketOptions$PlatformSocketOptions.create (1 samples, 0.03%)</title><rect x="507.0" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.0" y="974.0"></text>
</g>
<g>
<title>ExtendedSocketOptions$PlatformSocketOptions.newInstance (1 samples, 0.03%)</title><rect x="507.0" y="947.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.0" y="958.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="507.0" y="931.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.0" y="942.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="507.0" y="915.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.0" y="926.0"></text>
</g>
<g>
<title>MacOSXSocketOptions.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="507.0" y="899.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="510.0" y="910.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="507.0" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.0" y="894.0"></text>
</g>
<g>
<title>1761544324.run (1 samples, 0.03%)</title><rect x="507.0" y="867.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="510.0" y="878.0"></text>
</g>
<g>
<title>MacOSXSocketOptions.lambda$static$0 (1 samples, 0.03%)</title><rect x="507.0" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.0" y="862.0"></text>
</g>
<g>
<title>System.loadLibrary (1 samples, 0.03%)</title><rect x="507.0" y="835.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.0" y="846.0"></text>
</g>
<g>
<title>Runtime.loadLibrary0 (1 samples, 0.03%)</title><rect x="507.0" y="819.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="510.0" y="830.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary (1 samples, 0.03%)</title><rect x="507.0" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="510.0" y="814.0"></text>
</g>
<g>
<title>ClassLoader.loadLibrary0 (1 samples, 0.03%)</title><rect x="507.0" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.0" y="798.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.loadLibrary (1 samples, 0.03%)</title><rect x="507.0" y="771.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.0" y="782.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load (1 samples, 0.03%)</title><rect x="507.0" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.0" y="766.0"></text>
</g>
<g>
<title>ClassLoader$NativeLibrary.load0 (1 samples, 0.03%)</title><rect x="507.0" y="739.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.0" y="750.0"></text>
</g>
<g>
<title>Profiler::NativeLibraryLoadTrap(JNIEnv_*, _jobject*, _jstring*, unsigned char) (1 samples, 0.03%)</title><rect x="507.0" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.0" y="734.0"></text>
</g>
<g>
<title>Symbols::parseLibraries(NativeCodeCache**, int volatile&amp;, int) (1 samples, 0.03%)</title><rect x="507.0" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.0" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="507.5" y="995.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="510.5" y="1006.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="507.5" y="979.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="510.5" y="990.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="963.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="510.5" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="947.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="510.5" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="510.5" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="510.5" y="926.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.5" y="910.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="510.5" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="510.5" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.5" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.5" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="507.5" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="510.5" y="830.0"></text>
</g>
<g>
<title>Socket.connect (3 samples, 0.08%)</title><rect x="507.9" y="1091.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.9" y="1102.0"></text>
</g>
<g>
<title>SocksSocketImpl.connect (3 samples, 0.08%)</title><rect x="507.9" y="1075.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.9" y="1086.0"></text>
</g>
<g>
<title>AbstractPlainSocketImpl.connect (2 samples, 0.06%)</title><rect x="507.9" y="1059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="510.9" y="1070.0"></text>
</g>
<g>
<title>AbstractPlainSocketImpl.connectToAddress (2 samples, 0.06%)</title><rect x="507.9" y="1043.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.9" y="1054.0"></text>
</g>
<g>
<title>AbstractPlainSocketImpl.doConnect (2 samples, 0.06%)</title><rect x="507.9" y="1027.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.9" y="1038.0"></text>
</g>
<g>
<title>PlainSocketImpl.socketConnect (2 samples, 0.06%)</title><rect x="507.9" y="1011.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.9" y="1022.0"></text>
</g>
<g>
<title>NetworkInterface.&lt;clinit&gt; (2 samples, 0.06%)</title><rect x="507.9" y="995.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="510.9" y="1006.0"></text>
</g>
<g>
<title>DefaultInterface.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="507.9" y="979.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.9" y="990.0"></text>
</g>
<g>
<title>DefaultInterface.chooseDefaultInterface (1 samples, 0.03%)</title><rect x="507.9" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.9" y="974.0"></text>
</g>
<g>
<title>NetworkInterface.isLoopback (1 samples, 0.03%)</title><rect x="507.9" y="947.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.9" y="958.0"></text>
</g>
<g>
<title>NetworkInterface.isLoopback0 (1 samples, 0.03%)</title><rect x="507.9" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.9" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.03%)</title><rect x="507.9" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.9" y="926.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="507.9" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.9" y="910.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="507.9" y="883.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="510.9" y="894.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="507.9" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="510.9" y="878.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.03%)</title><rect x="507.9" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.9" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="507.9" y="835.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="510.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="507.9" y="819.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="510.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="507.9" y="803.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="510.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="507.9" y="787.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="510.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="507.9" y="771.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="510.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="507.9" y="755.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="510.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="507.9" y="739.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="510.9" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="508.4" y="979.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="511.4" y="990.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="963.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="511.4" y="974.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="511.4" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="511.4" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="511.4" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="899.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="511.4" y="910.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="511.4" y="894.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="511.4" y="878.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="851.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="511.4" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="511.4" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="508.4" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="511.4" y="830.0"></text>
</g>
<g>
<title>AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="508.8" y="1059.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="511.8" y="1070.0"></text>
</g>
<g>
<title>SocksSocketImpl$3.run (1 samples, 0.03%)</title><rect x="508.8" y="1043.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="511.8" y="1054.0"></text>
</g>
<g>
<title>SocksSocketImpl$3.run (1 samples, 0.03%)</title><rect x="508.8" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.8" y="1038.0"></text>
</g>
<g>
<title>ProxySelector.&lt;clinit&gt; (1 samples, 0.03%)</title><rect x="508.8" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="511.8" y="1022.0"></text>
</g>
<g>
<title>Class.forName (1 samples, 0.03%)</title><rect x="508.8" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.8" y="1006.0"></text>
</g>
<g>
<title>Class.forName0 (1 samples, 0.03%)</title><rect x="508.8" y="979.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.8" y="990.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="508.8" y="963.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="511.8" y="974.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="508.8" y="947.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="511.8" y="958.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="931.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="511.8" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="511.8" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.8" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.8" y="894.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="867.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="511.8" y="878.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.8" y="862.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="511.8" y="846.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="511.8" y="830.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="803.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="511.8" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="508.8" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="511.8" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="508.8" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="511.8" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="508.8" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.8" y="766.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="509.2" y="1123.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.2" y="1134.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (1 samples, 0.03%)</title><rect x="509.2" y="1107.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.2" y="1118.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="509.2" y="1091.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.2" y="1102.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (1 samples, 0.03%)</title><rect x="509.2" y="1075.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.2" y="1086.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.03%)</title><rect x="509.2" y="1059.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="512.2" y="1070.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="509.2" y="1043.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="512.2" y="1054.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="509.2" y="1027.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="512.2" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="509.2" y="1011.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="512.2" y="1022.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="509.2" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="512.2" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="509.2" y="979.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="512.2" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="509.2" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="512.2" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_fields(ClassFileStream const*, bool, ClassFileParser::FieldAllocationCount*, ConstantPool*, int, unsigned short*, Thread*) (1 samples, 0.03%)</title><rect x="509.2" y="947.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.2" y="958.0"></text>
</g>
<g>
<title>Transfer.writeInt (1 samples, 0.03%)</title><rect x="509.7" y="1123.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.7" y="1134.0"></text>
</g>
<g>
<title>DataOutputStream.writeInt (1 samples, 0.03%)</title><rect x="509.7" y="1107.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.7" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.03%)</title><rect x="509.7" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="512.7" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="509.7" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.7" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="509.7" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.7" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="509.7" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.7" y="1054.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="509.7" y="1027.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="512.7" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="509.7" y="1011.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="512.7" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="509.7" y="995.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.7" y="1006.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="510.1" y="1203.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="513.1" y="1214.0"></text>
</g>
<g>
<title>RunnerClassLoader.loadClass (4 samples, 0.11%)</title><rect x="510.1" y="1187.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="513.1" y="1198.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (2 samples, 0.06%)</title><rect x="510.1" y="1171.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.1" y="1182.0"></text>
</g>
<g>
<title>ClassLoader.defineClass1 (2 samples, 0.06%)</title><rect x="510.1" y="1155.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="513.1" y="1166.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (2 samples, 0.06%)</title><rect x="510.1" y="1139.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="513.1" y="1150.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (2 samples, 0.06%)</title><rect x="510.1" y="1123.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="513.1" y="1134.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (2 samples, 0.06%)</title><rect x="510.1" y="1107.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="513.1" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (2 samples, 0.06%)</title><rect x="510.1" y="1091.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="513.1" y="1102.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (2 samples, 0.06%)</title><rect x="510.1" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="513.1" y="1086.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (2 samples, 0.06%)</title><rect x="510.1" y="1059.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="513.1" y="1070.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (2 samples, 0.06%)</title><rect x="510.1" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="513.1" y="1054.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="510.1" y="1027.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="513.1" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="510.1" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="513.1" y="1022.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="510.1" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="513.1" y="1006.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="510.1" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="513.1" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.03%)</title><rect x="510.6" y="1027.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="513.6" y="1038.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.03%)</title><rect x="510.6" y="1011.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="513.6" y="1022.0"></text>
</g>
<g>
<title>Method::allocate(ClassLoaderData*, int, AccessFlags, InlineTableSizes*, ConstMethod::MethodType, Thread*) (1 samples, 0.03%)</title><rect x="510.6" y="995.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="513.6" y="1006.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="510.6" y="979.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="513.6" y="990.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="510.6" y="963.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="513.6" y="974.0"></text>
</g>
<g>
<title>ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="511.0" y="1171.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="514.0" y="1182.0"></text>
</g>
<g>
<title>ClassLoaders$AppClassLoader.loadClass (1 samples, 0.03%)</title><rect x="511.0" y="1155.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="514.0" y="1166.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClass (1 samples, 0.03%)</title><rect x="511.0" y="1139.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="514.0" y="1150.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="511.0" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.0" y="1134.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="511.0" y="1107.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.0" y="1118.0"></text>
</g>
<g>
<title>BuiltinClassLoader.loadClassOrNull (1 samples, 0.03%)</title><rect x="511.0" y="1091.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.0" y="1102.0"></text>
</g>
<g>
<title>BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.03%)</title><rect x="511.0" y="1075.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.0" y="1086.0"></text>
</g>
<g>
<title>BuiltinClassLoader.defineClass (1 samples, 0.03%)</title><rect x="511.0" y="1059.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="514.0" y="1070.0"></text>
</g>
<g>
<title>SecureClassLoader.defineClass (1 samples, 0.03%)</title><rect x="511.0" y="1043.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="514.0" y="1054.0"></text>
</g>
<g>
<title>ClassLoader.defineClass (1 samples, 0.03%)</title><rect x="511.0" y="1027.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="514.0" y="1038.0"></text>
</g>
<g>
<title>ClassLoader.defineClass2 (1 samples, 0.03%)</title><rect x="511.0" y="1011.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.0" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass2 (1 samples, 0.03%)</title><rect x="511.0" y="995.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="514.0" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.03%)</title><rect x="511.0" y="979.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="514.0" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="963.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="514.0" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="514.0" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="514.0" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="514.0" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="899.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="514.0" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="514.0" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="511.0" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.0" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="511.0" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="514.0" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="511.0" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="514.0" y="846.0"></text>
</g>
<g>
<title>RunnerClassLoader.definePackage (1 samples, 0.03%)</title><rect x="511.5" y="1171.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="514.5" y="1182.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="511.5" y="1155.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.5" y="1166.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="511.5" y="1139.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="514.5" y="1150.0"></text>
</g>
<g>
<title>ClassLoader.getPackage (1 samples, 0.03%)</title><rect x="511.5" y="1123.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.5" y="1134.0"></text>
</g>
<g>
<title>BootLoader.getDefinedPackage (1 samples, 0.03%)</title><rect x="511.5" y="1107.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="514.5" y="1118.0"></text>
</g>
<g>
<title>BootLoader.getSystemPackageLocation (1 samples, 0.03%)</title><rect x="511.5" y="1091.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.5" y="1102.0"></text>
</g>
<g>
<title>JVM_GetSystemPackage (1 samples, 0.03%)</title><rect x="511.5" y="1075.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="514.5" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="511.5" y="1059.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="514.5" y="1070.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="511.5" y="1043.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.5" y="1054.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="511.5" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.5" y="1038.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="511.5" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="514.5" y="1022.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="511.5" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="514.5" y="1006.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="511.5" y="979.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.5" y="990.0"></text>
</g>
<g>
<title>FutureTask.set (1 samples, 0.03%)</title><rect x="511.9" y="1267.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="514.9" y="1278.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="511.9" y="1251.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.9" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invokehandle(JavaThread*) (1 samples, 0.03%)</title><rect x="511.9" y="1235.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.9" y="1246.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokehandle(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="511.9" y="1219.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="514.9" y="1230.0"></text>
</g>
<g>
<title>LinkResolver::resolve_handle_call(CallInfo&amp;, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="511.9" y="1203.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="514.9" y="1214.0"></text>
</g>
<g>
<title>LinkResolver::lookup_polymorphic_method(LinkInfo const&amp;, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="511.9" y="1187.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="514.9" y="1198.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_invoker(Klass*, Symbol*, Symbol*, Klass*, Handle*, Handle*, Thread*) (1 samples, 0.03%)</title><rect x="511.9" y="1171.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="514.9" y="1182.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="511.9" y="1155.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="514.9" y="1166.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (1 samples, 0.03%)</title><rect x="511.9" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="514.9" y="1150.0"></text>
</g>
<g>
<title>TimerThread.run (2 samples, 0.06%)</title><rect x="512.3" y="1347.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.3" y="1358.0"></text>
</g>
<g>
<title>TimerThread.mainLoop (2 samples, 0.06%)</title><rect x="512.3" y="1331.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.3" y="1342.0"></text>
</g>
<g>
<title>BlockedThreadChecker$1.run (1 samples, 0.03%)</title><rect x="512.3" y="1315.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.3" y="1326.0"></text>
</g>
<g>
<title>WeakHashMap$Entry.getValue (1 samples, 0.03%)</title><rect x="512.3" y="1299.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="515.3" y="1310.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="512.3" y="1283.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="515.3" y="1294.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="512.3" y="1267.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="515.3" y="1278.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="512.3" y="1251.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.3" y="1262.0"></text>
</g>
<g>
<title>CompileBroker::compilation_is_in_queue(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="512.3" y="1235.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="515.3" y="1246.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="512.8" y="1315.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="515.8" y="1326.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="512.8" y="1299.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.8" y="1310.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.03%)</title><rect x="513.2" y="1347.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="516.2" y="1358.0"></text>
</g>
<g>
<title>[no_Java_frame] (9 samples, 0.25%)</title><rect x="513.7" y="1347.0" width="4.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="516.7" y="1358.0"></text>
</g>
<g>
<title>[thread_exit] (2 samples, 0.06%)</title><rect x="517.7" y="1347.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="520.7" y="1358.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.06%)</title><rect x="517.7" y="1331.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="520.7" y="1342.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.06%)</title><rect x="517.7" y="1315.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="520.7" y="1326.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.06%)</title><rect x="517.7" y="1299.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="520.7" y="1310.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.06%)</title><rect x="517.7" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="520.7" y="1294.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.06%)</title><rect x="517.7" y="1267.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="520.7" y="1278.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.06%)</title><rect x="517.7" y="1251.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="520.7" y="1262.0"></text>
</g>
<g>
<title>JavaThread::exit(bool, JavaThread::ExitType) (1 samples, 0.03%)</title><rect x="517.7" y="1235.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="520.7" y="1246.0"></text>
</g>
<g>
<title>Threads::remove(JavaThread*) (1 samples, 0.03%)</title><rect x="517.7" y="1219.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="520.7" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="517.7" y="1203.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="520.7" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="517.7" y="1187.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="520.7" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="517.7" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="520.7" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="517.7" y="1155.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="520.7" y="1166.0"></text>
</g>
<g>
<title>ThreadsSMRSupport::smr_delete(JavaThread*) (1 samples, 0.03%)</title><rect x="518.1" y="1235.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="521.1" y="1246.0"></text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.03%)</title><rect x="518.1" y="1219.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="521.1" y="1230.0"></text>
</g>
<g>
<title>JavaThread::~JavaThread() (1 samples, 0.03%)</title><rect x="518.1" y="1203.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="521.1" y="1214.0"></text>
</g>
<g>
<title>semaphore_destroy (1 samples, 0.03%)</title><rect x="518.1" y="1187.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="521.1" y="1198.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="518.1" y="1171.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="521.1" y="1182.0"></text>
</g>
<g>
<title>[unknown_Java] (20 samples, 0.56%)</title><rect x="518.5" y="1347.0" width="8.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="521.5" y="1358.0"></text>
</g>
<g>
<title>Interpreter (19 samples, 0.53%)</title><rect x="518.5" y="1331.0" width="8.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="521.5" y="1342.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.03%)</title><rect x="526.9" y="1331.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="529.9" y="1342.0"></text>
</g>
<g>
<title>thread_start (2,403 samples, 67.25%)</title><rect x="527.4" y="1347.0" width="1062.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="530.4" y="1358.0">thread_start</text>
</g>
<g>
<title>_pthread_start (2,403 samples, 67.25%)</title><rect x="527.4" y="1331.0" width="1062.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="530.4" y="1342.0">_pthread_start</text>
</g>
<g>
<title>JavaMain (1 samples, 0.03%)</title><rect x="527.4" y="1315.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="530.4" y="1326.0"></text>
</g>
<g>
<title>GetLauncherHelperClass (1 samples, 0.03%)</title><rect x="527.4" y="1299.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="530.4" y="1310.0"></text>
</g>
<g>
<title>JVM_FindClassFromBootLoader (1 samples, 0.03%)</title><rect x="527.4" y="1283.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="530.4" y="1294.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1267.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="530.4" y="1278.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1251.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="530.4" y="1262.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1235.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="530.4" y="1246.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="530.4" y="1230.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1203.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="530.4" y="1214.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1187.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="530.4" y="1198.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="530.4" y="1182.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.03%)</title><rect x="527.4" y="1155.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="530.4" y="1166.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="527.4" y="1139.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="530.4" y="1150.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="527.4" y="1123.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="530.4" y="1134.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2,402 samples, 67.23%)</title><rect x="527.8" y="1315.0" width="1062.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="530.8" y="1326.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (2,402 samples, 67.23%)</title><rect x="527.8" y="1299.0" width="1062.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="530.8" y="1310.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (7 samples, 0.20%)</title><rect x="527.8" y="1283.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="530.8" y="1294.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (1 samples, 0.03%)</title><rect x="527.8" y="1267.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="530.8" y="1278.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (1 samples, 0.03%)</title><rect x="527.8" y="1251.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="530.8" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.03%)</title><rect x="527.8" y="1235.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="530.8" y="1246.0"></text>
</g>
<g>
<title>G1RefineCardConcurrentlyClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="527.8" y="1219.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="530.8" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="527.8" y="1203.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="530.8" y="1214.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (1 samples, 0.03%)</title><rect x="527.8" y="1187.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="530.8" y="1198.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oopDesc*, G1CMBitMap const*, unsigned long*) const (1 samples, 0.03%)</title><rect x="527.8" y="1171.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="530.8" y="1182.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (6 samples, 0.17%)</title><rect x="528.3" y="1267.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="531.3" y="1278.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (4 samples, 0.11%)</title><rect x="528.3" y="1251.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="531.3" y="1262.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.11%)</title><rect x="528.3" y="1235.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="531.3" y="1246.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.11%)</title><rect x="528.3" y="1219.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="531.3" y="1230.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.06%)</title><rect x="529.1" y="1203.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="532.1" y="1214.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.06%)</title><rect x="530.0" y="1251.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="533.0" y="1262.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.06%)</title><rect x="530.0" y="1235.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="533.0" y="1246.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.06%)</title><rect x="530.0" y="1219.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="533.0" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.06%)</title><rect x="530.0" y="1203.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="533.0" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="530.0" y="1187.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="533.0" y="1198.0"></text>
</g>
<g>
<title>GangWorker::loop() (152 samples, 4.25%)</title><rect x="530.9" y="1283.0" width="67.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="533.9" y="1294.0">GangWor..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (8 samples, 0.22%)</title><rect x="530.9" y="1267.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.9" y="1278.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (8 samples, 0.22%)</title><rect x="530.9" y="1251.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="533.9" y="1262.0"></text>
</g>
<g>
<title>G1CMBitMap::iterate(G1CMBitMapClosure*, MemRegion) (3 samples, 0.08%)</title><rect x="530.9" y="1235.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.9" y="1246.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (3 samples, 0.08%)</title><rect x="530.9" y="1219.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="533.9" y="1230.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (1 samples, 0.03%)</title><rect x="530.9" y="1203.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="533.9" y="1214.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="530.9" y="1187.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.9" y="1198.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (1 samples, 0.03%)</title><rect x="530.9" y="1171.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="533.9" y="1182.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.06%)</title><rect x="531.4" y="1203.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="534.4" y="1214.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (1 samples, 0.03%)</title><rect x="531.8" y="1187.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="534.8" y="1198.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="531.8" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="534.8" y="1182.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (1 samples, 0.03%)</title><rect x="532.2" y="1235.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="535.2" y="1246.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="532.2" y="1219.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="535.2" y="1230.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (1 samples, 0.03%)</title><rect x="532.2" y="1203.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.2" y="1214.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="532.2" y="1187.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="535.2" y="1198.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;GenericTaskQueue&lt;G1TaskQueueEntry, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal(unsigned int, int*, G1TaskQueueEntry&amp;) (1 samples, 0.03%)</title><rect x="532.7" y="1235.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="535.7" y="1246.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;G1TaskQueueEntry, (MemoryType)5, 131072u&gt;::pop_global(G1TaskQueueEntry volatile&amp;) (1 samples, 0.03%)</title><rect x="532.7" y="1219.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.7" y="1230.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.08%)</title><rect x="533.1" y="1235.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="536.1" y="1246.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (3 samples, 0.08%)</title><rect x="534.5" y="1267.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="537.5" y="1278.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.03%)</title><rect x="534.5" y="1251.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.5" y="1262.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="534.5" y="1235.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="537.5" y="1246.0"></text>
</g>
<g>
<title>Threads::non_java_threads_do(ThreadClosure*) (1 samples, 0.03%)</title><rect x="534.9" y="1251.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="537.9" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_threads_do(ThreadClosure*) const (1 samples, 0.03%)</title><rect x="534.9" y="1235.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="537.9" y="1246.0"></text>
</g>
<g>
<title>AbstractWorkGang::threads_do(ThreadClosure*) const (1 samples, 0.03%)</title><rect x="534.9" y="1219.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="537.9" y="1230.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.03%)</title><rect x="535.3" y="1251.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="538.3" y="1262.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (3 samples, 0.08%)</title><rect x="535.8" y="1267.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.8" y="1278.0"></text>
</g>
<g>
<title>G1ConcurrentMark::scan_root_region(HeapRegion*, unsigned int) (3 samples, 0.08%)</title><rect x="535.8" y="1251.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.8" y="1262.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1RootRegionScanClosure&gt;(G1RootRegionScanClosure*) (3 samples, 0.08%)</title><rect x="535.8" y="1235.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="538.8" y="1246.0"></text>
</g>
<g>
<title>void InstanceMirrorKlass::oop_oop_iterate&lt;unsigned int, G1RootRegionScanClosure&gt;(oopDesc*, G1RootRegionScanClosure*) (1 samples, 0.03%)</title><rect x="536.2" y="1219.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="539.2" y="1230.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1RootRegionScanClosure&gt;(objArrayOopDesc*, G1RootRegionScanClosure*) (1 samples, 0.03%)</title><rect x="536.7" y="1219.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="539.7" y="1230.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (34 samples, 0.95%)</title><rect x="537.1" y="1267.0" width="15.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="540.1" y="1278.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (34 samples, 0.95%)</title><rect x="537.1" y="1251.0" width="15.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="540.1" y="1262.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (34 samples, 0.95%)</title><rect x="537.1" y="1235.0" width="15.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="540.1" y="1246.0"></text>
</g>
<g>
<title>G1CMBitMap::clear_range(MemRegion) (34 samples, 0.95%)</title><rect x="537.1" y="1219.0" width="15.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="540.1" y="1230.0"></text>
</g>
<g>
<title>BitMap::clear_range(unsigned long, unsigned long) (34 samples, 0.95%)</title><rect x="537.1" y="1203.0" width="15.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.1" y="1214.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (34 samples, 0.95%)</title><rect x="537.1" y="1187.0" width="15.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="540.1" y="1198.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (72 samples, 2.02%)</title><rect x="552.1" y="1267.0" width="31.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="555.1" y="1278.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (60 samples, 1.68%)</title><rect x="552.1" y="1251.0" width="26.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="555.1" y="1262.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (41 samples, 1.15%)</title><rect x="552.1" y="1235.0" width="18.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.1" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (41 samples, 1.15%)</title><rect x="552.1" y="1219.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="555.1" y="1230.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (37 samples, 1.04%)</title><rect x="553.9" y="1203.0" width="16.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="556.9" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (37 samples, 1.04%)</title><rect x="553.9" y="1187.0" width="16.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="556.9" y="1198.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (15 samples, 0.42%)</title><rect x="555.7" y="1171.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="558.7" y="1182.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (3 samples, 0.08%)</title><rect x="562.3" y="1171.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="565.3" y="1182.0"></text>
</g>
<g>
<title>PLAB::retire() (3 samples, 0.08%)</title><rect x="562.3" y="1155.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="565.3" y="1166.0"></text>
</g>
<g>
<title>PLAB::retire_internal() (3 samples, 0.08%)</title><rect x="562.3" y="1139.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="565.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (3 samples, 0.08%)</title><rect x="562.3" y="1123.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="565.3" y="1134.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="563.2" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="566.2" y="1118.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (14 samples, 0.39%)</title><rect x="563.6" y="1171.0" width="6.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="566.6" y="1182.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="569.8" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="572.8" y="1182.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="569.8" y="1155.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="572.8" y="1166.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal(unsigned int, int*, StarTask&amp;) (15 samples, 0.42%)</title><rect x="570.3" y="1235.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="573.3" y="1246.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::pop_global(StarTask volatile&amp;) (5 samples, 0.14%)</title><rect x="570.3" y="1219.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.3" y="1230.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (10 samples, 0.28%)</title><rect x="572.5" y="1219.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.5" y="1230.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="576.9" y="1235.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="579.9" y="1246.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.08%)</title><rect x="577.3" y="1235.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="580.3" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="578.2" y="1219.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.2" y="1230.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="578.2" y="1203.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="581.2" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.20%)</title><rect x="578.7" y="1251.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="581.7" y="1262.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (7 samples, 0.20%)</title><rect x="578.7" y="1235.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="581.7" y="1246.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (7 samples, 0.20%)</title><rect x="578.7" y="1219.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="581.7" y="1230.0"></text>
</g>
<g>
<title>G1CodeRootSetTable::nmethods_do(CodeBlobClosure*) (7 samples, 0.20%)</title><rect x="578.7" y="1203.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="581.7" y="1214.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (7 samples, 0.20%)</title><rect x="578.7" y="1187.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="581.7" y="1198.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (7 samples, 0.20%)</title><rect x="578.7" y="1171.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="581.7" y="1182.0"></text>
</g>
<g>
<title>void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (7 samples, 0.20%)</title><rect x="578.7" y="1155.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="581.7" y="1166.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)2&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (7 samples, 0.20%)</title><rect x="578.7" y="1139.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.7" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (7 samples, 0.20%)</title><rect x="578.7" y="1123.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="581.7" y="1134.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.17%)</title><rect x="579.1" y="1107.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="582.1" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 0.17%)</title><rect x="579.1" y="1091.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="582.1" y="1102.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (3 samples, 0.08%)</title><rect x="579.6" y="1075.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="582.6" y="1086.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="580.9" y="1075.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="583.9" y="1086.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1ScanEvacuatedObjClosure&gt;(objArrayOopDesc*, G1ScanEvacuatedObjClosure*) (1 samples, 0.03%)</title><rect x="581.3" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.3" y="1086.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="581.3" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="584.3" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.14%)</title><rect x="581.8" y="1251.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.8" y="1262.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.06%)</title><rect x="581.8" y="1235.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="584.8" y="1246.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (2 samples, 0.06%)</title><rect x="581.8" y="1219.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="584.8" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (2 samples, 0.06%)</title><rect x="581.8" y="1203.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="584.8" y="1214.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)2&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.06%)</title><rect x="581.8" y="1187.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="584.8" y="1198.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="582.2" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="585.2" y="1182.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="582.2" y="1155.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="585.2" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.06%)</title><rect x="582.7" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="585.7" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.03%)</title><rect x="582.7" y="1219.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="585.7" y="1230.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.03%)</title><rect x="582.7" y="1203.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="585.7" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="582.7" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="585.7" y="1198.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)1&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="582.7" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="585.7" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="582.7" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="585.7" y="1166.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="582.7" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="585.7" y="1150.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="583.1" y="1219.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="586.1" y="1230.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="583.1" y="1203.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="586.1" y="1214.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="583.1" y="1187.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="586.1" y="1198.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.03%)</title><rect x="583.1" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="586.1" y="1182.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.03%)</title><rect x="583.1" y="1155.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="586.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle const&amp;, int, InterpreterOopMap*) (1 samples, 0.03%)</title><rect x="583.1" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="586.1" y="1150.0"></text>
</g>
<g>
<title>OopMapCache::OopMapCache() (1 samples, 0.03%)</title><rect x="583.1" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="586.1" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::wait_until_all_strong_classes_discovered() (1 samples, 0.03%)</title><rect x="583.5" y="1235.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="586.5" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="583.5" y="1219.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="586.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="583.5" y="1203.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="586.5" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="583.5" y="1187.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="586.5" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="583.5" y="1171.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="586.5" y="1182.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (8 samples, 0.22%)</title><rect x="584.0" y="1267.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="587.0" y="1278.0"></text>
</g>
<g>
<title>G1CodeCacheUnloadingTask::work_first_pass(unsigned int) (6 samples, 0.17%)</title><rect x="584.0" y="1251.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="587.0" y="1262.0"></text>
</g>
<g>
<title>G1CodeCacheUnloadingTask::claim_nmethods(CompiledMethod**, int*) (1 samples, 0.03%)</title><rect x="584.0" y="1235.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="587.0" y="1246.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_alive() (1 samples, 0.03%)</title><rect x="584.0" y="1219.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="587.0" y="1230.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (1 samples, 0.03%)</title><rect x="584.0" y="1203.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="587.0" y="1214.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (1 samples, 0.03%)</title><rect x="584.0" y="1187.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="587.0" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (1 samples, 0.03%)</title><rect x="584.0" y="1171.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="587.0" y="1182.0"></text>
</g>
<g>
<title>G1CodeCacheUnloadingTask::clean_nmethod(CompiledMethod*) (5 samples, 0.14%)</title><rect x="584.4" y="1235.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="587.4" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (5 samples, 0.14%)</title><rect x="584.4" y="1219.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="587.4" y="1230.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (2 samples, 0.06%)</title><rect x="584.4" y="1203.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="587.4" y="1214.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="584.9" y="1187.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="587.9" y="1198.0"></text>
</g>
<g>
<title>nmethod::do_unloading_oops(unsigned char*, BoolObjectClosure*) (3 samples, 0.08%)</title><rect x="585.3" y="1203.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="588.3" y="1214.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.03%)</title><rect x="585.3" y="1187.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="588.3" y="1198.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="585.8" y="1187.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="588.8" y="1198.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.03%)</title><rect x="586.2" y="1187.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="589.2" y="1198.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="586.2" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="589.2" y="1182.0"></text>
</g>
<g>
<title>G1StringAndSymbolCleaningTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="586.6" y="1251.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="589.6" y="1262.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_unlink(OopStorage::ParState&lt;false, false&gt;*, BoolObjectClosure*, int*, int*) (2 samples, 0.06%)</title><rect x="586.6" y="1235.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.6" y="1246.0"></text>
</g>
<g>
<title>G1CMIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.03%)</title><rect x="587.1" y="1219.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="590.1" y="1230.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="587.5" y="1267.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="590.5" y="1278.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (2 samples, 0.06%)</title><rect x="587.5" y="1251.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.5" y="1262.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.06%)</title><rect x="587.5" y="1235.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="590.5" y="1246.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::rebuild_rem_set_in_region(G1CMBitMap const*, HeapWord*, HeapWord*, HeapRegion*, MemRegion) (2 samples, 0.06%)</title><rect x="587.5" y="1219.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="590.5" y="1230.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::move_if_below_tams() (1 samples, 0.03%)</title><rect x="587.5" y="1203.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="590.5" y="1214.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::scan_for_references(oopDesc*, MemRegion) (1 samples, 0.03%)</title><rect x="588.0" y="1203.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="591.0" y="1214.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="588.0" y="1187.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="591.0" y="1198.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="588.0" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="591.0" y="1182.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (14 samples, 0.39%)</title><rect x="588.4" y="1267.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="591.4" y="1278.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::resize_if_needed() (1 samples, 0.03%)</title><rect x="588.4" y="1251.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="591.4" y="1262.0"></text>
</g>
<g>
<title>Dictionary::resize_if_needed() (1 samples, 0.03%)</title><rect x="588.4" y="1235.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.4" y="1246.0"></text>
</g>
<g>
<title>BasicHashtable&lt;(MemoryType)1&gt;::resize(int) (1 samples, 0.03%)</title><rect x="588.4" y="1219.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="591.4" y="1230.0"></text>
</g>
<g>
<title>InlineCacheBuffer::update_inline_caches() (1 samples, 0.03%)</title><rect x="588.8" y="1251.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="591.8" y="1262.0"></text>
</g>
<g>
<title>StubQueue::remove_all() (1 samples, 0.03%)</title><rect x="588.8" y="1235.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="591.8" y="1246.0"></text>
</g>
<g>
<title>StubQueue::remove_first() (1 samples, 0.03%)</title><rect x="588.8" y="1219.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="591.8" y="1230.0"></text>
</g>
<g>
<title>ICStub::finalize() (1 samples, 0.03%)</title><rect x="588.8" y="1203.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="591.8" y="1214.0"></text>
</g>
<g>
<title>CompiledIC::is_icholder_entry(unsigned char*) (1 samples, 0.03%)</title><rect x="588.8" y="1187.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.8" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="588.8" y="1171.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="591.8" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (12 samples, 0.34%)</title><rect x="589.3" y="1251.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="592.3" y="1262.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="589.7" y="1235.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="592.7" y="1246.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (8 samples, 0.22%)</title><rect x="590.2" y="1235.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="593.2" y="1246.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (8 samples, 0.22%)</title><rect x="590.2" y="1219.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="593.2" y="1230.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (6 samples, 0.17%)</title><rect x="590.2" y="1203.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="593.2" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.11%)</title><rect x="591.1" y="1187.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="594.1" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="591.1" y="1171.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="594.1" y="1182.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="592.4" y="1171.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="595.4" y="1182.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="592.4" y="1155.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="595.4" y="1166.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.03%)</title><rect x="592.8" y="1203.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="595.8" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="593.3" y="1203.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="596.3" y="1214.0"></text>
</g>
<g>
<title>Thread::claim_oops_do_par_case(int) (2 samples, 0.06%)</title><rect x="593.7" y="1235.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="596.7" y="1246.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (8 samples, 0.22%)</title><rect x="594.6" y="1267.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="597.6" y="1278.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (8 samples, 0.22%)</title><rect x="594.6" y="1251.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="597.6" y="1262.0"></text>
</g>
<g>
<title>JavaThread::run() (2,208 samples, 61.80%)</title><rect x="598.1" y="1283.0" width="976.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="601.1" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2,208 samples, 61.80%)</title><rect x="598.1" y="1267.0" width="976.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="601.1" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2,149 samples, 60.15%)</title><rect x="598.1" y="1251.0" width="950.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="601.1" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2,090 samples, 58.49%)</title><rect x="598.1" y="1235.0" width="924.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="601.1" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.03%)</title><rect x="598.6" y="1219.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="601.6" y="1230.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.03%)</title><rect x="598.6" y="1203.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="601.6" y="1214.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.03%)</title><rect x="598.6" y="1187.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="601.6" y="1198.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.03%)</title><rect x="598.6" y="1171.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="601.6" y="1182.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="598.6" y="1155.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="601.6" y="1166.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="598.6" y="1139.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="601.6" y="1150.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1,592 samples, 44.56%)</title><rect x="599.0" y="1219.0" width="704.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="602.0" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1,590 samples, 44.50%)</title><rect x="599.0" y="1203.0" width="703.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="602.0" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (15 samples, 0.42%)</title><rect x="599.0" y="1187.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="602.0" y="1198.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (15 samples, 0.42%)</title><rect x="599.0" y="1171.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.0" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (15 samples, 0.42%)</title><rect x="599.0" y="1155.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="602.0" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (15 samples, 0.42%)</title><rect x="599.0" y="1139.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="602.0" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (15 samples, 0.42%)</title><rect x="599.0" y="1123.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="602.0" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (15 samples, 0.42%)</title><rect x="599.0" y="1107.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="602.0" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (14 samples, 0.39%)</title><rect x="599.0" y="1091.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="602.0" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.06%)</title><rect x="599.0" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="602.0" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="599.0" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="602.0" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::append(ciTypeFlow::Block* const&amp;) (1 samples, 0.03%)</title><rect x="599.5" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="602.5" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="599.5" y="1043.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="602.5" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (12 samples, 0.34%)</title><rect x="599.9" y="1075.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="602.9" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (4 samples, 0.11%)</title><rect x="599.9" y="1059.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="602.9" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (4 samples, 0.11%)</title><rect x="599.9" y="1043.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="602.9" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (4 samples, 0.11%)</title><rect x="599.9" y="1027.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="602.9" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (4 samples, 0.11%)</title><rect x="599.9" y="1011.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="602.9" y="1022.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (3 samples, 0.08%)</title><rect x="600.3" y="995.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="603.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="600.3" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="603.3" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="600.3" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="603.3" y="974.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.03%)</title><rect x="600.8" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.8" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="601.2" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.2" y="990.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.03%)</title><rect x="601.2" y="963.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.2" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (7 samples, 0.20%)</title><rect x="601.7" y="1059.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="604.7" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (7 samples, 0.20%)</title><rect x="601.7" y="1043.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="604.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (7 samples, 0.20%)</title><rect x="601.7" y="1027.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (3 samples, 0.08%)</title><rect x="601.7" y="1011.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.7" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="602.1" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="605.1" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="602.6" y="995.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="605.6" y="1006.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.06%)</title><rect x="603.0" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="606.0" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (2 samples, 0.06%)</title><rect x="603.0" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="606.0" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (2 samples, 0.06%)</title><rect x="603.0" y="979.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="606.0" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (2 samples, 0.06%)</title><rect x="603.0" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="606.0" y="974.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (2 samples, 0.06%)</title><rect x="603.0" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="606.0" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.06%)</title><rect x="603.0" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (2 samples, 0.06%)</title><rect x="603.0" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="606.0" y="926.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.06%)</title><rect x="603.0" y="899.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="606.0" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.06%)</title><rect x="603.9" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.9" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.06%)</title><rect x="603.9" y="995.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="606.9" y="1006.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.06%)</title><rect x="603.9" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="606.9" y="990.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.03%)</title><rect x="603.9" y="963.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="606.9" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="604.3" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="607.3" y="974.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="604.3" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="607.3" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_ldc(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="604.8" y="1059.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="607.8" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.03%)</title><rect x="604.8" y="1043.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="607.8" y="1054.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="604.8" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="607.8" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="605.2" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="608.2" y="1102.0"></text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.03%)</title><rect x="605.7" y="1187.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="608.7" y="1198.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="605.7" y="1171.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="608.7" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="605.7" y="1155.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="608.7" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="605.7" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="608.7" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="605.7" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="608.7" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="605.7" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="608.7" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="605.7" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="608.7" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="605.7" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="608.7" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.03%)</title><rect x="605.7" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="608.7" y="1070.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1,024 samples, 28.66%)</title><rect x="606.1" y="1187.0" width="452.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="609.1" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>AbstractAssembler::bind(Label&amp;) (1 samples, 0.03%)</title><rect x="606.1" y="1171.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="609.1" y="1182.0"></text>
</g>
<g>
<title>Compile::Output() (35 samples, 0.98%)</title><rect x="606.5" y="1171.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="609.5" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (17 samples, 0.48%)</title><rect x="606.5" y="1155.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.5" y="1166.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (4 samples, 0.11%)</title><rect x="611.8" y="1139.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="614.8" y="1150.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.03%)</title><rect x="612.7" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="615.7" y="1134.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.03%)</title><rect x="613.2" y="1123.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.2" y="1134.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="613.6" y="1139.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="616.6" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (18 samples, 0.50%)</title><rect x="614.1" y="1155.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="617.1" y="1166.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (2 samples, 0.06%)</title><rect x="614.1" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="617.1" y="1150.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (2 samples, 0.06%)</title><rect x="614.1" y="1123.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.1" y="1134.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, int, int) (1 samples, 0.03%)</title><rect x="614.1" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="617.1" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::notify(int) (1 samples, 0.03%)</title><rect x="614.1" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="617.1" y="1102.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio(int) (1 samples, 0.03%)</title><rect x="614.1" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="617.1" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::allocated_capacity() const (1 samples, 0.03%)</title><rect x="614.1" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="617.1" y="1070.0"></text>
</g>
<g>
<title>MemoryService::track_code_cache_memory_usage() (1 samples, 0.03%)</title><rect x="614.5" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="617.5" y="1118.0"></text>
</g>
<g>
<title>MemoryService::track_memory_pool_usage(MemoryPool*) (1 samples, 0.03%)</title><rect x="614.5" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="617.5" y="1102.0"></text>
</g>
<g>
<title>MemoryPool::record_peak_memory_usage() (1 samples, 0.03%)</title><rect x="614.5" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="617.5" y="1086.0"></text>
</g>
<g>
<title>CodeHeapPool::get_memory_usage() (1 samples, 0.03%)</title><rect x="614.5" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="617.5" y="1070.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (15 samples, 0.42%)</title><rect x="614.9" y="1139.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="617.9" y="1150.0"></text>
</g>
<g>
<title>Block::code_alignment() const (1 samples, 0.03%)</title><rect x="616.7" y="1123.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.7" y="1134.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (9 samples, 0.25%)</title><rect x="617.1" y="1123.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="620.1" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::CodeBuffer(unsigned char*, int) (1 samples, 0.03%)</title><rect x="617.6" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.6" y="1118.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.03%)</title><rect x="618.0" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="621.0" y="1118.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.03%)</title><rect x="618.5" y="1107.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="621.5" y="1118.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.03%)</title><rect x="618.9" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="621.9" y="1118.0"></text>
</g>
<g>
<title>Assembler::movl(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="618.9" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="621.9" y="1102.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="619.4" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="622.4" y="1118.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop_not_null(RegisterImpl*, RegisterImpl*) (1 samples, 0.03%)</title><rect x="619.4" y="1091.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="622.4" y="1102.0"></text>
</g>
<g>
<title>Assembler::leaq(RegisterImpl*, Address) (1 samples, 0.03%)</title><rect x="619.4" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="622.4" y="1086.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.03%)</title><rect x="619.4" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="622.4" y="1070.0"></text>
</g>
<g>
<title>immL32Oper::constantL() const (1 samples, 0.03%)</title><rect x="619.8" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="622.8" y="1118.0"></text>
</g>
<g>
<title>loadNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="620.2" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="623.2" y="1118.0"></text>
</g>
<g>
<title>storeINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="620.7" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="623.7" y="1118.0"></text>
</g>
<g>
<title>indOffset8Oper::index(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.03%)</title><rect x="620.7" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="623.7" y="1102.0"></text>
</g>
<g>
<title>MacroAssembler::MacroAssembler(CodeBuffer*) (1 samples, 0.03%)</title><rect x="621.1" y="1123.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="624.1" y="1134.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="621.6" y="1139.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="624.6" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (21 samples, 0.59%)</title><rect x="622.0" y="1171.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.0" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (6 samples, 0.17%)</title><rect x="622.5" y="1155.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="625.5" y="1166.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.06%)</title><rect x="622.9" y="1139.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="625.9" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (3 samples, 0.08%)</title><rect x="623.8" y="1139.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="626.8" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (3 samples, 0.08%)</title><rect x="623.8" y="1123.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="626.8" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="624.2" y="1107.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="627.2" y="1118.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="624.2" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="627.2" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::insert_before(int, DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="624.2" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.2" y="1086.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="624.7" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="627.7" y="1118.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.03%)</title><rect x="624.7" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="627.7" y="1102.0"></text>
</g>
<g>
<title>MachEpilogNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (2 samples, 0.06%)</title><rect x="625.1" y="1155.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="628.1" y="1166.0"></text>
</g>
<g>
<title>Assembler::vzeroupper() (2 samples, 0.06%)</title><rect x="625.1" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="628.1" y="1150.0"></text>
</g>
<g>
<title>Assembler::vex_prefix_and_encode(int, int, int, Assembler::VexSimdPrefix, Assembler::VexOpcode, InstructionAttr*) (1 samples, 0.03%)</title><rect x="625.5" y="1123.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="628.5" y="1134.0"></text>
</g>
<g>
<title>Assembler::vex_prefix(bool, bool, bool, int, Assembler::VexSimdPrefix, Assembler::VexOpcode) (1 samples, 0.03%)</title><rect x="625.5" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="628.5" y="1118.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (2 samples, 0.06%)</title><rect x="626.0" y="1155.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.0" y="1166.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (7 samples, 0.20%)</title><rect x="626.9" y="1155.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="629.9" y="1166.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (2 samples, 0.06%)</title><rect x="627.3" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="630.3" y="1150.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (4 samples, 0.11%)</title><rect x="628.2" y="1139.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="631.2" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.11%)</title><rect x="628.2" y="1123.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="631.2" y="1134.0"></text>
</g>
<g>
<title>CompressedWriteStream::write(unsigned char) (1 samples, 0.03%)</title><rect x="628.2" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="631.2" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.06%)</title><rect x="628.6" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="631.6" y="1118.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (2 samples, 0.06%)</title><rect x="628.6" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="631.6" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::insert_before(int, DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="628.6" y="1075.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="631.6" y="1086.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.03%)</title><rect x="629.1" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="632.1" y="1086.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="629.1" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="632.1" y="1070.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::add_handle(Metadata*, bool) (1 samples, 0.03%)</title><rect x="629.5" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="632.5" y="1118.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="630.0" y="1155.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="633.0" y="1166.0"></text>
</g>
<g>
<title>MacroAssembler::fast_unlock(RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.03%)</title><rect x="630.0" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.0" y="1150.0"></text>
</g>
<g>
<title>Assembler::movslq(Address, int) (1 samples, 0.03%)</title><rect x="630.0" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.0" y="1134.0"></text>
</g>
<g>
<title>loadConPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="630.4" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.4" y="1166.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, relocInfo::relocType, int, int) (1 samples, 0.03%)</title><rect x="630.4" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="633.4" y="1150.0"></text>
</g>
<g>
<title>metadata_Relocation::type() (1 samples, 0.03%)</title><rect x="630.4" y="1123.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="633.4" y="1134.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="630.9" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="633.9" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (76 samples, 2.13%)</title><rect x="631.3" y="1171.0" width="33.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="634.3" y="1182.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.06%)</title><rect x="631.3" y="1155.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.3" y="1166.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (2 samples, 0.06%)</title><rect x="632.2" y="1155.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="635.2" y="1166.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (2 samples, 0.06%)</title><rect x="632.2" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="635.2" y="1150.0"></text>
</g>
<g>
<title>Matcher::max_vector_size(BasicType) (1 samples, 0.03%)</title><rect x="632.6" y="1123.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="635.6" y="1134.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (6 samples, 0.17%)</title><rect x="633.1" y="1155.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (65 samples, 1.82%)</title><rect x="635.7" y="1155.0" width="28.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.7" y="1166.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (16 samples, 0.45%)</title><rect x="637.9" y="1139.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="640.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::MStack::push(Node*, Matcher::Node_State, Node*, int) (1 samples, 0.03%)</title><rect x="645.0" y="1139.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="648.0" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (5 samples, 0.14%)</title><rect x="645.4" y="1139.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="648.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.11%)</title><rect x="645.9" y="1123.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="648.9" y="1134.0"></text>
</g>
<g>
<title>CallNode::match_edge(unsigned int) const (2 samples, 0.06%)</title><rect x="645.9" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="648.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="646.8" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="649.8" y="1118.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="646.8" y="1091.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="649.8" y="1102.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="647.2" y="1107.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="650.2" y="1118.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.03%)</title><rect x="647.2" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="650.2" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (29 samples, 0.81%)</title><rect x="647.7" y="1139.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="650.7" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (12 samples, 0.34%)</title><rect x="649.9" y="1123.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="652.9" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="650.8" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="653.8" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="650.8" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="653.8" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="650.8" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.8" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="650.8" y="1059.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="653.8" y="1070.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.03%)</title><rect x="650.8" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="653.8" y="1054.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.06%)</title><rect x="651.2" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="654.2" y="1118.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="651.6" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="654.6" y="1102.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (5 samples, 0.14%)</title><rect x="652.1" y="1107.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="655.1" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="653.0" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="656.0" y="1102.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.03%)</title><rect x="653.0" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="656.0" y="1086.0"></text>
</g>
<g>
<title>State::_sub_Op_XorL(Node const*) (1 samples, 0.03%)</title><rect x="653.0" y="1059.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="656.0" y="1070.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.06%)</title><rect x="653.4" y="1091.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="656.4" y="1102.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.03%)</title><rect x="653.9" y="1075.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="656.9" y="1086.0"></text>
</g>
<g>
<title>Matcher::narrow_oop_use_complex_address() (1 samples, 0.03%)</title><rect x="654.3" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.3" y="1118.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.03%)</title><rect x="654.7" y="1107.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.7" y="1118.0"></text>
</g>
<g>
<title>State::_sub_Op_LoadN(Node const*) (1 samples, 0.03%)</title><rect x="654.7" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="657.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (11 samples, 0.31%)</title><rect x="655.2" y="1123.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="658.2" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.08%)</title><rect x="655.2" y="1107.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="658.2" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.06%)</title><rect x="655.2" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="658.2" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.06%)</title><rect x="655.2" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="658.2" y="1086.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.03%)</title><rect x="655.2" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="658.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="655.6" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="658.6" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="655.6" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="658.6" y="1054.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="655.6" y="1027.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="658.6" y="1038.0"></text>
</g>
<g>
<title>shrI_rReg_immNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.03%)</title><rect x="656.1" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.03%)</title><rect x="656.5" y="1107.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="659.5" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.03%)</title><rect x="656.5" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.5" y="1102.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.03%)</title><rect x="656.5" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="659.5" y="1086.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="656.9" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="659.9" y="1118.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="657.4" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="660.4" y="1118.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.03%)</title><rect x="657.4" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="660.4" y="1102.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (4 samples, 0.11%)</title><rect x="657.8" y="1107.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="660.8" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.06%)</title><rect x="658.3" y="1091.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.3" y="1102.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="658.7" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="661.7" y="1086.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="658.7" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="661.7" y="1070.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="659.2" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="662.2" y="1102.0"></text>
</g>
<g>
<title>storeLConditionalNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.03%)</title><rect x="659.6" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="662.6" y="1118.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.03%)</title><rect x="659.6" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="662.6" y="1102.0"></text>
</g>
<g>
<title>ReturnNode::match_edge(unsigned int) const (1 samples, 0.03%)</title><rect x="660.0" y="1123.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.0" y="1134.0"></text>
</g>
<g>
<title>Node::clone() const (2 samples, 0.06%)</title><rect x="660.5" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.5" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="660.5" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="663.5" y="1134.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="660.9" y="1123.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="663.9" y="1134.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="660.9" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="663.9" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (7 samples, 0.20%)</title><rect x="661.4" y="1139.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="664.4" y="1150.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (2 samples, 0.06%)</title><rect x="661.4" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="664.4" y="1134.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="661.8" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="664.8" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="661.8" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="664.8" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (5 samples, 0.14%)</title><rect x="662.3" y="1123.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="665.3" y="1134.0"></text>
</g>
<g>
<title>Node::is_top() const (2 samples, 0.06%)</title><rect x="663.6" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="666.6" y="1118.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.03%)</title><rect x="664.5" y="1155.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="667.5" y="1166.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (6 samples, 0.17%)</title><rect x="664.9" y="1171.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="667.9" y="1182.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (3 samples, 0.08%)</title><rect x="664.9" y="1155.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="667.9" y="1166.0"></text>
</g>
<g>
<title>Block::succ_fall_through(unsigned int) (1 samples, 0.03%)</title><rect x="665.8" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="668.8" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (3 samples, 0.08%)</title><rect x="666.2" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="669.2" y="1166.0"></text>
</g>
<g>
<title>Trace::insert_after(Block*, Trace*) (1 samples, 0.03%)</title><rect x="666.7" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="669.7" y="1150.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.03%)</title><rect x="667.1" y="1139.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="670.1" y="1150.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.03%)</title><rect x="667.1" y="1123.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="670.1" y="1134.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.03%)</title><rect x="667.1" y="1107.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="670.1" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (4 samples, 0.11%)</title><rect x="667.6" y="1171.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="670.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (4 samples, 0.11%)</title><rect x="667.6" y="1155.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.6" y="1166.0"></text>
</g>
<g>
<title>Block_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="668.0" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="671.0" y="1150.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="668.0" y="1123.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="671.0" y="1134.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="668.4" y="1139.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="671.4" y="1150.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="668.4" y="1123.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="671.4" y="1134.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="668.4" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="671.4" y="1118.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.03%)</title><rect x="668.4" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="671.4" y="1102.0"></text>
</g>
<g>
<title>RegionNode::RegionNode(unsigned int) (1 samples, 0.03%)</title><rect x="668.9" y="1139.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="671.9" y="1150.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="668.9" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="671.9" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (96 samples, 2.69%)</title><rect x="669.3" y="1171.0" width="42.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.3" y="1182.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (3 samples, 0.08%)</title><rect x="669.3" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.03%)</title><rect x="670.2" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="673.2" y="1150.0"></text>
</g>
<g>
<title>Block_Stack::push(unsigned int, Block*) (1 samples, 0.03%)</title><rect x="670.2" y="1123.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="673.2" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (93 samples, 2.60%)</title><rect x="670.7" y="1155.0" width="41.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="673.7" y="1166.0">Pha..</text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.03%)</title><rect x="670.7" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="673.7" y="1150.0"></text>
</g>
<g>
<title>MachProjNode::out_RegMask() const (1 samples, 0.03%)</title><rect x="671.1" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="674.1" y="1150.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.03%)</title><rect x="671.5" y="1139.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.03%)</title><rect x="672.0" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="675.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.08%)</title><rect x="672.4" y="1139.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="675.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (20 samples, 0.56%)</title><rect x="673.8" y="1139.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="676.8" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (1 samples, 0.03%)</title><rect x="674.6" y="1123.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="677.6" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (6 samples, 0.17%)</title><rect x="675.1" y="1123.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="678.1" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (4 samples, 0.11%)</title><rect x="677.7" y="1123.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="680.7" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (2 samples, 0.06%)</title><rect x="678.6" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="681.6" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::grow(int) (1 samples, 0.03%)</title><rect x="679.1" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.1" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="679.1" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="682.1" y="1086.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="679.1" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="682.1" y="1070.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="679.1" y="1043.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="682.1" y="1054.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.03%)</title><rect x="679.1" y="1027.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.1" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (5 samples, 0.14%)</title><rect x="679.5" y="1123.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="682.5" y="1134.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.03%)</title><rect x="679.9" y="1107.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="682.9" y="1118.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.03%)</title><rect x="679.9" y="1091.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.9" y="1102.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.03%)</title><rect x="679.9" y="1075.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="682.9" y="1086.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (2 samples, 0.06%)</title><rect x="680.4" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="683.4" y="1118.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (2 samples, 0.06%)</title><rect x="680.4" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.4" y="1102.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.03%)</title><rect x="680.4" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="683.4" y="1086.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="680.8" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="683.8" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="680.8" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="683.8" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="680.8" y="1043.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="683.8" y="1054.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="680.8" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="683.8" y="1038.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="681.3" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="684.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (2 samples, 0.06%)</title><rect x="681.7" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="684.7" y="1134.0"></text>
</g>
<g>
<title>Block::add_inst(Node*) (1 samples, 0.03%)</title><rect x="682.2" y="1107.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="685.2" y="1118.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="682.2" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="685.2" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (12 samples, 0.34%)</title><rect x="682.6" y="1139.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="685.6" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.03%)</title><rect x="683.5" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="686.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.03%)</title><rect x="683.9" y="1123.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="686.9" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (5 samples, 0.14%)</title><rect x="684.4" y="1123.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="687.4" y="1134.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (5 samples, 0.14%)</title><rect x="684.4" y="1107.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="687.4" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.03%)</title><rect x="686.6" y="1123.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (2 samples, 0.06%)</title><rect x="687.0" y="1123.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="690.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.06%)</title><rect x="687.0" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="687.0" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="690.0" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="687.0" y="1075.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.0" y="1086.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="687.5" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="690.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (4 samples, 0.11%)</title><rect x="687.9" y="1139.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="690.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.03%)</title><rect x="689.2" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="692.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.25%)</title><rect x="689.7" y="1139.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.7" y="1150.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.03%)</title><rect x="690.6" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="693.6" y="1134.0"></text>
</g>
<g>
<title>PhiNode::in_RegMask(unsigned int) const (2 samples, 0.06%)</title><rect x="691.0" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="694.0" y="1134.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (2 samples, 0.06%)</title><rect x="691.0" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="694.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.03%)</title><rect x="691.9" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="694.9" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.06%)</title><rect x="692.3" y="1123.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="695.3" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.03%)</title><rect x="693.2" y="1123.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="696.2" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.03%)</title><rect x="693.2" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="696.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (3 samples, 0.08%)</title><rect x="693.6" y="1139.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="696.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (12 samples, 0.34%)</title><rect x="695.0" y="1139.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.0" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (7 samples, 0.20%)</title><rect x="695.4" y="1123.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="698.4" y="1134.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.11%)</title><rect x="698.5" y="1123.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="701.5" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (21 samples, 0.59%)</title><rect x="700.3" y="1139.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.3" y="1150.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (5 samples, 0.14%)</title><rect x="702.1" y="1123.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="705.1" y="1134.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="704.3" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="707.3" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.20%)</title><rect x="704.7" y="1123.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="707.7" y="1134.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.11%)</title><rect x="705.6" y="1107.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="708.6" y="1118.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="706.9" y="1091.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="709.9" y="1102.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.03%)</title><rect x="706.9" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="709.9" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="707.4" y="1107.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="710.4" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (4 samples, 0.11%)</title><rect x="707.8" y="1123.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="710.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="708.2" y="1107.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="711.2" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (2 samples, 0.06%)</title><rect x="708.7" y="1107.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="711.7" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="708.7" y="1091.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.7" y="1102.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="708.7" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="711.7" y="1086.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.03%)</title><rect x="708.7" y="1059.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="711.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="709.1" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="712.1" y="1102.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="709.6" y="1139.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="712.6" y="1150.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.06%)</title><rect x="709.6" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.6" y="1134.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.03%)</title><rect x="709.6" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="712.6" y="1118.0"></text>
</g>
<g>
<title>free_medium (1 samples, 0.03%)</title><rect x="709.6" y="1091.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="712.6" y="1102.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.03%)</title><rect x="709.6" y="1075.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="712.6" y="1086.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.03%)</title><rect x="710.0" y="1107.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="713.0" y="1118.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.03%)</title><rect x="710.0" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="713.0" y="1102.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="710.0" y="1075.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="713.0" y="1086.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="710.0" y="1059.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="713.0" y="1070.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="710.5" y="1139.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="713.5" y="1150.0"></text>
</g>
<g>
<title>compL_rReg_immNode::ideal_Opcode() const (1 samples, 0.03%)</title><rect x="710.9" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="713.9" y="1150.0"></text>
</g>
<g>
<title>storeImmNNode::ideal_Opcode() const (1 samples, 0.03%)</title><rect x="711.3" y="1139.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="714.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.03%)</title><rect x="711.8" y="1171.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="714.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.03%)</title><rect x="712.2" y="1171.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="715.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.03%)</title><rect x="712.2" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="715.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (782 samples, 21.89%)</title><rect x="712.7" y="1171.0" width="345.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.7" y="1182.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.03%)</title><rect x="713.1" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="716.1" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.08%)</title><rect x="713.5" y="1155.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.5" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.06%)</title><rect x="714.9" y="1155.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="717.9" y="1166.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (2 samples, 0.06%)</title><rect x="715.8" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="718.8" y="1166.0"></text>
</g>
<g>
<title>LiveRangeMap::find(unsigned int) (1 samples, 0.03%)</title><rect x="716.2" y="1139.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="719.2" y="1150.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.03%)</title><rect x="716.6" y="1155.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.6" y="1166.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.03%)</title><rect x="717.1" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="720.1" y="1166.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="717.5" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="720.5" y="1166.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.03%)</title><rect x="718.0" y="1155.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.0" y="1166.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="718.4" y="1155.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="721.4" y="1166.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.03%)</title><rect x="718.9" y="1155.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.9" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (17 samples, 0.48%)</title><rect x="719.3" y="1155.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="722.3" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="724.2" y="1139.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.2" y="1150.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="724.6" y="1139.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="727.6" y="1150.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="725.0" y="1139.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="728.0" y="1150.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="725.5" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="728.5" y="1150.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="725.5" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.5" y="1134.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="725.5" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="728.5" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="725.5" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="728.5" y="1102.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="725.5" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.5" y="1086.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="725.9" y="1139.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="728.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.03%)</title><rect x="726.4" y="1139.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="729.4" y="1150.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.03%)</title><rect x="726.4" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="729.4" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.03%)</title><rect x="726.4" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="729.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (54 samples, 1.51%)</title><rect x="726.8" y="1155.0" width="23.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.8" y="1166.0">P..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="729.9" y="1139.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="732.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (10 samples, 0.28%)</title><rect x="730.4" y="1139.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.11%)</title><rect x="734.8" y="1139.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="737.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (4 samples, 0.11%)</title><rect x="736.5" y="1139.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="739.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="737.0" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="740.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.03%)</title><rect x="737.4" y="1123.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="740.4" y="1134.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="737.4" y="1107.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="740.4" y="1118.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="737.9" y="1123.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="740.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::choose_color(LRG&amp;, int) (1 samples, 0.03%)</title><rect x="738.3" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="741.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (16 samples, 0.45%)</title><rect x="738.8" y="1139.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="741.8" y="1150.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.14%)</title><rect x="739.6" y="1123.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="742.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.06%)</title><rect x="741.0" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="741.8" y="1123.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="744.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.11%)</title><rect x="742.3" y="1123.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="745.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.11%)</title><rect x="744.1" y="1123.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="747.1" y="1134.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (6 samples, 0.17%)</title><rect x="745.8" y="1139.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.8" y="1150.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (5 samples, 0.14%)</title><rect x="748.5" y="1139.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (43 samples, 1.20%)</title><rect x="750.7" y="1155.0" width="19.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="753.7" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (8 samples, 0.22%)</title><rect x="752.9" y="1139.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (6 samples, 0.17%)</title><rect x="756.4" y="1139.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="759.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (24 samples, 0.67%)</title><rect x="759.1" y="1139.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="762.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (10 samples, 0.28%)</title><rect x="763.5" y="1123.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.08%)</title><rect x="767.9" y="1123.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="770.9" y="1134.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.03%)</title><rect x="769.3" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="772.3" y="1134.0"></text>
</g>
<g>
<title>VectorSet::grow(unsigned int) (1 samples, 0.03%)</title><rect x="769.3" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.3" y="1118.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="769.3" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.3" y="1102.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="769.3" y="1075.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="772.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (78 samples, 2.18%)</title><rect x="769.7" y="1155.0" width="34.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.7" y="1166.0">Ph..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="792.7" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="795.7" y="1150.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="792.7" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="795.7" y="1134.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="793.1" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="796.1" y="1150.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.06%)</title><rect x="793.6" y="1139.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.6" y="1150.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.06%)</title><rect x="794.5" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="797.5" y="1150.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="794.9" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="797.9" y="1134.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="794.9" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="797.9" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.08%)</title><rect x="795.4" y="1139.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="798.4" y="1150.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="795.4" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="798.4" y="1134.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="795.4" y="1107.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="798.4" y="1118.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.03%)</title><rect x="795.4" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="798.4" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.06%)</title><rect x="795.8" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="798.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::is_high_pressure(Block*, LRG*, unsigned int) (1 samples, 0.03%)</title><rect x="796.7" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (2 samples, 0.06%)</title><rect x="797.1" y="1139.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.1" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::raw_at_put_grow(int, unsigned int const&amp;, unsigned int const&amp;) (1 samples, 0.03%)</title><rect x="797.6" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="800.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.08%)</title><rect x="798.0" y="1139.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="801.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="798.0" y="1123.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="801.0" y="1134.0"></text>
</g>
<g>
<title>indirectOper::in_RegMask(int) const (1 samples, 0.03%)</title><rect x="798.0" y="1107.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="801.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="798.5" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.03%)</title><rect x="798.9" y="1123.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="801.9" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::raw_at_put_grow(int, unsigned int const&amp;, unsigned int const&amp;) (1 samples, 0.03%)</title><rect x="798.9" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.9" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::grow(int) (1 samples, 0.03%)</title><rect x="798.9" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.9" y="1102.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.03%)</title><rect x="799.3" y="1139.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.3" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="799.8" y="1139.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="802.8" y="1150.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="799.8" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="802.8" y="1134.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (2 samples, 0.06%)</title><rect x="800.2" y="1139.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="803.2" y="1150.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.03%)</title><rect x="801.1" y="1139.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="804.1" y="1150.0"></text>
</g>
<g>
<title>loadBNode::rule() const (1 samples, 0.03%)</title><rect x="801.5" y="1139.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="804.5" y="1150.0"></text>
</g>
<g>
<title>loadConINode::rule() const (1 samples, 0.03%)</title><rect x="802.0" y="1139.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="805.0" y="1150.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.03%)</title><rect x="802.4" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="805.4" y="1150.0"></text>
</g>
<g>
<title>loadNNode::rule() const (2 samples, 0.06%)</title><rect x="802.9" y="1139.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="805.9" y="1150.0"></text>
</g>
<g>
<title>modI_rRegNode::rule() const (1 samples, 0.03%)</title><rect x="803.8" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="806.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (181 samples, 5.07%)</title><rect x="804.2" y="1155.0" width="80.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="807.2" y="1166.0">PhaseChai..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (6 samples, 0.17%)</title><rect x="810.4" y="1139.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.11%)</title><rect x="813.0" y="1139.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="816.0" y="1150.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.03%)</title><rect x="814.8" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="817.8" y="1150.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (3 samples, 0.08%)</title><rect x="815.3" y="1139.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="818.3" y="1150.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="816.1" y="1123.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="819.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (16 samples, 0.45%)</title><rect x="816.6" y="1139.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.6" y="1150.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (4 samples, 0.11%)</title><rect x="820.1" y="1123.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="823.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.06%)</title><rect x="821.9" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.9" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="822.3" y="1107.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.3" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="822.3" y="1091.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="825.3" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="822.8" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.8" y="1134.0"></text>
</g>
<g>
<title>loadUSNode::rule() const (1 samples, 0.03%)</title><rect x="823.2" y="1123.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (5 samples, 0.14%)</title><rect x="823.7" y="1139.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="826.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (19 samples, 0.53%)</title><rect x="825.9" y="1139.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="828.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.11%)</title><rect x="828.5" y="1123.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.08%)</title><rect x="830.3" y="1123.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.14%)</title><rect x="831.6" y="1123.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (3 samples, 0.08%)</title><rect x="832.1" y="1107.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.1" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.08%)</title><rect x="832.1" y="1091.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="835.1" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="833.4" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.4" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="833.8" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (70 samples, 1.96%)</title><rect x="834.3" y="1139.0" width="30.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="837.3" y="1150.0">Ph..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (20 samples, 0.56%)</title><rect x="836.0" y="1123.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.0" y="1134.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="844.4" y="1107.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="847.4" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="844.9" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="847.9" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (16 samples, 0.45%)</title><rect x="845.3" y="1123.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (10 samples, 0.28%)</title><rect x="852.4" y="1123.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="855.4" y="1134.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (19 samples, 0.53%)</title><rect x="856.8" y="1123.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.06%)</title><rect x="865.2" y="1139.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="868.2" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="865.2" y="1123.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.2" y="1134.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="865.2" y="1107.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.2" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="865.7" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (37 samples, 1.04%)</title><rect x="866.1" y="1139.0" width="16.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="873.2" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.2" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.06%)</title><rect x="873.6" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.03%)</title><rect x="874.5" y="1123.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.5" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.11%)</title><rect x="875.0" y="1123.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="878.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.03%)</title><rect x="876.7" y="1123.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="879.7" y="1134.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="876.7" y="1107.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="879.7" y="1118.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (10 samples, 0.28%)</title><rect x="877.2" y="1123.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.2" y="1134.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="881.6" y="1123.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="884.6" y="1134.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="882.0" y="1123.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="885.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_interference_from_copy(Block*, unsigned int, unsigned int, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="882.5" y="1139.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="885.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.03%)</title><rect x="882.9" y="1139.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.9" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="883.4" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="886.4" y="1150.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="883.8" y="1139.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="886.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (10 samples, 0.28%)</title><rect x="884.2" y="1155.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.2" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="886.5" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="889.5" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.11%)</title><rect x="886.9" y="1139.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="889.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.06%)</title><rect x="886.9" y="1123.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.9" y="1134.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.06%)</title><rect x="887.8" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="890.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (6 samples, 0.17%)</title><rect x="888.7" y="1155.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="891.7" y="1166.0"></text>
</g>
<g>
<title>RegMask::find_last_elem() const (5 samples, 0.14%)</title><rect x="889.1" y="1139.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.1" y="1150.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (2 samples, 0.06%)</title><rect x="890.4" y="1123.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="893.4" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.03%)</title><rect x="891.3" y="1155.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.03%)</title><rect x="891.8" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="894.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (83 samples, 2.32%)</title><rect x="892.2" y="1155.0" width="36.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="895.2" y="1166.0">Pha..</text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="906.4" y="1139.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="909.4" y="1150.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (2 samples, 0.06%)</title><rect x="906.8" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.8" y="1150.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="907.7" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="910.7" y="1150.0"></text>
</g>
<g>
<title>MachNode::mach_constant_base_node_input() const (1 samples, 0.03%)</title><rect x="908.1" y="1139.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.1" y="1150.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (6 samples, 0.17%)</title><rect x="908.6" y="1139.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="911.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.11%)</title><rect x="911.2" y="1139.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.2" y="1150.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (3 samples, 0.08%)</title><rect x="913.0" y="1139.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.0" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (12 samples, 0.34%)</title><rect x="914.3" y="1139.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="917.3" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (8 samples, 0.22%)</title><rect x="916.1" y="1123.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="919.1" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (20 samples, 0.56%)</title><rect x="919.6" y="1139.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::Size() const (18 samples, 0.50%)</title><rect x="919.6" y="1123.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="922.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (2 samples, 0.06%)</title><rect x="927.6" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.6" y="1134.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.03%)</title><rect x="928.5" y="1139.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="931.5" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="928.5" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (9 samples, 0.25%)</title><rect x="928.9" y="1155.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="931.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.03%)</title><rect x="932.4" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (106 samples, 2.97%)</title><rect x="932.9" y="1155.0" width="46.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.9" y="1166.0">Phas..</text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.06%)</title><rect x="943.9" y="1139.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.9" y="1150.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (7 samples, 0.20%)</title><rect x="944.8" y="1139.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="947.8" y="1150.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="944.8" y="1123.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.8" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="944.8" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.8" y="1118.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="944.8" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.8" y="1102.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (6 samples, 0.17%)</title><rect x="945.3" y="1123.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="948.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (64 samples, 1.79%)</title><rect x="947.9" y="1139.0" width="28.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.9" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="975.3" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.03%)</title><rect x="975.8" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::replace_and_yank_if_dead(Node*, int, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="976.2" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.2" y="1150.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.03%)</title><rect x="976.2" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.2" y="1134.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="976.2" y="1107.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.2" y="1118.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="976.2" y="1091.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.2" y="1102.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="976.2" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.2" y="1086.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.03%)</title><rect x="976.2" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.2" y="1070.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (6 samples, 0.17%)</title><rect x="976.7" y="1139.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.7" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="979.3" y="1139.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="982.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (4 samples, 0.11%)</title><rect x="979.8" y="1155.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.8" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.06%)</title><rect x="980.2" y="1139.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.2" y="1150.0"></text>
</g>
<g>
<title>jmpDirNode::ideal_Opcode() const (1 samples, 0.03%)</title><rect x="981.1" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (34 samples, 0.95%)</title><rect x="981.5" y="1155.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.5" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.08%)</title><rect x="981.5" y="1139.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.03%)</title><rect x="982.4" y="1123.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.4" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (31 samples, 0.87%)</title><rect x="982.9" y="1139.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.06%)</title><rect x="982.9" y="1123.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.9" y="1134.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.03%)</title><rect x="983.3" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.3" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (29 samples, 0.81%)</title><rect x="983.7" y="1123.0" width="12.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.7" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (12 samples, 0.34%)</title><rect x="983.7" y="1107.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="986.7" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.06%)</title><rect x="983.7" y="1091.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.7" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.08%)</title><rect x="984.6" y="1091.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.08%)</title><rect x="985.9" y="1091.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.9" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.11%)</title><rect x="987.3" y="1091.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.3" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (2 samples, 0.06%)</title><rect x="989.0" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.0" y="1118.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.06%)</title><rect x="989.0" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.0" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.06%)</title><rect x="989.0" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.0" y="1086.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="989.5" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.5" y="1070.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="989.5" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.5" y="1054.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="989.5" y="1027.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="992.5" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 0.25%)</title><rect x="989.9" y="1107.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="992.9" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.11%)</title><rect x="991.3" y="1091.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.3" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.06%)</title><rect x="993.0" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (4 samples, 0.11%)</title><rect x="993.9" y="1107.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.9" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.08%)</title><rect x="994.3" y="1091.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="995.7" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.7" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="996.1" y="1107.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (21 samples, 0.59%)</title><rect x="996.6" y="1155.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (21 samples, 0.59%)</title><rect x="996.6" y="1139.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="998.8" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (10 samples, 0.28%)</title><rect x="999.2" y="1123.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.2" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.14%)</title><rect x="1003.6" y="1123.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (26 samples, 0.73%)</title><rect x="1005.8" y="1155.0" width="11.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.8" y="1166.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (9 samples, 0.25%)</title><rect x="1005.8" y="1139.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.8" y="1150.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="1009.4" y="1123.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1012.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (12 samples, 0.34%)</title><rect x="1009.8" y="1139.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1012.8" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (5 samples, 0.14%)</title><rect x="1015.1" y="1139.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (19 samples, 0.53%)</title><rect x="1017.3" y="1155.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.3" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (7 samples, 0.20%)</title><rect x="1019.6" y="1139.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.6" y="1150.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (7 samples, 0.20%)</title><rect x="1022.7" y="1139.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1025.7" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (65 samples, 1.82%)</title><rect x="1025.7" y="1155.0" width="28.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.7" y="1166.0">Ph..</text>
</g>
<g>
<title>IndexSet::clear() (3 samples, 0.08%)</title><rect x="1034.1" y="1139.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.1" y="1150.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (2 samples, 0.06%)</title><rect x="1034.6" y="1123.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (7 samples, 0.20%)</title><rect x="1035.5" y="1139.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.5" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1038.1" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.1" y="1134.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1038.1" y="1107.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.1" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.11%)</title><rect x="1038.6" y="1139.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="1040.3" y="1139.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.03%)</title><rect x="1040.8" y="1139.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.8" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (29 samples, 0.81%)</title><rect x="1041.2" y="1139.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.2" y="1150.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (12 samples, 0.34%)</title><rect x="1045.2" y="1123.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.2" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="1050.1" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.1" y="1118.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.03%)</title><rect x="1050.1" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.1" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.11%)</title><rect x="1050.5" y="1123.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.08%)</title><rect x="1052.3" y="1123.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.3" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.03%)</title><rect x="1053.6" y="1123.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1056.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.03%)</title><rect x="1053.6" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.6" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1054.0" y="1139.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.0" y="1150.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.03%)</title><rect x="1054.5" y="1155.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.5" y="1166.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="1054.9" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.9" y="1166.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.06%)</title><rect x="1054.9" y="1139.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1057.9" y="1150.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.03%)</title><rect x="1055.4" y="1123.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.4" y="1134.0"></text>
</g>
<g>
<title>free_medium (1 samples, 0.03%)</title><rect x="1055.4" y="1107.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1058.4" y="1118.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.03%)</title><rect x="1055.4" y="1091.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1058.4" y="1102.0"></text>
</g>
<g>
<title>cmpL3_reg_regNode::out_RegMask() const (1 samples, 0.03%)</title><rect x="1055.8" y="1155.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.8" y="1166.0"></text>
</g>
<g>
<title>jmpConNode::oper_input_base() const (1 samples, 0.03%)</title><rect x="1056.3" y="1155.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.3" y="1166.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (2 samples, 0.06%)</title><rect x="1056.7" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.7" y="1166.0"></text>
</g>
<g>
<title>membar_volatileNode::oper_input_base() const (1 samples, 0.03%)</title><rect x="1057.6" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.6" y="1166.0"></text>
</g>
<g>
<title>rFlagsRegUOper::type() const (1 samples, 0.03%)</title><rect x="1058.0" y="1155.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.0" y="1166.0"></text>
</g>
<g>
<title>PhasePeephole::PhasePeephole(PhaseRegAlloc*, PhaseCFG&amp;) (1 samples, 0.03%)</title><rect x="1058.5" y="1171.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.5" y="1182.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1058.5" y="1155.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.5" y="1166.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1058.5" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.5" y="1150.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1058.5" y="1123.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1061.5" y="1134.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.03%)</title><rect x="1058.9" y="1187.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="1198.0"></text>
</g>
<g>
<title>Dependencies::initialize(ciEnv*) (1 samples, 0.03%)</title><rect x="1058.9" y="1171.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="1182.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(Arena*, int, int, int const&amp;) (1 samples, 0.03%)</title><rect x="1058.9" y="1155.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.9" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (408 samples, 11.42%)</title><rect x="1059.4" y="1187.0" width="180.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.4" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1059.4" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.4" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (9 samples, 0.25%)</title><rect x="1059.8" y="1171.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.8" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (9 samples, 0.25%)</title><rect x="1059.8" y="1155.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.8" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (3 samples, 0.08%)</title><rect x="1062.0" y="1139.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.0" y="1150.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.03%)</title><rect x="1062.4" y="1123.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.4" y="1134.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.03%)</title><rect x="1062.4" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.4" y="1118.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1062.4" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.4" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1062.4" y="1075.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1065.4" y="1086.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.03%)</title><rect x="1062.9" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.9" y="1134.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1062.9" y="1107.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.9" y="1118.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1062.9" y="1091.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.9" y="1102.0"></text>
</g>
<g>
<title>LoadRangeNode::Opcode() const (1 samples, 0.03%)</title><rect x="1063.3" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.3" y="1150.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.03%)</title><rect x="1063.8" y="1171.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.8" y="1182.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="1063.8" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1066.8" y="1166.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (7 samples, 0.20%)</title><rect x="1064.2" y="1171.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.2" y="1182.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (4 samples, 0.11%)</title><rect x="1065.1" y="1155.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.1" y="1166.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1065.1" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.1" y="1150.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (3 samples, 0.08%)</title><rect x="1065.5" y="1139.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.5" y="1150.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.03%)</title><rect x="1066.9" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.9" y="1166.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1066.9" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (11 samples, 0.31%)</title><rect x="1067.3" y="1171.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.03%)</title><rect x="1067.3" y="1155.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="1166.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray(Arena*, int, int, PointsToNode* const&amp;) (1 samples, 0.03%)</title><rect x="1067.3" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (10 samples, 0.28%)</title><rect x="1067.8" y="1155.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (6 samples, 0.17%)</title><rect x="1068.2" y="1139.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (4 samples, 0.11%)</title><rect x="1068.6" y="1123.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.6" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1068.6" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.6" y="1118.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1068.6" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.03%)</title><rect x="1069.1" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.1" y="1118.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1069.1" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.1" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1069.1" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.1" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1069.1" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.1" y="1070.0"></text>
</g>
<g>
<title>FieldNode::FieldNode(ConnectionGraph*, Node*, PointsToNode::EscapeState, int, bool) (2 samples, 0.06%)</title><rect x="1069.5" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.5" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray(Arena*, int, int, PointsToNode* const&amp;) (2 samples, 0.06%)</title><rect x="1069.5" y="1091.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.5" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append_if_missing(PointsToNode* const&amp;) (1 samples, 0.03%)</title><rect x="1070.4" y="1123.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (3 samples, 0.08%)</title><rect x="1070.9" y="1139.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (3 samples, 0.08%)</title><rect x="1070.9" y="1123.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.03%)</title><rect x="1071.3" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.3" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append_if_missing(PointsToNode* const&amp;) (1 samples, 0.03%)</title><rect x="1071.7" y="1107.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.7" y="1118.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.03%)</title><rect x="1072.2" y="1171.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.2" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (15 samples, 0.42%)</title><rect x="1072.6" y="1171.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.6" y="1182.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1074.4" y="1155.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.4" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1074.8" y="1155.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.8" y="1166.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1074.8" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.8" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1074.8" y="1123.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1077.8" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1074.8" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.8" y="1118.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1074.8" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.8" y="1102.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const (1 samples, 0.03%)</title><rect x="1074.8" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.8" y="1086.0"></text>
</g>
<g>
<title>TypePtr::eq_speculative(TypePtr const*) const (1 samples, 0.03%)</title><rect x="1074.8" y="1059.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.8" y="1070.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1075.3" y="1155.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.3" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1075.7" y="1155.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.7" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1075.7" y="1139.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.7" y="1150.0"></text>
</g>
<g>
<title>TypeOopPtr::cleanup_speculative() const (1 samples, 0.03%)</title><rect x="1076.2" y="1155.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.2" y="1166.0"></text>
</g>
<g>
<title>TypePtr::maybe_null() const (1 samples, 0.03%)</title><rect x="1076.2" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.2" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (3 samples, 0.08%)</title><rect x="1076.6" y="1155.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.6" y="1166.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.03%)</title><rect x="1077.5" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.5" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (3 samples, 0.08%)</title><rect x="1077.9" y="1155.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.9" y="1166.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1077.9" y="1139.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.9" y="1150.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1077.9" y="1123.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.9" y="1134.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.06%)</title><rect x="1078.4" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.06%)</title><rect x="1079.3" y="1171.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.06%)</title><rect x="1079.3" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.03%)</title><rect x="1079.7" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1080.1" y="1171.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.1" y="1182.0"></text>
</g>
<g>
<title>Node_List::Node_List() (1 samples, 0.03%)</title><rect x="1080.1" y="1155.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.1" y="1166.0"></text>
</g>
<g>
<title>Node_Array::Node_Array(Arena*) (1 samples, 0.03%)</title><rect x="1080.1" y="1139.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.1" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1080.1" y="1123.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.1" y="1134.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1080.1" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.1" y="1118.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1080.1" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (296 samples, 8.28%)</title><rect x="1080.6" y="1171.0" width="130.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.6" y="1182.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (2 samples, 0.06%)</title><rect x="1080.6" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.6" y="1166.0"></text>
</g>
<g>
<title>HaltNode::pinned() const (1 samples, 0.03%)</title><rect x="1081.5" y="1155.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.5" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1081.9" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.9" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1081.9" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.03%)</title><rect x="1081.9" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.9" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (13 samples, 0.36%)</title><rect x="1082.3" y="1155.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.3" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (11 samples, 0.31%)</title><rect x="1082.3" y="1139.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.3" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (8 samples, 0.22%)</title><rect x="1082.3" y="1123.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.3" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.11%)</title><rect x="1082.3" y="1107.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.3" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.11%)</title><rect x="1082.3" y="1091.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.3" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.11%)</title><rect x="1082.3" y="1075.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.3" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.11%)</title><rect x="1082.3" y="1059.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.3" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="1043.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.3" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="1027.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.3" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="1011.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.3" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="995.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.3" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="979.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.3" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="963.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.3" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="947.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.3" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1082.3" y="931.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.3" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.3" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.3" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.3" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.3" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.3" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.3" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1082.3" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.3" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1082.3" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.3" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.06%)</title><rect x="1082.8" y="915.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1082.8" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.8" y="910.0"></text>
</g>
<g>
<title>LoopNode::is_valid_counted_loop() const (1 samples, 0.03%)</title><rect x="1082.8" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.8" y="894.0"></text>
</g>
<g>
<title>MultiNode::proj_out_or_null(unsigned int) const (1 samples, 0.03%)</title><rect x="1082.8" y="867.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.03%)</title><rect x="1083.2" y="899.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.03%)</title><rect x="1083.2" y="883.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.2" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.03%)</title><rect x="1083.2" y="867.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1083.2" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::reorg_offsets(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1083.7" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1083.7" y="1027.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="1083.7" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.7" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1084.1" y="1107.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (3 samples, 0.08%)</title><rect x="1084.1" y="1091.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.1" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::record_for_igvn() (1 samples, 0.03%)</title><rect x="1084.1" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.1" y="1086.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1084.1" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (2 samples, 0.06%)</title><rect x="1084.6" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.03%)</title><rect x="1085.0" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.03%)</title><rect x="1085.0" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::reorg_offsets(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1085.4" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.03%)</title><rect x="1085.4" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.03%)</title><rect x="1085.4" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.4" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.08%)</title><rect x="1085.9" y="1123.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.9" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_range_check(PhaseIdealLoop*) const (1 samples, 0.03%)</title><rect x="1085.9" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (2 samples, 0.06%)</title><rect x="1086.3" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (2 samples, 0.06%)</title><rect x="1086.3" y="1091.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.3" y="1102.0"></text>
</g>
<g>
<title>CmpINode::CmpINode(Node*, Node*) (1 samples, 0.03%)</title><rect x="1086.3" y="1075.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.3" y="1086.0"></text>
</g>
<g>
<title>CmpINode::CmpINode(Node*, Node*) (1 samples, 0.03%)</title><rect x="1086.3" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.3" y="1070.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.03%)</title><rect x="1086.3" y="1043.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.03%)</title><rect x="1086.8" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1086.8" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.8" y="1070.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1086.8" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.8" y="1054.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1086.8" y="1027.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1089.8" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1087.2" y="1139.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1087.2" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.03%)</title><rect x="1087.2" y="1107.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.2" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1087.2" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.2" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1087.2" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::reorg_offsets(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1087.7" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.7" y="1150.0"></text>
</g>
<g>
<title>LoopNode::is_valid_counted_loop() const (1 samples, 0.03%)</title><rect x="1087.7" y="1123.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.7" y="1134.0"></text>
</g>
<g>
<title>CountedLoopEndNode::loopnode() const (1 samples, 0.03%)</title><rect x="1087.7" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="1118.0"></text>
</g>
<g>
<title>CountedLoopEndNode::phi() const (1 samples, 0.03%)</title><rect x="1087.7" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.7" y="1102.0"></text>
</g>
<g>
<title>CountedLoopEndNode::incr() const (1 samples, 0.03%)</title><rect x="1087.7" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.7" y="1086.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1087.7" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.7" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (6 samples, 0.17%)</title><rect x="1088.1" y="1155.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.1" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (5 samples, 0.14%)</title><rect x="1088.1" y="1139.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.1" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.08%)</title><rect x="1088.1" y="1123.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.1" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.08%)</title><rect x="1088.1" y="1107.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.1" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.06%)</title><rect x="1088.5" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.5" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.06%)</title><rect x="1088.5" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.5" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.06%)</title><rect x="1088.5" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.5" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.06%)</title><rect x="1088.5" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.5" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.06%)</title><rect x="1088.5" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.5" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1088.5" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.5" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1088.5" y="995.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1088.5" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.5" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1088.5" y="963.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.5" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1088.5" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.5" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1088.5" y="931.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1088.5" y="915.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="1088.5" y="899.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.5" y="910.0"></text>
</g>
<g>
<title>Invariance::map_ctrl(Node*, Node*) (1 samples, 0.03%)</title><rect x="1088.5" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.5" y="894.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1088.5" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.5" y="878.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1088.5" y="851.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.5" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1088.5" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.5" y="846.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1088.5" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1089.0" y="1011.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.0" y="1022.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.03%)</title><rect x="1089.0" y="995.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.06%)</title><rect x="1089.4" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.4" y="1134.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.03%)</title><rect x="1089.4" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.4" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.03%)</title><rect x="1089.4" y="1091.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.4" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.03%)</title><rect x="1089.4" y="1075.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="1089.9" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.9" y="1118.0"></text>
</g>
<g>
<title>Invariance::clone(Node*, Node*) (1 samples, 0.03%)</title><rect x="1089.9" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.9" y="1102.0"></text>
</g>
<g>
<title>Invariance::clone_visit(Node*) (1 samples, 0.03%)</title><rect x="1089.9" y="1075.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1090.3" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1090.3" y="1123.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.3" y="1134.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.03%)</title><rect x="1090.3" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.3" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.03%)</title><rect x="1090.3" y="1091.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.3" y="1102.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1090.8" y="1155.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.8" y="1166.0"></text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.06%)</title><rect x="1091.2" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.2" y="1166.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.06%)</title><rect x="1092.1" y="1155.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (32 samples, 0.90%)</title><rect x="1093.0" y="1155.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.0" y="1166.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1098.3" y="1139.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.3" y="1150.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1098.3" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.3" y="1134.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1098.3" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.3" y="1118.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1098.7" y="1139.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.7" y="1150.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (9 samples, 0.25%)</title><rect x="1099.2" y="1139.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.2" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.03%)</title><rect x="1100.5" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.5" y="1134.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1100.9" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.11%)</title><rect x="1101.4" y="1123.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.4" y="1134.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.06%)</title><rect x="1102.2" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.2" y="1118.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (3 samples, 0.08%)</title><rect x="1103.1" y="1139.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.1" y="1150.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (2 samples, 0.06%)</title><rect x="1103.6" y="1123.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.6" y="1134.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (1 samples, 0.03%)</title><rect x="1104.0" y="1107.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.0" y="1118.0"></text>
</g>
<g>
<title>NTarjan::LINK(NTarjan*, NTarjan*) (1 samples, 0.03%)</title><rect x="1104.5" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.5" y="1150.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (1 samples, 0.03%)</title><rect x="1104.9" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.9" y="1150.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.06%)</title><rect x="1105.3" y="1139.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.3" y="1150.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="1106.2" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.2" y="1150.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.06%)</title><rect x="1106.2" y="1123.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.2" y="1134.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.06%)</title><rect x="1106.2" y="1107.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.2" y="1118.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.03%)</title><rect x="1106.2" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.2" y="1102.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="1106.2" y="1075.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1109.2" y="1086.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="1106.2" y="1059.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1109.2" y="1070.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1106.7" y="1091.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1109.7" y="1102.0"></text>
</g>
<g>
<title>small_size (1 samples, 0.03%)</title><rect x="1106.7" y="1075.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1109.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (34 samples, 0.95%)</title><rect x="1107.1" y="1155.0" width="15.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (6 samples, 0.17%)</title><rect x="1115.1" y="1139.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.1" y="1150.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (4 samples, 0.11%)</title><rect x="1116.0" y="1123.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (8 samples, 0.22%)</title><rect x="1117.7" y="1139.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (8 samples, 0.22%)</title><rect x="1117.7" y="1123.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.08%)</title><rect x="1118.2" y="1107.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.11%)</title><rect x="1119.5" y="1107.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.5" y="1118.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1119.9" y="1091.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.06%)</title><rect x="1120.4" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.4" y="1102.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1120.4" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.03%)</title><rect x="1120.8" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.8" y="1086.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1120.8" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.8" y="1070.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.06%)</title><rect x="1121.3" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (96 samples, 2.69%)</title><rect x="1122.1" y="1155.0" width="42.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.1" y="1166.0">Phas..</text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.03%)</title><rect x="1130.5" y="1139.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.5" y="1150.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1131.0" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="1150.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.03%)</title><rect x="1131.4" y="1139.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.4" y="1150.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.06%)</title><rect x="1131.9" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.9" y="1150.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1131.9" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.9" y="1134.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1131.9" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.9" y="1118.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1131.9" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.9" y="1102.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.03%)</title><rect x="1131.9" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.9" y="1086.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1131.9" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.9" y="1070.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1131.9" y="1043.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1134.9" y="1054.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1131.9" y="1027.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1134.9" y="1038.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1131.9" y="1011.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1134.9" y="1022.0"></text>
</g>
<g>
<title>medium_malloc_should_clear (1 samples, 0.03%)</title><rect x="1131.9" y="995.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1134.9" y="1006.0"></text>
</g>
<g>
<title>medium_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1131.9" y="979.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1134.9" y="990.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1132.3" y="1123.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1135.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (67 samples, 1.88%)</title><rect x="1132.8" y="1139.0" width="29.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.8" y="1150.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.03%)</title><rect x="1135.9" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.9" y="1134.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.03%)</title><rect x="1136.3" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.3" y="1134.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (2 samples, 0.06%)</title><rect x="1136.7" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.7" y="1134.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1137.2" y="1107.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (8 samples, 0.22%)</title><rect x="1137.6" y="1123.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (5 samples, 0.14%)</title><rect x="1139.0" y="1107.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.0" y="1118.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1139.4" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (3 samples, 0.08%)</title><rect x="1139.8" y="1091.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.8" y="1102.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1140.7" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (32 samples, 0.90%)</title><rect x="1141.2" y="1123.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.2" y="1134.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1143.4" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.4" y="1118.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1143.4" y="1091.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1146.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (8 samples, 0.22%)</title><rect x="1143.8" y="1107.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (4 samples, 0.11%)</title><rect x="1143.8" y="1091.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.03%)</title><rect x="1143.8" y="1075.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.08%)</title><rect x="1144.3" y="1075.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.03%)</title><rect x="1145.1" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.11%)</title><rect x="1145.6" y="1091.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (4 samples, 0.11%)</title><rect x="1145.6" y="1075.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (2 samples, 0.06%)</title><rect x="1146.5" y="1059.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.03%)</title><rect x="1147.4" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.06%)</title><rect x="1147.8" y="1107.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.06%)</title><rect x="1147.8" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.06%)</title><rect x="1147.8" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1148.7" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="1148.7" y="1091.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="1102.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1148.7" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (14 samples, 0.39%)</title><rect x="1149.1" y="1107.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.11%)</title><rect x="1150.0" y="1091.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (8 samples, 0.22%)</title><rect x="1151.8" y="1091.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.8" y="1102.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1151.8" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (7 samples, 0.20%)</title><rect x="1152.2" y="1075.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.2" y="1086.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.08%)</title><rect x="1154.0" y="1059.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (8 samples, 0.22%)</title><rect x="1155.3" y="1123.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.3" y="1134.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (6 samples, 0.17%)</title><rect x="1156.2" y="1107.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (8 samples, 0.22%)</title><rect x="1158.8" y="1123.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (8 samples, 0.22%)</title><rect x="1158.8" y="1107.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.8" y="1118.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (7 samples, 0.20%)</title><rect x="1159.3" y="1091.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1162.4" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.03%)</title><rect x="1162.8" y="1139.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.03%)</title><rect x="1163.3" y="1139.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="1150.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.03%)</title><rect x="1163.7" y="1139.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="1150.0"></text>
</g>
<g>
<title>RethrowNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1164.2" y="1139.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.03%)</title><rect x="1164.6" y="1155.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (12 samples, 0.34%)</title><rect x="1165.0" y="1155.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="1166.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (2 samples, 0.06%)</title><rect x="1165.9" y="1139.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.9" y="1150.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1166.8" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (6 samples, 0.17%)</title><rect x="1167.3" y="1139.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.11%)</title><rect x="1167.7" y="1123.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="1134.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (3 samples, 0.08%)</title><rect x="1168.1" y="1107.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.03%)</title><rect x="1169.5" y="1123.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.03%)</title><rect x="1169.9" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.03%)</title><rect x="1170.3" y="1155.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (41 samples, 1.15%)</title><rect x="1170.8" y="1155.0" width="18.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (3 samples, 0.08%)</title><rect x="1175.2" y="1139.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (2 samples, 0.06%)</title><rect x="1175.2" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (2 samples, 0.06%)</title><rect x="1175.2" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1118.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.03%)</title><rect x="1175.2" y="1091.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="1102.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.03%)</title><rect x="1175.7" y="1091.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1178.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.03%)</title><rect x="1176.1" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1176.1" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1176.1" y="1091.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1179.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (10 samples, 0.28%)</title><rect x="1176.5" y="1139.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.06%)</title><rect x="1177.9" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.06%)</title><rect x="1177.9" y="1107.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="1118.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1177.9" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.03%)</title><rect x="1178.3" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="1102.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1178.3" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.03%)</title><rect x="1178.7" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1178.7" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="1118.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1178.7" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::identical_backtoback_ifs(Node*) (2 samples, 0.06%)</title><rect x="1179.2" y="1123.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.06%)</title><rect x="1180.1" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.06%)</title><rect x="1180.1" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.1" y="1118.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1180.5" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1180.5" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1180.5" y="1059.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1180.5" y="1043.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (16 samples, 0.45%)</title><rect x="1181.0" y="1139.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.06%)</title><rect x="1181.0" y="1123.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.06%)</title><rect x="1181.0" y="1107.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="1118.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.06%)</title><rect x="1181.0" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (4 samples, 0.11%)</title><rect x="1181.8" y="1123.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.08%)</title><rect x="1182.3" y="1107.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.06%)</title><rect x="1182.7" y="1091.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="1102.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1182.7" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.03%)</title><rect x="1183.2" y="1075.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="1086.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1183.2" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (7 samples, 0.20%)</title><rect x="1183.6" y="1123.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.08%)</title><rect x="1184.5" y="1107.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.08%)</title><rect x="1184.5" y="1091.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1102.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1184.5" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (2 samples, 0.06%)</title><rect x="1184.9" y="1075.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.06%)</title><rect x="1185.8" y="1107.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.8" y="1118.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1186.3" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.06%)</title><rect x="1186.7" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="1134.0"></text>
</g>
<g>
<title>LShiftLNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1186.7" y="1107.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1186.7" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="1102.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1186.7" y="1075.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1187.2" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.2" y="1118.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1187.2" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1187.2" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="1086.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1187.2" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.2" y="1070.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1187.2" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (1 samples, 0.03%)</title><rect x="1187.6" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1187.6" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="1187.6" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.03%)</title><rect x="1187.6" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="1086.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1187.6" y="1059.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.6" y="1070.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.03%)</title><rect x="1188.0" y="1139.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="1150.0"></text>
</g>
<g>
<title>SubINode::Opcode() const (1 samples, 0.03%)</title><rect x="1188.5" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.03%)</title><rect x="1188.9" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (40 samples, 1.12%)</title><rect x="1189.4" y="1155.0" width="17.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.4" y="1166.0"></text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.03%)</title><rect x="1189.4" y="1139.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="1150.0"></text>
</g>
<g>
<title>Node::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1189.8" y="1139.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (33 samples, 0.92%)</title><rect x="1190.2" y="1139.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1193.2" y="1150.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (2 samples, 0.06%)</title><rect x="1190.7" y="1123.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1193.7" y="1134.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1190.7" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1193.7" y="1118.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.03%)</title><rect x="1190.7" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1193.7" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1190.7" y="1075.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1193.7" y="1086.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1190.7" y="1059.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1193.7" y="1070.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1191.1" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1194.1" y="1118.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.03%)</title><rect x="1191.1" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1194.1" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1191.1" y="1075.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1194.1" y="1086.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1191.1" y="1059.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1194.1" y="1070.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1191.6" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1194.6" y="1134.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1191.6" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1194.6" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1191.6" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1194.6" y="1102.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1192.0" y="1123.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1195.0" y="1134.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (4 samples, 0.11%)</title><rect x="1192.5" y="1123.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1195.5" y="1134.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (4 samples, 0.11%)</title><rect x="1192.5" y="1107.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1195.5" y="1118.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1192.5" y="1091.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1195.5" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.08%)</title><rect x="1192.9" y="1091.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1195.9" y="1102.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="1192.9" y="1075.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1195.9" y="1086.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.03%)</title><rect x="1192.9" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1195.9" y="1070.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.06%)</title><rect x="1193.3" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1196.3" y="1086.0"></text>
</g>
<g>
<title>CmpUNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1194.2" y="1123.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1197.2" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1194.2" y="1107.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1197.2" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1194.2" y="1091.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1197.2" y="1102.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.03%)</title><rect x="1194.2" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1197.2" y="1086.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1194.7" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1197.7" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1194.7" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1197.7" y="1118.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1194.7" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1197.7" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="1195.1" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1198.1" y="1134.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1195.1" y="1107.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1198.1" y="1118.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1195.1" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1198.1" y="1102.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.03%)</title><rect x="1195.6" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1198.6" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="1196.0" y="1123.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1199.0" y="1134.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="1196.0" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1199.0" y="1118.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.03%)</title><rect x="1196.0" y="1091.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1199.0" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1196.0" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1199.0" y="1086.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1196.0" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1199.0" y="1070.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1196.0" y="1043.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1199.0" y="1054.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.03%)</title><rect x="1196.0" y="1027.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1199.0" y="1038.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1196.4" y="1091.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1199.4" y="1102.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1196.4" y="1075.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1199.4" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1196.4" y="1059.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1199.4" y="1070.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.03%)</title><rect x="1196.4" y="1043.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1199.4" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (2 samples, 0.06%)</title><rect x="1196.9" y="1123.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1199.9" y="1134.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (2 samples, 0.06%)</title><rect x="1196.9" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1199.9" y="1118.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.03%)</title><rect x="1197.3" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1200.3" y="1102.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.03%)</title><rect x="1197.3" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1200.3" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (2 samples, 0.06%)</title><rect x="1197.8" y="1123.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1200.8" y="1134.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.03%)</title><rect x="1198.2" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1201.2" y="1118.0"></text>
</g>
<g>
<title>TypeKlassPtr::hash() const (1 samples, 0.03%)</title><rect x="1198.2" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1201.2" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (5 samples, 0.14%)</title><rect x="1198.6" y="1123.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1201.6" y="1134.0"></text>
</g>
<g>
<title>CmpULNode::Opcode() const (1 samples, 0.03%)</title><rect x="1200.0" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1203.0" y="1118.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.03%)</title><rect x="1200.4" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1203.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.03%)</title><rect x="1200.9" y="1123.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1203.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1201.3" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1204.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1201.3" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1204.3" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1201.7" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1204.7" y="1134.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1201.7" y="1107.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1204.7" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1201.7" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1204.7" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1201.7" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1204.7" y="1086.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1201.7" y="1059.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1204.7" y="1070.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.03%)</title><rect x="1201.7" y="1043.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1204.7" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (6 samples, 0.17%)</title><rect x="1202.2" y="1123.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1205.2" y="1134.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.03%)</title><rect x="1202.6" y="1107.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1205.6" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1202.6" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1205.6" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1202.6" y="1075.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1205.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1203.1" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1206.1" y="1118.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.03%)</title><rect x="1203.1" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1206.1" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (3 samples, 0.08%)</title><rect x="1203.5" y="1107.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1206.5" y="1118.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1204.4" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1207.4" y="1102.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.03%)</title><rect x="1204.8" y="1139.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1207.8" y="1150.0"></text>
</g>
<g>
<title>TypeTuple::singleton() const (1 samples, 0.03%)</title><rect x="1205.3" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1208.3" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (3 samples, 0.08%)</title><rect x="1205.7" y="1139.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1208.7" y="1150.0"></text>
</g>
<g>
<title>Node_List::pop() (1 samples, 0.03%)</title><rect x="1206.2" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1209.2" y="1134.0"></text>
</g>
<g>
<title>Node_List::size() const (1 samples, 0.03%)</title><rect x="1206.6" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1209.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1207.1" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1210.1" y="1166.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1207.1" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1210.1" y="1150.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1207.1" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1210.1" y="1134.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="1207.1" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1210.1" y="1118.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (3 samples, 0.08%)</title><rect x="1207.5" y="1155.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1210.5" y="1166.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1208.8" y="1155.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1211.8" y="1166.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.03%)</title><rect x="1209.3" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1212.3" y="1166.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (2 samples, 0.06%)</title><rect x="1209.7" y="1155.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1212.7" y="1166.0"></text>
</g>
<g>
<title>SuperWord::transform_loop(IdealLoopTree*, bool) (2 samples, 0.06%)</title><rect x="1210.6" y="1155.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1213.6" y="1166.0"></text>
</g>
<g>
<title>SuperWord::SLP_extract() (2 samples, 0.06%)</title><rect x="1210.6" y="1139.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1213.6" y="1150.0"></text>
</g>
<g>
<title>SuperWord::find_adjacent_refs() (1 samples, 0.03%)</title><rect x="1210.6" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1213.6" y="1134.0"></text>
</g>
<g>
<title>SuperWord::are_adjacent_refs(Node*, Node*) (1 samples, 0.03%)</title><rect x="1210.6" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1213.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1210.6" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1213.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="1210.6" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1213.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.03%)</title><rect x="1210.6" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1213.6" y="1070.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1210.6" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1213.6" y="1054.0"></text>
</g>
<g>
<title>SuperWord::output() (1 samples, 0.03%)</title><rect x="1211.0" y="1123.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1214.0" y="1134.0"></text>
</g>
<g>
<title>CountedLoopReserveKit::create_reserve() (1 samples, 0.03%)</title><rect x="1211.0" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1214.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_reserve_version_of_loop(IdealLoopTree*, CountedLoopReserveKit*) (1 samples, 0.03%)</title><rect x="1211.0" y="1091.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1214.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.03%)</title><rect x="1211.0" y="1075.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1214.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1211.5" y="1171.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1214.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (40 samples, 1.12%)</title><rect x="1211.9" y="1171.0" width="17.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1214.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (36 samples, 1.01%)</title><rect x="1212.4" y="1155.0" width="15.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1215.4" y="1166.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1212.4" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1215.4" y="1150.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1212.8" y="1139.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1215.8" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (5 samples, 0.14%)</title><rect x="1213.2" y="1139.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1216.2" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="1213.7" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1216.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1214.1" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1217.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1214.1" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1217.1" y="1102.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.03%)</title><rect x="1214.1" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1217.1" y="1086.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (2 samples, 0.06%)</title><rect x="1214.6" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1217.6" y="1134.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.03%)</title><rect x="1215.0" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1218.0" y="1118.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.03%)</title><rect x="1215.5" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1218.5" y="1150.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.03%)</title><rect x="1215.9" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1218.9" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1216.3" y="1139.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1219.3" y="1150.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1216.3" y="1123.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1219.3" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1216.8" y="1139.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1219.8" y="1150.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.03%)</title><rect x="1216.8" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1219.8" y="1134.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1216.8" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1219.8" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1216.8" y="1091.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1219.8" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1216.8" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1219.8" y="1086.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.03%)</title><rect x="1217.2" y="1139.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1220.2" y="1150.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.03%)</title><rect x="1217.7" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1220.7" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.03%)</title><rect x="1218.1" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1221.1" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.06%)</title><rect x="1218.5" y="1139.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1221.5" y="1150.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.03%)</title><rect x="1219.0" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1222.0" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.03%)</title><rect x="1219.0" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1222.0" y="1118.0"></text>
</g>
<g>
<title>AddLNode::Opcode() const (1 samples, 0.03%)</title><rect x="1219.0" y="1091.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1222.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.11%)</title><rect x="1219.4" y="1139.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1222.4" y="1150.0"></text>
</g>
<g>
<title>FastLockNode::hash() const (1 samples, 0.03%)</title><rect x="1219.4" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1222.4" y="1134.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1219.9" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1222.9" y="1134.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="1219.9" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1222.9" y="1118.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="1219.9" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1222.9" y="1102.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.03%)</title><rect x="1219.9" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1222.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.06%)</title><rect x="1220.3" y="1123.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1223.3" y="1134.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1220.8" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1223.8" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1220.8" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1223.8" y="1102.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="1220.8" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1223.8" y="1086.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="1220.8" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1223.8" y="1070.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.03%)</title><rect x="1220.8" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1223.8" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1221.2" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1224.2" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1221.6" y="1139.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1224.6" y="1150.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1222.1" y="1139.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1225.1" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (9 samples, 0.25%)</title><rect x="1222.5" y="1139.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1225.5" y="1150.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.03%)</title><rect x="1223.0" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1226.0" y="1134.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (2 samples, 0.06%)</title><rect x="1223.4" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1226.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.03%)</title><rect x="1223.9" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1226.9" y="1118.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.03%)</title><rect x="1223.9" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1226.9" y="1102.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.03%)</title><rect x="1223.9" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1226.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (3 samples, 0.08%)</title><rect x="1224.3" y="1123.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1227.3" y="1134.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.03%)</title><rect x="1224.3" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1227.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.06%)</title><rect x="1224.7" y="1107.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1227.7" y="1118.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.03%)</title><rect x="1224.7" y="1091.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1227.7" y="1102.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.03%)</title><rect x="1225.2" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1228.2" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.06%)</title><rect x="1225.6" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1228.6" y="1134.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1226.5" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1229.5" y="1150.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1226.9" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1229.9" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.03%)</title><rect x="1226.9" y="1123.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1229.9" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1229.9" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1229.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1229.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1059.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1229.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1043.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1229.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1027.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1229.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="1011.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1229.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="995.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1229.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1229.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="963.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1229.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1229.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1229.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1229.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1229.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1229.9" y="894.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.03%)</title><rect x="1226.9" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1229.9" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1226.9" y="851.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1229.9" y="862.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.03%)</title><rect x="1227.4" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1230.4" y="1150.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1227.8" y="1139.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1230.8" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (3 samples, 0.08%)</title><rect x="1228.3" y="1155.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1231.3" y="1166.0"></text>
</g>
<g>
<title>Node_List::pop() (1 samples, 0.03%)</title><rect x="1229.2" y="1139.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1232.2" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (16 samples, 0.45%)</title><rect x="1229.6" y="1171.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1232.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.31%)</title><rect x="1229.6" y="1155.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1232.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.28%)</title><rect x="1229.6" y="1139.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1232.6" y="1150.0"></text>
</g>
<g>
<title>AndLNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1229.6" y="1123.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1232.6" y="1134.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1230.0" y="1123.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1233.0" y="1134.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1230.0" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1233.0" y="1118.0"></text>
</g>
<g>
<title>step_through_mergemem(PhaseGVN*, MergeMemNode*, TypePtr const*, TypePtr const*, outputStream*) (1 samples, 0.03%)</title><rect x="1230.0" y="1091.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1233.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="1230.0" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1233.0" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1230.0" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1233.0" y="1070.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseGVN*) const (2 samples, 0.06%)</title><rect x="1230.5" y="1123.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1233.5" y="1134.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1230.9" y="1107.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1233.9" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1230.9" y="1091.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1233.9" y="1102.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1230.9" y="1075.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1233.9" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1231.4" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1234.4" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1231.8" y="1123.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1234.8" y="1134.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.03%)</title><rect x="1231.8" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1234.8" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1232.3" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1235.3" y="1134.0"></text>
</g>
<g>
<title>CountedLoopEndNode::phi() const (1 samples, 0.03%)</title><rect x="1232.3" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1235.3" y="1118.0"></text>
</g>
<g>
<title>CountedLoopEndNode::incr() const (1 samples, 0.03%)</title><rect x="1232.3" y="1091.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1235.3" y="1102.0"></text>
</g>
<g>
<title>CountedLoopEndNode::cmp_node() const (1 samples, 0.03%)</title><rect x="1232.3" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1235.3" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="1232.7" y="1123.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1235.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1233.1" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1236.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.03%)</title><rect x="1233.1" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1236.1" y="1102.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1233.6" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1236.6" y="1134.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1233.6" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1236.6" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.03%)</title><rect x="1234.0" y="1139.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1237.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 0.06%)</title><rect x="1234.5" y="1155.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1237.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1234.5" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1237.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1234.5" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1237.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1234.5" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1237.5" y="1118.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1234.5" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1237.5" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1234.5" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1237.5" y="1086.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1234.5" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1237.5" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1234.9" y="1139.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1237.9" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.03%)</title><rect x="1234.9" y="1123.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1237.9" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1234.9" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1237.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.03%)</title><rect x="1234.9" y="1091.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1237.9" y="1102.0"></text>
</g>
<g>
<title>PhaseTransform::set_type_bottom(Node const*) (1 samples, 0.03%)</title><rect x="1234.9" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1237.9" y="1086.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1234.9" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1237.9" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.03%)</title><rect x="1235.4" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1238.4" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.03%)</title><rect x="1235.4" y="1139.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1238.4" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::insert_mem_bar(Node**, Node**, int, Node*) (1 samples, 0.03%)</title><rect x="1235.4" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1238.4" y="1134.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1235.4" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1238.4" y="1118.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1235.4" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1238.4" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.03%)</title><rect x="1235.8" y="1155.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1238.8" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1235.8" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1238.8" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1235.8" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1238.8" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.03%)</title><rect x="1236.2" y="1155.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1239.2" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_slow_call(CallNode*, TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1236.2" y="1139.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1239.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1236.2" y="1123.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1239.2" y="1134.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.11%)</title><rect x="1236.7" y="1171.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1239.7" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.11%)</title><rect x="1236.7" y="1155.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1239.7" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (3 samples, 0.08%)</title><rect x="1236.7" y="1139.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1239.7" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.06%)</title><rect x="1237.1" y="1123.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1240.1" y="1134.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1237.1" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1240.1" y="1118.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1237.1" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1240.1" y="1102.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.03%)</title><rect x="1237.6" y="1107.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1240.6" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1238.0" y="1139.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1241.0" y="1150.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1238.4" y="1171.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1241.4" y="1182.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.03%)</title><rect x="1238.9" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1241.9" y="1182.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1239.3" y="1171.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1242.3" y="1182.0"></text>
</g>
<g>
<title>Compile::build_start_state(StartNode*, TypeFunc const*) (1 samples, 0.03%)</title><rect x="1239.8" y="1187.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1242.8" y="1198.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.03%)</title><rect x="1239.8" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1242.8" y="1182.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (8 samples, 0.22%)</title><rect x="1240.2" y="1187.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1243.2" y="1198.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (4 samples, 0.11%)</title><rect x="1240.2" y="1171.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1243.2" y="1182.0"></text>
</g>
<g>
<title>GraphKit::replace_call(CallNode*, Node*, bool) (1 samples, 0.03%)</title><rect x="1240.2" y="1155.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1243.2" y="1166.0"></text>
</g>
<g>
<title>Compile::gvn_replace_by(Node*, Node*) (1 samples, 0.03%)</title><rect x="1240.2" y="1139.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1243.2" y="1150.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1240.2" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1243.2" y="1134.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.03%)</title><rect x="1240.2" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1243.2" y="1118.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1240.7" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1243.7" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1241.1" y="1155.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1244.1" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1241.1" y="1139.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1244.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1241.5" y="1123.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1244.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1241.5" y="1107.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1244.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1241.5" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1244.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1241.5" y="1075.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1244.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1241.5" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1244.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1241.5" y="1043.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1244.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1241.5" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1244.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1241.5" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1244.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1241.5" y="995.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1244.5" y="1006.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.03%)</title><rect x="1241.5" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1244.5" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1241.5" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1244.5" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1241.5" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1244.5" y="958.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1241.5" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1244.5" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.11%)</title><rect x="1242.0" y="1171.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1245.0" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.06%)</title><rect x="1242.0" y="1155.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1245.0" y="1166.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.06%)</title><rect x="1242.0" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1245.0" y="1150.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.03%)</title><rect x="1242.4" y="1123.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1245.4" y="1134.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.06%)</title><rect x="1242.9" y="1155.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1245.9" y="1166.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (4 samples, 0.11%)</title><rect x="1243.8" y="1187.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1246.8" y="1198.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (4 samples, 0.11%)</title><rect x="1243.8" y="1171.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1246.8" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (2 samples, 0.06%)</title><rect x="1243.8" y="1155.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1246.8" y="1166.0"></text>
</g>
<g>
<title>Dict::doubhash() (2 samples, 0.06%)</title><rect x="1243.8" y="1139.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1246.8" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1244.2" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1247.2" y="1134.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1244.2" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1247.2" y="1118.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1244.6" y="1155.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1247.6" y="1166.0"></text>
</g>
<g>
<title>TypeVect::hash() const (1 samples, 0.03%)</title><rect x="1245.1" y="1155.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1248.1" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (107 samples, 2.99%)</title><rect x="1245.5" y="1187.0" width="47.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1248.5" y="1198.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (107 samples, 2.99%)</title><rect x="1245.5" y="1171.0" width="47.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1248.5" y="1182.0">Pars..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.03%)</title><rect x="1245.5" y="1155.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1248.5" y="1166.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1245.5" y="1139.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1248.5" y="1150.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1245.5" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1248.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (106 samples, 2.97%)</title><rect x="1246.0" y="1155.0" width="46.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1249.0" y="1166.0">Pars..</text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.03%)</title><rect x="1246.0" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1249.0" y="1150.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.03%)</title><rect x="1246.0" y="1123.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1249.0" y="1134.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1246.0" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1249.0" y="1118.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1246.0" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1249.0" y="1102.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1246.0" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1249.0" y="1086.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1246.0" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1249.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (105 samples, 2.94%)</title><rect x="1246.4" y="1139.0" width="46.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1249.4" y="1150.0">Pars..</text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.03%)</title><rect x="1246.4" y="1123.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1249.4" y="1134.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.03%)</title><rect x="1246.4" y="1107.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1249.4" y="1118.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1246.4" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1249.4" y="1102.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1246.4" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1249.4" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1246.4" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1249.4" y="1070.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1246.4" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1249.4" y="1054.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1246.4" y="1027.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1249.4" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1246.4" y="1011.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1249.4" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1246.4" y="995.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1249.4" y="1006.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.03%)</title><rect x="1246.8" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1249.8" y="1134.0"></text>
</g>
<g>
<title>Parse::array_store_check() (1 samples, 0.03%)</title><rect x="1246.8" y="1107.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1249.8" y="1118.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.03%)</title><rect x="1246.8" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1249.8" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1246.8" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1249.8" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1246.8" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1249.8" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1246.8" y="1043.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1249.8" y="1054.0"></text>
</g>
<g>
<title>StartNode::Opcode() const (1 samples, 0.03%)</title><rect x="1246.8" y="1027.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1249.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (98 samples, 2.74%)</title><rect x="1247.3" y="1123.0" width="43.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1250.3" y="1134.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1247.3" y="1107.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1250.3" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1247.3" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1250.3" y="1102.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1247.3" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1250.3" y="1086.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.03%)</title><rect x="1247.3" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1250.3" y="1070.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.03%)</title><rect x="1247.3" y="1043.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1250.3" y="1054.0"></text>
</g>
<g>
<title>ciMethod::instructions_size() (1 samples, 0.03%)</title><rect x="1247.3" y="1027.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1250.3" y="1038.0"></text>
</g>
<g>
<title>nmethod::comp_level() const (1 samples, 0.03%)</title><rect x="1247.3" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1250.3" y="1022.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.03%)</title><rect x="1247.7" y="1107.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1250.7" y="1118.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.03%)</title><rect x="1247.7" y="1091.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1250.7" y="1102.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.03%)</title><rect x="1247.7" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1250.7" y="1086.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.03%)</title><rect x="1247.7" y="1059.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1250.7" y="1070.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.03%)</title><rect x="1247.7" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1250.7" y="1054.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.03%)</title><rect x="1247.7" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1250.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1247.7" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1250.7" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1247.7" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1250.7" y="1006.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="1247.7" y="979.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1250.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1248.2" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1251.2" y="1118.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1248.2" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1251.2" y="1102.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1248.2" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1251.2" y="1086.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.03%)</title><rect x="1248.2" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1251.2" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.03%)</title><rect x="1248.2" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1251.2" y="1054.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.03%)</title><rect x="1248.2" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1251.2" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;MethodLiveness::BasicBlock*&gt;::GrowableArray(Arena*, int, int, MethodLiveness::BasicBlock* const&amp;) (1 samples, 0.03%)</title><rect x="1248.2" y="1011.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1251.2" y="1022.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.03%)</title><rect x="1248.6" y="1107.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1251.6" y="1118.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1248.6" y="1091.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1251.6" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1248.6" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1251.6" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1248.6" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1251.6" y="1070.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1248.6" y="1043.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1251.6" y="1054.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.03%)</title><rect x="1249.1" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1252.1" y="1118.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1249.1" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1252.1" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1249.1" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1252.1" y="1086.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1249.5" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1252.5" y="1118.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) (1 samples, 0.03%)</title><rect x="1249.5" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1252.5" y="1102.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1249.5" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1252.5" y="1086.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1249.5" y="1059.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1252.5" y="1070.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1249.5" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1252.5" y="1054.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1249.5" y="1027.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1252.5" y="1038.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1249.5" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1252.5" y="1022.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.03%)</title><rect x="1249.5" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1252.5" y="1006.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1249.5" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1252.5" y="990.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1249.5" y="963.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1252.5" y="974.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1249.5" y="947.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1252.5" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1249.5" y="931.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1252.5" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1249.5" y="915.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1252.5" y="926.0"></text>
</g>
<g>
<title>Parse::can_not_compile_call_site(ciMethod*, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1249.9" y="1107.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1252.9" y="1118.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_shared_init_state() (1 samples, 0.03%)</title><rect x="1249.9" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1252.9" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (71 samples, 1.99%)</title><rect x="1250.4" y="1107.0" width="31.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1253.4" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (71 samples, 1.99%)</title><rect x="1250.4" y="1091.0" width="31.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1253.4" y="1102.0">Pa..</text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.03%)</title><rect x="1250.4" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1253.4" y="1086.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1250.4" y="1059.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1253.4" y="1070.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1250.4" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1253.4" y="1054.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.03%)</title><rect x="1250.4" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1253.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (69 samples, 1.93%)</title><rect x="1250.8" y="1075.0" width="30.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1253.8" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (68 samples, 1.90%)</title><rect x="1250.8" y="1059.0" width="30.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1253.8" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.03%)</title><rect x="1250.8" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1253.8" y="1054.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.03%)</title><rect x="1251.3" y="1043.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1254.3" y="1054.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.03%)</title><rect x="1251.3" y="1027.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1254.3" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1251.3" y="1011.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1254.3" y="1022.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1251.3" y="995.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1254.3" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1251.3" y="979.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1254.3" y="990.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1251.3" y="963.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1254.3" y="974.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1251.3" y="947.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1254.3" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1251.3" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1254.3" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1251.3" y="915.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1254.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (59 samples, 1.65%)</title><rect x="1251.7" y="1043.0" width="26.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1254.7" y="1054.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1251.7" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1254.7" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1251.7" y="1011.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1254.7" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1251.7" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1254.7" y="1006.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1251.7" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1254.7" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1251.7" y="963.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1254.7" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1251.7" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1254.7" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1251.7" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1254.7" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1251.7" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1254.7" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1251.7" y="899.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1254.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1251.7" y="883.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1254.7" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1251.7" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1254.7" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1251.7" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1254.7" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1251.7" y="835.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1254.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1251.7" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1254.7" y="830.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1251.7" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1254.7" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1251.7" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1254.7" y="798.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="1251.7" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1254.7" y="782.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1252.2" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1255.2" y="1038.0"></text>
</g>
<g>
<title>CallGenerator::is_inlined_method_handle_intrinsic(ciMethod*, int, ciMethod*) (1 samples, 0.03%)</title><rect x="1252.2" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1255.2" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1252.2" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1255.2" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1252.2" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1255.2" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1252.2" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1255.2" y="974.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1252.2" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1255.2" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1252.2" y="931.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1255.2" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="1252.2" y="915.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1255.2" y="926.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1252.2" y="899.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1255.2" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1252.2" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1255.2" y="894.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="1252.2" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1255.2" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="1252.2" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1255.2" y="862.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1252.6" y="1027.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1255.6" y="1038.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) (1 samples, 0.03%)</title><rect x="1252.6" y="1011.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1255.6" y="1022.0"></text>
</g>
<g>
<title>LibraryCallKit::make_unsafe_address(Node*&amp;, Node*, BasicType, bool) (1 samples, 0.03%)</title><rect x="1252.6" y="995.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1255.6" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1252.6" y="979.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1255.6" y="990.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1252.6" y="963.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1255.6" y="974.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1252.6" y="947.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1255.6" y="958.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1252.6" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1255.6" y="942.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1252.6" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1255.6" y="926.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1252.6" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1255.6" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1252.6" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1255.6" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1252.6" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1255.6" y="878.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1252.6" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1255.6" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.03%)</title><rect x="1252.6" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1255.6" y="846.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) (1 samples, 0.03%)</title><rect x="1253.0" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1256.0" y="1022.0"></text>
</g>
<g>
<title>GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1253.0" y="995.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1256.0" y="1006.0"></text>
</g>
<g>
<title>BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.03%)</title><rect x="1253.0" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1256.0" y="990.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.03%)</title><rect x="1253.0" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1256.0" y="974.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1253.0" y="947.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1256.0" y="958.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.03%)</title><rect x="1253.0" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1256.0" y="942.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.03%)</title><rect x="1253.0" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1256.0" y="926.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.03%)</title><rect x="1253.0" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1256.0" y="910.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1253.0" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1256.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (47 samples, 1.32%)</title><rect x="1253.5" y="1027.0" width="20.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1256.5" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (47 samples, 1.32%)</title><rect x="1253.5" y="1011.0" width="20.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1256.5" y="1022.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (2 samples, 0.06%)</title><rect x="1253.5" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1256.5" y="1006.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (2 samples, 0.06%)</title><rect x="1253.5" y="979.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1256.5" y="990.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="1253.5" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1256.5" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.03%)</title><rect x="1253.5" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1256.5" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::reset_to_method(ciMethod*) (1 samples, 0.03%)</title><rect x="1253.9" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1256.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (44 samples, 1.23%)</title><rect x="1254.4" y="995.0" width="19.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1257.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (43 samples, 1.20%)</title><rect x="1254.4" y="979.0" width="19.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1257.4" y="990.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (2 samples, 0.06%)</title><rect x="1254.4" y="963.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1257.4" y="974.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (2 samples, 0.06%)</title><rect x="1254.4" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1257.4" y="958.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.03%)</title><rect x="1254.4" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1257.4" y="942.0"></text>
</g>
<g>
<title>Compile::constrained_convI2L(PhaseGVN*, Node*, TypeInt const*, Node*) (1 samples, 0.03%)</title><rect x="1254.4" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1257.4" y="926.0"></text>
</g>
<g>
<title>ConstraintCastNode::ConstraintCastNode(Node*, Type const*, bool) (1 samples, 0.03%)</title><rect x="1254.4" y="899.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1257.4" y="910.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1254.4" y="883.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1257.4" y="894.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="1254.4" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1257.4" y="878.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.03%)</title><rect x="1254.4" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1257.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1254.8" y="931.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1257.8" y="942.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1254.8" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1257.8" y="926.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1254.8" y="899.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1257.8" y="910.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1254.8" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1257.8" y="894.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1254.8" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1257.8" y="878.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1254.8" y="851.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1257.8" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1254.8" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1257.8" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="1254.8" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1257.8" y="830.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.03%)</title><rect x="1255.3" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1258.3" y="974.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1255.3" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1258.3" y="958.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1255.3" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1258.3" y="942.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1255.3" y="915.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1258.3" y="926.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1255.3" y="899.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1258.3" y="910.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.03%)</title><rect x="1255.3" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1258.3" y="894.0"></text>
</g>
<g>
<title>IdealKit::delay_transform(Node*) (1 samples, 0.03%)</title><rect x="1255.3" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1258.3" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1255.3" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1258.3" y="862.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1255.3" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1258.3" y="846.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1255.3" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1258.3" y="830.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1255.3" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1258.3" y="814.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1255.3" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1258.3" y="798.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1255.3" y="771.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1258.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (34 samples, 0.95%)</title><rect x="1255.7" y="963.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1258.7" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (4 samples, 0.11%)</title><rect x="1255.7" y="947.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1258.7" y="958.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.03%)</title><rect x="1255.7" y="931.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1258.7" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 0.08%)</title><rect x="1256.1" y="931.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1259.1" y="942.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1256.1" y="915.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1259.1" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1256.1" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1259.1" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1256.1" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1259.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1256.1" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1259.1" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1256.1" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1259.1" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1256.1" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1259.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1256.1" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1259.1" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1256.1" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1259.1" y="814.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1256.1" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1259.1" y="798.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.03%)</title><rect x="1256.6" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1259.6" y="926.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1257.0" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1260.0" y="926.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.03%)</title><rect x="1257.0" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1260.0" y="910.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.03%)</title><rect x="1257.0" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1260.0" y="894.0"></text>
</g>
<g>
<title>ciMethod::instructions_size() (1 samples, 0.03%)</title><rect x="1257.0" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1260.0" y="878.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.03%)</title><rect x="1257.5" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1260.5" y="958.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.03%)</title><rect x="1257.5" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1260.5" y="942.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.03%)</title><rect x="1257.5" y="915.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1260.5" y="926.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.03%)</title><rect x="1257.5" y="899.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1260.5" y="910.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.03%)</title><rect x="1257.5" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1260.5" y="894.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.03%)</title><rect x="1257.5" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1260.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1257.5" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1260.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1257.5" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1260.5" y="846.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="1257.5" y="819.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1260.5" y="830.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1257.9" y="947.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1260.9" y="958.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1257.9" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1260.9" y="942.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1257.9" y="915.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1260.9" y="926.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.03%)</title><rect x="1257.9" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1260.9" y="910.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.03%)</title><rect x="1257.9" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1260.9" y="894.0"></text>
</g>
<g>
<title>GrowableArray&lt;MethodLiveness::BasicBlock*&gt;::GrowableArray(Arena*, int, int, MethodLiveness::BasicBlock* const&amp;) (1 samples, 0.03%)</title><rect x="1257.9" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1260.9" y="878.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1258.3" y="947.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1261.3" y="958.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.03%)</title><rect x="1258.3" y="931.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1261.3" y="942.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.03%)</title><rect x="1258.3" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1261.3" y="926.0"></text>
</g>
<g>
<title>LibraryCallKit::arraycopy_move_allocation_here(AllocateArrayNode*, Node*, JVMState*, int, unsigned int) (1 samples, 0.03%)</title><rect x="1258.3" y="899.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1261.3" y="910.0"></text>
</g>
<g>
<title>Compile::gvn_replace_by(Node*, Node*) (1 samples, 0.03%)</title><rect x="1258.3" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1261.3" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.03%)</title><rect x="1258.3" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1261.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (23 samples, 0.64%)</title><rect x="1258.8" y="947.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1261.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (23 samples, 0.64%)</title><rect x="1258.8" y="931.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1261.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.64%)</title><rect x="1258.8" y="915.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1261.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.64%)</title><rect x="1258.8" y="899.0" width="10.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1261.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 0.59%)</title><rect x="1258.8" y="883.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1261.8" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.06%)</title><rect x="1258.8" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1261.8" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.06%)</title><rect x="1258.8" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1261.8" y="862.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1258.8" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1261.8" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1258.8" y="819.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1261.8" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1258.8" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1261.8" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1258.8" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1261.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1258.8" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1261.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1258.8" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1261.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1258.8" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1261.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1258.8" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1261.8" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1258.8" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1261.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1258.8" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1261.8" y="702.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1258.8" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1261.8" y="686.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1259.2" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1262.2" y="846.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.03%)</title><rect x="1259.2" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1262.2" y="830.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.03%)</title><rect x="1259.2" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1262.2" y="814.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1259.7" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1262.7" y="878.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.03%)</title><rect x="1259.7" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1262.7" y="862.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.03%)</title><rect x="1259.7" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1262.7" y="846.0"></text>
</g>
<g>
<title>ArrayCopyNode::connect_outputs(GraphKit*) (1 samples, 0.03%)</title><rect x="1259.7" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1262.7" y="830.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1259.7" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1262.7" y="814.0"></text>
</g>
<g>
<title>PCTableNode::PCTableNode(Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1259.7" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1262.7" y="798.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1259.7" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1262.7" y="782.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1259.7" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1262.7" y="766.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1259.7" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1262.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.50%)</title><rect x="1260.1" y="867.0" width="8.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1263.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.50%)</title><rect x="1260.1" y="851.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1263.1" y="862.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (2 samples, 0.06%)</title><rect x="1260.1" y="835.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1263.1" y="846.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (2 samples, 0.06%)</title><rect x="1260.1" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1263.1" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (2 samples, 0.06%)</title><rect x="1260.1" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1263.1" y="814.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1260.1" y="787.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1263.1" y="798.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1260.1" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1263.1" y="782.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.03%)</title><rect x="1260.1" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1263.1" y="766.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.03%)</title><rect x="1260.1" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1263.1" y="750.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1260.1" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1263.1" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1260.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1263.1" y="718.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.03%)</title><rect x="1260.6" y="787.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1263.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.42%)</title><rect x="1261.0" y="835.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1264.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.42%)</title><rect x="1261.0" y="819.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1264.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.39%)</title><rect x="1261.0" y="803.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1264.0" y="814.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.03%)</title><rect x="1261.0" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1264.0" y="798.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1261.0" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1264.0" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1261.0" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1264.0" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1261.0" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1264.0" y="750.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.03%)</title><rect x="1261.0" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1264.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.36%)</title><rect x="1261.4" y="787.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1264.4" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.36%)</title><rect x="1261.4" y="771.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1264.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.36%)</title><rect x="1261.4" y="755.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1264.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.36%)</title><rect x="1261.4" y="739.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1264.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.22%)</title><rect x="1261.4" y="723.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1264.4" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1261.4" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1264.4" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1261.4" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1264.4" y="702.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1261.4" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1264.4" y="686.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.03%)</title><rect x="1261.4" y="659.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1264.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.20%)</title><rect x="1261.9" y="707.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1264.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.20%)</title><rect x="1261.9" y="691.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1264.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.20%)</title><rect x="1261.9" y="675.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1264.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.20%)</title><rect x="1261.9" y="659.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1264.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.14%)</title><rect x="1261.9" y="643.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1264.9" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1262.3" y="627.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1265.3" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1262.3" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1265.3" y="622.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1262.3" y="595.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1265.3" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1262.3" y="579.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1265.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1262.3" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1265.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1262.3" y="547.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1265.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1262.3" y="531.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1265.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1262.3" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1265.3" y="526.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.03%)</title><rect x="1262.3" y="499.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1265.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1262.8" y="627.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1265.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1262.8" y="611.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1265.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1262.8" y="595.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1265.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1262.8" y="579.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1265.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1262.8" y="563.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1265.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1262.8" y="547.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1265.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1262.8" y="531.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1265.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1262.8" y="515.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1265.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1262.8" y="499.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1265.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1262.8" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1265.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1262.8" y="467.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1265.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1262.8" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1265.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1262.8" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1265.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1262.8" y="419.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1265.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1262.8" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1265.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1262.8" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1265.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1262.8" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1265.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1262.8" y="355.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1265.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1262.8" y="339.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1265.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.06%)</title><rect x="1262.8" y="323.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1265.8" y="334.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="1262.8" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1265.8" y="318.0"></text>
</g>
<g>
<title>TypePtr::remove_speculative() const (1 samples, 0.03%)</title><rect x="1262.8" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1265.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1263.2" y="307.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1266.2" y="318.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1263.2" y="291.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1266.2" y="302.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1263.2" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1266.2" y="286.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1263.2" y="259.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1266.2" y="270.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1263.2" y="243.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1266.2" y="254.0"></text>
</g>
<g>
<title>IdealKit::XorX(Node*, Node*) (1 samples, 0.03%)</title><rect x="1263.2" y="227.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1266.2" y="238.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1263.2" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1266.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1263.7" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1266.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1263.7" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1266.7" y="478.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.03%)</title><rect x="1263.7" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1266.7" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1263.7" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1266.7" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1263.7" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1266.7" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1263.7" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1266.7" y="414.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.03%)</title><rect x="1263.7" y="387.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1266.7" y="398.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.03%)</title><rect x="1263.7" y="371.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1266.7" y="382.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.03%)</title><rect x="1263.7" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1266.7" y="366.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.03%)</title><rect x="1263.7" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1266.7" y="350.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="1263.7" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1266.7" y="334.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.03%)</title><rect x="1263.7" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1266.7" y="318.0"></text>
</g>
<g>
<title>fieldDescriptor::fieldDescriptor() (1 samples, 0.03%)</title><rect x="1263.7" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1266.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1264.1" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1267.1" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1264.1" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1267.1" y="638.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.03%)</title><rect x="1264.1" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1267.1" y="622.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.03%)</title><rect x="1264.5" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1267.5" y="638.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.03%)</title><rect x="1264.5" y="611.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1267.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.08%)</title><rect x="1265.0" y="723.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1268.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1265.0" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1268.0" y="718.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.03%)</title><rect x="1265.0" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1268.0" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1265.0" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1268.0" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1265.0" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1268.0" y="670.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1265.0" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1268.0" y="654.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.03%)</title><rect x="1265.0" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1268.0" y="638.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.03%)</title><rect x="1265.0" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1268.0" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1265.4" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1268.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1265.4" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1268.4" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1265.4" y="675.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1268.4" y="686.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1265.4" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1268.4" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="1265.4" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1268.4" y="654.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="1265.4" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1268.4" y="638.0"></text>
</g>
<g>
<title>ciObject::klass() (1 samples, 0.03%)</title><rect x="1265.9" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1268.9" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1265.9" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1268.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1266.3" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1269.3" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1266.3" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1269.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.03%)</title><rect x="1266.7" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1269.7" y="734.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1266.7" y="707.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1269.7" y="718.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1266.7" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1269.7" y="702.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1266.7" y="675.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1269.7" y="686.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.03%)</title><rect x="1266.7" y="659.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1269.7" y="670.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.03%)</title><rect x="1266.7" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1269.7" y="654.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.03%)</title><rect x="1266.7" y="627.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1269.7" y="638.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1266.7" y="611.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1269.7" y="622.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1266.7" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1269.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1267.2" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1270.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1267.2" y="787.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1270.2" y="798.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.03%)</title><rect x="1267.2" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1270.2" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1267.2" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1270.2" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1267.2" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1270.2" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1267.2" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1270.2" y="734.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.03%)</title><rect x="1267.2" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1270.2" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.03%)</title><rect x="1267.2" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1270.2" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.03%)</title><rect x="1267.2" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1270.2" y="686.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.03%)</title><rect x="1267.6" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1270.6" y="846.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.03%)</title><rect x="1267.6" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1270.6" y="830.0"></text>
</g>
<g>
<title>MethodData::mileage_of(Method*) (1 samples, 0.03%)</title><rect x="1267.6" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1270.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1268.1" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1271.1" y="894.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1268.1" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1271.1" y="878.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1268.1" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1271.1" y="862.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1268.1" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1271.1" y="846.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1268.1" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1271.1" y="830.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1268.1" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1271.1" y="814.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1268.1" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1271.1" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1268.1" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1271.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.03%)</title><rect x="1268.5" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1271.5" y="894.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.03%)</title><rect x="1268.5" y="867.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1271.5" y="878.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.03%)</title><rect x="1268.5" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1271.5" y="862.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.03%)</title><rect x="1268.5" y="835.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1271.5" y="846.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1268.5" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1271.5" y="830.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1268.5" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1271.5" y="814.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1268.5" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1271.5" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1269.0" y="947.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1272.0" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1269.0" y="931.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1272.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.11%)</title><rect x="1269.0" y="915.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1272.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.11%)</title><rect x="1269.0" y="899.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1272.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.11%)</title><rect x="1269.0" y="883.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1272.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.11%)</title><rect x="1269.0" y="867.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1272.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1269.0" y="851.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1272.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.11%)</title><rect x="1269.0" y="835.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1272.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.11%)</title><rect x="1269.0" y="819.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1272.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.11%)</title><rect x="1269.0" y="803.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1272.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.11%)</title><rect x="1269.0" y="787.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1272.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1269.0" y="771.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1272.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.11%)</title><rect x="1269.0" y="755.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1272.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.11%)</title><rect x="1269.0" y="739.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1272.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.11%)</title><rect x="1269.0" y="723.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1272.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1269.0" y="707.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1272.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1269.0" y="691.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1272.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1269.0" y="675.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1272.0" y="686.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.03%)</title><rect x="1269.0" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1272.0" y="670.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1269.0" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1272.0" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1269.0" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1272.0" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1269.0" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1272.0" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.03%)</title><rect x="1269.0" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1272.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1269.4" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1272.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1269.4" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1272.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1269.4" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1272.4" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1269.4" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1272.4" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1269.4" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1272.4" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1269.4" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1272.4" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1269.4" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1272.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1269.4" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1272.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1269.4" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1272.4" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1269.4" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1272.4" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1269.4" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1272.4" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1269.4" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1272.4" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1269.4" y="467.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1272.4" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1269.4" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1272.4" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1269.4" y="435.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1272.4" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1269.4" y="419.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1272.4" y="430.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1269.4" y="403.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1272.4" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1269.4" y="387.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1272.4" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1269.4" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1272.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1269.8" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1272.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1269.8" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1272.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1269.8" y="579.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1272.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1269.8" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1272.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1269.8" y="547.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1272.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1269.8" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1272.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1269.8" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1272.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1269.8" y="499.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1272.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1269.8" y="483.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1272.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1269.8" y="467.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1272.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1269.8" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1272.8" y="462.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1269.8" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1272.8" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1269.8" y="419.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1272.8" y="430.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1269.8" y="403.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1272.8" y="414.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1269.8" y="387.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1272.8" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1269.8" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1272.8" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1269.8" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1272.8" y="366.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1269.8" y="339.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1272.8" y="350.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1269.8" y="323.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1272.8" y="334.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1269.8" y="307.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1272.8" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1269.8" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1272.8" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1269.8" y="275.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1272.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.03%)</title><rect x="1270.3" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1273.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.03%)</title><rect x="1270.3" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1273.3" y="702.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1270.3" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1273.3" y="686.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.03%)</title><rect x="1270.3" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1273.3" y="670.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.03%)</title><rect x="1270.3" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1273.3" y="654.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1270.3" y="627.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1273.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="1270.7" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1273.7" y="974.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.03%)</title><rect x="1270.7" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1273.7" y="958.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1270.7" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1273.7" y="942.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1270.7" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1273.7" y="926.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1270.7" y="899.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1273.7" y="910.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.03%)</title><rect x="1270.7" y="883.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1273.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.08%)</title><rect x="1271.2" y="963.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1274.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1271.2" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1274.2" y="958.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1271.2" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1274.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.06%)</title><rect x="1271.6" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1274.6" y="958.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (2 samples, 0.06%)</title><rect x="1271.6" y="931.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1274.6" y="942.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.06%)</title><rect x="1271.6" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1274.6" y="926.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.06%)</title><rect x="1271.6" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1274.6" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1271.6" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1274.6" y="894.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1271.6" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1274.6" y="878.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.03%)</title><rect x="1271.6" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1274.6" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1271.6" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1274.6" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1271.6" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1274.6" y="830.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.03%)</title><rect x="1271.6" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1274.6" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1271.6" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1274.6" y="798.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1271.6" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1274.6" y="782.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1272.1" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1275.1" y="894.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.03%)</title><rect x="1272.1" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1275.1" y="878.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.03%)</title><rect x="1272.1" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1275.1" y="862.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1272.1" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1275.1" y="846.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.03%)</title><rect x="1272.1" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1275.1" y="830.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1272.1" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1275.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1272.5" y="963.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1275.5" y="974.0"></text>
</g>
<g>
<title>Parse::branch_prediction(float&amp;, BoolTest::mask, int, Node*) (1 samples, 0.03%)</title><rect x="1272.5" y="947.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1275.5" y="958.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1272.5" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1275.5" y="942.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1272.5" y="915.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1275.5" y="926.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="1272.5" y="899.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1275.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1272.9" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1275.9" y="974.0"></text>
</g>
<g>
<title>TypeAryPtr::klass() const (1 samples, 0.03%)</title><rect x="1272.9" y="947.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1275.9" y="958.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1273.4" y="979.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1276.4" y="990.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1273.4" y="963.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1276.4" y="974.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.03%)</title><rect x="1273.8" y="995.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1276.8" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1273.8" y="979.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1276.8" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (8 samples, 0.22%)</title><rect x="1274.3" y="1027.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1277.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.03%)</title><rect x="1274.3" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1277.3" y="1022.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.03%)</title><rect x="1274.3" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1277.3" y="1006.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1274.3" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1277.3" y="990.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1274.3" y="963.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1277.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.17%)</title><rect x="1274.7" y="1011.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1277.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.17%)</title><rect x="1274.7" y="995.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1277.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.17%)</title><rect x="1274.7" y="979.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1277.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.17%)</title><rect x="1274.7" y="963.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1277.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.14%)</title><rect x="1274.7" y="947.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1277.7" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1274.7" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1277.7" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1274.7" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1277.7" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1274.7" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1277.7" y="910.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1274.7" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1277.7" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1274.7" y="867.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1277.7" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1274.7" y="851.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1277.7" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1274.7" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1277.7" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1274.7" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1277.7" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1274.7" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1277.7" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1274.7" y="787.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1277.7" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1274.7" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1277.7" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1274.7" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1277.7" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1274.7" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1277.7" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1274.7" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1277.7" y="734.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1274.7" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1277.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1274.7" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1277.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1274.7" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1277.7" y="686.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.03%)</title><rect x="1274.7" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1277.7" y="670.0"></text>
</g>
<g>
<title>constantPoolHandle::constantPoolHandle(ConstantPool*) (1 samples, 0.03%)</title><rect x="1274.7" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1277.7" y="654.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1274.7" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1277.7" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1274.7" y="611.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1277.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1275.1" y="931.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1278.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1275.1" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1278.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1275.1" y="899.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1278.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1275.1" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1278.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1275.1" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1278.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1275.1" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1278.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1275.1" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1278.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1275.1" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1278.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1275.1" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1278.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1275.1" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1278.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1275.1" y="771.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1278.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1275.1" y="755.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1278.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1275.1" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1278.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1275.1" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1278.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1275.1" y="707.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1278.1" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1275.1" y="691.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1278.1" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1275.1" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1278.1" y="686.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1275.1" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1278.1" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1275.1" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1278.1" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1275.1" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1278.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1275.1" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1278.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1275.1" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1278.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1275.1" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1278.1" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="1275.1" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1278.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1275.6" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1278.6" y="878.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.03%)</title><rect x="1275.6" y="851.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1278.6" y="862.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1275.6" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1278.6" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1275.6" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1278.6" y="830.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.03%)</title><rect x="1275.6" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1278.6" y="814.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.03%)</title><rect x="1275.6" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1278.6" y="798.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.03%)</title><rect x="1275.6" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1278.6" y="782.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.03%)</title><rect x="1275.6" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1278.6" y="766.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1275.6" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1278.6" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1276.0" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1279.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1276.0" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1279.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1276.0" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1279.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1276.0" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1279.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1276.0" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1279.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1276.0" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1279.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.0" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1279.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1276.0" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1279.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1276.0" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1279.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1276.0" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1279.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1276.0" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1279.0" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.0" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1279.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.0" y="739.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1279.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1276.0" y="723.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1279.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1276.0" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1279.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1276.0" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1279.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1276.0" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1279.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.0" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1279.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1276.0" y="643.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1279.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1276.0" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1279.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1276.0" y="611.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1279.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1276.0" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1279.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.0" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1279.0" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1276.0" y="563.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1279.0" y="574.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.03%)</title><rect x="1276.0" y="547.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1279.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.03%)</title><rect x="1276.0" y="531.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1279.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="1276.0" y="515.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1279.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1276.0" y="499.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1279.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1276.0" y="483.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1279.0" y="494.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1276.0" y="467.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1279.0" y="478.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1276.0" y="451.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1279.0" y="462.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1276.0" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1279.0" y="446.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1276.0" y="419.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1279.0" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.5" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1279.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.5" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1279.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1276.5" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1279.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1276.5" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1279.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1276.5" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1279.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1276.5" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1279.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1276.5" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1279.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1276.5" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1279.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1276.5" y="707.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1279.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1276.5" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1279.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1276.5" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1279.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1276.5" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1279.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1276.5" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1279.5" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1276.5" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1279.5" y="638.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1276.5" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1279.5" y="622.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1276.5" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1279.5" y="606.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.03%)</title><rect x="1276.5" y="579.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1279.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory_call(Node*, bool) (1 samples, 0.03%)</title><rect x="1276.5" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1279.5" y="574.0"></text>
</g>
<g>
<title>ProjNode::ProjNode(Node*, unsigned int, bool) (1 samples, 0.03%)</title><rect x="1276.5" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1279.5" y="558.0"></text>
</g>
<g>
<title>Node::is_Start() const (1 samples, 0.03%)</title><rect x="1276.5" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1279.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="1276.9" y="947.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1279.9" y="958.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.03%)</title><rect x="1276.9" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1279.9" y="942.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.03%)</title><rect x="1276.9" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1279.9" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1276.9" y="899.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1279.9" y="910.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1276.9" y="883.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1279.9" y="894.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1276.9" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1279.9" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1277.4" y="1011.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1280.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1277.4" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1280.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1277.4" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1280.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1277.4" y="963.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1280.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1277.4" y="947.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1280.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1277.4" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1280.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1277.4" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1280.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1277.4" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1280.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1277.4" y="883.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1280.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1277.4" y="867.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1280.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1277.4" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1280.4" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1277.4" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1280.4" y="846.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1277.4" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1280.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1277.8" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1280.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1277.8" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1280.8" y="1038.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1277.8" y="1011.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1280.8" y="1022.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1277.8" y="995.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1280.8" y="1006.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1277.8" y="979.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1280.8" y="990.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1277.8" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1280.8" y="974.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.03%)</title><rect x="1277.8" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1280.8" y="958.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.03%)</title><rect x="1277.8" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1280.8" y="942.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1277.8" y="915.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1280.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (3 samples, 0.08%)</title><rect x="1278.2" y="1043.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1281.2" y="1054.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1278.2" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1281.2" y="1038.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1278.2" y="1011.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1281.2" y="1022.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1278.2" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1281.2" y="1006.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1278.2" y="979.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1281.2" y="990.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.03%)</title><rect x="1278.2" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1281.2" y="974.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.03%)</title><rect x="1278.2" y="947.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1281.2" y="958.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.03%)</title><rect x="1278.2" y="931.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1281.2" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1278.2" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1281.2" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="1278.2" y="899.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1281.2" y="910.0"></text>
</g>
<g>
<title>Parse::maybe_add_predicate_after_if(Parse::Block*) (1 samples, 0.03%)</title><rect x="1278.7" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1281.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.03%)</title><rect x="1278.7" y="1011.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1281.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1278.7" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1281.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1278.7" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1281.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.03%)</title><rect x="1278.7" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1281.7" y="974.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1278.7" y="947.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1281.7" y="958.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1278.7" y="931.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1281.7" y="942.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1278.7" y="915.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1281.7" y="926.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.03%)</title><rect x="1279.1" y="1027.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1282.1" y="1038.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.03%)</title><rect x="1279.1" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1282.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.03%)</title><rect x="1279.1" y="995.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1282.1" y="1006.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1279.1" y="979.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1282.1" y="990.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1279.1" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1282.1" y="974.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1279.1" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1282.1" y="958.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1279.1" y="931.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1282.1" y="942.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1279.1" y="915.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1282.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.08%)</title><rect x="1279.6" y="1043.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1282.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1279.6" y="1027.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1282.6" y="1038.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.03%)</title><rect x="1279.6" y="1011.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1282.6" y="1022.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.03%)</title><rect x="1279.6" y="995.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1282.6" y="1006.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.03%)</title><rect x="1279.6" y="979.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1282.6" y="990.0"></text>
</g>
<g>
<title>ConstraintCastNode::make_cast(int, Node*, Node*, Type const*, bool) (1 samples, 0.03%)</title><rect x="1279.6" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1282.6" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.03%)</title><rect x="1280.0" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1283.0" y="1038.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.03%)</title><rect x="1280.0" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1283.0" y="1022.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.03%)</title><rect x="1280.0" y="995.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1283.0" y="1006.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1280.5" y="1027.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1283.5" y="1038.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.03%)</title><rect x="1280.9" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1283.9" y="1070.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.03%)</title><rect x="1280.9" y="1043.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1283.9" y="1054.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1280.9" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1283.9" y="1038.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1280.9" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1283.9" y="1022.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1280.9" y="995.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1283.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1281.3" y="1075.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1284.3" y="1086.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1281.3" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1284.3" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (18 samples, 0.50%)</title><rect x="1281.8" y="1107.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1284.8" y="1118.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.03%)</title><rect x="1281.8" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1284.8" y="1102.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.03%)</title><rect x="1281.8" y="1075.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1284.8" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1281.8" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1284.8" y="1070.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1281.8" y="1043.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1284.8" y="1054.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.03%)</title><rect x="1281.8" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1284.8" y="1038.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1281.8" y="1011.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1284.8" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1281.8" y="995.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1284.8" y="1006.0"></text>
</g>
<g>
<title>TypePtr::xmeet_speculative(TypePtr const*) const (1 samples, 0.03%)</title><rect x="1281.8" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1284.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.03%)</title><rect x="1282.2" y="1091.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1285.2" y="1102.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.03%)</title><rect x="1282.2" y="1075.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1285.2" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1282.2" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1285.2" y="1070.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1282.2" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1285.2" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1282.2" y="1027.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1285.2" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.03%)</title><rect x="1282.2" y="1011.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1285.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.45%)</title><rect x="1282.7" y="1091.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1285.7" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.45%)</title><rect x="1282.7" y="1075.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1285.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.45%)</title><rect x="1282.7" y="1059.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1285.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.45%)</title><rect x="1282.7" y="1043.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1285.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.39%)</title><rect x="1282.7" y="1027.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1285.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.03%)</title><rect x="1282.7" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1285.7" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1282.7" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1285.7" y="1006.0"></text>
</g>
<g>
<title>CheckCastPPNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1282.7" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1285.7" y="990.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.03%)</title><rect x="1282.7" y="963.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1285.7" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.22%)</title><rect x="1283.1" y="1011.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1286.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.22%)</title><rect x="1283.1" y="995.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1286.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.22%)</title><rect x="1283.1" y="979.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1286.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.22%)</title><rect x="1283.1" y="963.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1286.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.17%)</title><rect x="1283.1" y="947.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1286.1" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1283.1" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1286.1" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1283.1" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1286.1" y="926.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1283.1" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1286.1" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1283.1" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1286.1" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1283.1" y="867.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1286.1" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1283.1" y="851.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1286.1" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1283.1" y="835.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1286.1" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1283.1" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1286.1" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::append(ciTypeFlow::Block* const&amp;) (1 samples, 0.03%)</title><rect x="1283.1" y="803.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1286.1" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1283.6" y="931.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1286.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1283.6" y="915.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1286.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1283.6" y="899.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1286.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1283.6" y="883.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1286.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1283.6" y="867.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1286.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1283.6" y="851.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1286.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1283.6" y="835.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1286.6" y="846.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.03%)</title><rect x="1283.6" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1286.6" y="830.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.03%)</title><rect x="1283.6" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1286.6" y="814.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.03%)</title><rect x="1283.6" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1286.6" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1283.6" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1286.6" y="782.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1283.6" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1286.6" y="766.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.03%)</title><rect x="1283.6" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1286.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1284.0" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1287.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1284.0" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1287.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1284.0" y="787.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1287.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1284.0" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1287.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1284.0" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1287.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1284.0" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1287.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1284.0" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1287.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1284.0" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1287.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1284.0" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1287.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1284.0" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1287.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1284.0" y="659.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1287.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1284.0" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1287.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1284.0" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1287.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1284.0" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1287.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1284.0" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1287.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1284.0" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1287.0" y="590.0"></text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.03%)</title><rect x="1284.0" y="563.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1287.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1284.4" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1287.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1284.4" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1287.4" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1284.4" y="755.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1287.4" y="766.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1284.4" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1287.4" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1284.4" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1287.4" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1284.4" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1287.4" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1284.9" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1287.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1284.9" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1287.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1284.9" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1287.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1284.9" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1287.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1284.9" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1287.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1284.9" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1287.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1284.9" y="835.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1287.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1284.9" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1287.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1284.9" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1287.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1284.9" y="787.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1287.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_monitor_enter() (1 samples, 0.03%)</title><rect x="1284.9" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1287.9" y="782.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1284.9" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1287.9" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1284.9" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1287.9" y="750.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1284.9" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1287.9" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1284.9" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1287.9" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1284.9" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1287.9" y="702.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long) (1 samples, 0.03%)</title><rect x="1284.9" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1287.9" y="686.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1284.9" y="659.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1287.9" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1285.3" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1288.3" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1285.3" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1288.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1285.3" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1288.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1285.3" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1288.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1285.3" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1288.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1285.3" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1288.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1285.3" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1288.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1285.3" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1288.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1285.3" y="787.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1288.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1285.3" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1288.3" y="782.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.03%)</title><rect x="1285.3" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1288.3" y="766.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.03%)</title><rect x="1285.3" y="739.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1288.3" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="1285.3" y="723.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1288.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.03%)</title><rect x="1285.3" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1288.3" y="718.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1285.3" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1288.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1285.8" y="947.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1288.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1285.8" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1288.8" y="942.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1285.8" y="915.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1288.8" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1285.8" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1288.8" y="910.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1285.8" y="883.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1288.8" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1285.8" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1288.8" y="878.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1285.8" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1288.8" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1285.8" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1288.8" y="846.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1285.8" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1288.8" y="830.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.03%)</title><rect x="1285.8" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1288.8" y="814.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1285.8" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1288.8" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1285.8" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1288.8" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1285.8" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1288.8" y="766.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1285.8" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1288.8" y="750.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1285.8" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1288.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1286.2" y="947.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1289.2" y="958.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.03%)</title><rect x="1286.2" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1289.2" y="942.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.03%)</title><rect x="1286.2" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1289.2" y="926.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1286.2" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1289.2" y="910.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1286.2" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1289.2" y="894.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="1286.2" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1289.2" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1286.2" y="851.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1289.2" y="862.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1286.2" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1289.2" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1286.6" y="1011.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1289.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1286.6" y="995.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1289.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.11%)</title><rect x="1286.6" y="979.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1289.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.11%)</title><rect x="1286.6" y="963.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1289.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.11%)</title><rect x="1286.6" y="947.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1289.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.11%)</title><rect x="1286.6" y="931.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1289.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1286.6" y="915.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1289.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1286.6" y="899.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1289.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1286.6" y="883.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1289.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1286.6" y="867.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1289.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1286.6" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1289.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1286.6" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1289.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1286.6" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1289.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1286.6" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1289.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1286.6" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1289.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1286.6" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1289.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1286.6" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1289.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1286.6" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1289.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1286.6" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1289.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1286.6" y="707.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1289.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1286.6" y="691.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1289.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1286.6" y="675.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1289.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1286.6" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1289.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1286.6" y="643.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1289.6" y="654.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.03%)</title><rect x="1286.6" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1289.6" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1286.6" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1289.6" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1287.1" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1290.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1287.1" y="819.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1290.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1287.1" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1290.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1287.1" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1290.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1287.1" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1290.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1287.1" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1290.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1287.1" y="739.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1290.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1287.1" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1290.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1287.1" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1290.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1287.1" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1290.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1287.1" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1290.1" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1287.1" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1290.1" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1287.1" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1290.1" y="654.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1287.1" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1290.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1287.5" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1290.5" y="862.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="1287.5" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1290.5" y="846.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.03%)</title><rect x="1287.5" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1290.5" y="830.0"></text>
</g>
<g>
<title>Compile::too_many_recompiles(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="1287.5" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1290.5" y="814.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.03%)</title><rect x="1287.5" y="787.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1290.5" y="798.0"></text>
</g>
<g>
<title>MethodData::next_extra(DataLayout*) (1 samples, 0.03%)</title><rect x="1287.5" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1290.5" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1288.0" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1291.0" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1288.0" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1291.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1288.0" y="883.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1291.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1288.0" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1291.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1288.0" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1291.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1288.0" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1291.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1288.0" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1291.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1288.0" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1291.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1288.0" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1291.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1288.0" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1291.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1288.0" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1291.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1288.0" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1291.0" y="750.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1288.0" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1291.0" y="734.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1288.0" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1291.0" y="718.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1288.0" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1291.0" y="702.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1288.0" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1291.0" y="686.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.03%)</title><rect x="1288.0" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1291.0" y="670.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.03%)</title><rect x="1288.0" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1291.0" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1288.0" y="627.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1291.0" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1288.0" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1291.0" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.03%)</title><rect x="1288.0" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1291.0" y="606.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1288.0" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1291.0" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1288.4" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1291.4" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1288.4" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1291.4" y="1006.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1288.4" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1291.4" y="990.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1288.4" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1291.4" y="974.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1288.4" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1291.4" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1288.4" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1291.4" y="942.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="1288.4" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1291.4" y="926.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.03%)</title><rect x="1288.4" y="899.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1291.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1288.9" y="1027.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1291.9" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1288.9" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1291.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1289.3" y="1027.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1292.3" y="1038.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1289.7" y="1107.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1292.7" y="1118.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="1289.7" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1292.7" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1289.7" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1292.7" y="1086.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="1290.2" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1293.2" y="1102.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1290.2" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1293.2" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1290.2" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1293.2" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1290.2" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1293.2" y="1054.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.03%)</title><rect x="1290.2" y="1027.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1293.2" y="1038.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.03%)</title><rect x="1290.2" y="1011.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1293.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.08%)</title><rect x="1290.6" y="1123.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1293.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.06%)</title><rect x="1290.6" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1293.6" y="1118.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1290.6" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1293.6" y="1102.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1290.6" y="1075.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1293.6" y="1086.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1290.6" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1293.6" y="1070.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1290.6" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1293.6" y="1054.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1290.6" y="1027.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1293.6" y="1038.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.03%)</title><rect x="1290.6" y="1011.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1293.6" y="1022.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1290.6" y="995.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1293.6" y="1006.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.03%)</title><rect x="1290.6" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1293.6" y="990.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1291.1" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1294.1" y="1102.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1291.1" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1294.1" y="1086.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="1291.1" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1294.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1291.5" y="1107.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1294.5" y="1118.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1291.5" y="1091.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1294.5" y="1102.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1291.5" y="1075.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1294.5" y="1086.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1291.5" y="1059.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1294.5" y="1070.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1291.5" y="1043.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1294.5" y="1054.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.03%)</title><rect x="1291.5" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1294.5" y="1038.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.03%)</title><rect x="1291.5" y="1011.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1294.5" y="1022.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1291.5" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1294.5" y="1006.0"></text>
</g>
<g>
<title>IdealKit::delay_transform(Node*) (1 samples, 0.03%)</title><rect x="1291.5" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1294.5" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1291.5" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1294.5" y="974.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.03%)</title><rect x="1291.5" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1294.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1292.0" y="1123.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1295.0" y="1134.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.03%)</title><rect x="1292.0" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1295.0" y="1118.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.03%)</title><rect x="1292.4" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1295.4" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1292.4" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1295.4" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1292.8" y="1187.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1295.8" y="1198.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (11 samples, 0.31%)</title><rect x="1293.3" y="1187.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1296.3" y="1198.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (4 samples, 0.11%)</title><rect x="1293.3" y="1171.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1296.3" y="1182.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.06%)</title><rect x="1294.2" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1297.2" y="1166.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.06%)</title><rect x="1294.2" y="1139.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1297.2" y="1150.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (6 samples, 0.17%)</title><rect x="1295.0" y="1171.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1298.0" y="1182.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.03%)</title><rect x="1297.3" y="1155.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1300.3" y="1166.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1297.7" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1300.7" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (8 samples, 0.22%)</title><rect x="1298.1" y="1187.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1301.1" y="1198.0"></text>
</g>
<g>
<title>CodeBuffer::free_blob() (1 samples, 0.03%)</title><rect x="1298.1" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1301.1" y="1182.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.03%)</title><rect x="1298.1" y="1155.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1301.1" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::add_to_freelist(HeapBlock*) (1 samples, 0.03%)</title><rect x="1298.1" y="1139.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1301.1" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::merge_right(FreeBlock*) (1 samples, 0.03%)</title><rect x="1298.1" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1301.1" y="1134.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.03%)</title><rect x="1298.6" y="1171.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1301.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1299.0" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1302.0" y="1182.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1299.0" y="1155.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1302.0" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1299.0" y="1139.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1302.0" y="1150.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="1299.5" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1302.5" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1299.5" y="1155.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1302.5" y="1166.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1299.5" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1302.5" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1299.5" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1302.5" y="1134.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1299.5" y="1107.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1302.5" y="1118.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="1299.9" y="1171.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1302.9" y="1182.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="1299.9" y="1155.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1302.9" y="1166.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (2 samples, 0.06%)</title><rect x="1299.9" y="1139.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1302.9" y="1150.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (2 samples, 0.06%)</title><rect x="1299.9" y="1123.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1302.9" y="1134.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="1299.9" y="1107.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1302.9" y="1118.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.06%)</title><rect x="1300.8" y="1171.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1303.8" y="1182.0"></text>
</g>
<g>
<title>JvmtiDeferredEventQueue::enqueue(JvmtiDeferredEvent const&amp;) (1 samples, 0.03%)</title><rect x="1300.8" y="1155.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1303.8" y="1166.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1300.8" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1303.8" y="1150.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1300.8" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1303.8" y="1134.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1300.8" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1303.8" y="1118.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1300.8" y="1091.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1303.8" y="1102.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1300.8" y="1075.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1303.8" y="1086.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1300.8" y="1059.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1303.8" y="1070.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1301.2" y="1155.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1304.2" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.03%)</title><rect x="1301.7" y="1187.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1304.7" y="1198.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="1301.7" y="1171.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1304.7" y="1182.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.03%)</title><rect x="1301.7" y="1155.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1304.7" y="1166.0"></text>
</g>
<g>
<title>Compile::build_start_state(StartNode*, TypeFunc const*) (1 samples, 0.03%)</title><rect x="1302.1" y="1203.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1305.1" y="1214.0"></text>
</g>
<g>
<title>Compile::~Compile() (1 samples, 0.03%)</title><rect x="1302.6" y="1203.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1305.6" y="1214.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.03%)</title><rect x="1302.6" y="1187.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1305.6" y="1198.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.03%)</title><rect x="1302.6" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1305.6" y="1182.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.03%)</title><rect x="1302.6" y="1155.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1305.6" y="1166.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="1302.6" y="1139.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1305.6" y="1150.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (4 samples, 0.11%)</title><rect x="1303.0" y="1219.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1306.0" y="1230.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (4 samples, 0.11%)</title><rect x="1303.0" y="1203.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1306.0" y="1214.0"></text>
</g>
<g>
<title>CompileTask::print_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool, bool) (3 samples, 0.08%)</title><rect x="1303.0" y="1187.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1306.0" y="1198.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.03%)</title><rect x="1303.0" y="1171.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1306.0" y="1182.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.03%)</title><rect x="1303.0" y="1155.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1306.0" y="1166.0"></text>
</g>
<g>
<title>os::strdup(char const*, MemoryType) (1 samples, 0.03%)</title><rect x="1303.0" y="1139.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1306.0" y="1150.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType) (1 samples, 0.03%)</title><rect x="1303.0" y="1123.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1306.0" y="1134.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1303.0" y="1107.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1306.0" y="1118.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1303.0" y="1091.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1306.0" y="1102.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1303.0" y="1075.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1306.0" y="1086.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1303.0" y="1059.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1306.0" y="1070.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (2 samples, 0.06%)</title><rect x="1303.5" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1306.5" y="1182.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (2 samples, 0.06%)</title><rect x="1303.5" y="1155.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1306.5" y="1166.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (2 samples, 0.06%)</title><rect x="1303.5" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1306.5" y="1150.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (2 samples, 0.06%)</title><rect x="1303.5" y="1123.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1306.5" y="1134.0"></text>
</g>
<g>
<title>vsnprintf (2 samples, 0.06%)</title><rect x="1303.5" y="1107.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1306.5" y="1118.0"></text>
</g>
<g>
<title>_vsnprintf (2 samples, 0.06%)</title><rect x="1303.5" y="1091.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1306.5" y="1102.0"></text>
</g>
<g>
<title>__v2printf (2 samples, 0.06%)</title><rect x="1303.5" y="1075.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1306.5" y="1086.0"></text>
</g>
<g>
<title>__vfprintf (2 samples, 0.06%)</title><rect x="1303.5" y="1059.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1306.5" y="1070.0"></text>
</g>
<g>
<title>__sfvwrite (2 samples, 0.06%)</title><rect x="1303.5" y="1043.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1306.5" y="1054.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1303.9" y="1027.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1306.9" y="1038.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.03%)</title><rect x="1304.3" y="1187.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1307.3" y="1198.0"></text>
</g>
<g>
<title>CompilationLog::log_nmethod(JavaThread*, nmethod*) (6 samples, 0.17%)</title><rect x="1304.8" y="1219.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1307.8" y="1230.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (6 samples, 0.17%)</title><rect x="1304.8" y="1203.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1307.8" y="1214.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (6 samples, 0.17%)</title><rect x="1304.8" y="1187.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1307.8" y="1198.0"></text>
</g>
<g>
<title>jio_vsnprintf (6 samples, 0.17%)</title><rect x="1304.8" y="1171.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1307.8" y="1182.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (6 samples, 0.17%)</title><rect x="1304.8" y="1155.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1307.8" y="1166.0"></text>
</g>
<g>
<title>vsnprintf (6 samples, 0.17%)</title><rect x="1304.8" y="1139.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1307.8" y="1150.0"></text>
</g>
<g>
<title>_vsnprintf (6 samples, 0.17%)</title><rect x="1304.8" y="1123.0" width="2.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1307.8" y="1134.0"></text>
</g>
<g>
<title>__v2printf (6 samples, 0.17%)</title><rect x="1304.8" y="1107.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1307.8" y="1118.0"></text>
</g>
<g>
<title>__vfprintf (5 samples, 0.14%)</title><rect x="1304.8" y="1091.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1307.8" y="1102.0"></text>
</g>
<g>
<title>__sfvwrite (1 samples, 0.03%)</title><rect x="1306.1" y="1075.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1309.1" y="1086.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1306.1" y="1059.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1309.1" y="1070.0"></text>
</g>
<g>
<title>_platform_strlen (1 samples, 0.03%)</title><rect x="1306.5" y="1075.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1309.5" y="1086.0"></text>
</g>
<g>
<title>localeconv_l (1 samples, 0.03%)</title><rect x="1307.0" y="1091.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1310.0" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (470 samples, 13.15%)</title><rect x="1307.4" y="1219.0" width="207.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1310.4" y="1230.0">Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (467 samples, 13.07%)</title><rect x="1307.4" y="1203.0" width="206.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1310.4" y="1214.0">Compilation::Compilation(Ab..</text>
</g>
<g>
<title>Compilation::compile_method() (466 samples, 13.04%)</title><rect x="1307.4" y="1187.0" width="206.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1310.4" y="1198.0">Compilation::compile_method()</text>
</g>
<g>
<title>Compilation::compile_java_method() (428 samples, 11.98%)</title><rect x="1307.4" y="1171.0" width="189.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1310.4" y="1182.0">Compilation::compile_java..</text>
</g>
<g>
<title>Compilation::build_hir() (192 samples, 5.37%)</title><rect x="1307.4" y="1155.0" width="84.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1310.4" y="1166.0">Compilatio..</text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (18 samples, 0.50%)</title><rect x="1307.4" y="1139.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1310.4" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (9 samples, 0.25%)</title><rect x="1308.8" y="1123.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1311.8" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (9 samples, 0.25%)</title><rect x="1308.8" y="1107.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1311.8" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (8 samples, 0.22%)</title><rect x="1308.8" y="1091.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1311.8" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (8 samples, 0.22%)</title><rect x="1308.8" y="1075.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1311.8" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (6 samples, 0.17%)</title><rect x="1308.8" y="1059.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1311.8" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (6 samples, 0.17%)</title><rect x="1308.8" y="1043.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1311.8" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (4 samples, 0.11%)</title><rect x="1308.8" y="1027.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1311.8" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (4 samples, 0.11%)</title><rect x="1308.8" y="1011.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1311.8" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (4 samples, 0.11%)</title><rect x="1308.8" y="995.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1311.8" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.08%)</title><rect x="1308.8" y="979.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1311.8" y="990.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.08%)</title><rect x="1308.8" y="963.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1311.8" y="974.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.08%)</title><rect x="1308.8" y="947.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1311.8" y="958.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.08%)</title><rect x="1308.8" y="931.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1311.8" y="942.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (3 samples, 0.08%)</title><rect x="1308.8" y="915.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1311.8" y="926.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="899.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1311.8" y="910.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1311.8" y="894.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="867.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1311.8" y="878.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="851.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1311.8" y="862.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="835.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1311.8" y="846.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="819.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1311.8" y="830.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1311.8" y="814.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1311.8" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1308.8" y="771.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1311.8" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1308.8" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1311.8" y="766.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1308.8" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1311.8" y="750.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1308.8" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1311.8" y="734.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1308.8" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1311.8" y="718.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1309.2" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1312.2" y="766.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1309.2" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1312.2" y="750.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1309.2" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1312.2" y="734.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.03%)</title><rect x="1309.2" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1312.2" y="718.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1309.6" y="899.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1312.6" y="910.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1309.6" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1312.6" y="894.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.03%)</title><rect x="1309.6" y="867.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1312.6" y="878.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1310.1" y="979.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1313.1" y="990.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1310.1" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1313.1" y="974.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.03%)</title><rect x="1310.1" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1313.1" y="958.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (2 samples, 0.06%)</title><rect x="1310.5" y="1027.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1313.5" y="1038.0"></text>
</g>
<g>
<title>Invoke::state_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1310.5" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1313.5" y="1022.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1310.5" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1313.5" y="1006.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1311.0" y="1011.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1314.0" y="1022.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.03%)</title><rect x="1311.0" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1314.0" y="1006.0"></text>
</g>
<g>
<title>StoreField::input_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1311.4" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1314.4" y="1070.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1311.9" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1314.9" y="1070.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1311.9" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1314.9" y="1054.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1312.3" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1315.3" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1312.3" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1315.3" y="1086.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1312.3" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1315.3" y="1070.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.03%)</title><rect x="1312.3" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1315.3" y="1054.0"></text>
</g>
<g>
<title>GlobalValueNumbering::substitute(Instruction*) (4 samples, 0.11%)</title><rect x="1312.7" y="1123.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1315.7" y="1134.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (3 samples, 0.08%)</title><rect x="1313.2" y="1107.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1316.2" y="1118.0"></text>
</g>
<g>
<title>Constant::is_equal(Instruction*) const (1 samples, 0.03%)</title><rect x="1314.1" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1317.1" y="1102.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1314.5" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1317.5" y="1134.0"></text>
</g>
<g>
<title>ValueMap::kill_memory() (1 samples, 0.03%)</title><rect x="1314.9" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1317.9" y="1134.0"></text>
</g>
<g>
<title>Instruction::as_LoadIndexed() (1 samples, 0.03%)</title><rect x="1314.9" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1317.9" y="1118.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (150 samples, 4.20%)</title><rect x="1315.4" y="1139.0" width="66.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1318.4" y="1150.0">IR::IR(..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (148 samples, 4.14%)</title><rect x="1315.8" y="1123.0" width="65.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1318.8" y="1134.0">IRScope..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (146 samples, 4.09%)</title><rect x="1315.8" y="1107.0" width="64.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1318.8" y="1118.0">GraphBu..</text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.03%)</title><rect x="1315.8" y="1091.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1318.8" y="1102.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1315.8" y="1075.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1318.8" y="1086.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1315.8" y="1059.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1318.8" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::raw_at_put_grow(int, Instruction* const&amp;, Instruction* const&amp;) (1 samples, 0.03%)</title><rect x="1315.8" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1318.8" y="1054.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (11 samples, 0.31%)</title><rect x="1316.3" y="1091.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1319.3" y="1102.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.03%)</title><rect x="1316.3" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1319.3" y="1086.0"></text>
</g>
<g>
<title>BlockListBuilder::set_entries(int) (1 samples, 0.03%)</title><rect x="1316.7" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1319.7" y="1086.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.03%)</title><rect x="1316.7" y="1059.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1319.7" y="1070.0"></text>
</g>
<g>
<title>ResourceBitMap::initialize(unsigned long) (1 samples, 0.03%)</title><rect x="1316.7" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1319.7" y="1054.0"></text>
</g>
<g>
<title>unsigned long* BitMap::reallocate&lt;ResourceBitMapAllocator&gt;(ResourceBitMapAllocator const&amp;, unsigned long*, unsigned long, unsigned long, bool) (1 samples, 0.03%)</title><rect x="1316.7" y="1027.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1319.7" y="1038.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1316.7" y="1011.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1319.7" y="1022.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (7 samples, 0.20%)</title><rect x="1317.2" y="1075.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1320.2" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="1317.2" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1320.2" y="1070.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (6 samples, 0.17%)</title><rect x="1317.6" y="1059.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1320.6" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (6 samples, 0.17%)</title><rect x="1317.6" y="1043.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1320.6" y="1054.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (4 samples, 0.11%)</title><rect x="1317.6" y="1027.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1320.6" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.03%)</title><rect x="1317.6" y="1011.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1320.6" y="1022.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.03%)</title><rect x="1317.6" y="995.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1320.6" y="1006.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1317.6" y="979.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1320.6" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (3 samples, 0.08%)</title><rect x="1318.0" y="1011.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1321.0" y="1022.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (3 samples, 0.08%)</title><rect x="1318.0" y="995.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1321.0" y="1006.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1318.0" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1321.0" y="990.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1318.0" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1321.0" y="974.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (2 samples, 0.06%)</title><rect x="1318.5" y="979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1321.5" y="990.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_block_at(int) (1 samples, 0.03%)</title><rect x="1318.9" y="963.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1321.9" y="974.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.03%)</title><rect x="1319.4" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1322.4" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.03%)</title><rect x="1319.4" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1322.4" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1319.4" y="995.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1322.4" y="1006.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1319.4" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1322.4" y="990.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.03%)</title><rect x="1319.8" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1322.8" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.03%)</title><rect x="1319.8" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1322.8" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, int, BlockBegin* const&amp;, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1320.3" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1323.3" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, int, int const&amp;, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1320.7" y="1075.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1323.7" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::ScopeData::add_to_work_list(BlockBegin*) (1 samples, 0.03%)</title><rect x="1321.1" y="1091.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1324.1" y="1102.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1321.1" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1324.1" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (129 samples, 3.61%)</title><rect x="1321.6" y="1091.0" width="57.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1324.6" y="1102.0">GraphB..</text>
</g>
<g>
<title>GraphBuilder::connect_to_end(BlockBegin*) (2 samples, 0.06%)</title><rect x="1321.6" y="1075.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1324.6" y="1086.0"></text>
</g>
<g>
<title>ValueStack::copy_for_parsing() (2 samples, 0.06%)</title><rect x="1321.6" y="1059.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1324.6" y="1070.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.03%)</title><rect x="1321.6" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1324.6" y="1054.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1322.0" y="1043.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1325.0" y="1054.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1322.0" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1325.0" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (127 samples, 3.55%)</title><rect x="1322.5" y="1075.0" width="56.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1325.5" y="1086.0">GraphB..</text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (2 samples, 0.06%)</title><rect x="1322.9" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1325.9" y="1070.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1322.9" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1325.9" y="1054.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1322.9" y="1027.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1325.9" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::appendAll(GrowableArray&lt;Instruction*&gt; const*) (1 samples, 0.03%)</title><rect x="1322.9" y="1011.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1325.9" y="1022.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1323.4" y="1043.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1326.4" y="1054.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1323.4" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1326.4" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1323.4" y="1011.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1326.4" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1323.4" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1326.4" y="1006.0"></text>
</g>
<g>
<title>BitMap::set_from(BitMap const&amp;) (1 samples, 0.03%)</title><rect x="1323.4" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1326.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (20 samples, 0.56%)</title><rect x="1323.8" y="1059.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1326.8" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1323.8" y="1043.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1326.8" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (19 samples, 0.53%)</title><rect x="1324.2" y="1043.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1327.2" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (14 samples, 0.39%)</title><rect x="1324.2" y="1027.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1327.2" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (13 samples, 0.36%)</title><rect x="1324.7" y="1011.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1327.7" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1324.7" y="995.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1327.7" y="1006.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (12 samples, 0.34%)</title><rect x="1325.1" y="995.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1328.1" y="1006.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="1325.1" y="979.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1328.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1325.6" y="979.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1328.6" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1325.6" y="963.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1328.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (6 samples, 0.17%)</title><rect x="1326.0" y="979.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1329.0" y="990.0"></text>
</g>
<g>
<title>ConstantPool::tag_at(int) const (1 samples, 0.03%)</title><rect x="1326.4" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1329.4" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (3 samples, 0.08%)</title><rect x="1326.9" y="963.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1329.9" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1327.3" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1330.3" y="958.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1327.3" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1330.3" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1327.3" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1330.3" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1327.3" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1330.3" y="910.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="1327.3" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1330.3" y="894.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="1327.3" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1330.3" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="1327.8" y="947.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1330.8" y="958.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1327.8" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1330.8" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.03%)</title><rect x="1328.2" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1331.2" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (4 samples, 0.11%)</title><rect x="1328.7" y="979.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1331.7" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1329.1" y="963.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1332.1" y="974.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (2 samples, 0.06%)</title><rect x="1329.5" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1332.5" y="974.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (5 samples, 0.14%)</title><rect x="1330.4" y="1027.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1333.4" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (4 samples, 0.11%)</title><rect x="1330.9" y="1011.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1333.9" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (4 samples, 0.11%)</title><rect x="1330.9" y="995.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1333.9" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (4 samples, 0.11%)</title><rect x="1330.9" y="979.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1333.9" y="990.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (4 samples, 0.11%)</title><rect x="1330.9" y="963.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1333.9" y="974.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (3 samples, 0.08%)</title><rect x="1330.9" y="947.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1333.9" y="958.0"></text>
</g>
<g>
<title>AccessFlags::set_flags(int) (1 samples, 0.03%)</title><rect x="1330.9" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1333.9" y="942.0"></text>
</g>
<g>
<title>FieldStreamBase::init_generic_signature_start_slot() (2 samples, 0.06%)</title><rect x="1331.3" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1334.3" y="942.0"></text>
</g>
<g>
<title>AccessFlags::field_has_generic_signature() const (1 samples, 0.03%)</title><rect x="1331.8" y="915.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1334.8" y="926.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.03%)</title><rect x="1332.2" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1335.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1332.6" y="1059.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1335.6" y="1070.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1332.6" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1335.6" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::arithmetic_op(ValueType*, Bytecodes::Code, ValueStack*) (1 samples, 0.03%)</title><rect x="1333.1" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1336.1" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1333.1" y="1043.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1336.1" y="1054.0"></text>
</g>
<g>
<title>ArithmeticOp::hash() const (1 samples, 0.03%)</title><rect x="1333.1" y="1027.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1336.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::if_null(ValueType*, Instruction::Condition) (1 samples, 0.03%)</title><rect x="1333.5" y="1059.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1336.5" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1333.5" y="1043.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1336.5" y="1054.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1333.5" y="1027.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1336.5" y="1038.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1333.5" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1336.5" y="1022.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1333.5" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1336.5" y="1006.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1333.5" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1336.5" y="990.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.03%)</title><rect x="1333.5" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1336.5" y="974.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1333.5" y="947.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1336.5" y="958.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1333.5" y="931.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1336.5" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::if_zero(ValueType*, Instruction::Condition) (1 samples, 0.03%)</title><rect x="1334.0" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1337.0" y="1070.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1334.0" y="1043.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1337.0" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::increment() (1 samples, 0.03%)</title><rect x="1334.4" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1337.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1334.4" y="1043.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1337.4" y="1054.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1334.4" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1337.4" y="1038.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1334.4" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1337.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (92 samples, 2.57%)</title><rect x="1334.8" y="1059.0" width="40.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1337.8" y="1070.0">Gra..</text>
</g>
<g>
<title>Compilation::dependency_recorder() const (1 samples, 0.03%)</title><rect x="1335.3" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1338.3" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (71 samples, 1.99%)</title><rect x="1335.7" y="1043.0" width="31.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1338.7" y="1054.0">Gr..</text>
</g>
<g>
<title>DirectiveSet::should_not_inline(ciMethod*) (1 samples, 0.03%)</title><rect x="1335.7" y="1027.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1338.7" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.03%)</title><rect x="1336.2" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1339.2" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (69 samples, 1.93%)</title><rect x="1336.6" y="1027.0" width="30.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1339.6" y="1038.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (54 samples, 1.51%)</title><rect x="1336.6" y="1011.0" width="23.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1339.6" y="1022.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (54 samples, 1.51%)</title><rect x="1336.6" y="995.0" width="23.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1339.6" y="1006.0">G..</text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (5 samples, 0.14%)</title><rect x="1336.6" y="979.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1339.6" y="990.0"></text>
</g>
<g>
<title>MemoryBuffer::load(LoadField*) (1 samples, 0.03%)</title><rect x="1336.6" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1339.6" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::at_grow(int, Instruction* const&amp;) (1 samples, 0.03%)</title><rect x="1336.6" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1339.6" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (3 samples, 0.08%)</title><rect x="1337.1" y="963.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1340.1" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (3 samples, 0.08%)</title><rect x="1337.1" y="947.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1340.1" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (3 samples, 0.08%)</title><rect x="1337.1" y="931.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1340.1" y="942.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (3 samples, 0.08%)</title><rect x="1337.1" y="915.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1340.1" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1337.5" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1340.5" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1337.5" y="883.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1340.5" y="894.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1337.5" y="867.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1340.5" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1337.5" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1340.5" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1337.5" y="835.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1340.5" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1337.5" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1340.5" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="1337.9" y="899.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1340.9" y="910.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="1337.9" y="883.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1340.9" y="894.0"></text>
</g>
<g>
<title>ciField::constant_value() (1 samples, 0.03%)</title><rect x="1338.4" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1341.4" y="974.0"></text>
</g>
<g>
<title>ciInstance::field_value_impl(BasicType, int) (1 samples, 0.03%)</title><rect x="1338.4" y="947.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1341.4" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.03%)</title><rect x="1338.4" y="931.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1341.4" y="942.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1338.4" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1341.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1338.8" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1341.8" y="990.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1338.8" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1341.8" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (47 samples, 1.32%)</title><rect x="1339.3" y="979.0" width="20.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1342.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (2 samples, 0.06%)</title><rect x="1339.3" y="963.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1342.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.03%)</title><rect x="1339.3" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1342.3" y="958.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1339.3" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1342.3" y="942.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1339.7" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1342.7" y="958.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1339.7" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1342.7" y="942.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1339.7" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1342.7" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1339.7" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1342.7" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (34 samples, 0.95%)</title><rect x="1340.2" y="963.0" width="15.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1343.2" y="974.0"></text>
</g>
<g>
<title>DirectiveSet::should_not_inline(ciMethod*) (1 samples, 0.03%)</title><rect x="1340.2" y="947.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1343.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (32 samples, 0.90%)</title><rect x="1340.6" y="947.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1343.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (27 samples, 0.76%)</title><rect x="1340.6" y="931.0" width="11.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1343.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::connect_to_end(BlockBegin*) (1 samples, 0.03%)</title><rect x="1340.6" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1343.6" y="926.0"></text>
</g>
<g>
<title>ValueStack::copy_for_parsing() (1 samples, 0.03%)</title><rect x="1340.6" y="899.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1343.6" y="910.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1340.6" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1343.6" y="894.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1340.6" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1343.6" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1340.6" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1343.6" y="862.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1340.6" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1343.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (25 samples, 0.70%)</title><rect x="1341.0" y="915.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1344.0" y="926.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.03%)</title><rect x="1341.0" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1344.0" y="910.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1341.0" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1344.0" y="894.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1341.0" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1344.0" y="878.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1341.0" y="851.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1344.0" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1341.0" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1344.0" y="846.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap const&amp;) (1 samples, 0.03%)</title><rect x="1341.0" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1344.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (5 samples, 0.14%)</title><rect x="1341.5" y="899.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1344.5" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::make_constant(ciConstant, ciField*) (1 samples, 0.03%)</title><rect x="1341.5" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1344.5" y="894.0"></text>
</g>
<g>
<title>MemoryBuffer::load(LoadField*) (2 samples, 0.06%)</title><rect x="1341.9" y="883.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1344.9" y="894.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::at_grow(int, Instruction* const&amp;) (2 samples, 0.06%)</title><rect x="1341.9" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1344.9" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::grow(int) (2 samples, 0.06%)</title><rect x="1341.9" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1344.9" y="862.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1342.4" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1345.4" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.06%)</title><rect x="1342.8" y="883.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1345.8" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.06%)</title><rect x="1342.8" y="867.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1345.8" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.06%)</title><rect x="1342.8" y="851.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1345.8" y="862.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.06%)</title><rect x="1342.8" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1345.8" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1342.8" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1345.8" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1342.8" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1345.8" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1342.8" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1345.8" y="798.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1342.8" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1345.8" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1342.8" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1345.8" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1342.8" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1345.8" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1342.8" y="723.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1345.8" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="1343.2" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1346.2" y="830.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="1343.2" y="803.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1346.2" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (19 samples, 0.53%)</title><rect x="1343.7" y="899.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1346.7" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1343.7" y="883.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1346.7" y="894.0"></text>
</g>
<g>
<title>Instruction::can_trap() const (1 samples, 0.03%)</title><rect x="1343.7" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1346.7" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (14 samples, 0.39%)</title><rect x="1344.1" y="883.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1347.1" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (14 samples, 0.39%)</title><rect x="1344.1" y="867.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1347.1" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (12 samples, 0.34%)</title><rect x="1344.1" y="851.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1347.1" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (12 samples, 0.34%)</title><rect x="1344.1" y="835.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1347.1" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.06%)</title><rect x="1344.1" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1347.1" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.06%)</title><rect x="1344.1" y="803.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1347.1" y="814.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1344.1" y="787.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1347.1" y="798.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1344.6" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1347.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.03%)</title><rect x="1344.6" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1347.6" y="782.0"></text>
</g>
<g>
<title>stringStream::stringStream(unsigned long) (1 samples, 0.03%)</title><rect x="1344.6" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1347.6" y="766.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1344.6" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1347.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (2 samples, 0.06%)</title><rect x="1345.0" y="819.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1348.0" y="830.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1345.0" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1348.0" y="814.0"></text>
</g>
<g>
<title>Constant::hash() const (1 samples, 0.03%)</title><rect x="1345.0" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1348.0" y="798.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1345.5" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1348.5" y="814.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1345.5" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1348.5" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1345.5" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1348.5" y="782.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1345.5" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1348.5" y="766.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1345.5" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1348.5" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.03%)</title><rect x="1345.9" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1348.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1345.9" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1348.9" y="814.0"></text>
</g>
<g>
<title>Canonicalizer::do_If(If*) (1 samples, 0.03%)</title><rect x="1345.9" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1348.9" y="798.0"></text>
</g>
<g>
<title>Constant::compare(Instruction::Condition, Instruction*, BlockBegin*, BlockBegin*) const (1 samples, 0.03%)</title><rect x="1345.9" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1348.9" y="782.0"></text>
</g>
<g>
<title>IntType::base() const (1 samples, 0.03%)</title><rect x="1345.9" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1348.9" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.17%)</title><rect x="1346.3" y="819.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1349.3" y="830.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.03%)</title><rect x="1346.3" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1349.3" y="814.0"></text>
</g>
<g>
<title>Dependencies::note_dep_seen(int, ciBaseObject*) (1 samples, 0.03%)</title><rect x="1346.3" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1349.3" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.03%)</title><rect x="1346.3" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1349.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.08%)</title><rect x="1346.8" y="803.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1349.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.08%)</title><rect x="1346.8" y="787.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1349.8" y="798.0"></text>
</g>
<g>
<title>DirectiveSet::should_inline(ciMethod*) (1 samples, 0.03%)</title><rect x="1346.8" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1349.8" y="782.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1346.8" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1349.8" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="1347.2" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1350.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="1347.2" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1350.2" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1347.2" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1350.2" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1347.2" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1350.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1347.2" y="707.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1350.2" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1347.2" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1350.2" y="702.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1347.2" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1350.2" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1347.2" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1350.2" y="670.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.03%)</title><rect x="1347.2" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1350.2" y="654.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1347.7" y="771.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1350.7" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.06%)</title><rect x="1348.1" y="803.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1351.1" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.06%)</title><rect x="1348.1" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1351.1" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.06%)</title><rect x="1348.1" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1351.1" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.06%)</title><rect x="1348.1" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1351.1" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1348.1" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1351.1" y="750.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1348.1" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1351.1" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1348.1" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1351.1" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1348.1" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1351.1" y="702.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="1348.1" y="675.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1351.1" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1348.6" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1351.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::logic_op(ValueType*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1349.0" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1352.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1349.0" y="803.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1352.0" y="814.0"></text>
</g>
<g>
<title>IntConstant::is_constant() const (1 samples, 0.03%)</title><rect x="1349.0" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1352.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1349.4" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1352.4" y="862.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.03%)</title><rect x="1349.4" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1352.4" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.03%)</title><rect x="1349.4" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1352.4" y="830.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.03%)</title><rect x="1349.4" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1352.4" y="814.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.03%)</title><rect x="1349.4" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1352.4" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.03%)</title><rect x="1349.4" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1352.4" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.03%)</title><rect x="1349.4" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1352.4" y="766.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.03%)</title><rect x="1349.4" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1352.4" y="750.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1349.4" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1352.4" y="734.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.03%)</title><rect x="1349.9" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1352.9" y="862.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="1349.9" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1352.9" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1349.9" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1352.9" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1349.9" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1352.9" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1349.9" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1352.9" y="798.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1349.9" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1352.9" y="782.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1349.9" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1352.9" y="766.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.03%)</title><rect x="1349.9" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1352.9" y="750.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="1349.9" y="723.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1352.9" y="734.0"></text>
</g>
<g>
<title>Invoke::Invoke(Bytecodes::Code, ValueType*, Instruction*, GrowableArray&lt;Instruction*&gt;*, int, ciMethod*, ValueStack*) (1 samples, 0.03%)</title><rect x="1350.3" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1353.3" y="894.0"></text>
</g>
<g>
<title>Invoke::visit(InstructionVisitor*) (1 samples, 0.03%)</title><rect x="1350.8" y="883.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1353.8" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1351.2" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1354.2" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1351.2" y="867.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1354.2" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1351.2" y="851.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1354.2" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1351.2" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1354.2" y="846.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1351.2" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1354.2" y="830.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1351.2" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1354.2" y="814.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="1351.2" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1354.2" y="798.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="1351.2" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1354.2" y="782.0"></text>
</g>
<g>
<title>ciInstanceKlass::implementor() (1 samples, 0.03%)</title><rect x="1351.7" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1354.7" y="894.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1351.7" y="867.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1354.7" y="878.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="1351.7" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1354.7" y="862.0"></text>
</g>
<g>
<title>ValueMap::kill_all() (1 samples, 0.03%)</title><rect x="1352.1" y="915.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1355.1" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (3 samples, 0.08%)</title><rect x="1352.5" y="931.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1355.5" y="942.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (2 samples, 0.06%)</title><rect x="1352.5" y="915.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1355.5" y="926.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (2 samples, 0.06%)</title><rect x="1352.5" y="899.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1355.5" y="910.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.03%)</title><rect x="1352.5" y="883.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1355.5" y="894.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.03%)</title><rect x="1352.5" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1355.5" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1352.5" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1355.5" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1352.5" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1355.5" y="846.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1352.5" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1355.5" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="1353.0" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1356.0" y="894.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1353.4" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1356.4" y="926.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1353.4" y="899.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1356.4" y="910.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1353.4" y="883.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1356.4" y="894.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1353.4" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1356.4" y="878.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1353.4" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1356.4" y="862.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (2 samples, 0.06%)</title><rect x="1353.9" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1356.9" y="942.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (2 samples, 0.06%)</title><rect x="1353.9" y="915.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1356.9" y="926.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (2 samples, 0.06%)</title><rect x="1353.9" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1356.9" y="910.0"></text>
</g>
<g>
<title>DataLayout::data_in() (2 samples, 0.06%)</title><rect x="1353.9" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1356.9" y="894.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1353.9" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1356.9" y="878.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1354.3" y="867.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1357.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_intrinsics(ciMethod*, bool) (1 samples, 0.03%)</title><rect x="1354.7" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1357.7" y="958.0"></text>
</g>
<g>
<title>AbstractCompiler::is_intrinsic_available(methodHandle const&amp;, DirectiveSet*) (1 samples, 0.03%)</title><rect x="1354.7" y="931.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1357.7" y="942.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.03%)</title><rect x="1354.7" y="915.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1357.7" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.03%)</title><rect x="1355.2" y="963.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1358.2" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1355.2" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1358.2" y="958.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="1355.2" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1358.2" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1355.2" y="915.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1358.2" y="926.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="1355.2" y="899.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1358.2" y="910.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="1355.2" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1358.2" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (7 samples, 0.20%)</title><rect x="1355.6" y="963.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1358.6" y="974.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.06%)</title><rect x="1355.6" y="947.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1358.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (5 samples, 0.14%)</title><rect x="1356.5" y="947.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1359.5" y="958.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.06%)</title><rect x="1356.5" y="931.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1359.5" y="942.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1356.5" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1359.5" y="926.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1356.5" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1359.5" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1356.5" y="883.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1359.5" y="894.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="1356.5" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1359.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1356.5" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1359.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1356.5" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1359.5" y="846.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="1356.5" y="819.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1359.5" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1357.0" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1360.0" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="1357.0" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1360.0" y="910.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1357.0" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1360.0" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1357.0" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1360.0" y="878.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="1357.0" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1360.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1357.0" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1360.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1357.0" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1360.0" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (3 samples, 0.08%)</title><rect x="1357.4" y="931.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1360.4" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (3 samples, 0.08%)</title><rect x="1357.4" y="915.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1360.4" y="926.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (3 samples, 0.08%)</title><rect x="1357.4" y="899.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1360.4" y="910.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1357.4" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1360.4" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1357.4" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1360.4" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1357.4" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1360.4" y="862.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (2 samples, 0.06%)</title><rect x="1357.8" y="883.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1360.8" y="894.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="1357.8" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1360.8" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="1357.8" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1360.8" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="1357.8" y="835.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1360.8" y="846.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="1357.8" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1360.8" y="830.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="1358.3" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1361.3" y="878.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="1358.3" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1361.3" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::exact_klass() (1 samples, 0.03%)</title><rect x="1358.7" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1361.7" y="974.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.03%)</title><rect x="1359.2" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1362.2" y="974.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.03%)</title><rect x="1359.6" y="963.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1362.6" y="974.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.03%)</title><rect x="1359.6" y="947.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1362.6" y="958.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.03%)</title><rect x="1359.6" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1362.6" y="942.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.03%)</title><rect x="1359.6" y="915.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1362.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1359.6" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1362.6" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1359.6" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1362.6" y="894.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="1359.6" y="867.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1362.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.03%)</title><rect x="1360.1" y="979.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1363.1" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1360.1" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1363.1" y="974.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1360.1" y="947.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1363.1" y="958.0"></text>
</g>
<g>
<title>LogicOp::hash() const (1 samples, 0.03%)</title><rect x="1360.1" y="931.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1363.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (6 samples, 0.17%)</title><rect x="1360.5" y="1011.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1363.5" y="1022.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (6 samples, 0.17%)</title><rect x="1360.5" y="995.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1363.5" y="1006.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.03%)</title><rect x="1360.5" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1363.5" y="990.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1360.5" y="963.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1363.5" y="974.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (4 samples, 0.11%)</title><rect x="1360.9" y="979.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1363.9" y="990.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.03%)</title><rect x="1360.9" y="963.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1363.9" y="974.0"></text>
</g>
<g>
<title>ResourceBitMap::initialize(unsigned long) (1 samples, 0.03%)</title><rect x="1360.9" y="947.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1363.9" y="958.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (3 samples, 0.08%)</title><rect x="1361.4" y="963.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1364.4" y="974.0"></text>
</g>
<g>
<title>MethodLiveness::MethodLiveness(Arena*, ciMethod*) (1 samples, 0.03%)</title><rect x="1361.4" y="947.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1364.4" y="958.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.03%)</title><rect x="1361.4" y="931.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1364.4" y="942.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1361.4" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1364.4" y="926.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (2 samples, 0.06%)</title><rect x="1361.8" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1364.8" y="958.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.03%)</title><rect x="1361.8" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1364.8" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.03%)</title><rect x="1361.8" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1364.8" y="926.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.03%)</title><rect x="1361.8" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1364.8" y="910.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.03%)</title><rect x="1361.8" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1364.8" y="894.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_block_at(int) (1 samples, 0.03%)</title><rect x="1361.8" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1364.8" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1361.8" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1364.8" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.03%)</title><rect x="1362.3" y="931.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1365.3" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.03%)</title><rect x="1362.3" y="915.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1365.3" y="926.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, int, BlockBegin* const&amp;, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1362.7" y="979.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1365.7" y="990.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1363.1" y="1011.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1366.1" y="1022.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1363.1" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1366.1" y="1006.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1363.1" y="979.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1366.1" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1363.1" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1366.1" y="974.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (7 samples, 0.20%)</title><rect x="1363.6" y="1011.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1366.6" y="1022.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (7 samples, 0.20%)</title><rect x="1363.6" y="995.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1366.6" y="1006.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (3 samples, 0.08%)</title><rect x="1363.6" y="979.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1366.6" y="990.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (2 samples, 0.06%)</title><rect x="1363.6" y="963.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1366.6" y="974.0"></text>
</g>
<g>
<title>MethodData::initialize() (2 samples, 0.06%)</title><rect x="1363.6" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1366.6" y="958.0"></text>
</g>
<g>
<title>MethodData::initialize_data(BytecodeStream*, int) (1 samples, 0.03%)</title><rect x="1363.6" y="931.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1366.6" y="942.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1364.0" y="931.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1367.0" y="942.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1364.5" y="963.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1367.5" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1364.5" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1367.5" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1364.5" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1367.5" y="942.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1364.5" y="915.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1367.5" y="926.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (3 samples, 0.08%)</title><rect x="1364.9" y="979.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1367.9" y="990.0"></text>
</g>
<g>
<title>DataLayout::data_in() (2 samples, 0.06%)</title><rect x="1364.9" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1367.9" y="974.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1364.9" y="947.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1367.9" y="958.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1365.4" y="947.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1368.4" y="958.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.03%)</title><rect x="1365.8" y="963.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1368.8" y="974.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1366.2" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1369.2" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1366.2" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1369.2" y="974.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.03%)</title><rect x="1366.2" y="947.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1369.2" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1366.2" y="931.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1369.2" y="942.0"></text>
</g>
<g>
<title>ciMethod::has_jsrs() const (1 samples, 0.03%)</title><rect x="1366.7" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1369.7" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1366.7" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1369.7" y="1006.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1366.7" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1369.7" y="990.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="1366.7" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1369.7" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.03%)</title><rect x="1367.1" y="1043.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1370.1" y="1054.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1367.1" y="1027.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1370.1" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (13 samples, 0.36%)</title><rect x="1367.6" y="1043.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1370.6" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1367.6" y="1027.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1370.6" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (12 samples, 0.34%)</title><rect x="1368.0" y="1027.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1371.0" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::insert_before(int, ciMetadata* const&amp;) (1 samples, 0.03%)</title><rect x="1368.0" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1371.0" y="1022.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (5 samples, 0.14%)</title><rect x="1368.5" y="1011.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1371.5" y="1022.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (3 samples, 0.08%)</title><rect x="1368.5" y="995.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1371.5" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (3 samples, 0.08%)</title><rect x="1368.5" y="979.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1371.5" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (3 samples, 0.08%)</title><rect x="1368.5" y="963.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1371.5" y="974.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="1368.5" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1371.5" y="958.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (2 samples, 0.06%)</title><rect x="1368.9" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1371.9" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.06%)</title><rect x="1368.9" y="931.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1371.9" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (2 samples, 0.06%)</title><rect x="1368.9" y="915.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1371.9" y="926.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="1369.3" y="899.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1372.3" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1369.8" y="995.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1372.8" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1369.8" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1372.8" y="990.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1369.8" y="963.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1372.8" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1370.2" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1373.2" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="1370.2" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1373.2" y="990.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1370.2" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1373.2" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1370.2" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1373.2" y="958.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="1370.2" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1373.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1370.2" y="915.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1373.2" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1370.2" y="899.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1373.2" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (6 samples, 0.17%)</title><rect x="1370.7" y="1011.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1373.7" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (6 samples, 0.17%)</title><rect x="1370.7" y="995.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1373.7" y="1006.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (6 samples, 0.17%)</title><rect x="1370.7" y="979.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1373.7" y="990.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1370.7" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1373.7" y="974.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="1370.7" y="947.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1373.7" y="958.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (5 samples, 0.14%)</title><rect x="1371.1" y="963.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1374.1" y="974.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.03%)</title><rect x="1371.1" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1374.1" y="958.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.03%)</title><rect x="1371.1" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1374.1" y="942.0"></text>
</g>
<g>
<title>SymbolTable::hash_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="1371.1" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1374.1" y="926.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="1371.6" y="947.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1374.6" y="958.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="1371.6" y="931.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1374.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (2 samples, 0.06%)</title><rect x="1372.0" y="947.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1375.0" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.06%)</title><rect x="1372.0" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1375.0" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="1372.9" y="947.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1375.9" y="958.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="1372.9" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1375.9" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_leaf_type() (1 samples, 0.03%)</title><rect x="1373.3" y="1043.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1376.3" y="1054.0"></text>
</g>
<g>
<title>ciInstanceKlass::implementor() (1 samples, 0.03%)</title><rect x="1373.3" y="1027.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1376.3" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1373.3" y="1011.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1376.3" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1373.3" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1376.3" y="1006.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1373.3" y="979.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1376.3" y="990.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (4 samples, 0.11%)</title><rect x="1373.8" y="1043.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1376.8" y="1054.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (3 samples, 0.08%)</title><rect x="1373.8" y="1027.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1376.8" y="1038.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (3 samples, 0.08%)</title><rect x="1373.8" y="1011.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1376.8" y="1022.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (3 samples, 0.08%)</title><rect x="1373.8" y="995.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1376.8" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (3 samples, 0.08%)</title><rect x="1373.8" y="979.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1376.8" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (3 samples, 0.08%)</title><rect x="1373.8" y="963.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1376.8" y="974.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (3 samples, 0.08%)</title><rect x="1373.8" y="947.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1376.8" y="958.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1375.1" y="1027.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1378.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::load_constant() (1 samples, 0.03%)</title><rect x="1375.5" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1378.5" y="1070.0"></text>
</g>
<g>
<title>Constant::visit(InstructionVisitor*) (1 samples, 0.03%)</title><rect x="1375.5" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1378.5" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::load_indexed(BasicType) (1 samples, 0.03%)</title><rect x="1376.0" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1379.0" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1376.0" y="1043.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1379.0" y="1054.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1376.0" y="1027.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1379.0" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.03%)</title><rect x="1376.4" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1379.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1376.4" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1379.4" y="1054.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.03%)</title><rect x="1376.4" y="1027.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1379.4" y="1038.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1376.4" y="1011.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1379.4" y="1022.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1376.4" y="995.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1379.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (2 samples, 0.06%)</title><rect x="1376.9" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1379.9" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.03%)</title><rect x="1376.9" y="1043.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1379.9" y="1054.0"></text>
</g>
<g>
<title>NewInstance::visit(InstructionVisitor*) (1 samples, 0.03%)</title><rect x="1376.9" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1379.9" y="1038.0"></text>
</g>
<g>
<title>NewInstance::visit(InstructionVisitor*) (1 samples, 0.03%)</title><rect x="1377.3" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1380.3" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_index_u2(bool) const (1 samples, 0.03%)</title><rect x="1377.7" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1380.7" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.03%)</title><rect x="1378.2" y="1059.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1381.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (2 samples, 0.06%)</title><rect x="1378.6" y="1091.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1381.6" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::header_block(BlockBegin*, BlockBegin::Flag, ValueStack*) (2 samples, 0.06%)</title><rect x="1378.6" y="1075.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1381.6" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1378.6" y="1059.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1381.6" y="1070.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1379.1" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1382.1" y="1070.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.03%)</title><rect x="1379.1" y="1043.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1382.1" y="1054.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1379.1" y="1027.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1382.1" y="1038.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (2 samples, 0.06%)</title><rect x="1379.5" y="1091.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1382.5" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (2 samples, 0.06%)</title><rect x="1379.5" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1382.5" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1379.5" y="1059.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1382.5" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1379.5" y="1043.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1382.5" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1379.5" y="1027.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1382.5" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.06%)</title><rect x="1379.5" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1382.5" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1383.0" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="979.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1383.0" y="990.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="963.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1383.0" y="974.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1383.0" y="958.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1383.0" y="942.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="915.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1383.0" y="926.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="899.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1383.0" y="910.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="883.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1383.0" y="894.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="867.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1383.0" y="878.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1383.0" y="862.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1383.0" y="846.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1383.0" y="830.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1383.0" y="814.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1383.0" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1383.0" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1383.0" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1383.0" y="750.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1380.0" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1383.0" y="734.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1380.0" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1383.0" y="718.0"></text>
</g>
<g>
<title>Invoke::state_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1380.0" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1383.0" y="702.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1380.0" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1383.0" y="686.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (2 samples, 0.06%)</title><rect x="1380.4" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1383.4" y="1118.0"></text>
</g>
<g>
<title>ciMethod::load_code() (2 samples, 0.06%)</title><rect x="1380.4" y="1091.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1383.4" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.06%)</title><rect x="1380.4" y="1075.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1383.4" y="1086.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long) (1 samples, 0.03%)</title><rect x="1381.3" y="1123.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1384.3" y="1134.0"></text>
</g>
<g>
<title>IR::compute_code() (3 samples, 0.08%)</title><rect x="1381.7" y="1139.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1384.7" y="1150.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (3 samples, 0.08%)</title><rect x="1381.7" y="1123.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1384.7" y="1134.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::assign_loop_depth(BlockBegin*) (1 samples, 0.03%)</title><rect x="1381.7" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1384.7" y="1118.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_order(BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.2" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1385.2" y="1118.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::sort_into_work_list(BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.2" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1385.2" y="1102.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1385.6" y="1118.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1385.6" y="1102.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1385.6" y="1086.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1059.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1385.6" y="1070.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1385.6" y="1054.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1027.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1385.6" y="1038.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="1011.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1385.6" y="1022.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1385.6" y="1006.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::count_edges(BlockBegin*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1382.6" y="979.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1385.6" y="990.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (7 samples, 0.20%)</title><rect x="1383.0" y="1139.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1386.0" y="1150.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (5 samples, 0.14%)</title><rect x="1383.5" y="1123.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1386.5" y="1134.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (5 samples, 0.14%)</title><rect x="1383.5" y="1107.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1386.5" y="1118.0"></text>
</g>
<g>
<title>UseCountComputer::uses_do(Instruction**) (2 samples, 0.06%)</title><rect x="1384.4" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1387.4" y="1102.0"></text>
</g>
<g>
<title>Invoke::input_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1384.4" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1387.4" y="1086.0"></text>
</g>
<g>
<title>Local::as_Local() (1 samples, 0.03%)</title><rect x="1384.4" y="1059.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1387.4" y="1070.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1384.8" y="1075.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1387.8" y="1086.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.03%)</title><rect x="1384.8" y="1059.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1387.8" y="1070.0"></text>
</g>
<g>
<title>UseCountComputer::visit(Instruction**) (1 samples, 0.03%)</title><rect x="1384.8" y="1043.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1387.8" y="1054.0"></text>
</g>
<g>
<title>UseCountComputer::visit(Instruction**) (1 samples, 0.03%)</title><rect x="1385.3" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1388.3" y="1102.0"></text>
</g>
<g>
<title>Instruction::as_Constant() (1 samples, 0.03%)</title><rect x="1385.7" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1388.7" y="1134.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (7 samples, 0.20%)</title><rect x="1386.1" y="1139.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1389.1" y="1150.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (7 samples, 0.20%)</title><rect x="1386.1" y="1123.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1389.1" y="1134.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_all() (6 samples, 0.17%)</title><rect x="1386.6" y="1107.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1389.6" y="1118.0"></text>
</g>
<g>
<title>AccessArray::input_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1387.0" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1390.0" y="1102.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (4 samples, 0.11%)</title><rect x="1387.5" y="1091.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1390.5" y="1102.0"></text>
</g>
<g>
<title>NullCheckEliminator::merge_state_for(BlockBegin*, ValueSet*) (1 samples, 0.03%)</title><rect x="1388.8" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1391.8" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1388.8" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1391.8" y="1070.0"></text>
</g>
<g>
<title>IR::optimize_blocks() (1 samples, 0.03%)</title><rect x="1389.2" y="1139.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1392.2" y="1150.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (6 samples, 0.17%)</title><rect x="1389.7" y="1139.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1392.7" y="1150.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (2 samples, 0.06%)</title><rect x="1389.7" y="1123.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1392.7" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1107.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1393.1" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1393.1" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1393.1" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1393.1" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1043.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1393.1" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1027.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1393.1" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1390.1" y="1011.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1393.1" y="1022.0"></text>
</g>
<g>
<title>CriticalEdgeFinder::split_edges() (4 samples, 0.11%)</title><rect x="1390.6" y="1123.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1393.6" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::insert_block_between(BlockBegin*) (2 samples, 0.06%)</title><rect x="1391.0" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1394.0" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.03%)</title><rect x="1391.0" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1394.0" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1391.0" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1394.0" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1391.0" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1394.0" y="1070.0"></text>
</g>
<g>
<title>Goto::Goto(BlockBegin*, bool) (1 samples, 0.03%)</title><rect x="1391.4" y="1091.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1394.4" y="1102.0"></text>
</g>
<g>
<title>BlockEnd::BlockEnd(ValueType*, ValueStack*, bool) (1 samples, 0.03%)</title><rect x="1391.4" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1394.4" y="1086.0"></text>
</g>
<g>
<title>Instruction::update_exception_state(ValueStack*) (1 samples, 0.03%)</title><rect x="1391.4" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1394.4" y="1070.0"></text>
</g>
<g>
<title>heapsort (1 samples, 0.03%)</title><rect x="1391.9" y="1107.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1394.9" y="1118.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (68 samples, 1.90%)</title><rect x="1392.3" y="1155.0" width="30.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1395.3" y="1166.0">Co..</text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (25 samples, 0.70%)</title><rect x="1392.3" y="1139.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1395.3" y="1150.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1392.3" y="1123.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1395.3" y="1134.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (5 samples, 0.14%)</title><rect x="1392.8" y="1123.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1395.8" y="1134.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (4 samples, 0.11%)</title><rect x="1393.2" y="1107.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1396.2" y="1118.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.03%)</title><rect x="1393.2" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1396.2" y="1102.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.03%)</title><rect x="1393.2" y="1075.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1396.2" y="1086.0"></text>
</g>
<g>
<title>Assembler::pusha() (3 samples, 0.08%)</title><rect x="1393.7" y="1091.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1396.7" y="1102.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="1394.5" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1397.5" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (18 samples, 0.50%)</title><rect x="1395.0" y="1123.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1398.0" y="1134.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (14 samples, 0.39%)</title><rect x="1395.0" y="1107.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1398.0" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (14 samples, 0.39%)</title><rect x="1395.0" y="1091.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1398.0" y="1102.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (14 samples, 0.39%)</title><rect x="1395.0" y="1075.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1398.0" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_safepoint(int, OopMap*) (1 samples, 0.03%)</title><rect x="1395.0" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1398.0" y="1070.0"></text>
</g>
<g>
<title>OopMapSet::add_gc_map(int, OopMap*) (1 samples, 0.03%)</title><rect x="1395.0" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1398.0" y="1054.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1395.0" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1398.0" y="1038.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (11 samples, 0.31%)</title><rect x="1395.4" y="1059.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1398.4" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1395.9" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1398.9" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.11%)</title><rect x="1396.3" y="1043.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1399.3" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.11%)</title><rect x="1396.3" y="1027.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1399.3" y="1038.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (4 samples, 0.11%)</title><rect x="1396.3" y="1011.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1399.3" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::insert_before(int, DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="1396.3" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1399.3" y="1006.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (3 samples, 0.08%)</title><rect x="1396.8" y="995.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1399.8" y="1006.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (2 samples, 0.06%)</title><rect x="1397.2" y="979.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1400.2" y="990.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (4 samples, 0.11%)</title><rect x="1398.1" y="1043.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1401.1" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1398.1" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1401.1" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1398.1" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1401.1" y="1022.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1398.1" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1401.1" y="1006.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.03%)</title><rect x="1398.1" y="979.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1401.1" y="990.0"></text>
</g>
<g>
<title>CompressedWriteStream::write(unsigned char) (1 samples, 0.03%)</title><rect x="1398.1" y="963.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1401.1" y="974.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (3 samples, 0.08%)</title><rect x="1398.5" y="1027.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1401.5" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.06%)</title><rect x="1398.5" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1401.5" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.06%)</title><rect x="1398.5" y="995.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1401.5" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1399.0" y="979.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1402.0" y="990.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="1399.0" y="963.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1402.0" y="974.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.03%)</title><rect x="1399.0" y="947.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1402.0" y="958.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="1399.0" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1402.0" y="942.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1399.4" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1402.4" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1399.4" y="995.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1402.4" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1399.4" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1402.4" y="990.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1399.4" y="963.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1402.4" y="974.0"></text>
</g>
<g>
<title>CompressedWriteStream::write(unsigned char) (1 samples, 0.03%)</title><rect x="1399.4" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1402.4" y="958.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::should_reexecute() (1 samples, 0.03%)</title><rect x="1399.9" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1402.9" y="1054.0"></text>
</g>
<g>
<title>ciMethod::java_code_at_bci(int) (1 samples, 0.03%)</title><rect x="1399.9" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1402.9" y="1038.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (2 samples, 0.06%)</title><rect x="1400.3" y="1059.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1403.3" y="1070.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (2 samples, 0.06%)</title><rect x="1400.3" y="1043.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1403.3" y="1054.0"></text>
</g>
<g>
<title>CompressedWriteStream::CompressedWriteStream(int) (1 samples, 0.03%)</title><rect x="1400.3" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1403.3" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1400.7" y="1027.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1403.7" y="1038.0"></text>
</g>
<g>
<title>G1BarrierSetAssembler::gen_post_barrier_stub(LIR_Assembler*, G1PostBarrierStub*) (1 samples, 0.03%)</title><rect x="1401.2" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1404.2" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::store_parameter(RegisterImpl*, int) (1 samples, 0.03%)</title><rect x="1401.2" y="1091.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1404.2" y="1102.0"></text>
</g>
<g>
<title>MacroAssembler::movptr(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="1401.2" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1404.2" y="1086.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="1401.2" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1404.2" y="1070.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1401.6" y="1107.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1404.6" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1401.6" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1404.6" y="1102.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.03%)</title><rect x="1401.6" y="1075.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1404.6" y="1086.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1401.6" y="1059.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1404.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="1401.6" y="1043.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1404.6" y="1054.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::find_index(Metadata*) (1 samples, 0.03%)</title><rect x="1401.6" y="1027.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1404.6" y="1038.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.03%)</title><rect x="1401.6" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1404.6" y="1022.0"></text>
</g>
<g>
<title>NewObjectArrayStub::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1402.1" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1405.1" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1402.1" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1405.1" y="1102.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.03%)</title><rect x="1402.1" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1405.1" y="1086.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1402.1" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1405.1" y="1070.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1402.1" y="1043.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1405.1" y="1054.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1402.1" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1405.1" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="1402.1" y="1011.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1405.1" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1402.1" y="995.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1405.1" y="1006.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="1402.1" y="979.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1405.1" y="990.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.03%)</title><rect x="1402.1" y="963.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1405.1" y="974.0"></text>
</g>
<g>
<title>RangeCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1402.5" y="1107.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1405.5" y="1118.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1402.5" y="1091.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1405.5" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_unwind_handler() (1 samples, 0.03%)</title><rect x="1402.9" y="1123.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1405.9" y="1134.0"></text>
</g>
<g>
<title>C1_MacroAssembler::remove_frame(int) (1 samples, 0.03%)</title><rect x="1402.9" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1405.9" y="1118.0"></text>
</g>
<g>
<title>Assembler::emit_arith(int, int, RegisterImpl*, int) (1 samples, 0.03%)</title><rect x="1402.9" y="1091.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1405.9" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (43 samples, 1.20%)</title><rect x="1403.4" y="1139.0" width="19.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1406.4" y="1150.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (41 samples, 1.15%)</title><rect x="1403.4" y="1123.0" width="18.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1406.4" y="1134.0"></text>
</g>
<g>
<title>Assembler::cmovq(Assembler::Condition, RegisterImpl*, RegisterImpl*) (1 samples, 0.03%)</title><rect x="1404.3" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1407.3" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (10 samples, 0.28%)</title><rect x="1404.7" y="1107.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1407.7" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1405.2" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1408.2" y="1102.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.03%)</title><rect x="1405.2" y="1075.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1408.2" y="1086.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1405.2" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1408.2" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1405.2" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1408.2" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1405.2" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1408.2" y="1038.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1405.2" y="1011.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1408.2" y="1022.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.03%)</title><rect x="1405.2" y="995.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1408.2" y="1006.0"></text>
</g>
<g>
<title>CompressedWriteStream::write(unsigned char) (1 samples, 0.03%)</title><rect x="1405.2" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1408.2" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (8 samples, 0.22%)</title><rect x="1405.6" y="1091.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1408.6" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (8 samples, 0.22%)</title><rect x="1405.6" y="1075.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1408.6" y="1086.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (5 samples, 0.14%)</title><rect x="1405.6" y="1059.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1408.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_new_pc_offset(int) (1 samples, 0.03%)</title><rect x="1405.6" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1408.6" y="1054.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (4 samples, 0.11%)</title><rect x="1406.0" y="1043.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1409.0" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1406.0" y="1027.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1409.0" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1406.0" y="1011.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1409.0" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1406.0" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1409.0" y="1006.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (3 samples, 0.08%)</title><rect x="1406.5" y="1027.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1409.5" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.06%)</title><rect x="1406.5" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1409.5" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.06%)</title><rect x="1406.5" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1409.5" y="1006.0"></text>
</g>
<g>
<title>ConstantOopWriteValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1406.5" y="979.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1409.5" y="990.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::find_index(_jobject*) (1 samples, 0.03%)</title><rect x="1406.5" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1409.5" y="974.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_find_index(_jobject*) (1 samples, 0.03%)</title><rect x="1406.5" y="947.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1409.5" y="958.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_initialize() (1 samples, 0.03%)</title><rect x="1406.5" y="931.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1409.5" y="942.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1406.9" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1409.9" y="990.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int(int) (1 samples, 0.03%)</title><rect x="1406.9" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1409.9" y="974.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1407.4" y="1011.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1410.4" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1407.4" y="995.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1410.4" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1407.4" y="979.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1410.4" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (3 samples, 0.08%)</title><rect x="1407.8" y="1059.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1410.8" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="1408.3" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1411.3" y="1054.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::find_index(Metadata*) (1 samples, 0.03%)</title><rect x="1408.3" y="1027.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1411.3" y="1038.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.03%)</title><rect x="1408.3" y="1011.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1411.3" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::end_scopes(int, bool) (1 samples, 0.03%)</title><rect x="1408.7" y="1043.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1411.7" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::prev_pc() (1 samples, 0.03%)</title><rect x="1408.7" y="1027.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1411.7" y="1038.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op0(LIR_Op0*) (2 samples, 0.06%)</title><rect x="1409.1" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1412.1" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::check_icache() (1 samples, 0.03%)</title><rect x="1409.1" y="1091.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1412.1" y="1102.0"></text>
</g>
<g>
<title>os::extra_bang_size_in_bytes() (1 samples, 0.03%)</title><rect x="1409.6" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1412.6" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (4 samples, 0.11%)</title><rect x="1410.0" y="1107.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1413.0" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::const2mem(LIR_OprDesc*, LIR_OprDesc*, BasicType, CodeEmitInfo*, bool) (1 samples, 0.03%)</title><rect x="1410.0" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1413.0" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::move_op(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool, bool) (2 samples, 0.06%)</title><rect x="1410.5" y="1091.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1413.5" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (2 samples, 0.06%)</title><rect x="1410.5" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1413.5" y="1086.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.03%)</title><rect x="1410.5" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1413.5" y="1070.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.03%)</title><rect x="1410.5" y="1043.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1413.5" y="1054.0"></text>
</g>
<g>
<title>MacroAssembler::movptr(RegisterImpl*, Address) (1 samples, 0.03%)</title><rect x="1410.9" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1413.9" y="1070.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.03%)</title><rect x="1410.9" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1413.9" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::reg2reg(LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1411.3" y="1091.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1414.3" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op2(LIR_Op2*) (1 samples, 0.03%)</title><rect x="1411.8" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1414.8" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::arith_op(LIR_Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, bool) (1 samples, 0.03%)</title><rect x="1411.8" y="1091.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1414.8" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (5 samples, 0.14%)</title><rect x="1412.2" y="1107.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1415.2" y="1118.0"></text>
</g>
<g>
<title>Assembler::addq(Address, int) (2 samples, 0.06%)</title><rect x="1412.2" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1415.2" y="1102.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.03%)</title><rect x="1413.1" y="1091.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1416.1" y="1102.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.03%)</title><rect x="1413.1" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1416.1" y="1086.0"></text>
</g>
<g>
<title>metadata_Relocation::pack_data_to(CodeSection*) (1 samples, 0.03%)</title><rect x="1413.1" y="1059.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1416.1" y="1070.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (2 samples, 0.06%)</title><rect x="1413.6" y="1091.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1416.6" y="1102.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (2 samples, 0.06%)</title><rect x="1413.6" y="1075.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1416.6" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1414.0" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1417.0" y="1070.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1414.0" y="1043.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1417.0" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (12 samples, 0.34%)</title><rect x="1414.4" y="1107.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1417.4" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (9 samples, 0.25%)</title><rect x="1415.3" y="1091.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1418.3" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (8 samples, 0.22%)</title><rect x="1415.8" y="1075.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1418.8" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (5 samples, 0.14%)</title><rect x="1416.2" y="1059.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1419.2" y="1070.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (4 samples, 0.11%)</title><rect x="1416.7" y="1043.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1419.7" y="1054.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::insert_before(int, DIR_Chunk* const&amp;) (2 samples, 0.06%)</title><rect x="1416.7" y="1027.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1419.7" y="1038.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (2 samples, 0.06%)</title><rect x="1417.5" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1420.5" y="1038.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.03%)</title><rect x="1418.0" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1421.0" y="1022.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::find_index(Metadata*) (2 samples, 0.06%)</title><rect x="1418.4" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1421.4" y="1070.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (2 samples, 0.06%)</title><rect x="1418.4" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1421.4" y="1054.0"></text>
</g>
<g>
<title>StateSplit::as_StateSplit() (1 samples, 0.03%)</title><rect x="1419.3" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1422.3" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::return_op(LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1419.8" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1422.8" y="1118.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, relocInfo::relocType, int, int) (1 samples, 0.03%)</title><rect x="1419.8" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1422.8" y="1102.0"></text>
</g>
<g>
<title>Relocation::pack_data_to(CodeSection*) (1 samples, 0.03%)</title><rect x="1419.8" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1422.8" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::safepoint_poll(LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1420.2" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1423.2" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::add_debug_info_for_branch(CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1420.2" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1423.2" y="1102.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.03%)</title><rect x="1420.2" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1423.2" y="1086.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.03%)</title><rect x="1420.2" y="1059.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1423.2" y="1070.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.03%)</title><rect x="1420.2" y="1043.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1423.2" y="1054.0"></text>
</g>
<g>
<title>LIR_OpAllocObj::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1420.6" y="1107.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1423.6" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_alloc_obj(LIR_OpAllocObj*) (1 samples, 0.03%)</title><rect x="1420.6" y="1091.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1423.6" y="1102.0"></text>
</g>
<g>
<title>C1_MacroAssembler::allocate_object(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, int, RegisterImpl*, Label&amp;) (1 samples, 0.03%)</title><rect x="1420.6" y="1075.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1423.6" y="1086.0"></text>
</g>
<g>
<title>C1_MacroAssembler::try_allocate(RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&amp;) (1 samples, 0.03%)</title><rect x="1420.6" y="1059.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1423.6" y="1070.0"></text>
</g>
<g>
<title>MacroAssembler::tlab_allocate(RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&amp;) (1 samples, 0.03%)</title><rect x="1420.6" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1423.6" y="1054.0"></text>
</g>
<g>
<title>BarrierSetAssembler::tlab_allocate(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, int, RegisterImpl*, RegisterImpl*, Label&amp;) (1 samples, 0.03%)</title><rect x="1420.6" y="1027.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1423.6" y="1038.0"></text>
</g>
<g>
<title>MacroAssembler::movptr(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="1420.6" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1423.6" y="1022.0"></text>
</g>
<g>
<title>Assembler::prefixq(Address, RegisterImpl*) (1 samples, 0.03%)</title><rect x="1420.6" y="995.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1423.6" y="1006.0"></text>
</g>
<g>
<title>LIR_OpTypeCheck::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1421.1" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1424.1" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_opTypeCheck(LIR_OpTypeCheck*) (1 samples, 0.03%)</title><rect x="1421.1" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1424.1" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_typecheck_helper(LIR_OpTypeCheck*, Label*, Label*, Label*) (1 samples, 0.03%)</title><rect x="1421.1" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1424.1" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 0.03%)</title><rect x="1421.1" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1424.1" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::return_op(LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1421.5" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1424.5" y="1134.0"></text>
</g>
<g>
<title>LIR_Op2::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1422.0" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1425.0" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (153 samples, 4.28%)</title><rect x="1422.4" y="1155.0" width="67.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1425.4" y="1166.0">Compila..</text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (36 samples, 1.01%)</title><rect x="1422.4" y="1139.0" width="15.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1425.4" y="1150.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (36 samples, 1.01%)</title><rect x="1422.4" y="1123.0" width="15.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1425.4" y="1134.0"></text>
</g>
<g>
<title>LIRGenerator::do_Base(Base*) (5 samples, 0.14%)</title><rect x="1422.8" y="1107.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1425.8" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::raw_at_put_grow(int, Instruction* const&amp;, Instruction* const&amp;) (3 samples, 0.08%)</title><rect x="1422.8" y="1091.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1425.8" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="1423.7" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1426.7" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter(CodeEmitInfo*, LIR_OprDesc*, int, bool) (2 samples, 0.06%)</title><rect x="1424.2" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1427.2" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, LIR_OprDesc*, int, int, bool, bool) (1 samples, 0.03%)</title><rect x="1424.2" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1427.2" y="1086.0"></text>
</g>
<g>
<title>LIR_List::store(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*, LIR_PatchCode) (1 samples, 0.03%)</title><rect x="1424.2" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1427.2" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_Op*&gt;::append(LIR_Op* const&amp;) (1 samples, 0.03%)</title><rect x="1424.2" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1427.2" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1424.6" y="1075.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1427.6" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (11 samples, 0.31%)</title><rect x="1425.1" y="1107.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1428.1" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter(CodeEmitInfo*, LIR_OprDesc*, int, bool) (1 samples, 0.03%)</title><rect x="1425.1" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1428.1" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, LIR_OprDesc*, int, int, bool, bool) (1 samples, 0.03%)</title><rect x="1425.1" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1428.1" y="1086.0"></text>
</g>
<g>
<title>LIR_List::branch(LIR_Condition, BasicType, CodeStub*) (1 samples, 0.03%)</title><rect x="1425.1" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1428.1" y="1070.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1425.1" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1428.1" y="1054.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1425.1" y="1027.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1428.1" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (9 samples, 0.25%)</title><rect x="1425.5" y="1091.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1428.5" y="1102.0"></text>
</g>
<g>
<title>PhiResolver::move(LIR_OprDesc*, LIR_OprDesc*) (2 samples, 0.06%)</title><rect x="1425.9" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1428.9" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1425.9" y="1059.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1428.9" y="1070.0"></text>
</g>
<g>
<title>PhiResolver::create_node(LIR_OprDesc*, bool) (1 samples, 0.03%)</title><rect x="1426.4" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1429.4" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::at_grow(int, ResolveNode* const&amp;) (1 samples, 0.03%)</title><rect x="1426.4" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1429.4" y="1054.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (6 samples, 0.17%)</title><rect x="1426.8" y="1075.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1429.8" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::raw_at_put_grow(int, ResolveNode* const&amp;, ResolveNode* const&amp;) (6 samples, 0.17%)</title><rect x="1426.8" y="1059.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1429.8" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="1429.0" y="1043.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1432.0" y="1054.0"></text>
</g>
<g>
<title>LIR_List::jump(BlockBegin*) (1 samples, 0.03%)</title><rect x="1429.5" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1432.5" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_Op*&gt;::append(LIR_Op* const&amp;) (1 samples, 0.03%)</title><rect x="1429.5" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1432.5" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::do_If(If*) (4 samples, 0.11%)</title><rect x="1429.9" y="1107.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1432.9" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::profile_branch(If*, Instruction::Condition) (1 samples, 0.03%)</title><rect x="1429.9" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1432.9" y="1102.0"></text>
</g>
<g>
<title>LIR_OprFact::intptrConst(long) (1 samples, 0.03%)</title><rect x="1429.9" y="1075.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1432.9" y="1086.0"></text>
</g>
<g>
<title>LIR_List::branch(LIR_Condition, BasicType, BlockBegin*) (1 samples, 0.03%)</title><rect x="1430.4" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1433.4" y="1102.0"></text>
</g>
<g>
<title>LIR_List::move(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*) (2 samples, 0.06%)</title><rect x="1430.8" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1433.8" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1430.8" y="1075.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1433.8" y="1086.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1430.8" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1433.8" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_Op*&gt;::append(LIR_Op* const&amp;) (1 samples, 0.03%)</title><rect x="1431.2" y="1075.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1434.2" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_Op*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="1431.2" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1434.2" y="1070.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1431.2" y="1043.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1434.2" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.03%)</title><rect x="1431.7" y="1107.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1434.7" y="1118.0"></text>
</g>
<g>
<title>FrameMap::java_calling_convention(GrowableArray&lt;BasicType&gt; const*, bool) (1 samples, 0.03%)</title><rect x="1431.7" y="1091.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1434.7" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_OprDesc*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1431.7" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1434.7" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::do_LoadField(LoadField*) (3 samples, 0.08%)</title><rect x="1432.1" y="1107.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1435.1" y="1118.0"></text>
</g>
<g>
<title>BarrierSetC1::load_at(LIRAccess&amp;, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1432.1" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1435.1" y="1102.0"></text>
</g>
<g>
<title>G1BarrierSetC1::load_at_resolved(LIRAccess&amp;, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1432.6" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1435.6" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::access_load_at(unsigned long long, BasicType, LIRItem&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1433.0" y="1091.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1436.0" y="1102.0"></text>
</g>
<g>
<title>BarrierSetC1::load_at(LIRAccess&amp;, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1433.0" y="1075.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1436.0" y="1086.0"></text>
</g>
<g>
<title>BarrierSetC1::resolve_address(LIRAccess&amp;, bool) (1 samples, 0.03%)</title><rect x="1433.0" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1436.0" y="1070.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1433.0" y="1043.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1436.0" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileCall(ProfileCall*) (2 samples, 0.06%)</title><rect x="1433.5" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1436.5" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.03%)</title><rect x="1433.5" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1436.5" y="1102.0"></text>
</g>
<g>
<title>Constant::visit(InstructionVisitor*) (1 samples, 0.03%)</title><rect x="1433.5" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1436.5" y="1086.0"></text>
</g>
<g>
<title>LIRItem::result() (1 samples, 0.03%)</title><rect x="1433.9" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1436.9" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (4 samples, 0.11%)</title><rect x="1434.3" y="1107.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1437.3" y="1118.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="1434.3" y="1091.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1437.3" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (2 samples, 0.06%)</title><rect x="1434.8" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1437.8" y="1102.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1435.2" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1438.2" y="1086.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1435.2" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1438.2" y="1070.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1435.2" y="1043.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1438.2" y="1054.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1435.2" y="1027.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1438.2" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1435.2" y="1011.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1438.2" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1435.2" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1438.2" y="1006.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 0.03%)</title><rect x="1435.7" y="1091.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1438.7" y="1102.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1435.7" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1438.7" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::do_Return(Return*) (2 samples, 0.06%)</title><rect x="1436.1" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1439.1" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.03%)</title><rect x="1436.1" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1439.1" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::do_ShiftOp(ShiftOp*) (1 samples, 0.03%)</title><rect x="1436.1" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1439.1" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.03%)</title><rect x="1436.1" y="1059.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1439.1" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_ShiftOp(ShiftOp*) (1 samples, 0.03%)</title><rect x="1436.1" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1439.1" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::walk(Instruction*) (1 samples, 0.03%)</title><rect x="1436.1" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1439.1" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::do_Convert(Convert*) (1 samples, 0.03%)</title><rect x="1436.1" y="1011.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1439.1" y="1022.0"></text>
</g>
<g>
<title>LIRItem::result() (1 samples, 0.03%)</title><rect x="1436.6" y="1091.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1439.6" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.03%)</title><rect x="1437.0" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1440.0" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::access_store_at(unsigned long long, BasicType, LIRItem&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1437.0" y="1091.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1440.0" y="1102.0"></text>
</g>
<g>
<title>ModRefBarrierSetC1::store_at_resolved(LIRAccess&amp;, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1437.0" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1440.0" y="1086.0"></text>
</g>
<g>
<title>G1BarrierSetC1::pre_barrier(LIRAccess&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1437.0" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1440.0" y="1070.0"></text>
</g>
<g>
<title>LIR_List::load(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*, LIR_PatchCode) (1 samples, 0.03%)</title><rect x="1437.0" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1440.0" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreIndexed(StoreIndexed*) (1 samples, 0.03%)</title><rect x="1437.4" y="1107.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1440.4" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::array_store_check(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="1437.4" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1440.4" y="1102.0"></text>
</g>
<g>
<title>LIR_List::store_check(LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="1437.4" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1440.4" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::new_register(BasicType) (1 samples, 0.03%)</title><rect x="1437.9" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1440.9" y="1118.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::optimize(BlockList*) (4 samples, 0.11%)</title><rect x="1438.3" y="1139.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1441.3" y="1150.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::delete_empty_blocks(BlockList*) (3 samples, 0.08%)</title><rect x="1438.3" y="1123.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1441.3" y="1134.0"></text>
</g>
<g>
<title>BlockBegin::substitute_sux(BlockBegin*, BlockBegin*) (2 samples, 0.06%)</title><rect x="1438.3" y="1107.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1441.3" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::remove_predecessor(BlockBegin*) (1 samples, 0.03%)</title><rect x="1438.8" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1441.8" y="1102.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::can_delete_block(BlockBegin*) (1 samples, 0.03%)</title><rect x="1439.2" y="1107.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1442.2" y="1118.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::delete_jumps_to_return(BlockList*) (1 samples, 0.03%)</title><rect x="1439.7" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1442.7" y="1134.0"></text>
</g>
<g>
<title>LIRGenerator::LIRGenerator(Compilation*, ciMethod*) (1 samples, 0.03%)</title><rect x="1440.1" y="1139.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1443.1" y="1150.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1440.1" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1443.1" y="1134.0"></text>
</g>
<g>
<title>LinearScan::LinearScan(IR*, LIRGenerator*, FrameMap*) (1 samples, 0.03%)</title><rect x="1440.5" y="1139.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1443.5" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1440.5" y="1123.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1443.5" y="1134.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1440.5" y="1107.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1443.5" y="1118.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (110 samples, 3.08%)</title><rect x="1441.0" y="1139.0" width="48.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1444.0" y="1150.0">Line..</text>
</g>
<g>
<title>EdgeMoveOptimizer::optimize(BlockList*) (1 samples, 0.03%)</title><rect x="1441.0" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1444.0" y="1134.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (36 samples, 1.01%)</title><rect x="1441.4" y="1123.0" width="15.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1444.4" y="1134.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (34 samples, 0.95%)</title><rect x="1441.4" y="1107.0" width="15.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1444.4" y="1118.0"></text>
</g>
<g>
<title>IntervalWalker::next_interval() (2 samples, 0.06%)</title><rect x="1441.4" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1444.4" y="1102.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (4 samples, 0.11%)</title><rect x="1442.3" y="1091.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1445.3" y="1102.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (28 samples, 0.78%)</title><rect x="1444.1" y="1091.0" width="12.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1447.1" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag) (1 samples, 0.03%)</title><rect x="1444.1" y="1075.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1447.1" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (19 samples, 0.53%)</title><rect x="1444.5" y="1075.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1447.5" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (5 samples, 0.14%)</title><rect x="1445.4" y="1059.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1448.4" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_any(Interval*) (2 samples, 0.06%)</title><rect x="1447.6" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1450.6" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (7 samples, 0.20%)</title><rect x="1448.5" y="1059.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1451.5" y="1070.0"></text>
</g>
<g>
<title>Range::intersects_at(Range*) const (1 samples, 0.03%)</title><rect x="1451.1" y="1043.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1454.1" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (3 samples, 0.08%)</title><rect x="1451.6" y="1059.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1454.6" y="1070.0"></text>
</g>
<g>
<title>Interval::split(int) (2 samples, 0.06%)</title><rect x="1451.6" y="1043.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1454.6" y="1054.0"></text>
</g>
<g>
<title>Interval::new_split_child() (1 samples, 0.03%)</title><rect x="1452.0" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1455.0" y="1038.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.03%)</title><rect x="1452.0" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1455.0" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1452.0" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1455.0" y="1006.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1452.0" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1455.0" y="990.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1452.0" y="963.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1455.0" y="974.0"></text>
</g>
<g>
<title>LinearScanWalker::find_optimal_split_pos(Interval*, int, int, bool) (1 samples, 0.03%)</title><rect x="1452.5" y="1043.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1455.5" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (6 samples, 0.17%)</title><rect x="1452.9" y="1075.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1455.9" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (6 samples, 0.17%)</title><rect x="1452.9" y="1059.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1455.9" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (5 samples, 0.14%)</title><rect x="1453.4" y="1043.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1456.4" y="1054.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::append(Interval* const&amp;) (1 samples, 0.03%)</title><rect x="1453.8" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1456.8" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::grow(int) (1 samples, 0.03%)</title><rect x="1453.8" y="1011.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1456.8" y="1022.0"></text>
</g>
<g>
<title>Interval::split(int) (2 samples, 0.06%)</title><rect x="1454.2" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1457.2" y="1038.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.03%)</title><rect x="1455.1" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1458.1" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::combine_spilled_intervals(Interval*) (1 samples, 0.03%)</title><rect x="1455.6" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1458.6" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_any(Interval*) (1 samples, 0.03%)</title><rect x="1456.0" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1459.0" y="1086.0"></text>
</g>
<g>
<title>LinearScanWalker::LinearScanWalker(LinearScan*, Interval*, Interval*) (2 samples, 0.06%)</title><rect x="1456.5" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1459.5" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1456.5" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1459.5" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1456.9" y="1091.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1459.9" y="1102.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (20 samples, 0.56%)</title><rect x="1457.3" y="1123.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1460.3" y="1134.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (18 samples, 0.50%)</title><rect x="1457.3" y="1107.0" width="8.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1460.3" y="1118.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.03%)</title><rect x="1458.7" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1461.7" y="1102.0"></text>
</g>
<g>
<title>LinearScan::calc_operand_for_interval(Interval const*) (1 samples, 0.03%)</title><rect x="1459.1" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1462.1" y="1102.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (2 samples, 0.06%)</title><rect x="1459.5" y="1091.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1462.5" y="1102.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (2 samples, 0.06%)</title><rect x="1459.5" y="1075.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1462.5" y="1086.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (2 samples, 0.06%)</title><rect x="1459.5" y="1059.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1462.5" y="1070.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (6 samples, 0.17%)</title><rect x="1460.4" y="1091.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1463.4" y="1102.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1460.9" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1463.9" y="1086.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value_for_operand(LIR_OprDesc*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1461.3" y="1075.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1464.3" y="1086.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.03%)</title><rect x="1461.8" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1464.8" y="1086.0"></text>
</g>
<g>
<title>Instruction::as_Constant() (1 samples, 0.03%)</title><rect x="1461.8" y="1059.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1464.8" y="1070.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1462.2" y="1075.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1465.2" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1462.6" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1465.6" y="1086.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (5 samples, 0.14%)</title><rect x="1463.1" y="1091.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1466.1" y="1102.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (4 samples, 0.11%)</title><rect x="1463.5" y="1075.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1466.5" y="1086.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.08%)</title><rect x="1463.5" y="1059.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1466.5" y="1070.0"></text>
</g>
<g>
<title>IntervalWalker::next_interval() (1 samples, 0.03%)</title><rect x="1464.0" y="1043.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1467.0" y="1054.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.03%)</title><rect x="1464.4" y="1043.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1467.4" y="1054.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1464.9" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1467.9" y="1070.0"></text>
</g>
<g>
<title>LinearScan::init_compute_oop_maps() (1 samples, 0.03%)</title><rect x="1465.3" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1468.3" y="1118.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.03%)</title><rect x="1465.3" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1468.3" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1465.3" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1468.3" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1465.3" y="1059.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1468.3" y="1070.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1465.3" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1468.3" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1465.7" y="1107.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1468.7" y="1118.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (26 samples, 0.73%)</title><rect x="1466.2" y="1123.0" width="11.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1469.2" y="1134.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (2 samples, 0.06%)</title><rect x="1470.2" y="1107.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1473.2" y="1118.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.03%)</title><rect x="1470.6" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1473.6" y="1102.0"></text>
</g>
<g>
<title>LinearScan::add_temp(LIR_OprDesc*, int, IntervalUseKind) (2 samples, 0.06%)</title><rect x="1471.0" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1474.0" y="1118.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.03%)</title><rect x="1471.9" y="1107.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1474.9" y="1118.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.03%)</title><rect x="1471.9" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1474.9" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1471.9" y="1075.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1474.9" y="1086.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (5 samples, 0.14%)</title><rect x="1472.4" y="1107.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1475.4" y="1118.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (2 samples, 0.06%)</title><rect x="1473.7" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1476.7" y="1102.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (1 samples, 0.03%)</title><rect x="1473.7" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1476.7" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1473.7" y="1059.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1476.7" y="1070.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.03%)</title><rect x="1474.1" y="1075.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1477.1" y="1086.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.03%)</title><rect x="1474.1" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1477.1" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1474.1" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1477.1" y="1054.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (4 samples, 0.11%)</title><rect x="1474.6" y="1107.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1477.6" y="1118.0"></text>
</g>
<g>
<title>Interval::add_range(int, int) (2 samples, 0.06%)</title><rect x="1474.6" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1477.6" y="1102.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.03%)</title><rect x="1475.5" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1478.5" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1475.9" y="1091.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1478.9" y="1102.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.03%)</title><rect x="1476.4" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1479.4" y="1118.0"></text>
</g>
<g>
<title>LinearScan::handle_doubleword_moves(LIR_Op*) (1 samples, 0.03%)</title><rect x="1476.8" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1479.8" y="1118.0"></text>
</g>
<g>
<title>LinearScan::use_kind_of_input_operand(LIR_Op*, LIR_OprDesc*) (1 samples, 0.03%)</title><rect x="1477.2" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1480.2" y="1118.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (2 samples, 0.06%)</title><rect x="1477.7" y="1123.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1480.7" y="1134.0"></text>
</g>
<g>
<title>BitMap::is_same(BitMap const&amp;) const (1 samples, 0.03%)</title><rect x="1478.1" y="1107.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1481.1" y="1118.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (7 samples, 0.20%)</title><rect x="1478.6" y="1123.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1481.6" y="1134.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (4 samples, 0.11%)</title><rect x="1479.0" y="1107.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1482.0" y="1118.0"></text>
</g>
<g>
<title>LinearScan::set_live_gen_kill(Instruction*, LIR_Op*, BitMap&amp;, BitMap&amp;) (1 samples, 0.03%)</title><rect x="1480.8" y="1107.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1483.8" y="1118.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long) (1 samples, 0.03%)</title><rect x="1481.2" y="1107.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1484.2" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1481.2" y="1091.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1484.2" y="1102.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (2 samples, 0.06%)</title><rect x="1481.7" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1484.7" y="1134.0"></text>
</g>
<g>
<title>LinearScan::number_instructions() (1 samples, 0.03%)</title><rect x="1482.5" y="1123.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1485.5" y="1134.0"></text>
</g>
<g>
<title>LinearScan::propagate_spill_slots() (1 samples, 0.03%)</title><rect x="1483.0" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1486.0" y="1134.0"></text>
</g>
<g>
<title>FrameMap::finalize_frame(int) (1 samples, 0.03%)</title><rect x="1483.0" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1486.0" y="1118.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (8 samples, 0.22%)</title><rect x="1483.4" y="1123.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1486.4" y="1134.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (5 samples, 0.14%)</title><rect x="1484.3" y="1107.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1487.3" y="1118.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (2 samples, 0.06%)</title><rect x="1485.6" y="1091.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1488.6" y="1102.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (2 samples, 0.06%)</title><rect x="1485.6" y="1075.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1488.6" y="1086.0"></text>
</g>
<g>
<title>MoveResolver::resolve_and_append_moves() (1 samples, 0.03%)</title><rect x="1486.5" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1489.5" y="1118.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.03%)</title><rect x="1486.5" y="1091.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1489.5" y="1102.0"></text>
</g>
<g>
<title>LIR_OprFact::virtual_register(int, BasicType) (1 samples, 0.03%)</title><rect x="1486.5" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1489.5" y="1086.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.03%)</title><rect x="1487.0" y="1123.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1490.0" y="1134.0"></text>
</g>
<g>
<title>LinearScan::sort_intervals_after_allocation() (1 samples, 0.03%)</title><rect x="1487.4" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1490.4" y="1134.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.03%)</title><rect x="1487.4" y="1107.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1490.4" y="1118.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.03%)</title><rect x="1487.4" y="1091.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1490.4" y="1102.0"></text>
</g>
<g>
<title>_isort (1 samples, 0.03%)</title><rect x="1487.4" y="1075.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1490.4" y="1086.0"></text>
</g>
<g>
<title>LinearScan::sort_intervals_before_allocation() (4 samples, 0.11%)</title><rect x="1487.9" y="1123.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1490.9" y="1134.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.03%)</title><rect x="1489.6" y="1139.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1492.6" y="1150.0"></text>
</g>
<g>
<title>FrameMap::FrameMap(ciMethod*, int, int) (1 samples, 0.03%)</title><rect x="1490.1" y="1155.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1493.1" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.03%)</title><rect x="1490.1" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1493.1" y="1150.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1490.5" y="1155.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1493.5" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (13 samples, 0.36%)</title><rect x="1490.9" y="1155.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1493.9" y="1166.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (13 samples, 0.36%)</title><rect x="1490.9" y="1139.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1493.9" y="1150.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (11 samples, 0.31%)</title><rect x="1490.9" y="1123.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1493.9" y="1134.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (9 samples, 0.25%)</title><rect x="1490.9" y="1107.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1493.9" y="1118.0"></text>
</g>
<g>
<title>BytecodeStream::next() (1 samples, 0.03%)</title><rect x="1490.9" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1493.9" y="1102.0"></text>
</g>
<g>
<title>MethodData::compute_allocation_size_in_bytes(methodHandle const&amp;) (2 samples, 0.06%)</title><rect x="1491.4" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1494.4" y="1102.0"></text>
</g>
<g>
<title>MethodData::compute_data_size(BytecodeStream*) (2 samples, 0.06%)</title><rect x="1491.4" y="1075.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1494.4" y="1086.0"></text>
</g>
<g>
<title>MethodData::profile_arguments_for_invoke(methodHandle const&amp;, int) (2 samples, 0.06%)</title><rect x="1491.4" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1494.4" y="1070.0"></text>
</g>
<g>
<title>MethodData::profile_unsafe(methodHandle const&amp;, int) (2 samples, 0.06%)</title><rect x="1491.4" y="1043.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1494.4" y="1054.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at_noresolve(int) (2 samples, 0.06%)</title><rect x="1491.4" y="1027.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1494.4" y="1038.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.03%)</title><rect x="1491.8" y="1011.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1494.8" y="1022.0"></text>
</g>
<g>
<title>MethodData::initialize() (6 samples, 0.17%)</title><rect x="1492.3" y="1091.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1495.3" y="1102.0"></text>
</g>
<g>
<title>BytecodeStream::next() (1 samples, 0.03%)</title><rect x="1492.3" y="1075.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1495.3" y="1086.0"></text>
</g>
<g>
<title>MethodData::post_initialize(BytecodeStream*) (5 samples, 0.14%)</title><rect x="1492.7" y="1075.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1495.7" y="1086.0"></text>
</g>
<g>
<title>BranchData::post_initialize(BytecodeStream*, MethodData*) (4 samples, 0.11%)</title><rect x="1492.7" y="1059.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1495.7" y="1070.0"></text>
</g>
<g>
<title>MethodData::bci_to_dp(int) (3 samples, 0.08%)</title><rect x="1493.2" y="1043.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1496.2" y="1054.0"></text>
</g>
<g>
<title>CounterData::cell_count() const (1 samples, 0.03%)</title><rect x="1493.2" y="1027.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1496.2" y="1038.0"></text>
</g>
<g>
<title>DataLayout::data_in() (1 samples, 0.03%)</title><rect x="1493.6" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1496.6" y="1038.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1493.6" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1496.6" y="1022.0"></text>
</g>
<g>
<title>MethodData::next_data(ProfileData*) const (1 samples, 0.03%)</title><rect x="1494.0" y="1027.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1497.0" y="1038.0"></text>
</g>
<g>
<title>BytecodeStream::next() (1 samples, 0.03%)</title><rect x="1494.5" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1497.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (2 samples, 0.06%)</title><rect x="1494.9" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1497.9" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1494.9" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1497.9" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1494.9" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1497.9" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1494.9" y="1059.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1497.9" y="1070.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="1495.4" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1498.4" y="1102.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.03%)</title><rect x="1495.8" y="1123.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1498.8" y="1134.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.03%)</title><rect x="1495.8" y="1107.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1498.8" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1495.8" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1498.8" y="1102.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1496.3" y="1123.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1499.3" y="1134.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::insert_before(int, ciMetadata* const&amp;) (1 samples, 0.03%)</title><rect x="1496.3" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1499.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::initialize() (4 samples, 0.11%)</title><rect x="1496.7" y="1171.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1499.7" y="1182.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1496.7" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1499.7" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (3 samples, 0.08%)</title><rect x="1497.1" y="1155.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1500.1" y="1166.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::GrowableArray(int, bool, MemoryType) (2 samples, 0.06%)</title><rect x="1497.1" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1500.1" y="1150.0"></text>
</g>
<g>
<title>JVMFlagEx::is_default(JVMFlags) (1 samples, 0.03%)</title><rect x="1498.0" y="1139.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1501.0" y="1150.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (29 samples, 0.81%)</title><rect x="1498.5" y="1171.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1501.5" y="1182.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (29 samples, 0.81%)</title><rect x="1498.5" y="1155.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1501.5" y="1166.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.03%)</title><rect x="1498.5" y="1139.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1501.5" y="1150.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.03%)</title><rect x="1498.5" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1501.5" y="1134.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.03%)</title><rect x="1498.5" y="1107.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1501.5" y="1118.0"></text>
</g>
<g>
<title>sort_dep_arg_1(ciBaseObject**, ciBaseObject**) (1 samples, 0.03%)</title><rect x="1498.5" y="1091.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1501.5" y="1102.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.03%)</title><rect x="1498.9" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1501.9" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1499.3" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1502.3" y="1150.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1499.3" y="1123.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1502.3" y="1134.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1499.3" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1502.3" y="1118.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1499.3" y="1091.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1502.3" y="1102.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="1499.8" y="1139.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1502.8" y="1150.0"></text>
</g>
<g>
<title>ciEnv::validate_compile_task_dependencies(ciMethod*) (1 samples, 0.03%)</title><rect x="1500.7" y="1139.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1503.7" y="1150.0"></text>
</g>
<g>
<title>Dependencies::validate_dependencies(CompileTask*, bool, char**) (1 samples, 0.03%)</title><rect x="1500.7" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1503.7" y="1134.0"></text>
</g>
<g>
<title>Dependencies::DepStream::check_dependency() (1 samples, 0.03%)</title><rect x="1500.7" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1503.7" y="1118.0"></text>
</g>
<g>
<title>Dependencies::DepStream::check_klass_dependency(KlassDepChange*) (1 samples, 0.03%)</title><rect x="1500.7" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1503.7" y="1102.0"></text>
</g>
<g>
<title>Dependencies::DepStream::argument(int) (1 samples, 0.03%)</title><rect x="1500.7" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1503.7" y="1086.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (17 samples, 0.48%)</title><rect x="1501.1" y="1139.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1504.1" y="1150.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.03%)</title><rect x="1501.1" y="1123.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1504.1" y="1134.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (16 samples, 0.45%)</title><rect x="1501.6" y="1123.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1504.6" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (6 samples, 0.17%)</title><rect x="1502.0" y="1107.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1505.0" y="1118.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (5 samples, 0.14%)</title><rect x="1502.0" y="1091.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1505.0" y="1102.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.03%)</title><rect x="1502.0" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1505.0" y="1086.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (1 samples, 0.03%)</title><rect x="1502.0" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1505.0" y="1070.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="1502.4" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1505.4" y="1086.0"></text>
</g>
<g>
<title>Relocation::old_addr_for(unsigned char*, CodeBuffer const*, CodeBuffer*) (1 samples, 0.03%)</title><rect x="1502.9" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1505.9" y="1086.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="1503.3" y="1075.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1506.3" y="1086.0"></text>
</g>
<g>
<title>Relocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.03%)</title><rect x="1504.2" y="1091.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1507.2" y="1102.0"></text>
</g>
<g>
<title>CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool) (2 samples, 0.06%)</title><rect x="1504.7" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1507.7" y="1118.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&amp;, CodeBuffer*, int, int, OopMapSet*, bool) (2 samples, 0.06%)</title><rect x="1504.7" y="1091.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1507.7" y="1102.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::build_from(OopMapSet const*) (2 samples, 0.06%)</title><rect x="1504.7" y="1075.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1507.7" y="1086.0"></text>
</g>
<g>
<title>ImmutableOopMapBuilder::build() (2 samples, 0.06%)</title><rect x="1504.7" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1507.7" y="1070.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1504.7" y="1043.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1507.7" y="1054.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1504.7" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1507.7" y="1038.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1504.7" y="1011.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1507.7" y="1022.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1504.7" y="995.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1507.7" y="1006.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1504.7" y="979.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1507.7" y="990.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1504.7" y="963.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1507.7" y="974.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1504.7" y="947.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1507.7" y="958.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1504.7" y="931.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1507.7" y="942.0"></text>
</g>
<g>
<title>ImmutableOopMapBuilder::heap_size() (1 samples, 0.03%)</title><rect x="1505.1" y="1043.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1508.1" y="1054.0"></text>
</g>
<g>
<title>OopMap::equals(OopMap const*) const (1 samples, 0.03%)</title><rect x="1505.1" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1508.1" y="1038.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1505.1" y="1011.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1508.1" y="1022.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="1505.5" y="1107.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1508.5" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::copy_to(nmethod*) (1 samples, 0.03%)</title><rect x="1506.0" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1509.0" y="1118.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1506.0" y="1091.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1509.0" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.03%)</title><rect x="1506.4" y="1107.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1509.4" y="1118.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1506.4" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1509.4" y="1102.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.03%)</title><rect x="1506.4" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1509.4" y="1086.0"></text>
</g>
<g>
<title>G1CodeRootSetTable::add(nmethod*) (1 samples, 0.03%)</title><rect x="1506.4" y="1059.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1509.4" y="1070.0"></text>
</g>
<g>
<title>OopRecorder::copy_values_to(nmethod*) (4 samples, 0.11%)</title><rect x="1506.9" y="1107.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1509.9" y="1118.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::copy_values_to(nmethod*) (1 samples, 0.03%)</title><rect x="1506.9" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1509.9" y="1102.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_initialize() (1 samples, 0.03%)</title><rect x="1506.9" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1509.9" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(Arena*, int, int, int const&amp;) (1 samples, 0.03%)</title><rect x="1506.9" y="1059.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1509.9" y="1070.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (3 samples, 0.08%)</title><rect x="1507.3" y="1091.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1510.3" y="1102.0"></text>
</g>
<g>
<title>RelocIterator::next() (2 samples, 0.06%)</title><rect x="1507.7" y="1075.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1510.7" y="1086.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (5 samples, 0.14%)</title><rect x="1508.6" y="1139.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1511.6" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.11%)</title><rect x="1508.6" y="1123.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1511.6" y="1134.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1510.4" y="1123.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1513.4" y="1134.0"></text>
</g>
<g>
<title>nmethodLocker::lock_nmethod(CompiledMethod*, bool) (1 samples, 0.03%)</title><rect x="1510.8" y="1139.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1513.8" y="1150.0"></text>
</g>
<g>
<title>Compilation::is_profiling() (1 samples, 0.03%)</title><rect x="1511.3" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1514.3" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (1 samples, 0.03%)</title><rect x="1511.7" y="1171.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1514.7" y="1182.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (3 samples, 0.08%)</title><rect x="1512.2" y="1171.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1515.2" y="1182.0"></text>
</g>
<g>
<title>Dependencies::note_dep_seen(int, ciBaseObject*) (3 samples, 0.08%)</title><rect x="1512.2" y="1155.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1515.2" y="1166.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (3 samples, 0.08%)</title><rect x="1512.2" y="1139.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1515.2" y="1150.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::grow(int) (2 samples, 0.06%)</title><rect x="1512.6" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1515.6" y="1134.0"></text>
</g>
<g>
<title>PhaseTraceTime::PhaseTraceTime(TimerName) (1 samples, 0.03%)</title><rect x="1513.5" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1516.5" y="1198.0"></text>
</g>
<g>
<title>ImplicitExceptionTable::set_size(unsigned int) (1 samples, 0.03%)</title><rect x="1513.9" y="1203.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1516.9" y="1214.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="1514.4" y="1203.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1517.4" y="1214.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.06%)</title><rect x="1514.4" y="1187.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1517.4" y="1198.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (2 samples, 0.06%)</title><rect x="1514.4" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1517.4" y="1182.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="1514.4" y="1155.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1517.4" y="1166.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1515.3" y="1219.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1518.3" y="1230.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.03%)</title><rect x="1515.3" y="1203.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1518.3" y="1214.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.03%)</title><rect x="1515.3" y="1187.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1518.3" y="1198.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.03%)</title><rect x="1515.3" y="1171.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1518.3" y="1182.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="1515.3" y="1155.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1518.3" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="1515.7" y="1219.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1518.7" y="1230.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1516.2" y="1219.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1519.2" y="1230.0"></text>
</g>
<g>
<title>ciEnv::cache_jvmti_state() (1 samples, 0.03%)</title><rect x="1516.6" y="1219.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1519.6" y="1230.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="1516.6" y="1203.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1519.6" y="1214.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (5 samples, 0.14%)</title><rect x="1517.0" y="1219.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1520.0" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (3 samples, 0.08%)</title><rect x="1517.0" y="1203.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1520.0" y="1214.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::appendAll(GrowableArray&lt;ciMetadata*&gt; const*) (3 samples, 0.08%)</title><rect x="1517.0" y="1187.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1520.0" y="1198.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::raw_at_put_grow(int, ciMetadata* const&amp;, ciMetadata* const&amp;) (1 samples, 0.03%)</title><rect x="1517.9" y="1171.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1520.9" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (2 samples, 0.06%)</title><rect x="1518.4" y="1203.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1521.4" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.03%)</title><rect x="1518.4" y="1187.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1521.4" y="1198.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.03%)</title><rect x="1518.4" y="1171.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1521.4" y="1182.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="1518.4" y="1155.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1521.4" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.03%)</title><rect x="1518.8" y="1187.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1521.8" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1518.8" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1521.8" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1518.8" y="1155.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1521.8" y="1166.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.03%)</title><rect x="1518.8" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1521.8" y="1150.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.03%)</title><rect x="1518.8" y="1123.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1521.8" y="1134.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.03%)</title><rect x="1518.8" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1521.8" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (6 samples, 0.17%)</title><rect x="1519.2" y="1219.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1522.2" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (6 samples, 0.17%)</title><rect x="1519.2" y="1203.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1522.2" y="1214.0"></text>
</g>
<g>
<title>Metadata::is_klass() const volatile (1 samples, 0.03%)</title><rect x="1519.2" y="1187.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1522.2" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (5 samples, 0.14%)</title><rect x="1519.7" y="1187.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1522.7" y="1198.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (4 samples, 0.11%)</title><rect x="1519.7" y="1171.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1522.7" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="1519.7" y="1155.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1522.7" y="1166.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1519.7" y="1139.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1522.7" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1519.7" y="1123.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1522.7" y="1134.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1519.7" y="1107.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1522.7" y="1118.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (3 samples, 0.08%)</title><rect x="1520.1" y="1155.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1523.1" y="1166.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.03%)</title><rect x="1520.1" y="1139.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1523.1" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (2 samples, 0.06%)</title><rect x="1520.6" y="1139.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1523.6" y="1150.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.03%)</title><rect x="1521.0" y="1123.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1524.0" y="1134.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1521.5" y="1171.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1524.5" y="1182.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1521.5" y="1155.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1524.5" y="1166.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.03%)</title><rect x="1521.9" y="1219.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1524.9" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.03%)</title><rect x="1521.9" y="1203.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1524.9" y="1214.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="1521.9" y="1187.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1524.9" y="1198.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (5 samples, 0.14%)</title><rect x="1522.3" y="1235.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1525.3" y="1246.0"></text>
</g>
<g>
<title>CompileBroker::make_thread(_jobject*, CompileQueue*, AbstractCompiler*, Thread*) (1 samples, 0.03%)</title><rect x="1522.3" y="1219.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1525.3" y="1230.0"></text>
</g>
<g>
<title>CompilerThread::CompilerThread(CompileQueue*, CompilerCounters*) (1 samples, 0.03%)</title><rect x="1522.3" y="1203.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1525.3" y="1214.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (1 samples, 0.03%)</title><rect x="1522.3" y="1187.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1525.3" y="1198.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1522.3" y="1171.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1525.3" y="1182.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1522.3" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1525.3" y="1166.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1522.3" y="1139.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1525.3" y="1150.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1522.3" y="1123.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1525.3" y="1134.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1522.3" y="1107.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1525.3" y="1118.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1522.3" y="1091.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1525.3" y="1102.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1522.3" y="1075.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1525.3" y="1086.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1522.3" y="1059.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1525.3" y="1070.0"></text>
</g>
<g>
<title>os::Bsd::available_memory() (4 samples, 0.11%)</title><rect x="1522.8" y="1219.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1525.8" y="1230.0"></text>
</g>
<g>
<title>host_statistics64 (4 samples, 0.11%)</title><rect x="1522.8" y="1203.0" width="1.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1525.8" y="1214.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (4 samples, 0.11%)</title><rect x="1522.8" y="1187.0" width="1.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1525.8" y="1198.0"></text>
</g>
<g>
<title>CompileQueue::get() (53 samples, 1.48%)</title><rect x="1524.6" y="1235.0" width="23.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1527.6" y="1246.0">C..</text>
</g>
<g>
<title>Monitor::lock(Thread*) (4 samples, 0.11%)</title><rect x="1525.0" y="1219.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1528.0" y="1230.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.11%)</title><rect x="1525.0" y="1203.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1528.0" y="1214.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1525.0" y="1187.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1528.0" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.08%)</title><rect x="1525.4" y="1187.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1528.4" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="1525.4" y="1171.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1528.4" y="1182.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (43 samples, 1.20%)</title><rect x="1526.8" y="1219.0" width="19.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1529.8" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (41 samples, 1.15%)</title><rect x="1526.8" y="1203.0" width="18.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1529.8" y="1214.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="1527.2" y="1187.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1530.2" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.14%)</title><rect x="1527.6" y="1187.0" width="2.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1530.6" y="1198.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="1529.9" y="1187.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1532.9" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (33 samples, 0.92%)</title><rect x="1530.3" y="1187.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1533.3" y="1198.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.06%)</title><rect x="1530.3" y="1171.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1533.3" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (30 samples, 0.84%)</title><rect x="1531.2" y="1171.0" width="13.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1534.2" y="1182.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1544.5" y="1171.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1547.5" y="1182.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1544.9" y="1203.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1547.9" y="1214.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="1545.3" y="1203.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1548.3" y="1214.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.03%)</title><rect x="1545.8" y="1219.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1548.8" y="1230.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::update_rate(long, Method*) (1 samples, 0.03%)</title><rect x="1545.8" y="1203.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1548.8" y="1214.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.03%)</title><rect x="1545.8" y="1187.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1548.8" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1546.2" y="1219.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1549.2" y="1230.0"></text>
</g>
<g>
<title>can_remove(CompilerThread*, bool) (2 samples, 0.06%)</title><rect x="1546.7" y="1219.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1549.7" y="1230.0"></text>
</g>
<g>
<title>TimeHelper::counter_to_millis(long) (2 samples, 0.06%)</title><rect x="1546.7" y="1203.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1549.7" y="1214.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1547.5" y="1219.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1550.5" y="1230.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.03%)</title><rect x="1548.0" y="1235.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1551.0" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (11 samples, 0.31%)</title><rect x="1548.4" y="1251.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1551.4" y="1262.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.14%)</title><rect x="1548.4" y="1235.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1551.4" y="1246.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.14%)</title><rect x="1548.4" y="1219.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1551.4" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.14%)</title><rect x="1548.4" y="1203.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1551.4" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.14%)</title><rect x="1548.4" y="1187.0" width="2.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1551.4" y="1198.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (6 samples, 0.17%)</title><rect x="1550.6" y="1235.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1553.6" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (6 samples, 0.17%)</title><rect x="1550.6" y="1219.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1553.6" y="1230.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (5 samples, 0.14%)</title><rect x="1550.6" y="1203.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1553.6" y="1214.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (2 samples, 0.06%)</title><rect x="1550.6" y="1187.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1553.6" y="1198.0"></text>
</g>
<g>
<title>DirectNativeCallWrapper::instruction_address() const (1 samples, 0.03%)</title><rect x="1550.6" y="1171.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1553.6" y="1182.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="1551.1" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1554.1" y="1182.0"></text>
</g>
<g>
<title>CompiledMethod::clear_ic_stubs() (1 samples, 0.03%)</title><rect x="1551.5" y="1187.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1554.5" y="1198.0"></text>
</g>
<g>
<title>RelocIterator::next() (1 samples, 0.03%)</title><rect x="1551.5" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1554.5" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_flush(nmethod*) (1 samples, 0.03%)</title><rect x="1552.0" y="1187.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1555.0" y="1198.0"></text>
</g>
<g>
<title>nmethod::is_unloaded() const (1 samples, 0.03%)</title><rect x="1552.4" y="1187.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1555.4" y="1198.0"></text>
</g>
<g>
<title>nmethod::get_state() const (1 samples, 0.03%)</title><rect x="1552.9" y="1203.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1555.9" y="1214.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (48 samples, 1.34%)</title><rect x="1553.3" y="1251.0" width="21.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1556.3" y="1262.0">S..</text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (32 samples, 0.90%)</title><rect x="1553.3" y="1235.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1556.3" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (32 samples, 0.90%)</title><rect x="1553.3" y="1219.0" width="14.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1556.3" y="1230.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.03%)</title><rect x="1554.2" y="1203.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1557.2" y="1214.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (8 samples, 0.22%)</title><rect x="1554.6" y="1203.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1557.6" y="1214.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (8 samples, 0.22%)</title><rect x="1554.6" y="1187.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1557.6" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.03%)</title><rect x="1555.1" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1558.1" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (6 samples, 0.17%)</title><rect x="1555.5" y="1171.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1558.5" y="1182.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.08%)</title><rect x="1555.5" y="1155.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1558.5" y="1166.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1556.4" y="1139.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1559.4" y="1150.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1556.4" y="1123.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1559.4" y="1134.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.03%)</title><rect x="1556.8" y="1155.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1559.8" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.06%)</title><rect x="1557.3" y="1155.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1560.3" y="1166.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.03%)</title><rect x="1557.7" y="1139.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1560.7" y="1150.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (19 samples, 0.53%)</title><rect x="1558.2" y="1203.0" width="8.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1561.2" y="1214.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (10 samples, 0.28%)</title><rect x="1558.2" y="1187.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1561.2" y="1198.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.06%)</title><rect x="1558.2" y="1171.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1561.2" y="1182.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1558.2" y="1155.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1561.2" y="1166.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1558.6" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1561.6" y="1166.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1558.6" y="1139.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1561.6" y="1150.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.03%)</title><rect x="1558.6" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1561.6" y="1134.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="1558.6" y="1107.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1561.6" y="1118.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="1558.6" y="1091.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1561.6" y="1102.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (3 samples, 0.08%)</title><rect x="1559.0" y="1171.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1562.0" y="1182.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (3 samples, 0.08%)</title><rect x="1559.0" y="1155.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1562.0" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1560.4" y="1171.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1563.4" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.03%)</title><rect x="1560.4" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1563.4" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (3 samples, 0.08%)</title><rect x="1560.8" y="1171.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1563.8" y="1182.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (2 samples, 0.06%)</title><rect x="1561.3" y="1155.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1564.3" y="1166.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1562.1" y="1171.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1565.1" y="1182.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.03%)</title><rect x="1562.6" y="1187.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1565.6" y="1198.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="1562.6" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1565.6" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (7 samples, 0.20%)</title><rect x="1563.0" y="1187.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1566.0" y="1198.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1563.5" y="1171.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1566.5" y="1182.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1563.5" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1566.5" y="1166.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.03%)</title><rect x="1563.9" y="1171.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1566.9" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (4 samples, 0.11%)</title><rect x="1564.4" y="1171.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1567.4" y="1182.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (2 samples, 0.06%)</title><rect x="1565.2" y="1155.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1568.2" y="1166.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1566.1" y="1187.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1569.1" y="1198.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1566.6" y="1203.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1569.6" y="1214.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1567.0" y="1203.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1570.0" y="1214.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="1567.0" y="1187.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1570.0" y="1198.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="1567.0" y="1171.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1570.0" y="1182.0"></text>
</g>
<g>
<title>LowMemoryDetector::has_pending_requests() (1 samples, 0.03%)</title><rect x="1567.4" y="1235.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1570.4" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (15 samples, 0.42%)</title><rect x="1567.9" y="1235.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1570.9" y="1246.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (15 samples, 0.42%)</title><rect x="1567.9" y="1219.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1570.9" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (15 samples, 0.42%)</title><rect x="1567.9" y="1203.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1570.9" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.42%)</title><rect x="1567.9" y="1187.0" width="6.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1570.9" y="1198.0"></text>
</g>
<g>
<title>VMThread::run() (20 samples, 0.56%)</title><rect x="1574.5" y="1283.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1577.5" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (20 samples, 0.56%)</title><rect x="1574.5" y="1267.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1577.5" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.11%)</title><rect x="1574.5" y="1251.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1577.5" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.11%)</title><rect x="1574.5" y="1235.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1577.5" y="1246.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.11%)</title><rect x="1574.5" y="1219.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1577.5" y="1230.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.11%)</title><rect x="1574.5" y="1203.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1577.5" y="1214.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (6 samples, 0.17%)</title><rect x="1576.3" y="1251.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1579.3" y="1262.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1576.3" y="1235.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1579.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1576.3" y="1219.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1579.3" y="1230.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1576.3" y="1203.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1579.3" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1576.3" y="1187.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1579.3" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (5 samples, 0.14%)</title><rect x="1576.7" y="1235.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1579.7" y="1246.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (5 samples, 0.14%)</title><rect x="1576.7" y="1219.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1579.7" y="1230.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (5 samples, 0.14%)</title><rect x="1576.7" y="1203.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1579.7" y="1214.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (5 samples, 0.14%)</title><rect x="1576.7" y="1187.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1579.7" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.03%)</title><rect x="1578.9" y="1251.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1581.9" y="1262.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1578.9" y="1235.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1581.9" y="1246.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (8 samples, 0.22%)</title><rect x="1579.4" y="1251.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1582.4" y="1262.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.22%)</title><rect x="1579.4" y="1235.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1582.4" y="1246.0"></text>
</g>
<g>
<title>VM_BulkRevokeBias::doit() (1 samples, 0.03%)</title><rect x="1579.4" y="1219.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1582.4" y="1230.0"></text>
</g>
<g>
<title>bulk_revoke_or_rebias_at_safepoint(oopDesc*, bool, bool, JavaThread*) (1 samples, 0.03%)</title><rect x="1579.4" y="1203.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1582.4" y="1214.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (1 samples, 0.03%)</title><rect x="1579.4" y="1187.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1582.4" y="1198.0"></text>
</g>
<g>
<title>vframe::java_sender() const (1 samples, 0.03%)</title><rect x="1579.4" y="1171.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1582.4" y="1182.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.03%)</title><rect x="1579.4" y="1155.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1582.4" y="1166.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1579.4" y="1139.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1582.4" y="1150.0"></text>
</g>
<g>
<title>VM_CollectForMetadataAllocation::doit() (2 samples, 0.06%)</title><rect x="1579.8" y="1219.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1582.8" y="1230.0"></text>
</g>
<g>
<title>VM_CollectForMetadataAllocation::initiate_concurrent_GC() (2 samples, 0.06%)</title><rect x="1579.8" y="1203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1582.8" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.06%)</title><rect x="1579.8" y="1187.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1582.8" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1579.8" y="1171.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1582.8" y="1182.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.03%)</title><rect x="1579.8" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1582.8" y="1166.0"></text>
</g>
<g>
<title>G1ConcurrentMark::reset() (1 samples, 0.03%)</title><rect x="1580.3" y="1171.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1583.3" y="1182.0"></text>
</g>
<g>
<title>VM_Deoptimize::doit() (1 samples, 0.03%)</title><rect x="1580.7" y="1219.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1583.7" y="1230.0"></text>
</g>
<g>
<title>CodeCache::make_marked_nmethods_not_entrant() (1 samples, 0.03%)</title><rect x="1580.7" y="1203.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1583.7" y="1214.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_alive() (1 samples, 0.03%)</title><rect x="1580.7" y="1187.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1583.7" y="1198.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next() (1 samples, 0.03%)</title><rect x="1580.7" y="1171.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1583.7" y="1182.0"></text>
</g>
<g>
<title>CodeBlobIterator&lt;CompiledMethod, CompiledMethodFilter&gt;::next_blob() (1 samples, 0.03%)</title><rect x="1580.7" y="1155.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1583.7" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::next(void*) const (1 samples, 0.03%)</title><rect x="1580.7" y="1139.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1583.7" y="1150.0"></text>
</g>
<g>
<title>VM_RevokeBias::doit() (4 samples, 0.11%)</title><rect x="1581.2" y="1219.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1584.2" y="1230.0"></text>
</g>
<g>
<title>revoke_bias(oopDesc*, bool, bool, JavaThread*, JavaThread**) (4 samples, 0.11%)</title><rect x="1581.2" y="1203.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1584.2" y="1214.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (4 samples, 0.11%)</title><rect x="1581.2" y="1187.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1584.2" y="1198.0"></text>
</g>
<g>
<title>compiledVFrame::monitors() const (1 samples, 0.03%)</title><rect x="1581.2" y="1171.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1584.2" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::decode_monitor_values(int) (1 samples, 0.03%)</title><rect x="1581.2" y="1155.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1584.2" y="1166.0"></text>
</g>
<g>
<title>GrowableArray&lt;MonitorValue*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.03%)</title><rect x="1581.2" y="1139.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1584.2" y="1150.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1581.2" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1584.2" y="1134.0"></text>
</g>
<g>
<title>vframe::java_sender() const (3 samples, 0.08%)</title><rect x="1581.6" y="1171.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1584.6" y="1182.0"></text>
</g>
<g>
<title>vframe::sender() const (3 samples, 0.08%)</title><rect x="1581.6" y="1155.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1584.6" y="1166.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.08%)</title><rect x="1581.6" y="1139.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1584.6" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1582.9" y="1251.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1585.9" y="1262.0"></text>
</g>
<g>
<title>WatcherThread::run() (15 samples, 0.42%)</title><rect x="1583.4" y="1283.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1586.4" y="1294.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.06%)</title><rect x="1583.4" y="1267.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1586.4" y="1278.0"></text>
</g>
<g>
<title>ChunkPool::free_all_but(unsigned long) (2 samples, 0.06%)</title><rect x="1583.4" y="1251.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1586.4" y="1262.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (13 samples, 0.36%)</title><rect x="1584.3" y="1267.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1587.3" y="1278.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (13 samples, 0.36%)</title><rect x="1584.3" y="1251.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1587.3" y="1262.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (13 samples, 0.36%)</title><rect x="1584.3" y="1235.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1587.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1584.3" y="1219.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1587.3" y="1230.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="1584.3" y="1203.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1587.3" y="1214.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.31%)</title><rect x="1584.7" y="1219.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1587.7" y="1230.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.03%)</title><rect x="1584.7" y="1203.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1587.7" y="1214.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.22%)</title><rect x="1585.1" y="1203.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1588.1" y="1214.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1588.7" y="1203.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1591.7" y="1214.0"></text>
</g>
<g>
<title>si_module_with_name.modules (1 samples, 0.03%)</title><rect x="1589.1" y="1203.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1592.1" y="1214.0"></text>
</g>
<g>
<title>pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="1589.6" y="1219.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1592.6" y="1230.0"></text>
</g>
</g>
</svg>
